/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using akeyless.Client;
using akeyless.Model;

namespace akeyless.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV2ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateRoleAuthMethodAssocOutput</returns>
        CreateRoleAuthMethodAssocOutput AssocRoleAuthMethod (AssocRoleAuthMethod body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateRoleAuthMethodAssocOutput</returns>
        ApiResponse<CreateRoleAuthMethodAssocOutput> AssocRoleAuthMethodWithHttpInfo (AssocRoleAuthMethod body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetItemAssocOutput</returns>
        CreateTargetItemAssocOutput AssocTargetItem (AssocTargetItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetItemAssocOutput</returns>
        ApiResponse<CreateTargetItemAssocOutput> AssocTargetItemWithHttpInfo (AssocTargetItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthOutput</returns>
        AuthOutput Auth (Auth body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthOutput</returns>
        ApiResponse<AuthOutput> AuthWithHttpInfo (Auth body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ConfigureOutput</returns>
        ConfigureOutput Configure (Configure body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ConfigureOutput</returns>
        ApiResponse<ConfigureOutput> ConfigureWithHttpInfo (Configure body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodOutput</returns>
        CreateAuthMethodOutput CreateAuthMethod (CreateAuthMethod body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodOutput</returns>
        ApiResponse<CreateAuthMethodOutput> CreateAuthMethodWithHttpInfo (CreateAuthMethod body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodAWSIAMOutput</returns>
        CreateAuthMethodAWSIAMOutput CreateAuthMethodAWSIAM (CreateAuthMethodAWSIAM body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodAWSIAMOutput</returns>
        ApiResponse<CreateAuthMethodAWSIAMOutput> CreateAuthMethodAWSIAMWithHttpInfo (CreateAuthMethodAWSIAM body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodAzureADOutput</returns>
        CreateAuthMethodAzureADOutput CreateAuthMethodAzureAD (CreateAuthMethodAzureAD body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodAzureADOutput</returns>
        ApiResponse<CreateAuthMethodAzureADOutput> CreateAuthMethodAzureADWithHttpInfo (CreateAuthMethodAzureAD body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodGCPOutput</returns>
        CreateAuthMethodGCPOutput CreateAuthMethodGCP (CreateAuthMethodGCP body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodGCPOutput</returns>
        ApiResponse<CreateAuthMethodGCPOutput> CreateAuthMethodGCPWithHttpInfo (CreateAuthMethodGCP body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodHuaweiOutput</returns>
        CreateAuthMethodHuaweiOutput CreateAuthMethodHuawei (CreateAuthMethodHuawei body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodHuaweiOutput</returns>
        ApiResponse<CreateAuthMethodHuaweiOutput> CreateAuthMethodHuaweiWithHttpInfo (CreateAuthMethodHuawei body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodOAuth2Output</returns>
        CreateAuthMethodOAuth2Output CreateAuthMethodOAuth2 (CreateAuthMethodOAuth2 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodOAuth2Output</returns>
        ApiResponse<CreateAuthMethodOAuth2Output> CreateAuthMethodOAuth2WithHttpInfo (CreateAuthMethodOAuth2 body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodSAMLOutput</returns>
        CreateAuthMethodSAMLOutput CreateAuthMethodSAML (CreateAuthMethodSAML body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodSAMLOutput</returns>
        ApiResponse<CreateAuthMethodSAMLOutput> CreateAuthMethodSAMLWithHttpInfo (CreateAuthMethodSAML body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodUniversalIdentityOutput</returns>
        CreateAuthMethodUniversalIdentityOutput CreateAuthMethodUniversalIdentity (CreateAuthMethodUniversalIdentity body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodUniversalIdentityOutput</returns>
        ApiResponse<CreateAuthMethodUniversalIdentityOutput> CreateAuthMethodUniversalIdentityWithHttpInfo (CreateAuthMethodUniversalIdentity body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetOutput</returns>
        CreateTargetOutput CreateAwsTarget (CreateAwsTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetOutput</returns>
        ApiResponse<CreateTargetOutput> CreateAwsTargetWithHttpInfo (CreateAwsTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetOutput</returns>
        CreateTargetOutput CreateDBTarget (CreateDBTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetOutput</returns>
        ApiResponse<CreateTargetOutput> CreateDBTargetWithHttpInfo (CreateDBTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object CreateDynamicSecret (CreateDynamicSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateDynamicSecretWithHttpInfo (CreateDynamicSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateKeyOutput</returns>
        CreateKeyOutput CreateKey (CreateKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateKeyOutput</returns>
        ApiResponse<CreateKeyOutput> CreateKeyWithHttpInfo (CreateKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateManagedKeyOutput</returns>
        CreateManagedKeyOutput CreateManagedKey (CreateManagedKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateManagedKeyOutput</returns>
        ApiResponse<CreateManagedKeyOutput> CreateManagedKeyWithHttpInfo (CreateManagedKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreatePKICertIssuerOutput</returns>
        CreatePKICertIssuerOutput CreatePKICertIssuer (CreatePKICertIssuer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreatePKICertIssuerOutput</returns>
        ApiResponse<CreatePKICertIssuerOutput> CreatePKICertIssuerWithHttpInfo (CreatePKICertIssuer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetOutput</returns>
        CreateTargetOutput CreateRabbitMQTarget (CreateRabbitMQTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetOutput</returns>
        ApiResponse<CreateTargetOutput> CreateRabbitMQTargetWithHttpInfo (CreateRabbitMQTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetOutput</returns>
        CreateTargetOutput CreateRdpTarget (CreateRdpTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetOutput</returns>
        ApiResponse<CreateTargetOutput> CreateRdpTargetWithHttpInfo (CreateRdpTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object CreateRole (CreateRole body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateRoleWithHttpInfo (CreateRole body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateRotatedSecretOutput</returns>
        CreateRotatedSecretOutput CreateRotatedSecret (CreateRotatedSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateRotatedSecretOutput</returns>
        ApiResponse<CreateRotatedSecretOutput> CreateRotatedSecretWithHttpInfo (CreateRotatedSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateSSHCertIssuerOutput</returns>
        CreateSSHCertIssuerOutput CreateSSHCertIssuer (CreateSSHCertIssuer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateSSHCertIssuerOutput</returns>
        ApiResponse<CreateSSHCertIssuerOutput> CreateSSHCertIssuerWithHttpInfo (CreateSSHCertIssuer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetOutput</returns>
        CreateTargetOutput CreateSSHTarget (CreateSSHTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetOutput</returns>
        ApiResponse<CreateTargetOutput> CreateSSHTargetWithHttpInfo (CreateSSHTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateSecretOutput</returns>
        CreateSecretOutput CreateSecret (CreateSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateSecretOutput</returns>
        ApiResponse<CreateSecretOutput> CreateSecretWithHttpInfo (CreateSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetOutput</returns>
        CreateTargetOutput CreateTarget (Object body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetOutput</returns>
        ApiResponse<CreateTargetOutput> CreateTargetWithHttpInfo (Object body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetOutput</returns>
        CreateTargetOutput CreateWebTarget (CreateWebTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetOutput</returns>
        ApiResponse<CreateTargetOutput> CreateWebTargetWithHttpInfo (CreateWebTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DecryptOutput</returns>
        DecryptOutput Decrypt (Decrypt body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DecryptOutput</returns>
        ApiResponse<DecryptOutput> DecryptWithHttpInfo (Decrypt body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DecryptPKCS1Output</returns>
        DecryptPKCS1Output DecryptPKCS1 (DecryptPKCS1 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DecryptPKCS1Output</returns>
        ApiResponse<DecryptPKCS1Output> DecryptPKCS1WithHttpInfo (DecryptPKCS1 body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteAuthMethodOutput</returns>
        DeleteAuthMethodOutput DeleteAuthMethod (DeleteAuthMethod body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteAuthMethodOutput</returns>
        ApiResponse<DeleteAuthMethodOutput> DeleteAuthMethodWithHttpInfo (DeleteAuthMethod body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteAuthMethodsOutput</returns>
        DeleteAuthMethodsOutput DeleteAuthMethods (DeleteAuthMethods body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteAuthMethodsOutput</returns>
        ApiResponse<DeleteAuthMethodsOutput> DeleteAuthMethodsWithHttpInfo (DeleteAuthMethods body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteItemOutput</returns>
        DeleteItemOutput DeleteItem (DeleteItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteItemOutput</returns>
        ApiResponse<DeleteItemOutput> DeleteItemWithHttpInfo (DeleteItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteItemsOutput</returns>
        DeleteItemsOutput DeleteItems (DeleteItems body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteItemsOutput</returns>
        ApiResponse<DeleteItemsOutput> DeleteItemsWithHttpInfo (DeleteItems body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object DeleteRole (DeleteRole body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteRoleWithHttpInfo (DeleteRole body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object DeleteRoleAssociation (DeleteRoleAssociation body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteRoleAssociationWithHttpInfo (DeleteRoleAssociation body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteRoleRuleOutput</returns>
        DeleteRoleRuleOutput DeleteRoleRule (DeleteRoleRule body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteRoleRuleOutput</returns>
        ApiResponse<DeleteRoleRuleOutput> DeleteRoleRuleWithHttpInfo (DeleteRoleRule body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object DeleteRoles (DeleteRoles body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteRolesWithHttpInfo (DeleteRoles body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object DeleteTarget (DeleteTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteTargetWithHttpInfo (DeleteTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object DeleteTargetAssociation (DeleteTargetAssociation body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteTargetAssociationWithHttpInfo (DeleteTargetAssociation body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object DeleteTargets (DeleteTargets body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteTargetsWithHttpInfo (DeleteTargets body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Item</returns>
        Item DescribeItem (DescribeItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Item</returns>
        ApiResponse<Item> DescribeItemWithHttpInfo (DescribeItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DescribePermissionsOutput</returns>
        DescribePermissionsOutput DescribePermissions (DescribePermissions body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DescribePermissionsOutput</returns>
        ApiResponse<DescribePermissionsOutput> DescribePermissionsWithHttpInfo (DescribePermissions body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EncryptOutput</returns>
        EncryptOutput Encrypt (Encrypt body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EncryptOutput</returns>
        ApiResponse<EncryptOutput> EncryptWithHttpInfo (Encrypt body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EncryptPKCS1Output</returns>
        EncryptPKCS1Output EncryptPKCS1 (EncryptPKCS1 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EncryptPKCS1Output</returns>
        ApiResponse<EncryptPKCS1Output> EncryptPKCS1WithHttpInfo (EncryptPKCS1 body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayAddSubAdminsOutput</returns>
        GatewayAddSubAdminsOutput GatewayAddSubAdmins (GatewayAddSubAdmins body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayAddSubAdminsOutput</returns>
        ApiResponse<GatewayAddSubAdminsOutput> GatewayAddSubAdminsWithHttpInfo (GatewayAddSubAdmins body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerArtifactoryOutput</returns>
        GatewayCreateProducerArtifactoryOutput GatewayCreateProducerArtifactory (GatewayCreateProducerArtifactory body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerArtifactoryOutput</returns>
        ApiResponse<GatewayCreateProducerArtifactoryOutput> GatewayCreateProducerArtifactoryWithHttpInfo (GatewayCreateProducerArtifactory body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerAwsOutput</returns>
        GatewayCreateProducerAwsOutput GatewayCreateProducerAws (GatewayCreateProducerAws body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerAwsOutput</returns>
        ApiResponse<GatewayCreateProducerAwsOutput> GatewayCreateProducerAwsWithHttpInfo (GatewayCreateProducerAws body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerAzureOutput</returns>
        GatewayCreateProducerAzureOutput GatewayCreateProducerAzure (GatewayCreateProducerAzure body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerAzureOutput</returns>
        ApiResponse<GatewayCreateProducerAzureOutput> GatewayCreateProducerAzureWithHttpInfo (GatewayCreateProducerAzure body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerCertificateAutomationOutput</returns>
        GatewayCreateProducerCertificateAutomationOutput GatewayCreateProducerCertificateAutomation (GatewayCreateProducerCertificateAutomation body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerCertificateAutomationOutput</returns>
        ApiResponse<GatewayCreateProducerCertificateAutomationOutput> GatewayCreateProducerCertificateAutomationWithHttpInfo (GatewayCreateProducerCertificateAutomation body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GatewayCreateProducerCustomOutput</returns>
        GatewayCreateProducerCustomOutput GatewayCreateProducerCustom (GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GatewayCreateProducerCustomOutput</returns>
        ApiResponse<GatewayCreateProducerCustomOutput> GatewayCreateProducerCustomWithHttpInfo (GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerEksOutput</returns>
        GatewayCreateProducerEksOutput GatewayCreateProducerEks (GatewayCreateProducerEks body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerEksOutput</returns>
        ApiResponse<GatewayCreateProducerEksOutput> GatewayCreateProducerEksWithHttpInfo (GatewayCreateProducerEks body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerGcpOutput</returns>
        GatewayCreateProducerGcpOutput GatewayCreateProducerGcp (GatewayCreateProducerGcp body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerGcpOutput</returns>
        ApiResponse<GatewayCreateProducerGcpOutput> GatewayCreateProducerGcpWithHttpInfo (GatewayCreateProducerGcp body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerGkeOutput</returns>
        GatewayCreateProducerGkeOutput GatewayCreateProducerGke (GatewayCreateProducerGke body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerGkeOutput</returns>
        ApiResponse<GatewayCreateProducerGkeOutput> GatewayCreateProducerGkeWithHttpInfo (GatewayCreateProducerGke body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerMSSQLOutput</returns>
        GatewayCreateProducerMSSQLOutput GatewayCreateProducerMSSQL (GatewayCreateProducerMSSQL body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerMSSQLOutput</returns>
        ApiResponse<GatewayCreateProducerMSSQLOutput> GatewayCreateProducerMSSQLWithHttpInfo (GatewayCreateProducerMSSQL body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerMongoOutput</returns>
        GatewayCreateProducerMongoOutput GatewayCreateProducerMongo (GatewayCreateProducerMongo body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerMongoOutput</returns>
        ApiResponse<GatewayCreateProducerMongoOutput> GatewayCreateProducerMongoWithHttpInfo (GatewayCreateProducerMongo body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerMySQLOutput</returns>
        GatewayCreateProducerMySQLOutput GatewayCreateProducerMySQL (GatewayCreateProducerMySQL body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerMySQLOutput</returns>
        ApiResponse<GatewayCreateProducerMySQLOutput> GatewayCreateProducerMySQLWithHttpInfo (GatewayCreateProducerMySQL body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerPostgreSQLOutput</returns>
        GatewayCreateProducerPostgreSQLOutput GatewayCreateProducerPostgreSQL (GatewayCreateProducerPostgreSQL body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerPostgreSQLOutput</returns>
        ApiResponse<GatewayCreateProducerPostgreSQLOutput> GatewayCreateProducerPostgreSQLWithHttpInfo (GatewayCreateProducerPostgreSQL body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerRabbitMQOutput</returns>
        GatewayCreateProducerRabbitMQOutput GatewayCreateProducerRabbitMQ (GatewayCreateProducerRabbitMQ body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerRabbitMQOutput</returns>
        ApiResponse<GatewayCreateProducerRabbitMQOutput> GatewayCreateProducerRabbitMQWithHttpInfo (GatewayCreateProducerRabbitMQ body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerRdpOutput</returns>
        GatewayCreateProducerRdpOutput GatewayCreateProducerRdp (GatewayCreateProducerRdp body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerRdpOutput</returns>
        ApiResponse<GatewayCreateProducerRdpOutput> GatewayCreateProducerRdpWithHttpInfo (GatewayCreateProducerRdp body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayDeleteProducerOutput</returns>
        GatewayDeleteProducerOutput GatewayDeleteProducer (GatewayDeleteProducer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayDeleteProducerOutput</returns>
        ApiResponse<GatewayDeleteProducerOutput> GatewayDeleteProducerWithHttpInfo (GatewayDeleteProducer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayDeleteSubAdminsOutput</returns>
        GatewayDeleteSubAdminsOutput GatewayDeleteSubAdmins (GatewayDeleteSubAdmins body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayDeleteSubAdminsOutput</returns>
        ApiResponse<GatewayDeleteSubAdminsOutput> GatewayDeleteSubAdminsWithHttpInfo (GatewayDeleteSubAdmins body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AkeylessGatewayConfig</returns>
        AkeylessGatewayConfig GatewayGetConfig (GatewayGetConfig body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AkeylessGatewayConfig</returns>
        ApiResponse<AkeylessGatewayConfig> GatewayGetConfigWithHttpInfo (GatewayGetConfig body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DSProducerDetails</returns>
        DSProducerDetails GatewayGetProducer (GatewayGetProducer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DSProducerDetails</returns>
        ApiResponse<DSProducerDetails> GatewayGetProducerWithHttpInfo (GatewayGetProducer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;TmpUserData&gt;</returns>
        List<TmpUserData> GatewayGetTmpUsers (GatewayGetTmpUsers body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;TmpUserData&gt;</returns>
        ApiResponse<List<TmpUserData>> GatewayGetTmpUsersWithHttpInfo (GatewayGetTmpUsers body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetProducersListReplyObj</returns>
        GetProducersListReplyObj GatewayListProducers (GatewayListProducers body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetProducersListReplyObj</returns>
        ApiResponse<GetProducersListReplyObj> GatewayListProducersWithHttpInfo (GatewayListProducers body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetSubAdminsListReplyObj</returns>
        GetSubAdminsListReplyObj GatewayListSubAdmins (GatewayListSubAdmins body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetSubAdminsListReplyObj</returns>
        ApiResponse<GetSubAdminsListReplyObj> GatewayListSubAdminsWithHttpInfo (GatewayListSubAdmins body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void GatewayRevokeTmpUsers (GatewayRevokeTmpUsers body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GatewayRevokeTmpUsersWithHttpInfo (GatewayRevokeTmpUsers body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayStartProducerOutput</returns>
        GatewayStartProducerOutput GatewayStartProducer (GatewayStartProducer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayStartProducerOutput</returns>
        ApiResponse<GatewayStartProducerOutput> GatewayStartProducerWithHttpInfo (GatewayStartProducer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayStopProducerOutput</returns>
        GatewayStopProducerOutput GatewayStopProducer (GatewayStopProducer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayStopProducerOutput</returns>
        ApiResponse<GatewayStopProducerOutput> GatewayStopProducerWithHttpInfo (GatewayStopProducer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GatewayUpdateItem ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GatewayUpdateItemWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void GatewayUpdateTmpUsers (GatewayUpdateTmpUsers body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GatewayUpdateTmpUsersWithHttpInfo (GatewayUpdateTmpUsers body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetAccountLogo ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetAccountLogoWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthMethod</returns>
        AuthMethod GetAuthMethod (GetAuthMethod body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthMethod</returns>
        ApiResponse<AuthMethod> GetAuthMethodWithHttpInfo (GetAuthMethod body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetDynamicSecretValue (GetDynamicSecretValue body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetDynamicSecretValueWithHttpInfo (GetDynamicSecretValue body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetKubeExecCredsOutput</returns>
        GetKubeExecCredsOutput GetKubeExecCreds (GetKubeExecCreds body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetKubeExecCredsOutput</returns>
        ApiResponse<GetKubeExecCredsOutput> GetKubeExecCredsWithHttpInfo (GetKubeExecCreds body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetPKICertificateOutput</returns>
        GetPKICertificateOutput GetPKICertificate ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetPKICertificateOutput</returns>
        ApiResponse<GetPKICertificateOutput> GetPKICertificateWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetRSAPublicOutput</returns>
        GetRSAPublicOutput GetRSAPublic (GetRSAPublic body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetRSAPublicOutput</returns>
        ApiResponse<GetRSAPublicOutput> GetRSAPublicWithHttpInfo (GetRSAPublic body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Role</returns>
        Role GetRole (GetRole body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> GetRoleWithHttpInfo (GetRole body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetRotatedSecretValue (GetRotatedSecretValue body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetRotatedSecretValueWithHttpInfo (GetRotatedSecretValue body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetSSHCertificateOutput</returns>
        GetSSHCertificateOutput GetSSHCertificate (GetSSHCertificate body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetSSHCertificateOutput</returns>
        ApiResponse<GetSSHCertificateOutput> GetSSHCertificateWithHttpInfo (GetSSHCertificate body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetSecretValue (GetSecretValue body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetSecretValueWithHttpInfo (GetSecretValue body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Target</returns>
        Target GetTarget (GetTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Target</returns>
        ApiResponse<Target> GetTargetWithHttpInfo (GetTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetTargetDetailsOutput</returns>
        GetTargetDetailsOutput GetTargetDetails (GetTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetTargetDetailsOutput</returns>
        ApiResponse<GetTargetDetailsOutput> GetTargetDetailsWithHttpInfo (GetTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListAuthMethodsOutput</returns>
        ListAuthMethodsOutput ListAuthMethods (ListAuthMethods body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListAuthMethodsOutput</returns>
        ApiResponse<ListAuthMethodsOutput> ListAuthMethodsWithHttpInfo (ListAuthMethods body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListItemsInPathOutput</returns>
        ListItemsInPathOutput ListItems (ListItems body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListItemsInPathOutput</returns>
        ApiResponse<ListItemsInPathOutput> ListItemsWithHttpInfo (ListItems body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListRolesOutput</returns>
        ListRolesOutput ListRoles (ListRoles body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListRolesOutput</returns>
        ApiResponse<ListRolesOutput> ListRolesWithHttpInfo (ListRoles body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListTargetsOutput</returns>
        ListTargetsOutput ListTargets (ListTargets body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListTargetsOutput</returns>
        ApiResponse<ListTargetsOutput> ListTargetsWithHttpInfo (ListTargets body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object MoveObjects (MoveObjects body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MoveObjectsWithHttpInfo (MoveObjects body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>SystemAccessCredentialsReplyObj</returns>
        SystemAccessCredentialsReplyObj RawCreds (RawCreds body = default(RawCreds));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SystemAccessCredentialsReplyObj</returns>
        ApiResponse<SystemAccessCredentialsReplyObj> RawCredsWithHttpInfo (RawCreds body = default(RawCreds));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RefreshKeyOutput</returns>
        RefreshKeyOutput RefreshKey (RefreshKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RefreshKeyOutput</returns>
        ApiResponse<RefreshKeyOutput> RefreshKeyWithHttpInfo (RefreshKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ReverseRBACOutput</returns>
        ReverseRBACOutput ReverseRBAC (ReverseRBAC body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ReverseRBACOutput</returns>
        ApiResponse<ReverseRBACOutput> ReverseRBACWithHttpInfo (ReverseRBAC body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RollbackSecretOutput</returns>
        RollbackSecretOutput RollbackSecret (RollbackSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RollbackSecretOutput</returns>
        ApiResponse<RollbackSecretOutput> RollbackSecretWithHttpInfo (RollbackSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RotateKeyOutput</returns>
        RotateKeyOutput RotateKey (UpdateRotationSettings body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RotateKeyOutput</returns>
        ApiResponse<RotateKeyOutput> RotateKeyWithHttpInfo (UpdateRotationSettings body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object SetItemState (SetItemState body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetItemStateWithHttpInfo (SetItemState body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object SetRoleRule (SetRoleRule body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetRoleRuleWithHttpInfo (SetRoleRule body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SignPKCS1Output</returns>
        SignPKCS1Output SignPKCS1 (SignPKCS1 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SignPKCS1Output</returns>
        ApiResponse<SignPKCS1Output> SignPKCS1WithHttpInfo (SignPKCS1 body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StaticCredsAuthOutput</returns>
        StaticCredsAuthOutput StaticCredsAuth (StaticCredsAuth body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StaticCredsAuthOutput</returns>
        ApiResponse<StaticCredsAuthOutput> StaticCredsAuthWithHttpInfo (StaticCredsAuth body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UidCreateChildTokenOutput</returns>
        UidCreateChildTokenOutput UidCreateChildToken (UidCreateChildToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UidCreateChildTokenOutput</returns>
        ApiResponse<UidCreateChildTokenOutput> UidCreateChildTokenWithHttpInfo (UidCreateChildToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UidGenerateTokenOutput</returns>
        UidGenerateTokenOutput UidGenerateToken (UidGenerateToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UidGenerateTokenOutput</returns>
        ApiResponse<UidGenerateTokenOutput> UidGenerateTokenWithHttpInfo (UidGenerateToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UniversalIdentityDetails</returns>
        UniversalIdentityDetails UidListChildren (UidListChildren body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UniversalIdentityDetails</returns>
        ApiResponse<UniversalIdentityDetails> UidListChildrenWithHttpInfo (UidListChildren body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UidRevokeToken (UidRevokeToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UidRevokeTokenWithHttpInfo (UidRevokeToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UidRotateTokenOutput</returns>
        UidRotateTokenOutput UidRotateToken (UidRotateToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UidRotateTokenOutput</returns>
        ApiResponse<UidRotateTokenOutput> UidRotateTokenWithHttpInfo (UidRotateToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateAWSTargetDetails (UpdateAWSTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateAWSTargetDetailsWithHttpInfo (UpdateAWSTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateDBTargetDetails (UpdateDBTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateDBTargetDetailsWithHttpInfo (UpdateDBTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateItemOutput</returns>
        UpdateItemOutput UpdateItem (UpdateItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateItemOutput</returns>
        ApiResponse<UpdateItemOutput> UpdateItemWithHttpInfo (UpdateItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateRDPTargetDetails (UpdateRDPTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateRDPTargetDetailsWithHttpInfo (UpdateRDPTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateRabbitMQTargetDetails (UpdateRabbitMQTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateRabbitMQTargetDetailsWithHttpInfo (UpdateRabbitMQTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateRoleOutput</returns>
        UpdateRoleOutput UpdateRole (UpdateRole body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateRoleOutput</returns>
        ApiResponse<UpdateRoleOutput> UpdateRoleWithHttpInfo (UpdateRole body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateRotatedSecretOutput</returns>
        UpdateRotatedSecretOutput UpdateRotatedSecret (UpdateRotatedSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateRotatedSecretOutput</returns>
        ApiResponse<UpdateRotatedSecretOutput> UpdateRotatedSecretWithHttpInfo (UpdateRotatedSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RotateKeyOutput</returns>
        RotateKeyOutput UpdateRotationSettings ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RotateKeyOutput</returns>
        ApiResponse<RotateKeyOutput> UpdateRotationSettingsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateSSHTargetDetails (UpdateSSHTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateSSHTargetDetailsWithHttpInfo (UpdateSSHTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateSecretValOutput</returns>
        UpdateSecretValOutput UpdateSecretVal (UpdateSecretVal body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateSecretValOutput</returns>
        ApiResponse<UpdateSecretValOutput> UpdateSecretValWithHttpInfo (UpdateSecretVal body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateTarget (UpdateTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateTargetWithHttpInfo (UpdateTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateTargetDetails (Object body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateTargetDetailsWithHttpInfo (Object body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateWebTargetDetails (UpdateWebTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateWebTargetDetailsWithHttpInfo (UpdateWebTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UploadRSA (UploadRSA body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UploadRSAWithHttpInfo (UploadRSA body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object VerifyPKCS1 (VerifyPKCS1 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> VerifyPKCS1WithHttpInfo (VerifyPKCS1 body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV2ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateRoleAuthMethodAssocOutput</returns>
        System.Threading.Tasks.Task<CreateRoleAuthMethodAssocOutput> AssocRoleAuthMethodAsync (AssocRoleAuthMethod body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateRoleAuthMethodAssocOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateRoleAuthMethodAssocOutput>> AssocRoleAuthMethodAsyncWithHttpInfo (AssocRoleAuthMethod body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetItemAssocOutput</returns>
        System.Threading.Tasks.Task<CreateTargetItemAssocOutput> AssocTargetItemAsync (AssocTargetItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetItemAssocOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTargetItemAssocOutput>> AssocTargetItemAsyncWithHttpInfo (AssocTargetItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AuthOutput</returns>
        System.Threading.Tasks.Task<AuthOutput> AuthAsync (Auth body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AuthOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthOutput>> AuthAsyncWithHttpInfo (Auth body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ConfigureOutput</returns>
        System.Threading.Tasks.Task<ConfigureOutput> ConfigureAsync (Configure body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ConfigureOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigureOutput>> ConfigureAsyncWithHttpInfo (Configure body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodOutput> CreateAuthMethodAsync (CreateAuthMethod body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodOutput>> CreateAuthMethodAsyncWithHttpInfo (CreateAuthMethod body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodAWSIAMOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodAWSIAMOutput> CreateAuthMethodAWSIAMAsync (CreateAuthMethodAWSIAM body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodAWSIAMOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodAWSIAMOutput>> CreateAuthMethodAWSIAMAsyncWithHttpInfo (CreateAuthMethodAWSIAM body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodAzureADOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodAzureADOutput> CreateAuthMethodAzureADAsync (CreateAuthMethodAzureAD body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodAzureADOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodAzureADOutput>> CreateAuthMethodAzureADAsyncWithHttpInfo (CreateAuthMethodAzureAD body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodGCPOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodGCPOutput> CreateAuthMethodGCPAsync (CreateAuthMethodGCP body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodGCPOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodGCPOutput>> CreateAuthMethodGCPAsyncWithHttpInfo (CreateAuthMethodGCP body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodHuaweiOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodHuaweiOutput> CreateAuthMethodHuaweiAsync (CreateAuthMethodHuawei body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodHuaweiOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodHuaweiOutput>> CreateAuthMethodHuaweiAsyncWithHttpInfo (CreateAuthMethodHuawei body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodOAuth2Output</returns>
        System.Threading.Tasks.Task<CreateAuthMethodOAuth2Output> CreateAuthMethodOAuth2Async (CreateAuthMethodOAuth2 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodOAuth2Output)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodOAuth2Output>> CreateAuthMethodOAuth2AsyncWithHttpInfo (CreateAuthMethodOAuth2 body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodSAMLOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodSAMLOutput> CreateAuthMethodSAMLAsync (CreateAuthMethodSAML body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodSAMLOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodSAMLOutput>> CreateAuthMethodSAMLAsyncWithHttpInfo (CreateAuthMethodSAML body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodUniversalIdentityOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodUniversalIdentityOutput> CreateAuthMethodUniversalIdentityAsync (CreateAuthMethodUniversalIdentity body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodUniversalIdentityOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodUniversalIdentityOutput>> CreateAuthMethodUniversalIdentityAsyncWithHttpInfo (CreateAuthMethodUniversalIdentity body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetOutput</returns>
        System.Threading.Tasks.Task<CreateTargetOutput> CreateAwsTargetAsync (CreateAwsTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTargetOutput>> CreateAwsTargetAsyncWithHttpInfo (CreateAwsTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetOutput</returns>
        System.Threading.Tasks.Task<CreateTargetOutput> CreateDBTargetAsync (CreateDBTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTargetOutput>> CreateDBTargetAsyncWithHttpInfo (CreateDBTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateDynamicSecretAsync (CreateDynamicSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateDynamicSecretAsyncWithHttpInfo (CreateDynamicSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateKeyOutput</returns>
        System.Threading.Tasks.Task<CreateKeyOutput> CreateKeyAsync (CreateKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateKeyOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateKeyOutput>> CreateKeyAsyncWithHttpInfo (CreateKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateManagedKeyOutput</returns>
        System.Threading.Tasks.Task<CreateManagedKeyOutput> CreateManagedKeyAsync (CreateManagedKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateManagedKeyOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateManagedKeyOutput>> CreateManagedKeyAsyncWithHttpInfo (CreateManagedKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreatePKICertIssuerOutput</returns>
        System.Threading.Tasks.Task<CreatePKICertIssuerOutput> CreatePKICertIssuerAsync (CreatePKICertIssuer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreatePKICertIssuerOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePKICertIssuerOutput>> CreatePKICertIssuerAsyncWithHttpInfo (CreatePKICertIssuer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetOutput</returns>
        System.Threading.Tasks.Task<CreateTargetOutput> CreateRabbitMQTargetAsync (CreateRabbitMQTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTargetOutput>> CreateRabbitMQTargetAsyncWithHttpInfo (CreateRabbitMQTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetOutput</returns>
        System.Threading.Tasks.Task<CreateTargetOutput> CreateRdpTargetAsync (CreateRdpTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTargetOutput>> CreateRdpTargetAsyncWithHttpInfo (CreateRdpTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateRoleAsync (CreateRole body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRoleAsyncWithHttpInfo (CreateRole body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateRotatedSecretOutput</returns>
        System.Threading.Tasks.Task<CreateRotatedSecretOutput> CreateRotatedSecretAsync (CreateRotatedSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateRotatedSecretOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateRotatedSecretOutput>> CreateRotatedSecretAsyncWithHttpInfo (CreateRotatedSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateSSHCertIssuerOutput</returns>
        System.Threading.Tasks.Task<CreateSSHCertIssuerOutput> CreateSSHCertIssuerAsync (CreateSSHCertIssuer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateSSHCertIssuerOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSSHCertIssuerOutput>> CreateSSHCertIssuerAsyncWithHttpInfo (CreateSSHCertIssuer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetOutput</returns>
        System.Threading.Tasks.Task<CreateTargetOutput> CreateSSHTargetAsync (CreateSSHTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTargetOutput>> CreateSSHTargetAsyncWithHttpInfo (CreateSSHTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateSecretOutput</returns>
        System.Threading.Tasks.Task<CreateSecretOutput> CreateSecretAsync (CreateSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateSecretOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSecretOutput>> CreateSecretAsyncWithHttpInfo (CreateSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetOutput</returns>
        System.Threading.Tasks.Task<CreateTargetOutput> CreateTargetAsync (Object body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTargetOutput>> CreateTargetAsyncWithHttpInfo (Object body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetOutput</returns>
        System.Threading.Tasks.Task<CreateTargetOutput> CreateWebTargetAsync (CreateWebTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTargetOutput>> CreateWebTargetAsyncWithHttpInfo (CreateWebTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DecryptOutput</returns>
        System.Threading.Tasks.Task<DecryptOutput> DecryptAsync (Decrypt body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DecryptOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecryptOutput>> DecryptAsyncWithHttpInfo (Decrypt body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DecryptPKCS1Output</returns>
        System.Threading.Tasks.Task<DecryptPKCS1Output> DecryptPKCS1Async (DecryptPKCS1 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DecryptPKCS1Output)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecryptPKCS1Output>> DecryptPKCS1AsyncWithHttpInfo (DecryptPKCS1 body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DeleteAuthMethodOutput</returns>
        System.Threading.Tasks.Task<DeleteAuthMethodOutput> DeleteAuthMethodAsync (DeleteAuthMethod body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DeleteAuthMethodOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAuthMethodOutput>> DeleteAuthMethodAsyncWithHttpInfo (DeleteAuthMethod body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DeleteAuthMethodsOutput</returns>
        System.Threading.Tasks.Task<DeleteAuthMethodsOutput> DeleteAuthMethodsAsync (DeleteAuthMethods body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DeleteAuthMethodsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAuthMethodsOutput>> DeleteAuthMethodsAsyncWithHttpInfo (DeleteAuthMethods body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DeleteItemOutput</returns>
        System.Threading.Tasks.Task<DeleteItemOutput> DeleteItemAsync (DeleteItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DeleteItemOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteItemOutput>> DeleteItemAsyncWithHttpInfo (DeleteItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DeleteItemsOutput</returns>
        System.Threading.Tasks.Task<DeleteItemsOutput> DeleteItemsAsync (DeleteItems body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DeleteItemsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteItemsOutput>> DeleteItemsAsyncWithHttpInfo (DeleteItems body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteRoleAsync (DeleteRole body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleAsyncWithHttpInfo (DeleteRole body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteRoleAssociationAsync (DeleteRoleAssociation body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleAssociationAsyncWithHttpInfo (DeleteRoleAssociation body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DeleteRoleRuleOutput</returns>
        System.Threading.Tasks.Task<DeleteRoleRuleOutput> DeleteRoleRuleAsync (DeleteRoleRule body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DeleteRoleRuleOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteRoleRuleOutput>> DeleteRoleRuleAsyncWithHttpInfo (DeleteRoleRule body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteRolesAsync (DeleteRoles body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRolesAsyncWithHttpInfo (DeleteRoles body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteTargetAsync (DeleteTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTargetAsyncWithHttpInfo (DeleteTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteTargetAssociationAsync (DeleteTargetAssociation body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTargetAssociationAsyncWithHttpInfo (DeleteTargetAssociation body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteTargetsAsync (DeleteTargets body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTargetsAsyncWithHttpInfo (DeleteTargets body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Item</returns>
        System.Threading.Tasks.Task<Item> DescribeItemAsync (DescribeItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<Item>> DescribeItemAsyncWithHttpInfo (DescribeItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DescribePermissionsOutput</returns>
        System.Threading.Tasks.Task<DescribePermissionsOutput> DescribePermissionsAsync (DescribePermissions body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DescribePermissionsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DescribePermissionsOutput>> DescribePermissionsAsyncWithHttpInfo (DescribePermissions body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of EncryptOutput</returns>
        System.Threading.Tasks.Task<EncryptOutput> EncryptAsync (Encrypt body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (EncryptOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<EncryptOutput>> EncryptAsyncWithHttpInfo (Encrypt body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of EncryptPKCS1Output</returns>
        System.Threading.Tasks.Task<EncryptPKCS1Output> EncryptPKCS1Async (EncryptPKCS1 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (EncryptPKCS1Output)</returns>
        System.Threading.Tasks.Task<ApiResponse<EncryptPKCS1Output>> EncryptPKCS1AsyncWithHttpInfo (EncryptPKCS1 body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayAddSubAdminsOutput</returns>
        System.Threading.Tasks.Task<GatewayAddSubAdminsOutput> GatewayAddSubAdminsAsync (GatewayAddSubAdmins body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayAddSubAdminsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayAddSubAdminsOutput>> GatewayAddSubAdminsAsyncWithHttpInfo (GatewayAddSubAdmins body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerArtifactoryOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerArtifactoryOutput> GatewayCreateProducerArtifactoryAsync (GatewayCreateProducerArtifactory body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerArtifactoryOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerArtifactoryOutput>> GatewayCreateProducerArtifactoryAsyncWithHttpInfo (GatewayCreateProducerArtifactory body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerAwsOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerAwsOutput> GatewayCreateProducerAwsAsync (GatewayCreateProducerAws body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerAwsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerAwsOutput>> GatewayCreateProducerAwsAsyncWithHttpInfo (GatewayCreateProducerAws body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerAzureOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerAzureOutput> GatewayCreateProducerAzureAsync (GatewayCreateProducerAzure body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerAzureOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerAzureOutput>> GatewayCreateProducerAzureAsyncWithHttpInfo (GatewayCreateProducerAzure body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerCertificateAutomationOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerCertificateAutomationOutput> GatewayCreateProducerCertificateAutomationAsync (GatewayCreateProducerCertificateAutomation body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerCertificateAutomationOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerCertificateAutomationOutput>> GatewayCreateProducerCertificateAutomationAsyncWithHttpInfo (GatewayCreateProducerCertificateAutomation body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GatewayCreateProducerCustomOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerCustomOutput> GatewayCreateProducerCustomAsync (GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerCustomOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerCustomOutput>> GatewayCreateProducerCustomAsyncWithHttpInfo (GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerEksOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerEksOutput> GatewayCreateProducerEksAsync (GatewayCreateProducerEks body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerEksOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerEksOutput>> GatewayCreateProducerEksAsyncWithHttpInfo (GatewayCreateProducerEks body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerGcpOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerGcpOutput> GatewayCreateProducerGcpAsync (GatewayCreateProducerGcp body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerGcpOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerGcpOutput>> GatewayCreateProducerGcpAsyncWithHttpInfo (GatewayCreateProducerGcp body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerGkeOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerGkeOutput> GatewayCreateProducerGkeAsync (GatewayCreateProducerGke body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerGkeOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerGkeOutput>> GatewayCreateProducerGkeAsyncWithHttpInfo (GatewayCreateProducerGke body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerMSSQLOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerMSSQLOutput> GatewayCreateProducerMSSQLAsync (GatewayCreateProducerMSSQL body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerMSSQLOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerMSSQLOutput>> GatewayCreateProducerMSSQLAsyncWithHttpInfo (GatewayCreateProducerMSSQL body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerMongoOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerMongoOutput> GatewayCreateProducerMongoAsync (GatewayCreateProducerMongo body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerMongoOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerMongoOutput>> GatewayCreateProducerMongoAsyncWithHttpInfo (GatewayCreateProducerMongo body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerMySQLOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerMySQLOutput> GatewayCreateProducerMySQLAsync (GatewayCreateProducerMySQL body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerMySQLOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerMySQLOutput>> GatewayCreateProducerMySQLAsyncWithHttpInfo (GatewayCreateProducerMySQL body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerPostgreSQLOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerPostgreSQLOutput> GatewayCreateProducerPostgreSQLAsync (GatewayCreateProducerPostgreSQL body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerPostgreSQLOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerPostgreSQLOutput>> GatewayCreateProducerPostgreSQLAsyncWithHttpInfo (GatewayCreateProducerPostgreSQL body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerRabbitMQOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerRabbitMQOutput> GatewayCreateProducerRabbitMQAsync (GatewayCreateProducerRabbitMQ body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerRabbitMQOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerRabbitMQOutput>> GatewayCreateProducerRabbitMQAsyncWithHttpInfo (GatewayCreateProducerRabbitMQ body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerRdpOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerRdpOutput> GatewayCreateProducerRdpAsync (GatewayCreateProducerRdp body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerRdpOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerRdpOutput>> GatewayCreateProducerRdpAsyncWithHttpInfo (GatewayCreateProducerRdp body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayDeleteProducerOutput</returns>
        System.Threading.Tasks.Task<GatewayDeleteProducerOutput> GatewayDeleteProducerAsync (GatewayDeleteProducer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayDeleteProducerOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayDeleteProducerOutput>> GatewayDeleteProducerAsyncWithHttpInfo (GatewayDeleteProducer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayDeleteSubAdminsOutput</returns>
        System.Threading.Tasks.Task<GatewayDeleteSubAdminsOutput> GatewayDeleteSubAdminsAsync (GatewayDeleteSubAdmins body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayDeleteSubAdminsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayDeleteSubAdminsOutput>> GatewayDeleteSubAdminsAsyncWithHttpInfo (GatewayDeleteSubAdmins body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AkeylessGatewayConfig</returns>
        System.Threading.Tasks.Task<AkeylessGatewayConfig> GatewayGetConfigAsync (GatewayGetConfig body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AkeylessGatewayConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<AkeylessGatewayConfig>> GatewayGetConfigAsyncWithHttpInfo (GatewayGetConfig body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DSProducerDetails</returns>
        System.Threading.Tasks.Task<DSProducerDetails> GatewayGetProducerAsync (GatewayGetProducer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DSProducerDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSProducerDetails>> GatewayGetProducerAsyncWithHttpInfo (GatewayGetProducer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;TmpUserData&gt;</returns>
        System.Threading.Tasks.Task<List<TmpUserData>> GatewayGetTmpUsersAsync (GatewayGetTmpUsers body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;TmpUserData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TmpUserData>>> GatewayGetTmpUsersAsyncWithHttpInfo (GatewayGetTmpUsers body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetProducersListReplyObj</returns>
        System.Threading.Tasks.Task<GetProducersListReplyObj> GatewayListProducersAsync (GatewayListProducers body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetProducersListReplyObj)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProducersListReplyObj>> GatewayListProducersAsyncWithHttpInfo (GatewayListProducers body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetSubAdminsListReplyObj</returns>
        System.Threading.Tasks.Task<GetSubAdminsListReplyObj> GatewayListSubAdminsAsync (GatewayListSubAdmins body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetSubAdminsListReplyObj)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSubAdminsListReplyObj>> GatewayListSubAdminsAsyncWithHttpInfo (GatewayListSubAdmins body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GatewayRevokeTmpUsersAsync (GatewayRevokeTmpUsers body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GatewayRevokeTmpUsersAsyncWithHttpInfo (GatewayRevokeTmpUsers body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayStartProducerOutput</returns>
        System.Threading.Tasks.Task<GatewayStartProducerOutput> GatewayStartProducerAsync (GatewayStartProducer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayStartProducerOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayStartProducerOutput>> GatewayStartProducerAsyncWithHttpInfo (GatewayStartProducer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayStopProducerOutput</returns>
        System.Threading.Tasks.Task<GatewayStopProducerOutput> GatewayStopProducerAsync (GatewayStopProducer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayStopProducerOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayStopProducerOutput>> GatewayStopProducerAsyncWithHttpInfo (GatewayStopProducer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GatewayUpdateItemAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GatewayUpdateItemAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GatewayUpdateTmpUsersAsync (GatewayUpdateTmpUsers body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GatewayUpdateTmpUsersAsyncWithHttpInfo (GatewayUpdateTmpUsers body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> GetAccountLogoAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetAccountLogoAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AuthMethod</returns>
        System.Threading.Tasks.Task<AuthMethod> GetAuthMethodAsync (GetAuthMethod body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AuthMethod)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthMethod>> GetAuthMethodAsyncWithHttpInfo (GetAuthMethod body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> GetDynamicSecretValueAsync (GetDynamicSecretValue body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetDynamicSecretValueAsyncWithHttpInfo (GetDynamicSecretValue body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetKubeExecCredsOutput</returns>
        System.Threading.Tasks.Task<GetKubeExecCredsOutput> GetKubeExecCredsAsync (GetKubeExecCreds body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetKubeExecCredsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetKubeExecCredsOutput>> GetKubeExecCredsAsyncWithHttpInfo (GetKubeExecCreds body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetPKICertificateOutput</returns>
        System.Threading.Tasks.Task<GetPKICertificateOutput> GetPKICertificateAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetPKICertificateOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPKICertificateOutput>> GetPKICertificateAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetRSAPublicOutput</returns>
        System.Threading.Tasks.Task<GetRSAPublicOutput> GetRSAPublicAsync (GetRSAPublic body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetRSAPublicOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRSAPublicOutput>> GetRSAPublicAsyncWithHttpInfo (GetRSAPublic body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> GetRoleAsync (GetRole body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleAsyncWithHttpInfo (GetRole body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> GetRotatedSecretValueAsync (GetRotatedSecretValue body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetRotatedSecretValueAsyncWithHttpInfo (GetRotatedSecretValue body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetSSHCertificateOutput</returns>
        System.Threading.Tasks.Task<GetSSHCertificateOutput> GetSSHCertificateAsync (GetSSHCertificate body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetSSHCertificateOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSSHCertificateOutput>> GetSSHCertificateAsyncWithHttpInfo (GetSSHCertificate body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> GetSecretValueAsync (GetSecretValue body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetSecretValueAsyncWithHttpInfo (GetSecretValue body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Target</returns>
        System.Threading.Tasks.Task<Target> GetTargetAsync (GetTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Target)</returns>
        System.Threading.Tasks.Task<ApiResponse<Target>> GetTargetAsyncWithHttpInfo (GetTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetTargetDetailsOutput</returns>
        System.Threading.Tasks.Task<GetTargetDetailsOutput> GetTargetDetailsAsync (GetTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetTargetDetailsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTargetDetailsOutput>> GetTargetDetailsAsyncWithHttpInfo (GetTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ListAuthMethodsOutput</returns>
        System.Threading.Tasks.Task<ListAuthMethodsOutput> ListAuthMethodsAsync (ListAuthMethods body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ListAuthMethodsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAuthMethodsOutput>> ListAuthMethodsAsyncWithHttpInfo (ListAuthMethods body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ListItemsInPathOutput</returns>
        System.Threading.Tasks.Task<ListItemsInPathOutput> ListItemsAsync (ListItems body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ListItemsInPathOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListItemsInPathOutput>> ListItemsAsyncWithHttpInfo (ListItems body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ListRolesOutput</returns>
        System.Threading.Tasks.Task<ListRolesOutput> ListRolesAsync (ListRoles body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ListRolesOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRolesOutput>> ListRolesAsyncWithHttpInfo (ListRoles body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ListTargetsOutput</returns>
        System.Threading.Tasks.Task<ListTargetsOutput> ListTargetsAsync (ListTargets body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ListTargetsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTargetsOutput>> ListTargetsAsyncWithHttpInfo (ListTargets body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MoveObjectsAsync (MoveObjects body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MoveObjectsAsyncWithHttpInfo (MoveObjects body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SystemAccessCredentialsReplyObj</returns>
        System.Threading.Tasks.Task<SystemAccessCredentialsReplyObj> RawCredsAsync (RawCreds body = default(RawCreds));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SystemAccessCredentialsReplyObj)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemAccessCredentialsReplyObj>> RawCredsAsyncWithHttpInfo (RawCreds body = default(RawCreds));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of RefreshKeyOutput</returns>
        System.Threading.Tasks.Task<RefreshKeyOutput> RefreshKeyAsync (RefreshKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RefreshKeyOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefreshKeyOutput>> RefreshKeyAsyncWithHttpInfo (RefreshKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ReverseRBACOutput</returns>
        System.Threading.Tasks.Task<ReverseRBACOutput> ReverseRBACAsync (ReverseRBAC body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ReverseRBACOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReverseRBACOutput>> ReverseRBACAsyncWithHttpInfo (ReverseRBAC body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of RollbackSecretOutput</returns>
        System.Threading.Tasks.Task<RollbackSecretOutput> RollbackSecretAsync (RollbackSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RollbackSecretOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<RollbackSecretOutput>> RollbackSecretAsyncWithHttpInfo (RollbackSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of RotateKeyOutput</returns>
        System.Threading.Tasks.Task<RotateKeyOutput> RotateKeyAsync (UpdateRotationSettings body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RotateKeyOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<RotateKeyOutput>> RotateKeyAsyncWithHttpInfo (UpdateRotationSettings body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetItemStateAsync (SetItemState body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetItemStateAsyncWithHttpInfo (SetItemState body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetRoleRuleAsync (SetRoleRule body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetRoleRuleAsyncWithHttpInfo (SetRoleRule body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SignPKCS1Output</returns>
        System.Threading.Tasks.Task<SignPKCS1Output> SignPKCS1Async (SignPKCS1 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SignPKCS1Output)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignPKCS1Output>> SignPKCS1AsyncWithHttpInfo (SignPKCS1 body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of StaticCredsAuthOutput</returns>
        System.Threading.Tasks.Task<StaticCredsAuthOutput> StaticCredsAuthAsync (StaticCredsAuth body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StaticCredsAuthOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<StaticCredsAuthOutput>> StaticCredsAuthAsyncWithHttpInfo (StaticCredsAuth body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UidCreateChildTokenOutput</returns>
        System.Threading.Tasks.Task<UidCreateChildTokenOutput> UidCreateChildTokenAsync (UidCreateChildToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UidCreateChildTokenOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UidCreateChildTokenOutput>> UidCreateChildTokenAsyncWithHttpInfo (UidCreateChildToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UidGenerateTokenOutput</returns>
        System.Threading.Tasks.Task<UidGenerateTokenOutput> UidGenerateTokenAsync (UidGenerateToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UidGenerateTokenOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UidGenerateTokenOutput>> UidGenerateTokenAsyncWithHttpInfo (UidGenerateToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UniversalIdentityDetails</returns>
        System.Threading.Tasks.Task<UniversalIdentityDetails> UidListChildrenAsync (UidListChildren body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UniversalIdentityDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UniversalIdentityDetails>> UidListChildrenAsyncWithHttpInfo (UidListChildren body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UidRevokeTokenAsync (UidRevokeToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UidRevokeTokenAsyncWithHttpInfo (UidRevokeToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UidRotateTokenOutput</returns>
        System.Threading.Tasks.Task<UidRotateTokenOutput> UidRotateTokenAsync (UidRotateToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UidRotateTokenOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UidRotateTokenOutput>> UidRotateTokenAsyncWithHttpInfo (UidRotateToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateAWSTargetDetailsAsync (UpdateAWSTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateAWSTargetDetailsAsyncWithHttpInfo (UpdateAWSTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateDBTargetDetailsAsync (UpdateDBTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateDBTargetDetailsAsyncWithHttpInfo (UpdateDBTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateItemOutput</returns>
        System.Threading.Tasks.Task<UpdateItemOutput> UpdateItemAsync (UpdateItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateItemOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateItemOutput>> UpdateItemAsyncWithHttpInfo (UpdateItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateRDPTargetDetailsAsync (UpdateRDPTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateRDPTargetDetailsAsyncWithHttpInfo (UpdateRDPTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateRabbitMQTargetDetailsAsync (UpdateRabbitMQTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateRabbitMQTargetDetailsAsyncWithHttpInfo (UpdateRabbitMQTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateRoleOutput</returns>
        System.Threading.Tasks.Task<UpdateRoleOutput> UpdateRoleAsync (UpdateRole body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateRoleOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateRoleOutput>> UpdateRoleAsyncWithHttpInfo (UpdateRole body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateRotatedSecretOutput</returns>
        System.Threading.Tasks.Task<UpdateRotatedSecretOutput> UpdateRotatedSecretAsync (UpdateRotatedSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateRotatedSecretOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateRotatedSecretOutput>> UpdateRotatedSecretAsyncWithHttpInfo (UpdateRotatedSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RotateKeyOutput</returns>
        System.Threading.Tasks.Task<RotateKeyOutput> UpdateRotationSettingsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RotateKeyOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<RotateKeyOutput>> UpdateRotationSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateSSHTargetDetailsAsync (UpdateSSHTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateSSHTargetDetailsAsyncWithHttpInfo (UpdateSSHTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateSecretValOutput</returns>
        System.Threading.Tasks.Task<UpdateSecretValOutput> UpdateSecretValAsync (UpdateSecretVal body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateSecretValOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateSecretValOutput>> UpdateSecretValAsyncWithHttpInfo (UpdateSecretVal body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateTargetAsync (UpdateTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateTargetAsyncWithHttpInfo (UpdateTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateTargetDetailsAsync (Object body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateTargetDetailsAsyncWithHttpInfo (Object body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateWebTargetDetailsAsync (UpdateWebTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateWebTargetDetailsAsyncWithHttpInfo (UpdateWebTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UploadRSAAsync (UploadRSA body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadRSAAsyncWithHttpInfo (UploadRSA body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> VerifyPKCS1Async (VerifyPKCS1 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VerifyPKCS1AsyncWithHttpInfo (VerifyPKCS1 body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV2Api : IV2ApiSync, IV2ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class V2Api : IV2Api
    {
        private akeyless.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public V2Api() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public V2Api(String basePath)
        {
            this.Configuration = akeyless.Client.Configuration.MergeConfigurations(
                akeyless.Client.GlobalConfiguration.Instance,
                new akeyless.Client.Configuration { BasePath = basePath }
            );
            this.Client = new akeyless.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new akeyless.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = akeyless.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public V2Api(akeyless.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = akeyless.Client.Configuration.MergeConfigurations(
                akeyless.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new akeyless.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new akeyless.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = akeyless.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public V2Api(akeyless.Client.ISynchronousClient client,akeyless.Client.IAsynchronousClient asyncClient, akeyless.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = akeyless.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public akeyless.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public akeyless.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public akeyless.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public akeyless.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateRoleAuthMethodAssocOutput</returns>
        public CreateRoleAuthMethodAssocOutput AssocRoleAuthMethod (AssocRoleAuthMethod body)
        {
             akeyless.Client.ApiResponse<CreateRoleAuthMethodAssocOutput> localVarResponse = AssocRoleAuthMethodWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateRoleAuthMethodAssocOutput</returns>
        public akeyless.Client.ApiResponse< CreateRoleAuthMethodAssocOutput > AssocRoleAuthMethodWithHttpInfo (AssocRoleAuthMethod body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->AssocRoleAuthMethod");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateRoleAuthMethodAssocOutput >("/assoc-role-am", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssocRoleAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateRoleAuthMethodAssocOutput</returns>
        public async System.Threading.Tasks.Task<CreateRoleAuthMethodAssocOutput> AssocRoleAuthMethodAsync (AssocRoleAuthMethod body)
        {
             akeyless.Client.ApiResponse<CreateRoleAuthMethodAssocOutput> localVarResponse = await AssocRoleAuthMethodAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateRoleAuthMethodAssocOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateRoleAuthMethodAssocOutput>> AssocRoleAuthMethodAsyncWithHttpInfo (AssocRoleAuthMethod body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->AssocRoleAuthMethod");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateRoleAuthMethodAssocOutput>("/assoc-role-am", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssocRoleAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetItemAssocOutput</returns>
        public CreateTargetItemAssocOutput AssocTargetItem (AssocTargetItem body)
        {
             akeyless.Client.ApiResponse<CreateTargetItemAssocOutput> localVarResponse = AssocTargetItemWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetItemAssocOutput</returns>
        public akeyless.Client.ApiResponse< CreateTargetItemAssocOutput > AssocTargetItemWithHttpInfo (AssocTargetItem body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->AssocTargetItem");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateTargetItemAssocOutput >("/assoc-target-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssocTargetItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetItemAssocOutput</returns>
        public async System.Threading.Tasks.Task<CreateTargetItemAssocOutput> AssocTargetItemAsync (AssocTargetItem body)
        {
             akeyless.Client.ApiResponse<CreateTargetItemAssocOutput> localVarResponse = await AssocTargetItemAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetItemAssocOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateTargetItemAssocOutput>> AssocTargetItemAsyncWithHttpInfo (AssocTargetItem body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->AssocTargetItem");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTargetItemAssocOutput>("/assoc-target-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssocTargetItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthOutput</returns>
        public AuthOutput Auth (Auth body)
        {
             akeyless.Client.ApiResponse<AuthOutput> localVarResponse = AuthWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthOutput</returns>
        public akeyless.Client.ApiResponse< AuthOutput > AuthWithHttpInfo (Auth body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Auth");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< AuthOutput >("/auth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Auth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AuthOutput</returns>
        public async System.Threading.Tasks.Task<AuthOutput> AuthAsync (Auth body)
        {
             akeyless.Client.ApiResponse<AuthOutput> localVarResponse = await AuthAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AuthOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<AuthOutput>> AuthAsyncWithHttpInfo (Auth body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Auth");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthOutput>("/auth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Auth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ConfigureOutput</returns>
        public ConfigureOutput Configure (Configure body)
        {
             akeyless.Client.ApiResponse<ConfigureOutput> localVarResponse = ConfigureWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ConfigureOutput</returns>
        public akeyless.Client.ApiResponse< ConfigureOutput > ConfigureWithHttpInfo (Configure body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Configure");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< ConfigureOutput >("/configure", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Configure", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ConfigureOutput</returns>
        public async System.Threading.Tasks.Task<ConfigureOutput> ConfigureAsync (Configure body)
        {
             akeyless.Client.ApiResponse<ConfigureOutput> localVarResponse = await ConfigureAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ConfigureOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<ConfigureOutput>> ConfigureAsyncWithHttpInfo (Configure body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Configure");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfigureOutput>("/configure", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Configure", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodOutput</returns>
        public CreateAuthMethodOutput CreateAuthMethod (CreateAuthMethod body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodOutput> localVarResponse = CreateAuthMethodWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodOutput</returns>
        public akeyless.Client.ApiResponse< CreateAuthMethodOutput > CreateAuthMethodWithHttpInfo (CreateAuthMethod body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethod");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateAuthMethodOutput >("/create-auth-method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodOutput> CreateAuthMethodAsync (CreateAuthMethod body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodOutput> localVarResponse = await CreateAuthMethodAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodOutput>> CreateAuthMethodAsyncWithHttpInfo (CreateAuthMethod body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethod");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodOutput>("/create-auth-method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodAWSIAMOutput</returns>
        public CreateAuthMethodAWSIAMOutput CreateAuthMethodAWSIAM (CreateAuthMethodAWSIAM body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodAWSIAMOutput> localVarResponse = CreateAuthMethodAWSIAMWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodAWSIAMOutput</returns>
        public akeyless.Client.ApiResponse< CreateAuthMethodAWSIAMOutput > CreateAuthMethodAWSIAMWithHttpInfo (CreateAuthMethodAWSIAM body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodAWSIAM");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateAuthMethodAWSIAMOutput >("/create-auth-method-aws-iam", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodAWSIAM", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodAWSIAMOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodAWSIAMOutput> CreateAuthMethodAWSIAMAsync (CreateAuthMethodAWSIAM body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodAWSIAMOutput> localVarResponse = await CreateAuthMethodAWSIAMAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodAWSIAMOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodAWSIAMOutput>> CreateAuthMethodAWSIAMAsyncWithHttpInfo (CreateAuthMethodAWSIAM body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodAWSIAM");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodAWSIAMOutput>("/create-auth-method-aws-iam", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodAWSIAM", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodAzureADOutput</returns>
        public CreateAuthMethodAzureADOutput CreateAuthMethodAzureAD (CreateAuthMethodAzureAD body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodAzureADOutput> localVarResponse = CreateAuthMethodAzureADWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodAzureADOutput</returns>
        public akeyless.Client.ApiResponse< CreateAuthMethodAzureADOutput > CreateAuthMethodAzureADWithHttpInfo (CreateAuthMethodAzureAD body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodAzureAD");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateAuthMethodAzureADOutput >("/create-auth-method-azure-ad", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodAzureAD", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodAzureADOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodAzureADOutput> CreateAuthMethodAzureADAsync (CreateAuthMethodAzureAD body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodAzureADOutput> localVarResponse = await CreateAuthMethodAzureADAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodAzureADOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodAzureADOutput>> CreateAuthMethodAzureADAsyncWithHttpInfo (CreateAuthMethodAzureAD body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodAzureAD");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodAzureADOutput>("/create-auth-method-azure-ad", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodAzureAD", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodGCPOutput</returns>
        public CreateAuthMethodGCPOutput CreateAuthMethodGCP (CreateAuthMethodGCP body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodGCPOutput> localVarResponse = CreateAuthMethodGCPWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodGCPOutput</returns>
        public akeyless.Client.ApiResponse< CreateAuthMethodGCPOutput > CreateAuthMethodGCPWithHttpInfo (CreateAuthMethodGCP body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodGCP");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateAuthMethodGCPOutput >("/create-auth-method-gcp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodGCP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodGCPOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodGCPOutput> CreateAuthMethodGCPAsync (CreateAuthMethodGCP body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodGCPOutput> localVarResponse = await CreateAuthMethodGCPAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodGCPOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodGCPOutput>> CreateAuthMethodGCPAsyncWithHttpInfo (CreateAuthMethodGCP body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodGCP");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodGCPOutput>("/create-auth-method-gcp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodGCP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodHuaweiOutput</returns>
        public CreateAuthMethodHuaweiOutput CreateAuthMethodHuawei (CreateAuthMethodHuawei body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodHuaweiOutput> localVarResponse = CreateAuthMethodHuaweiWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodHuaweiOutput</returns>
        public akeyless.Client.ApiResponse< CreateAuthMethodHuaweiOutput > CreateAuthMethodHuaweiWithHttpInfo (CreateAuthMethodHuawei body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodHuawei");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateAuthMethodHuaweiOutput >("/create-auth-method-huawei", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodHuawei", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodHuaweiOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodHuaweiOutput> CreateAuthMethodHuaweiAsync (CreateAuthMethodHuawei body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodHuaweiOutput> localVarResponse = await CreateAuthMethodHuaweiAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodHuaweiOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodHuaweiOutput>> CreateAuthMethodHuaweiAsyncWithHttpInfo (CreateAuthMethodHuawei body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodHuawei");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodHuaweiOutput>("/create-auth-method-huawei", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodHuawei", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodOAuth2Output</returns>
        public CreateAuthMethodOAuth2Output CreateAuthMethodOAuth2 (CreateAuthMethodOAuth2 body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodOAuth2Output> localVarResponse = CreateAuthMethodOAuth2WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodOAuth2Output</returns>
        public akeyless.Client.ApiResponse< CreateAuthMethodOAuth2Output > CreateAuthMethodOAuth2WithHttpInfo (CreateAuthMethodOAuth2 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodOAuth2");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateAuthMethodOAuth2Output >("/create-auth-method-oauth2", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodOAuth2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodOAuth2Output</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodOAuth2Output> CreateAuthMethodOAuth2Async (CreateAuthMethodOAuth2 body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodOAuth2Output> localVarResponse = await CreateAuthMethodOAuth2AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodOAuth2Output)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodOAuth2Output>> CreateAuthMethodOAuth2AsyncWithHttpInfo (CreateAuthMethodOAuth2 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodOAuth2");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodOAuth2Output>("/create-auth-method-oauth2", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodOAuth2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodSAMLOutput</returns>
        public CreateAuthMethodSAMLOutput CreateAuthMethodSAML (CreateAuthMethodSAML body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodSAMLOutput> localVarResponse = CreateAuthMethodSAMLWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodSAMLOutput</returns>
        public akeyless.Client.ApiResponse< CreateAuthMethodSAMLOutput > CreateAuthMethodSAMLWithHttpInfo (CreateAuthMethodSAML body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodSAML");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateAuthMethodSAMLOutput >("/create-auth-method-saml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodSAML", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodSAMLOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodSAMLOutput> CreateAuthMethodSAMLAsync (CreateAuthMethodSAML body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodSAMLOutput> localVarResponse = await CreateAuthMethodSAMLAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodSAMLOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodSAMLOutput>> CreateAuthMethodSAMLAsyncWithHttpInfo (CreateAuthMethodSAML body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodSAML");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodSAMLOutput>("/create-auth-method-saml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodSAML", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodUniversalIdentityOutput</returns>
        public CreateAuthMethodUniversalIdentityOutput CreateAuthMethodUniversalIdentity (CreateAuthMethodUniversalIdentity body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodUniversalIdentityOutput> localVarResponse = CreateAuthMethodUniversalIdentityWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodUniversalIdentityOutput</returns>
        public akeyless.Client.ApiResponse< CreateAuthMethodUniversalIdentityOutput > CreateAuthMethodUniversalIdentityWithHttpInfo (CreateAuthMethodUniversalIdentity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodUniversalIdentity");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateAuthMethodUniversalIdentityOutput >("/create-auth-method-universal-identity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodUniversalIdentity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateAuthMethodUniversalIdentityOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodUniversalIdentityOutput> CreateAuthMethodUniversalIdentityAsync (CreateAuthMethodUniversalIdentity body)
        {
             akeyless.Client.ApiResponse<CreateAuthMethodUniversalIdentityOutput> localVarResponse = await CreateAuthMethodUniversalIdentityAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateAuthMethodUniversalIdentityOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodUniversalIdentityOutput>> CreateAuthMethodUniversalIdentityAsyncWithHttpInfo (CreateAuthMethodUniversalIdentity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodUniversalIdentity");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodUniversalIdentityOutput>("/create-auth-method-universal-identity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodUniversalIdentity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetOutput</returns>
        public CreateTargetOutput CreateAwsTarget (CreateAwsTarget body)
        {
             akeyless.Client.ApiResponse<CreateTargetOutput> localVarResponse = CreateAwsTargetWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetOutput</returns>
        public akeyless.Client.ApiResponse< CreateTargetOutput > CreateAwsTargetWithHttpInfo (CreateAwsTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAwsTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateTargetOutput >("/create-aws-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAwsTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateTargetOutput> CreateAwsTargetAsync (CreateAwsTarget body)
        {
             akeyless.Client.ApiResponse<CreateTargetOutput> localVarResponse = await CreateAwsTargetAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateTargetOutput>> CreateAwsTargetAsyncWithHttpInfo (CreateAwsTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAwsTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTargetOutput>("/create-aws-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAwsTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetOutput</returns>
        public CreateTargetOutput CreateDBTarget (CreateDBTarget body)
        {
             akeyless.Client.ApiResponse<CreateTargetOutput> localVarResponse = CreateDBTargetWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetOutput</returns>
        public akeyless.Client.ApiResponse< CreateTargetOutput > CreateDBTargetWithHttpInfo (CreateDBTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateDBTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateTargetOutput >("/create-db-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDBTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateTargetOutput> CreateDBTargetAsync (CreateDBTarget body)
        {
             akeyless.Client.ApiResponse<CreateTargetOutput> localVarResponse = await CreateDBTargetAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateTargetOutput>> CreateDBTargetAsyncWithHttpInfo (CreateDBTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateDBTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTargetOutput>("/create-db-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDBTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object CreateDynamicSecret (CreateDynamicSecret body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = CreateDynamicSecretWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse< Object > CreateDynamicSecretWithHttpInfo (CreateDynamicSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateDynamicSecret");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/create-dynamic-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDynamicSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateDynamicSecretAsync (CreateDynamicSecret body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = await CreateDynamicSecretAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> CreateDynamicSecretAsyncWithHttpInfo (CreateDynamicSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateDynamicSecret");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/create-dynamic-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDynamicSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateKeyOutput</returns>
        public CreateKeyOutput CreateKey (CreateKey body)
        {
             akeyless.Client.ApiResponse<CreateKeyOutput> localVarResponse = CreateKeyWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateKeyOutput</returns>
        public akeyless.Client.ApiResponse< CreateKeyOutput > CreateKeyWithHttpInfo (CreateKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateKeyOutput >("/create-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateKeyOutput</returns>
        public async System.Threading.Tasks.Task<CreateKeyOutput> CreateKeyAsync (CreateKey body)
        {
             akeyless.Client.ApiResponse<CreateKeyOutput> localVarResponse = await CreateKeyAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateKeyOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateKeyOutput>> CreateKeyAsyncWithHttpInfo (CreateKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateKeyOutput>("/create-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateManagedKeyOutput</returns>
        public CreateManagedKeyOutput CreateManagedKey (CreateManagedKey body)
        {
             akeyless.Client.ApiResponse<CreateManagedKeyOutput> localVarResponse = CreateManagedKeyWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateManagedKeyOutput</returns>
        public akeyless.Client.ApiResponse< CreateManagedKeyOutput > CreateManagedKeyWithHttpInfo (CreateManagedKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateManagedKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateManagedKeyOutput >("/create-managed-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManagedKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateManagedKeyOutput</returns>
        public async System.Threading.Tasks.Task<CreateManagedKeyOutput> CreateManagedKeyAsync (CreateManagedKey body)
        {
             akeyless.Client.ApiResponse<CreateManagedKeyOutput> localVarResponse = await CreateManagedKeyAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateManagedKeyOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateManagedKeyOutput>> CreateManagedKeyAsyncWithHttpInfo (CreateManagedKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateManagedKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateManagedKeyOutput>("/create-managed-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManagedKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreatePKICertIssuerOutput</returns>
        public CreatePKICertIssuerOutput CreatePKICertIssuer (CreatePKICertIssuer body)
        {
             akeyless.Client.ApiResponse<CreatePKICertIssuerOutput> localVarResponse = CreatePKICertIssuerWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreatePKICertIssuerOutput</returns>
        public akeyless.Client.ApiResponse< CreatePKICertIssuerOutput > CreatePKICertIssuerWithHttpInfo (CreatePKICertIssuer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreatePKICertIssuer");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreatePKICertIssuerOutput >("/create-pki-cert-issuer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePKICertIssuer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreatePKICertIssuerOutput</returns>
        public async System.Threading.Tasks.Task<CreatePKICertIssuerOutput> CreatePKICertIssuerAsync (CreatePKICertIssuer body)
        {
             akeyless.Client.ApiResponse<CreatePKICertIssuerOutput> localVarResponse = await CreatePKICertIssuerAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreatePKICertIssuerOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreatePKICertIssuerOutput>> CreatePKICertIssuerAsyncWithHttpInfo (CreatePKICertIssuer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreatePKICertIssuer");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePKICertIssuerOutput>("/create-pki-cert-issuer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePKICertIssuer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetOutput</returns>
        public CreateTargetOutput CreateRabbitMQTarget (CreateRabbitMQTarget body)
        {
             akeyless.Client.ApiResponse<CreateTargetOutput> localVarResponse = CreateRabbitMQTargetWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetOutput</returns>
        public akeyless.Client.ApiResponse< CreateTargetOutput > CreateRabbitMQTargetWithHttpInfo (CreateRabbitMQTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateRabbitMQTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateTargetOutput >("/create-rabbitMQ-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRabbitMQTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateTargetOutput> CreateRabbitMQTargetAsync (CreateRabbitMQTarget body)
        {
             akeyless.Client.ApiResponse<CreateTargetOutput> localVarResponse = await CreateRabbitMQTargetAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateTargetOutput>> CreateRabbitMQTargetAsyncWithHttpInfo (CreateRabbitMQTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateRabbitMQTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTargetOutput>("/create-rabbitMQ-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRabbitMQTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetOutput</returns>
        public CreateTargetOutput CreateRdpTarget (CreateRdpTarget body)
        {
             akeyless.Client.ApiResponse<CreateTargetOutput> localVarResponse = CreateRdpTargetWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetOutput</returns>
        public akeyless.Client.ApiResponse< CreateTargetOutput > CreateRdpTargetWithHttpInfo (CreateRdpTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateRdpTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateTargetOutput >("/create-rdp-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRdpTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateTargetOutput> CreateRdpTargetAsync (CreateRdpTarget body)
        {
             akeyless.Client.ApiResponse<CreateTargetOutput> localVarResponse = await CreateRdpTargetAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateTargetOutput>> CreateRdpTargetAsyncWithHttpInfo (CreateRdpTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateRdpTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTargetOutput>("/create-rdp-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRdpTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object CreateRole (CreateRole body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = CreateRoleWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse< Object > CreateRoleWithHttpInfo (CreateRole body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateRole");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/create-role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateRoleAsync (CreateRole body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = await CreateRoleAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> CreateRoleAsyncWithHttpInfo (CreateRole body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateRole");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/create-role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateRotatedSecretOutput</returns>
        public CreateRotatedSecretOutput CreateRotatedSecret (CreateRotatedSecret body)
        {
             akeyless.Client.ApiResponse<CreateRotatedSecretOutput> localVarResponse = CreateRotatedSecretWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateRotatedSecretOutput</returns>
        public akeyless.Client.ApiResponse< CreateRotatedSecretOutput > CreateRotatedSecretWithHttpInfo (CreateRotatedSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateRotatedSecret");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateRotatedSecretOutput >("/create-rotated-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRotatedSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateRotatedSecretOutput</returns>
        public async System.Threading.Tasks.Task<CreateRotatedSecretOutput> CreateRotatedSecretAsync (CreateRotatedSecret body)
        {
             akeyless.Client.ApiResponse<CreateRotatedSecretOutput> localVarResponse = await CreateRotatedSecretAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateRotatedSecretOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateRotatedSecretOutput>> CreateRotatedSecretAsyncWithHttpInfo (CreateRotatedSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateRotatedSecret");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateRotatedSecretOutput>("/create-rotated-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRotatedSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateSSHCertIssuerOutput</returns>
        public CreateSSHCertIssuerOutput CreateSSHCertIssuer (CreateSSHCertIssuer body)
        {
             akeyless.Client.ApiResponse<CreateSSHCertIssuerOutput> localVarResponse = CreateSSHCertIssuerWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateSSHCertIssuerOutput</returns>
        public akeyless.Client.ApiResponse< CreateSSHCertIssuerOutput > CreateSSHCertIssuerWithHttpInfo (CreateSSHCertIssuer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateSSHCertIssuer");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateSSHCertIssuerOutput >("/create-ssh-cert-issuer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSSHCertIssuer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateSSHCertIssuerOutput</returns>
        public async System.Threading.Tasks.Task<CreateSSHCertIssuerOutput> CreateSSHCertIssuerAsync (CreateSSHCertIssuer body)
        {
             akeyless.Client.ApiResponse<CreateSSHCertIssuerOutput> localVarResponse = await CreateSSHCertIssuerAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateSSHCertIssuerOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateSSHCertIssuerOutput>> CreateSSHCertIssuerAsyncWithHttpInfo (CreateSSHCertIssuer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateSSHCertIssuer");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSSHCertIssuerOutput>("/create-ssh-cert-issuer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSSHCertIssuer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetOutput</returns>
        public CreateTargetOutput CreateSSHTarget (CreateSSHTarget body)
        {
             akeyless.Client.ApiResponse<CreateTargetOutput> localVarResponse = CreateSSHTargetWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetOutput</returns>
        public akeyless.Client.ApiResponse< CreateTargetOutput > CreateSSHTargetWithHttpInfo (CreateSSHTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateSSHTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateTargetOutput >("/create-ssh-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSSHTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateTargetOutput> CreateSSHTargetAsync (CreateSSHTarget body)
        {
             akeyless.Client.ApiResponse<CreateTargetOutput> localVarResponse = await CreateSSHTargetAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateTargetOutput>> CreateSSHTargetAsyncWithHttpInfo (CreateSSHTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateSSHTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTargetOutput>("/create-ssh-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSSHTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateSecretOutput</returns>
        public CreateSecretOutput CreateSecret (CreateSecret body)
        {
             akeyless.Client.ApiResponse<CreateSecretOutput> localVarResponse = CreateSecretWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateSecretOutput</returns>
        public akeyless.Client.ApiResponse< CreateSecretOutput > CreateSecretWithHttpInfo (CreateSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateSecret");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateSecretOutput >("/create-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateSecretOutput</returns>
        public async System.Threading.Tasks.Task<CreateSecretOutput> CreateSecretAsync (CreateSecret body)
        {
             akeyless.Client.ApiResponse<CreateSecretOutput> localVarResponse = await CreateSecretAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateSecretOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateSecretOutput>> CreateSecretAsyncWithHttpInfo (CreateSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateSecret");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSecretOutput>("/create-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetOutput</returns>
        public CreateTargetOutput CreateTarget (Object body)
        {
             akeyless.Client.ApiResponse<CreateTargetOutput> localVarResponse = CreateTargetWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetOutput</returns>
        public akeyless.Client.ApiResponse< CreateTargetOutput > CreateTargetWithHttpInfo (Object body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateTargetOutput >("/create-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateTargetOutput> CreateTargetAsync (Object body)
        {
             akeyless.Client.ApiResponse<CreateTargetOutput> localVarResponse = await CreateTargetAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateTargetOutput>> CreateTargetAsyncWithHttpInfo (Object body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTargetOutput>("/create-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetOutput</returns>
        public CreateTargetOutput CreateWebTarget (CreateWebTarget body)
        {
             akeyless.Client.ApiResponse<CreateTargetOutput> localVarResponse = CreateWebTargetWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetOutput</returns>
        public akeyless.Client.ApiResponse< CreateTargetOutput > CreateWebTargetWithHttpInfo (CreateWebTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateWebTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateTargetOutput >("/create-web-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateTargetOutput> CreateWebTargetAsync (CreateWebTarget body)
        {
             akeyless.Client.ApiResponse<CreateTargetOutput> localVarResponse = await CreateWebTargetAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateTargetOutput>> CreateWebTargetAsyncWithHttpInfo (CreateWebTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateWebTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTargetOutput>("/create-web-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DecryptOutput</returns>
        public DecryptOutput Decrypt (Decrypt body)
        {
             akeyless.Client.ApiResponse<DecryptOutput> localVarResponse = DecryptWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DecryptOutput</returns>
        public akeyless.Client.ApiResponse< DecryptOutput > DecryptWithHttpInfo (Decrypt body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Decrypt");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< DecryptOutput >("/decrypt", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Decrypt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DecryptOutput</returns>
        public async System.Threading.Tasks.Task<DecryptOutput> DecryptAsync (Decrypt body)
        {
             akeyless.Client.ApiResponse<DecryptOutput> localVarResponse = await DecryptAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DecryptOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DecryptOutput>> DecryptAsyncWithHttpInfo (Decrypt body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Decrypt");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DecryptOutput>("/decrypt", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Decrypt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DecryptPKCS1Output</returns>
        public DecryptPKCS1Output DecryptPKCS1 (DecryptPKCS1 body)
        {
             akeyless.Client.ApiResponse<DecryptPKCS1Output> localVarResponse = DecryptPKCS1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DecryptPKCS1Output</returns>
        public akeyless.Client.ApiResponse< DecryptPKCS1Output > DecryptPKCS1WithHttpInfo (DecryptPKCS1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DecryptPKCS1");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< DecryptPKCS1Output >("/decrypt-pkcs1", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DecryptPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DecryptPKCS1Output</returns>
        public async System.Threading.Tasks.Task<DecryptPKCS1Output> DecryptPKCS1Async (DecryptPKCS1 body)
        {
             akeyless.Client.ApiResponse<DecryptPKCS1Output> localVarResponse = await DecryptPKCS1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DecryptPKCS1Output)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DecryptPKCS1Output>> DecryptPKCS1AsyncWithHttpInfo (DecryptPKCS1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DecryptPKCS1");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DecryptPKCS1Output>("/decrypt-pkcs1", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DecryptPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteAuthMethodOutput</returns>
        public DeleteAuthMethodOutput DeleteAuthMethod (DeleteAuthMethod body)
        {
             akeyless.Client.ApiResponse<DeleteAuthMethodOutput> localVarResponse = DeleteAuthMethodWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteAuthMethodOutput</returns>
        public akeyless.Client.ApiResponse< DeleteAuthMethodOutput > DeleteAuthMethodWithHttpInfo (DeleteAuthMethod body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteAuthMethod");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< DeleteAuthMethodOutput >("/delete-auth-method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DeleteAuthMethodOutput</returns>
        public async System.Threading.Tasks.Task<DeleteAuthMethodOutput> DeleteAuthMethodAsync (DeleteAuthMethod body)
        {
             akeyless.Client.ApiResponse<DeleteAuthMethodOutput> localVarResponse = await DeleteAuthMethodAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DeleteAuthMethodOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DeleteAuthMethodOutput>> DeleteAuthMethodAsyncWithHttpInfo (DeleteAuthMethod body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteAuthMethod");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteAuthMethodOutput>("/delete-auth-method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteAuthMethodsOutput</returns>
        public DeleteAuthMethodsOutput DeleteAuthMethods (DeleteAuthMethods body)
        {
             akeyless.Client.ApiResponse<DeleteAuthMethodsOutput> localVarResponse = DeleteAuthMethodsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteAuthMethodsOutput</returns>
        public akeyless.Client.ApiResponse< DeleteAuthMethodsOutput > DeleteAuthMethodsWithHttpInfo (DeleteAuthMethods body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteAuthMethods");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< DeleteAuthMethodsOutput >("/delete-auth-methods", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthMethods", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DeleteAuthMethodsOutput</returns>
        public async System.Threading.Tasks.Task<DeleteAuthMethodsOutput> DeleteAuthMethodsAsync (DeleteAuthMethods body)
        {
             akeyless.Client.ApiResponse<DeleteAuthMethodsOutput> localVarResponse = await DeleteAuthMethodsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DeleteAuthMethodsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DeleteAuthMethodsOutput>> DeleteAuthMethodsAsyncWithHttpInfo (DeleteAuthMethods body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteAuthMethods");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteAuthMethodsOutput>("/delete-auth-methods", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthMethods", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteItemOutput</returns>
        public DeleteItemOutput DeleteItem (DeleteItem body)
        {
             akeyless.Client.ApiResponse<DeleteItemOutput> localVarResponse = DeleteItemWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteItemOutput</returns>
        public akeyless.Client.ApiResponse< DeleteItemOutput > DeleteItemWithHttpInfo (DeleteItem body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteItem");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< DeleteItemOutput >("/delete-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DeleteItemOutput</returns>
        public async System.Threading.Tasks.Task<DeleteItemOutput> DeleteItemAsync (DeleteItem body)
        {
             akeyless.Client.ApiResponse<DeleteItemOutput> localVarResponse = await DeleteItemAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DeleteItemOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DeleteItemOutput>> DeleteItemAsyncWithHttpInfo (DeleteItem body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteItem");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteItemOutput>("/delete-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteItemsOutput</returns>
        public DeleteItemsOutput DeleteItems (DeleteItems body)
        {
             akeyless.Client.ApiResponse<DeleteItemsOutput> localVarResponse = DeleteItemsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteItemsOutput</returns>
        public akeyless.Client.ApiResponse< DeleteItemsOutput > DeleteItemsWithHttpInfo (DeleteItems body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteItems");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< DeleteItemsOutput >("/delete-items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DeleteItemsOutput</returns>
        public async System.Threading.Tasks.Task<DeleteItemsOutput> DeleteItemsAsync (DeleteItems body)
        {
             akeyless.Client.ApiResponse<DeleteItemsOutput> localVarResponse = await DeleteItemsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DeleteItemsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DeleteItemsOutput>> DeleteItemsAsyncWithHttpInfo (DeleteItems body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteItems");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteItemsOutput>("/delete-items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object DeleteRole (DeleteRole body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = DeleteRoleWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse< Object > DeleteRoleWithHttpInfo (DeleteRole body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRole");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/delete-role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteRoleAsync (DeleteRole body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = await DeleteRoleAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> DeleteRoleAsyncWithHttpInfo (DeleteRole body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRole");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/delete-role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object DeleteRoleAssociation (DeleteRoleAssociation body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = DeleteRoleAssociationWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse< Object > DeleteRoleAssociationWithHttpInfo (DeleteRoleAssociation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRoleAssociation");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/delete-assoc", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoleAssociation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteRoleAssociationAsync (DeleteRoleAssociation body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = await DeleteRoleAssociationAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> DeleteRoleAssociationAsyncWithHttpInfo (DeleteRoleAssociation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRoleAssociation");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/delete-assoc", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoleAssociation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteRoleRuleOutput</returns>
        public DeleteRoleRuleOutput DeleteRoleRule (DeleteRoleRule body)
        {
             akeyless.Client.ApiResponse<DeleteRoleRuleOutput> localVarResponse = DeleteRoleRuleWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteRoleRuleOutput</returns>
        public akeyless.Client.ApiResponse< DeleteRoleRuleOutput > DeleteRoleRuleWithHttpInfo (DeleteRoleRule body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRoleRule");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< DeleteRoleRuleOutput >("/delete-role-rule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoleRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DeleteRoleRuleOutput</returns>
        public async System.Threading.Tasks.Task<DeleteRoleRuleOutput> DeleteRoleRuleAsync (DeleteRoleRule body)
        {
             akeyless.Client.ApiResponse<DeleteRoleRuleOutput> localVarResponse = await DeleteRoleRuleAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DeleteRoleRuleOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DeleteRoleRuleOutput>> DeleteRoleRuleAsyncWithHttpInfo (DeleteRoleRule body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRoleRule");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteRoleRuleOutput>("/delete-role-rule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoleRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object DeleteRoles (DeleteRoles body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = DeleteRolesWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse< Object > DeleteRolesWithHttpInfo (DeleteRoles body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRoles");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/delete-roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteRolesAsync (DeleteRoles body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = await DeleteRolesAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> DeleteRolesAsyncWithHttpInfo (DeleteRoles body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRoles");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/delete-roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object DeleteTarget (DeleteTarget body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = DeleteTargetWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse< Object > DeleteTargetWithHttpInfo (DeleteTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/delete-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteTargetAsync (DeleteTarget body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = await DeleteTargetAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> DeleteTargetAsyncWithHttpInfo (DeleteTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/delete-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object DeleteTargetAssociation (DeleteTargetAssociation body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = DeleteTargetAssociationWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse< Object > DeleteTargetAssociationWithHttpInfo (DeleteTargetAssociation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteTargetAssociation");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/delete-assoc-target-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTargetAssociation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteTargetAssociationAsync (DeleteTargetAssociation body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = await DeleteTargetAssociationAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> DeleteTargetAssociationAsyncWithHttpInfo (DeleteTargetAssociation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteTargetAssociation");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/delete-assoc-target-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTargetAssociation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object DeleteTargets (DeleteTargets body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = DeleteTargetsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse< Object > DeleteTargetsWithHttpInfo (DeleteTargets body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteTargets");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/delete-targets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTargets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteTargetsAsync (DeleteTargets body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = await DeleteTargetsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> DeleteTargetsAsyncWithHttpInfo (DeleteTargets body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteTargets");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/delete-targets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTargets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Item</returns>
        public Item DescribeItem (DescribeItem body)
        {
             akeyless.Client.ApiResponse<Item> localVarResponse = DescribeItemWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Item</returns>
        public akeyless.Client.ApiResponse< Item > DescribeItemWithHttpInfo (DescribeItem body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DescribeItem");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Item >("/describe-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DescribeItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Item</returns>
        public async System.Threading.Tasks.Task<Item> DescribeItemAsync (DescribeItem body)
        {
             akeyless.Client.ApiResponse<Item> localVarResponse = await DescribeItemAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Item)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Item>> DescribeItemAsyncWithHttpInfo (DescribeItem body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DescribeItem");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Item>("/describe-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DescribeItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DescribePermissionsOutput</returns>
        public DescribePermissionsOutput DescribePermissions (DescribePermissions body)
        {
             akeyless.Client.ApiResponse<DescribePermissionsOutput> localVarResponse = DescribePermissionsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DescribePermissionsOutput</returns>
        public akeyless.Client.ApiResponse< DescribePermissionsOutput > DescribePermissionsWithHttpInfo (DescribePermissions body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DescribePermissions");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< DescribePermissionsOutput >("/describe-permissions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DescribePermissions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DescribePermissionsOutput</returns>
        public async System.Threading.Tasks.Task<DescribePermissionsOutput> DescribePermissionsAsync (DescribePermissions body)
        {
             akeyless.Client.ApiResponse<DescribePermissionsOutput> localVarResponse = await DescribePermissionsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DescribePermissionsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DescribePermissionsOutput>> DescribePermissionsAsyncWithHttpInfo (DescribePermissions body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DescribePermissions");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DescribePermissionsOutput>("/describe-permissions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DescribePermissions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EncryptOutput</returns>
        public EncryptOutput Encrypt (Encrypt body)
        {
             akeyless.Client.ApiResponse<EncryptOutput> localVarResponse = EncryptWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EncryptOutput</returns>
        public akeyless.Client.ApiResponse< EncryptOutput > EncryptWithHttpInfo (Encrypt body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Encrypt");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< EncryptOutput >("/encrypt", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Encrypt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of EncryptOutput</returns>
        public async System.Threading.Tasks.Task<EncryptOutput> EncryptAsync (Encrypt body)
        {
             akeyless.Client.ApiResponse<EncryptOutput> localVarResponse = await EncryptAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (EncryptOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<EncryptOutput>> EncryptAsyncWithHttpInfo (Encrypt body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Encrypt");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EncryptOutput>("/encrypt", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Encrypt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EncryptPKCS1Output</returns>
        public EncryptPKCS1Output EncryptPKCS1 (EncryptPKCS1 body)
        {
             akeyless.Client.ApiResponse<EncryptPKCS1Output> localVarResponse = EncryptPKCS1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EncryptPKCS1Output</returns>
        public akeyless.Client.ApiResponse< EncryptPKCS1Output > EncryptPKCS1WithHttpInfo (EncryptPKCS1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->EncryptPKCS1");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< EncryptPKCS1Output >("/encrypt-pkcs1", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EncryptPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of EncryptPKCS1Output</returns>
        public async System.Threading.Tasks.Task<EncryptPKCS1Output> EncryptPKCS1Async (EncryptPKCS1 body)
        {
             akeyless.Client.ApiResponse<EncryptPKCS1Output> localVarResponse = await EncryptPKCS1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (EncryptPKCS1Output)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<EncryptPKCS1Output>> EncryptPKCS1AsyncWithHttpInfo (EncryptPKCS1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->EncryptPKCS1");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EncryptPKCS1Output>("/encrypt-pkcs1", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EncryptPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayAddSubAdminsOutput</returns>
        public GatewayAddSubAdminsOutput GatewayAddSubAdmins (GatewayAddSubAdmins body)
        {
             akeyless.Client.ApiResponse<GatewayAddSubAdminsOutput> localVarResponse = GatewayAddSubAdminsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayAddSubAdminsOutput</returns>
        public akeyless.Client.ApiResponse< GatewayAddSubAdminsOutput > GatewayAddSubAdminsWithHttpInfo (GatewayAddSubAdmins body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayAddSubAdmins");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayAddSubAdminsOutput >("/gateway-add-sub-admins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayAddSubAdmins", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayAddSubAdminsOutput</returns>
        public async System.Threading.Tasks.Task<GatewayAddSubAdminsOutput> GatewayAddSubAdminsAsync (GatewayAddSubAdmins body)
        {
             akeyless.Client.ApiResponse<GatewayAddSubAdminsOutput> localVarResponse = await GatewayAddSubAdminsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayAddSubAdminsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayAddSubAdminsOutput>> GatewayAddSubAdminsAsyncWithHttpInfo (GatewayAddSubAdmins body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayAddSubAdmins");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayAddSubAdminsOutput>("/gateway-add-sub-admins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayAddSubAdmins", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerArtifactoryOutput</returns>
        public GatewayCreateProducerArtifactoryOutput GatewayCreateProducerArtifactory (GatewayCreateProducerArtifactory body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerArtifactoryOutput> localVarResponse = GatewayCreateProducerArtifactoryWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerArtifactoryOutput</returns>
        public akeyless.Client.ApiResponse< GatewayCreateProducerArtifactoryOutput > GatewayCreateProducerArtifactoryWithHttpInfo (GatewayCreateProducerArtifactory body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerArtifactory");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayCreateProducerArtifactoryOutput >("/gateway-create-producer-artifactory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerArtifactory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerArtifactoryOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerArtifactoryOutput> GatewayCreateProducerArtifactoryAsync (GatewayCreateProducerArtifactory body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerArtifactoryOutput> localVarResponse = await GatewayCreateProducerArtifactoryAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerArtifactoryOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerArtifactoryOutput>> GatewayCreateProducerArtifactoryAsyncWithHttpInfo (GatewayCreateProducerArtifactory body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerArtifactory");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerArtifactoryOutput>("/gateway-create-producer-artifactory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerArtifactory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerAwsOutput</returns>
        public GatewayCreateProducerAwsOutput GatewayCreateProducerAws (GatewayCreateProducerAws body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerAwsOutput> localVarResponse = GatewayCreateProducerAwsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerAwsOutput</returns>
        public akeyless.Client.ApiResponse< GatewayCreateProducerAwsOutput > GatewayCreateProducerAwsWithHttpInfo (GatewayCreateProducerAws body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerAws");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayCreateProducerAwsOutput >("/gateway-create-producer-aws", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerAws", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerAwsOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerAwsOutput> GatewayCreateProducerAwsAsync (GatewayCreateProducerAws body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerAwsOutput> localVarResponse = await GatewayCreateProducerAwsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerAwsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerAwsOutput>> GatewayCreateProducerAwsAsyncWithHttpInfo (GatewayCreateProducerAws body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerAws");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerAwsOutput>("/gateway-create-producer-aws", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerAws", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerAzureOutput</returns>
        public GatewayCreateProducerAzureOutput GatewayCreateProducerAzure (GatewayCreateProducerAzure body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerAzureOutput> localVarResponse = GatewayCreateProducerAzureWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerAzureOutput</returns>
        public akeyless.Client.ApiResponse< GatewayCreateProducerAzureOutput > GatewayCreateProducerAzureWithHttpInfo (GatewayCreateProducerAzure body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerAzure");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayCreateProducerAzureOutput >("/gateway-create-producer-azure", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerAzure", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerAzureOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerAzureOutput> GatewayCreateProducerAzureAsync (GatewayCreateProducerAzure body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerAzureOutput> localVarResponse = await GatewayCreateProducerAzureAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerAzureOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerAzureOutput>> GatewayCreateProducerAzureAsyncWithHttpInfo (GatewayCreateProducerAzure body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerAzure");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerAzureOutput>("/gateway-create-producer-azure", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerAzure", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerCertificateAutomationOutput</returns>
        public GatewayCreateProducerCertificateAutomationOutput GatewayCreateProducerCertificateAutomation (GatewayCreateProducerCertificateAutomation body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerCertificateAutomationOutput> localVarResponse = GatewayCreateProducerCertificateAutomationWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerCertificateAutomationOutput</returns>
        public akeyless.Client.ApiResponse< GatewayCreateProducerCertificateAutomationOutput > GatewayCreateProducerCertificateAutomationWithHttpInfo (GatewayCreateProducerCertificateAutomation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerCertificateAutomation");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayCreateProducerCertificateAutomationOutput >("/gateway-create-producer-certificate-automation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerCertificateAutomation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerCertificateAutomationOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerCertificateAutomationOutput> GatewayCreateProducerCertificateAutomationAsync (GatewayCreateProducerCertificateAutomation body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerCertificateAutomationOutput> localVarResponse = await GatewayCreateProducerCertificateAutomationAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerCertificateAutomationOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerCertificateAutomationOutput>> GatewayCreateProducerCertificateAutomationAsyncWithHttpInfo (GatewayCreateProducerCertificateAutomation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerCertificateAutomation");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerCertificateAutomationOutput>("/gateway-create-producer-certificate-automation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerCertificateAutomation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GatewayCreateProducerCustomOutput</returns>
        public GatewayCreateProducerCustomOutput GatewayCreateProducerCustom (GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom))
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerCustomOutput> localVarResponse = GatewayCreateProducerCustomWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GatewayCreateProducerCustomOutput</returns>
        public akeyless.Client.ApiResponse< GatewayCreateProducerCustomOutput > GatewayCreateProducerCustomWithHttpInfo (GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayCreateProducerCustomOutput >("/gateway-create-producer-custom", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerCustom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GatewayCreateProducerCustomOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerCustomOutput> GatewayCreateProducerCustomAsync (GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom))
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerCustomOutput> localVarResponse = await GatewayCreateProducerCustomAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerCustomOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerCustomOutput>> GatewayCreateProducerCustomAsyncWithHttpInfo (GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerCustomOutput>("/gateway-create-producer-custom", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerCustom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerEksOutput</returns>
        public GatewayCreateProducerEksOutput GatewayCreateProducerEks (GatewayCreateProducerEks body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerEksOutput> localVarResponse = GatewayCreateProducerEksWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerEksOutput</returns>
        public akeyless.Client.ApiResponse< GatewayCreateProducerEksOutput > GatewayCreateProducerEksWithHttpInfo (GatewayCreateProducerEks body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerEks");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayCreateProducerEksOutput >("/gateway-create-producer-eks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerEks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerEksOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerEksOutput> GatewayCreateProducerEksAsync (GatewayCreateProducerEks body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerEksOutput> localVarResponse = await GatewayCreateProducerEksAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerEksOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerEksOutput>> GatewayCreateProducerEksAsyncWithHttpInfo (GatewayCreateProducerEks body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerEks");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerEksOutput>("/gateway-create-producer-eks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerEks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerGcpOutput</returns>
        public GatewayCreateProducerGcpOutput GatewayCreateProducerGcp (GatewayCreateProducerGcp body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerGcpOutput> localVarResponse = GatewayCreateProducerGcpWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerGcpOutput</returns>
        public akeyless.Client.ApiResponse< GatewayCreateProducerGcpOutput > GatewayCreateProducerGcpWithHttpInfo (GatewayCreateProducerGcp body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerGcp");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayCreateProducerGcpOutput >("/gateway-create-producer-gcp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerGcp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerGcpOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerGcpOutput> GatewayCreateProducerGcpAsync (GatewayCreateProducerGcp body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerGcpOutput> localVarResponse = await GatewayCreateProducerGcpAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerGcpOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerGcpOutput>> GatewayCreateProducerGcpAsyncWithHttpInfo (GatewayCreateProducerGcp body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerGcp");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerGcpOutput>("/gateway-create-producer-gcp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerGcp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerGkeOutput</returns>
        public GatewayCreateProducerGkeOutput GatewayCreateProducerGke (GatewayCreateProducerGke body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerGkeOutput> localVarResponse = GatewayCreateProducerGkeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerGkeOutput</returns>
        public akeyless.Client.ApiResponse< GatewayCreateProducerGkeOutput > GatewayCreateProducerGkeWithHttpInfo (GatewayCreateProducerGke body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerGke");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayCreateProducerGkeOutput >("/gateway-create-producer-gke", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerGke", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerGkeOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerGkeOutput> GatewayCreateProducerGkeAsync (GatewayCreateProducerGke body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerGkeOutput> localVarResponse = await GatewayCreateProducerGkeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerGkeOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerGkeOutput>> GatewayCreateProducerGkeAsyncWithHttpInfo (GatewayCreateProducerGke body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerGke");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerGkeOutput>("/gateway-create-producer-gke", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerGke", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerMSSQLOutput</returns>
        public GatewayCreateProducerMSSQLOutput GatewayCreateProducerMSSQL (GatewayCreateProducerMSSQL body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerMSSQLOutput> localVarResponse = GatewayCreateProducerMSSQLWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerMSSQLOutput</returns>
        public akeyless.Client.ApiResponse< GatewayCreateProducerMSSQLOutput > GatewayCreateProducerMSSQLWithHttpInfo (GatewayCreateProducerMSSQL body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerMSSQL");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayCreateProducerMSSQLOutput >("/gateway-create-producer-mssql", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerMSSQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerMSSQLOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerMSSQLOutput> GatewayCreateProducerMSSQLAsync (GatewayCreateProducerMSSQL body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerMSSQLOutput> localVarResponse = await GatewayCreateProducerMSSQLAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerMSSQLOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerMSSQLOutput>> GatewayCreateProducerMSSQLAsyncWithHttpInfo (GatewayCreateProducerMSSQL body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerMSSQL");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerMSSQLOutput>("/gateway-create-producer-mssql", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerMSSQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerMongoOutput</returns>
        public GatewayCreateProducerMongoOutput GatewayCreateProducerMongo (GatewayCreateProducerMongo body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerMongoOutput> localVarResponse = GatewayCreateProducerMongoWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerMongoOutput</returns>
        public akeyless.Client.ApiResponse< GatewayCreateProducerMongoOutput > GatewayCreateProducerMongoWithHttpInfo (GatewayCreateProducerMongo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerMongo");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayCreateProducerMongoOutput >("/gateway-create-producer-mongo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerMongo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerMongoOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerMongoOutput> GatewayCreateProducerMongoAsync (GatewayCreateProducerMongo body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerMongoOutput> localVarResponse = await GatewayCreateProducerMongoAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerMongoOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerMongoOutput>> GatewayCreateProducerMongoAsyncWithHttpInfo (GatewayCreateProducerMongo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerMongo");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerMongoOutput>("/gateway-create-producer-mongo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerMongo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerMySQLOutput</returns>
        public GatewayCreateProducerMySQLOutput GatewayCreateProducerMySQL (GatewayCreateProducerMySQL body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerMySQLOutput> localVarResponse = GatewayCreateProducerMySQLWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerMySQLOutput</returns>
        public akeyless.Client.ApiResponse< GatewayCreateProducerMySQLOutput > GatewayCreateProducerMySQLWithHttpInfo (GatewayCreateProducerMySQL body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerMySQL");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayCreateProducerMySQLOutput >("/gateway-create-producer-mysql", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerMySQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerMySQLOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerMySQLOutput> GatewayCreateProducerMySQLAsync (GatewayCreateProducerMySQL body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerMySQLOutput> localVarResponse = await GatewayCreateProducerMySQLAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerMySQLOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerMySQLOutput>> GatewayCreateProducerMySQLAsyncWithHttpInfo (GatewayCreateProducerMySQL body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerMySQL");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerMySQLOutput>("/gateway-create-producer-mysql", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerMySQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerPostgreSQLOutput</returns>
        public GatewayCreateProducerPostgreSQLOutput GatewayCreateProducerPostgreSQL (GatewayCreateProducerPostgreSQL body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerPostgreSQLOutput> localVarResponse = GatewayCreateProducerPostgreSQLWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerPostgreSQLOutput</returns>
        public akeyless.Client.ApiResponse< GatewayCreateProducerPostgreSQLOutput > GatewayCreateProducerPostgreSQLWithHttpInfo (GatewayCreateProducerPostgreSQL body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerPostgreSQL");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayCreateProducerPostgreSQLOutput >("/gateway-create-producer-postgresql", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerPostgreSQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerPostgreSQLOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerPostgreSQLOutput> GatewayCreateProducerPostgreSQLAsync (GatewayCreateProducerPostgreSQL body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerPostgreSQLOutput> localVarResponse = await GatewayCreateProducerPostgreSQLAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerPostgreSQLOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerPostgreSQLOutput>> GatewayCreateProducerPostgreSQLAsyncWithHttpInfo (GatewayCreateProducerPostgreSQL body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerPostgreSQL");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerPostgreSQLOutput>("/gateway-create-producer-postgresql", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerPostgreSQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerRabbitMQOutput</returns>
        public GatewayCreateProducerRabbitMQOutput GatewayCreateProducerRabbitMQ (GatewayCreateProducerRabbitMQ body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerRabbitMQOutput> localVarResponse = GatewayCreateProducerRabbitMQWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerRabbitMQOutput</returns>
        public akeyless.Client.ApiResponse< GatewayCreateProducerRabbitMQOutput > GatewayCreateProducerRabbitMQWithHttpInfo (GatewayCreateProducerRabbitMQ body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerRabbitMQ");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayCreateProducerRabbitMQOutput >("/gateway-create-producer-rabbitmq", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerRabbitMQ", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerRabbitMQOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerRabbitMQOutput> GatewayCreateProducerRabbitMQAsync (GatewayCreateProducerRabbitMQ body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerRabbitMQOutput> localVarResponse = await GatewayCreateProducerRabbitMQAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerRabbitMQOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerRabbitMQOutput>> GatewayCreateProducerRabbitMQAsyncWithHttpInfo (GatewayCreateProducerRabbitMQ body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerRabbitMQ");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerRabbitMQOutput>("/gateway-create-producer-rabbitmq", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerRabbitMQ", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerRdpOutput</returns>
        public GatewayCreateProducerRdpOutput GatewayCreateProducerRdp (GatewayCreateProducerRdp body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerRdpOutput> localVarResponse = GatewayCreateProducerRdpWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerRdpOutput</returns>
        public akeyless.Client.ApiResponse< GatewayCreateProducerRdpOutput > GatewayCreateProducerRdpWithHttpInfo (GatewayCreateProducerRdp body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerRdp");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayCreateProducerRdpOutput >("/gateway-create-producer-rdp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerRdp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayCreateProducerRdpOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerRdpOutput> GatewayCreateProducerRdpAsync (GatewayCreateProducerRdp body)
        {
             akeyless.Client.ApiResponse<GatewayCreateProducerRdpOutput> localVarResponse = await GatewayCreateProducerRdpAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerRdpOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerRdpOutput>> GatewayCreateProducerRdpAsyncWithHttpInfo (GatewayCreateProducerRdp body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerRdp");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerRdpOutput>("/gateway-create-producer-rdp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerRdp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayDeleteProducerOutput</returns>
        public GatewayDeleteProducerOutput GatewayDeleteProducer (GatewayDeleteProducer body)
        {
             akeyless.Client.ApiResponse<GatewayDeleteProducerOutput> localVarResponse = GatewayDeleteProducerWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayDeleteProducerOutput</returns>
        public akeyless.Client.ApiResponse< GatewayDeleteProducerOutput > GatewayDeleteProducerWithHttpInfo (GatewayDeleteProducer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayDeleteProducer");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayDeleteProducerOutput >("/gateway-delete-producer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayDeleteProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayDeleteProducerOutput</returns>
        public async System.Threading.Tasks.Task<GatewayDeleteProducerOutput> GatewayDeleteProducerAsync (GatewayDeleteProducer body)
        {
             akeyless.Client.ApiResponse<GatewayDeleteProducerOutput> localVarResponse = await GatewayDeleteProducerAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayDeleteProducerOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayDeleteProducerOutput>> GatewayDeleteProducerAsyncWithHttpInfo (GatewayDeleteProducer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayDeleteProducer");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayDeleteProducerOutput>("/gateway-delete-producer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayDeleteProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayDeleteSubAdminsOutput</returns>
        public GatewayDeleteSubAdminsOutput GatewayDeleteSubAdmins (GatewayDeleteSubAdmins body)
        {
             akeyless.Client.ApiResponse<GatewayDeleteSubAdminsOutput> localVarResponse = GatewayDeleteSubAdminsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayDeleteSubAdminsOutput</returns>
        public akeyless.Client.ApiResponse< GatewayDeleteSubAdminsOutput > GatewayDeleteSubAdminsWithHttpInfo (GatewayDeleteSubAdmins body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayDeleteSubAdmins");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayDeleteSubAdminsOutput >("/gateway-delete-sub-admins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayDeleteSubAdmins", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayDeleteSubAdminsOutput</returns>
        public async System.Threading.Tasks.Task<GatewayDeleteSubAdminsOutput> GatewayDeleteSubAdminsAsync (GatewayDeleteSubAdmins body)
        {
             akeyless.Client.ApiResponse<GatewayDeleteSubAdminsOutput> localVarResponse = await GatewayDeleteSubAdminsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayDeleteSubAdminsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayDeleteSubAdminsOutput>> GatewayDeleteSubAdminsAsyncWithHttpInfo (GatewayDeleteSubAdmins body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayDeleteSubAdmins");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayDeleteSubAdminsOutput>("/gateway-delete-sub-admins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayDeleteSubAdmins", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AkeylessGatewayConfig</returns>
        public AkeylessGatewayConfig GatewayGetConfig (GatewayGetConfig body)
        {
             akeyless.Client.ApiResponse<AkeylessGatewayConfig> localVarResponse = GatewayGetConfigWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AkeylessGatewayConfig</returns>
        public akeyless.Client.ApiResponse< AkeylessGatewayConfig > GatewayGetConfigWithHttpInfo (GatewayGetConfig body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayGetConfig");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< AkeylessGatewayConfig >("/gateway-get-config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayGetConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AkeylessGatewayConfig</returns>
        public async System.Threading.Tasks.Task<AkeylessGatewayConfig> GatewayGetConfigAsync (GatewayGetConfig body)
        {
             akeyless.Client.ApiResponse<AkeylessGatewayConfig> localVarResponse = await GatewayGetConfigAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AkeylessGatewayConfig)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<AkeylessGatewayConfig>> GatewayGetConfigAsyncWithHttpInfo (GatewayGetConfig body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayGetConfig");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AkeylessGatewayConfig>("/gateway-get-config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayGetConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DSProducerDetails</returns>
        public DSProducerDetails GatewayGetProducer (GatewayGetProducer body)
        {
             akeyless.Client.ApiResponse<DSProducerDetails> localVarResponse = GatewayGetProducerWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DSProducerDetails</returns>
        public akeyless.Client.ApiResponse< DSProducerDetails > GatewayGetProducerWithHttpInfo (GatewayGetProducer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayGetProducer");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< DSProducerDetails >("/gateway-get-producer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayGetProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DSProducerDetails</returns>
        public async System.Threading.Tasks.Task<DSProducerDetails> GatewayGetProducerAsync (GatewayGetProducer body)
        {
             akeyless.Client.ApiResponse<DSProducerDetails> localVarResponse = await GatewayGetProducerAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DSProducerDetails)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DSProducerDetails>> GatewayGetProducerAsyncWithHttpInfo (GatewayGetProducer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayGetProducer");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DSProducerDetails>("/gateway-get-producer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayGetProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;TmpUserData&gt;</returns>
        public List<TmpUserData> GatewayGetTmpUsers (GatewayGetTmpUsers body)
        {
             akeyless.Client.ApiResponse<List<TmpUserData>> localVarResponse = GatewayGetTmpUsersWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;TmpUserData&gt;</returns>
        public akeyless.Client.ApiResponse< List<TmpUserData> > GatewayGetTmpUsersWithHttpInfo (GatewayGetTmpUsers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayGetTmpUsers");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< List<TmpUserData> >("/gateway-get-producer-tmp-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayGetTmpUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;TmpUserData&gt;</returns>
        public async System.Threading.Tasks.Task<List<TmpUserData>> GatewayGetTmpUsersAsync (GatewayGetTmpUsers body)
        {
             akeyless.Client.ApiResponse<List<TmpUserData>> localVarResponse = await GatewayGetTmpUsersAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;TmpUserData&gt;)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<List<TmpUserData>>> GatewayGetTmpUsersAsyncWithHttpInfo (GatewayGetTmpUsers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayGetTmpUsers");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<TmpUserData>>("/gateway-get-producer-tmp-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayGetTmpUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetProducersListReplyObj</returns>
        public GetProducersListReplyObj GatewayListProducers (GatewayListProducers body)
        {
             akeyless.Client.ApiResponse<GetProducersListReplyObj> localVarResponse = GatewayListProducersWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetProducersListReplyObj</returns>
        public akeyless.Client.ApiResponse< GetProducersListReplyObj > GatewayListProducersWithHttpInfo (GatewayListProducers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayListProducers");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GetProducersListReplyObj >("/gateway-list-producers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayListProducers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetProducersListReplyObj</returns>
        public async System.Threading.Tasks.Task<GetProducersListReplyObj> GatewayListProducersAsync (GatewayListProducers body)
        {
             akeyless.Client.ApiResponse<GetProducersListReplyObj> localVarResponse = await GatewayListProducersAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetProducersListReplyObj)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GetProducersListReplyObj>> GatewayListProducersAsyncWithHttpInfo (GatewayListProducers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayListProducers");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetProducersListReplyObj>("/gateway-list-producers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayListProducers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetSubAdminsListReplyObj</returns>
        public GetSubAdminsListReplyObj GatewayListSubAdmins (GatewayListSubAdmins body)
        {
             akeyless.Client.ApiResponse<GetSubAdminsListReplyObj> localVarResponse = GatewayListSubAdminsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetSubAdminsListReplyObj</returns>
        public akeyless.Client.ApiResponse< GetSubAdminsListReplyObj > GatewayListSubAdminsWithHttpInfo (GatewayListSubAdmins body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayListSubAdmins");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GetSubAdminsListReplyObj >("/gateway-list-SubAdmins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayListSubAdmins", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetSubAdminsListReplyObj</returns>
        public async System.Threading.Tasks.Task<GetSubAdminsListReplyObj> GatewayListSubAdminsAsync (GatewayListSubAdmins body)
        {
             akeyless.Client.ApiResponse<GetSubAdminsListReplyObj> localVarResponse = await GatewayListSubAdminsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetSubAdminsListReplyObj)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GetSubAdminsListReplyObj>> GatewayListSubAdminsAsyncWithHttpInfo (GatewayListSubAdmins body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayListSubAdmins");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSubAdminsListReplyObj>("/gateway-list-SubAdmins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayListSubAdmins", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void GatewayRevokeTmpUsers (GatewayRevokeTmpUsers body)
        {
             GatewayRevokeTmpUsersWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public akeyless.Client.ApiResponse<Object> GatewayRevokeTmpUsersWithHttpInfo (GatewayRevokeTmpUsers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayRevokeTmpUsers");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gateway-revoke-producer-tmp-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayRevokeTmpUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GatewayRevokeTmpUsersAsync (GatewayRevokeTmpUsers body)
        {
             await GatewayRevokeTmpUsersAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> GatewayRevokeTmpUsersAsyncWithHttpInfo (GatewayRevokeTmpUsers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayRevokeTmpUsers");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gateway-revoke-producer-tmp-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayRevokeTmpUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayStartProducerOutput</returns>
        public GatewayStartProducerOutput GatewayStartProducer (GatewayStartProducer body)
        {
             akeyless.Client.ApiResponse<GatewayStartProducerOutput> localVarResponse = GatewayStartProducerWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayStartProducerOutput</returns>
        public akeyless.Client.ApiResponse< GatewayStartProducerOutput > GatewayStartProducerWithHttpInfo (GatewayStartProducer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayStartProducer");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayStartProducerOutput >("/gateway-start-producer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayStartProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayStartProducerOutput</returns>
        public async System.Threading.Tasks.Task<GatewayStartProducerOutput> GatewayStartProducerAsync (GatewayStartProducer body)
        {
             akeyless.Client.ApiResponse<GatewayStartProducerOutput> localVarResponse = await GatewayStartProducerAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayStartProducerOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayStartProducerOutput>> GatewayStartProducerAsyncWithHttpInfo (GatewayStartProducer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayStartProducer");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayStartProducerOutput>("/gateway-start-producer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayStartProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayStopProducerOutput</returns>
        public GatewayStopProducerOutput GatewayStopProducer (GatewayStopProducer body)
        {
             akeyless.Client.ApiResponse<GatewayStopProducerOutput> localVarResponse = GatewayStopProducerWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayStopProducerOutput</returns>
        public akeyless.Client.ApiResponse< GatewayStopProducerOutput > GatewayStopProducerWithHttpInfo (GatewayStopProducer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayStopProducer");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GatewayStopProducerOutput >("/gateway-stop-producer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayStopProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GatewayStopProducerOutput</returns>
        public async System.Threading.Tasks.Task<GatewayStopProducerOutput> GatewayStopProducerAsync (GatewayStopProducer body)
        {
             akeyless.Client.ApiResponse<GatewayStopProducerOutput> localVarResponse = await GatewayStopProducerAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GatewayStopProducerOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayStopProducerOutput>> GatewayStopProducerAsyncWithHttpInfo (GatewayStopProducer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayStopProducer");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayStopProducerOutput>("/gateway-stop-producer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayStopProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GatewayUpdateItem ()
        {
             GatewayUpdateItemWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public akeyless.Client.ApiResponse<Object> GatewayUpdateItemWithHttpInfo ()
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/update-managed-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GatewayUpdateItemAsync ()
        {
             await GatewayUpdateItemAsyncWithHttpInfo();

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> GatewayUpdateItemAsyncWithHttpInfo ()
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/update-managed-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void GatewayUpdateTmpUsers (GatewayUpdateTmpUsers body)
        {
             GatewayUpdateTmpUsersWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public akeyless.Client.ApiResponse<Object> GatewayUpdateTmpUsersWithHttpInfo (GatewayUpdateTmpUsers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateTmpUsers");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gateway-update-producer-tmp-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateTmpUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GatewayUpdateTmpUsersAsync (GatewayUpdateTmpUsers body)
        {
             await GatewayUpdateTmpUsersAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> GatewayUpdateTmpUsersAsyncWithHttpInfo (GatewayUpdateTmpUsers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateTmpUsers");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gateway-update-producer-tmp-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateTmpUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetAccountLogo ()
        {
             akeyless.Client.ApiResponse<Dictionary<string, string>> localVarResponse = GetAccountLogoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public akeyless.Client.ApiResponse< Dictionary<string, string> > GetAccountLogoWithHttpInfo ()
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post< Dictionary<string, string> >("/get-account-logo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> GetAccountLogoAsync ()
        {
             akeyless.Client.ApiResponse<Dictionary<string, string>> localVarResponse = await GetAccountLogoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Dictionary<string, string>>> GetAccountLogoAsyncWithHttpInfo ()
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, string>>("/get-account-logo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthMethod</returns>
        public AuthMethod GetAuthMethod (GetAuthMethod body)
        {
             akeyless.Client.ApiResponse<AuthMethod> localVarResponse = GetAuthMethodWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthMethod</returns>
        public akeyless.Client.ApiResponse< AuthMethod > GetAuthMethodWithHttpInfo (GetAuthMethod body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetAuthMethod");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< AuthMethod >("/get-auth-method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AuthMethod</returns>
        public async System.Threading.Tasks.Task<AuthMethod> GetAuthMethodAsync (GetAuthMethod body)
        {
             akeyless.Client.ApiResponse<AuthMethod> localVarResponse = await GetAuthMethodAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AuthMethod)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<AuthMethod>> GetAuthMethodAsyncWithHttpInfo (GetAuthMethod body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetAuthMethod");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthMethod>("/get-auth-method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetDynamicSecretValue (GetDynamicSecretValue body)
        {
             akeyless.Client.ApiResponse<Dictionary<string, string>> localVarResponse = GetDynamicSecretValueWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public akeyless.Client.ApiResponse< Dictionary<string, string> > GetDynamicSecretValueWithHttpInfo (GetDynamicSecretValue body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetDynamicSecretValue");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Dictionary<string, string> >("/get-dynamic-secret-value", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDynamicSecretValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> GetDynamicSecretValueAsync (GetDynamicSecretValue body)
        {
             akeyless.Client.ApiResponse<Dictionary<string, string>> localVarResponse = await GetDynamicSecretValueAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Dictionary<string, string>>> GetDynamicSecretValueAsyncWithHttpInfo (GetDynamicSecretValue body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetDynamicSecretValue");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, string>>("/get-dynamic-secret-value", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDynamicSecretValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetKubeExecCredsOutput</returns>
        public GetKubeExecCredsOutput GetKubeExecCreds (GetKubeExecCreds body)
        {
             akeyless.Client.ApiResponse<GetKubeExecCredsOutput> localVarResponse = GetKubeExecCredsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetKubeExecCredsOutput</returns>
        public akeyless.Client.ApiResponse< GetKubeExecCredsOutput > GetKubeExecCredsWithHttpInfo (GetKubeExecCreds body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetKubeExecCreds");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GetKubeExecCredsOutput >("/get-kube-exec-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKubeExecCreds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetKubeExecCredsOutput</returns>
        public async System.Threading.Tasks.Task<GetKubeExecCredsOutput> GetKubeExecCredsAsync (GetKubeExecCreds body)
        {
             akeyless.Client.ApiResponse<GetKubeExecCredsOutput> localVarResponse = await GetKubeExecCredsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetKubeExecCredsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GetKubeExecCredsOutput>> GetKubeExecCredsAsyncWithHttpInfo (GetKubeExecCreds body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetKubeExecCreds");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetKubeExecCredsOutput>("/get-kube-exec-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKubeExecCreds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetPKICertificateOutput</returns>
        public GetPKICertificateOutput GetPKICertificate ()
        {
             akeyless.Client.ApiResponse<GetPKICertificateOutput> localVarResponse = GetPKICertificateWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetPKICertificateOutput</returns>
        public akeyless.Client.ApiResponse< GetPKICertificateOutput > GetPKICertificateWithHttpInfo ()
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post< GetPKICertificateOutput >("/get-pki-certificate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPKICertificate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetPKICertificateOutput</returns>
        public async System.Threading.Tasks.Task<GetPKICertificateOutput> GetPKICertificateAsync ()
        {
             akeyless.Client.ApiResponse<GetPKICertificateOutput> localVarResponse = await GetPKICertificateAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetPKICertificateOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GetPKICertificateOutput>> GetPKICertificateAsyncWithHttpInfo ()
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetPKICertificateOutput>("/get-pki-certificate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPKICertificate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetRSAPublicOutput</returns>
        public GetRSAPublicOutput GetRSAPublic (GetRSAPublic body)
        {
             akeyless.Client.ApiResponse<GetRSAPublicOutput> localVarResponse = GetRSAPublicWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetRSAPublicOutput</returns>
        public akeyless.Client.ApiResponse< GetRSAPublicOutput > GetRSAPublicWithHttpInfo (GetRSAPublic body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetRSAPublic");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GetRSAPublicOutput >("/get-rsa-public", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRSAPublic", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetRSAPublicOutput</returns>
        public async System.Threading.Tasks.Task<GetRSAPublicOutput> GetRSAPublicAsync (GetRSAPublic body)
        {
             akeyless.Client.ApiResponse<GetRSAPublicOutput> localVarResponse = await GetRSAPublicAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetRSAPublicOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GetRSAPublicOutput>> GetRSAPublicAsyncWithHttpInfo (GetRSAPublic body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetRSAPublic");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetRSAPublicOutput>("/get-rsa-public", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRSAPublic", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Role</returns>
        public Role GetRole (GetRole body)
        {
             akeyless.Client.ApiResponse<Role> localVarResponse = GetRoleWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Role</returns>
        public akeyless.Client.ApiResponse< Role > GetRoleWithHttpInfo (GetRole body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetRole");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Role >("/get-role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> GetRoleAsync (GetRole body)
        {
             akeyless.Client.ApiResponse<Role> localVarResponse = await GetRoleAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Role>> GetRoleAsyncWithHttpInfo (GetRole body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetRole");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Role>("/get-role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetRotatedSecretValue (GetRotatedSecretValue body)
        {
             akeyless.Client.ApiResponse<Dictionary<string, string>> localVarResponse = GetRotatedSecretValueWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public akeyless.Client.ApiResponse< Dictionary<string, string> > GetRotatedSecretValueWithHttpInfo (GetRotatedSecretValue body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetRotatedSecretValue");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Dictionary<string, string> >("/get-rotated-secret-value", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRotatedSecretValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> GetRotatedSecretValueAsync (GetRotatedSecretValue body)
        {
             akeyless.Client.ApiResponse<Dictionary<string, string>> localVarResponse = await GetRotatedSecretValueAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Dictionary<string, string>>> GetRotatedSecretValueAsyncWithHttpInfo (GetRotatedSecretValue body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetRotatedSecretValue");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, string>>("/get-rotated-secret-value", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRotatedSecretValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetSSHCertificateOutput</returns>
        public GetSSHCertificateOutput GetSSHCertificate (GetSSHCertificate body)
        {
             akeyless.Client.ApiResponse<GetSSHCertificateOutput> localVarResponse = GetSSHCertificateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetSSHCertificateOutput</returns>
        public akeyless.Client.ApiResponse< GetSSHCertificateOutput > GetSSHCertificateWithHttpInfo (GetSSHCertificate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetSSHCertificate");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GetSSHCertificateOutput >("/get-ssh-certificate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSSHCertificate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetSSHCertificateOutput</returns>
        public async System.Threading.Tasks.Task<GetSSHCertificateOutput> GetSSHCertificateAsync (GetSSHCertificate body)
        {
             akeyless.Client.ApiResponse<GetSSHCertificateOutput> localVarResponse = await GetSSHCertificateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetSSHCertificateOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GetSSHCertificateOutput>> GetSSHCertificateAsyncWithHttpInfo (GetSSHCertificate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetSSHCertificate");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSSHCertificateOutput>("/get-ssh-certificate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSSHCertificate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetSecretValue (GetSecretValue body)
        {
             akeyless.Client.ApiResponse<Dictionary<string, string>> localVarResponse = GetSecretValueWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public akeyless.Client.ApiResponse< Dictionary<string, string> > GetSecretValueWithHttpInfo (GetSecretValue body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetSecretValue");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Dictionary<string, string> >("/get-secret-value", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> GetSecretValueAsync (GetSecretValue body)
        {
             akeyless.Client.ApiResponse<Dictionary<string, string>> localVarResponse = await GetSecretValueAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Dictionary<string, string>>> GetSecretValueAsyncWithHttpInfo (GetSecretValue body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetSecretValue");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, string>>("/get-secret-value", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Target</returns>
        public Target GetTarget (GetTarget body)
        {
             akeyless.Client.ApiResponse<Target> localVarResponse = GetTargetWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Target</returns>
        public akeyless.Client.ApiResponse< Target > GetTargetWithHttpInfo (GetTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Target >("/get-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Target</returns>
        public async System.Threading.Tasks.Task<Target> GetTargetAsync (GetTarget body)
        {
             akeyless.Client.ApiResponse<Target> localVarResponse = await GetTargetAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Target)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Target>> GetTargetAsyncWithHttpInfo (GetTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Target>("/get-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetTargetDetailsOutput</returns>
        public GetTargetDetailsOutput GetTargetDetails (GetTargetDetails body)
        {
             akeyless.Client.ApiResponse<GetTargetDetailsOutput> localVarResponse = GetTargetDetailsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetTargetDetailsOutput</returns>
        public akeyless.Client.ApiResponse< GetTargetDetailsOutput > GetTargetDetailsWithHttpInfo (GetTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< GetTargetDetailsOutput >("/get-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetTargetDetailsOutput</returns>
        public async System.Threading.Tasks.Task<GetTargetDetailsOutput> GetTargetDetailsAsync (GetTargetDetails body)
        {
             akeyless.Client.ApiResponse<GetTargetDetailsOutput> localVarResponse = await GetTargetDetailsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetTargetDetailsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GetTargetDetailsOutput>> GetTargetDetailsAsyncWithHttpInfo (GetTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetTargetDetailsOutput>("/get-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListAuthMethodsOutput</returns>
        public ListAuthMethodsOutput ListAuthMethods (ListAuthMethods body)
        {
             akeyless.Client.ApiResponse<ListAuthMethodsOutput> localVarResponse = ListAuthMethodsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListAuthMethodsOutput</returns>
        public akeyless.Client.ApiResponse< ListAuthMethodsOutput > ListAuthMethodsWithHttpInfo (ListAuthMethods body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListAuthMethods");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< ListAuthMethodsOutput >("/list-auth-methods", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAuthMethods", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ListAuthMethodsOutput</returns>
        public async System.Threading.Tasks.Task<ListAuthMethodsOutput> ListAuthMethodsAsync (ListAuthMethods body)
        {
             akeyless.Client.ApiResponse<ListAuthMethodsOutput> localVarResponse = await ListAuthMethodsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ListAuthMethodsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<ListAuthMethodsOutput>> ListAuthMethodsAsyncWithHttpInfo (ListAuthMethods body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListAuthMethods");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ListAuthMethodsOutput>("/list-auth-methods", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAuthMethods", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListItemsInPathOutput</returns>
        public ListItemsInPathOutput ListItems (ListItems body)
        {
             akeyless.Client.ApiResponse<ListItemsInPathOutput> localVarResponse = ListItemsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListItemsInPathOutput</returns>
        public akeyless.Client.ApiResponse< ListItemsInPathOutput > ListItemsWithHttpInfo (ListItems body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListItems");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< ListItemsInPathOutput >("/list-items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ListItemsInPathOutput</returns>
        public async System.Threading.Tasks.Task<ListItemsInPathOutput> ListItemsAsync (ListItems body)
        {
             akeyless.Client.ApiResponse<ListItemsInPathOutput> localVarResponse = await ListItemsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ListItemsInPathOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<ListItemsInPathOutput>> ListItemsAsyncWithHttpInfo (ListItems body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListItems");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ListItemsInPathOutput>("/list-items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListRolesOutput</returns>
        public ListRolesOutput ListRoles (ListRoles body)
        {
             akeyless.Client.ApiResponse<ListRolesOutput> localVarResponse = ListRolesWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListRolesOutput</returns>
        public akeyless.Client.ApiResponse< ListRolesOutput > ListRolesWithHttpInfo (ListRoles body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListRoles");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< ListRolesOutput >("/list-roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ListRolesOutput</returns>
        public async System.Threading.Tasks.Task<ListRolesOutput> ListRolesAsync (ListRoles body)
        {
             akeyless.Client.ApiResponse<ListRolesOutput> localVarResponse = await ListRolesAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ListRolesOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<ListRolesOutput>> ListRolesAsyncWithHttpInfo (ListRoles body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListRoles");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ListRolesOutput>("/list-roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListTargetsOutput</returns>
        public ListTargetsOutput ListTargets (ListTargets body)
        {
             akeyless.Client.ApiResponse<ListTargetsOutput> localVarResponse = ListTargetsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListTargetsOutput</returns>
        public akeyless.Client.ApiResponse< ListTargetsOutput > ListTargetsWithHttpInfo (ListTargets body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListTargets");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< ListTargetsOutput >("/list-targets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTargets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ListTargetsOutput</returns>
        public async System.Threading.Tasks.Task<ListTargetsOutput> ListTargetsAsync (ListTargets body)
        {
             akeyless.Client.ApiResponse<ListTargetsOutput> localVarResponse = await ListTargetsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ListTargetsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<ListTargetsOutput>> ListTargetsAsyncWithHttpInfo (ListTargets body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListTargets");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ListTargetsOutput>("/list-targets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTargets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object MoveObjects (MoveObjects body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = MoveObjectsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse< Object > MoveObjectsWithHttpInfo (MoveObjects body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->MoveObjects");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/move-objects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MoveObjectsAsync (MoveObjects body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = await MoveObjectsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> MoveObjectsAsyncWithHttpInfo (MoveObjects body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->MoveObjects");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/move-objects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>SystemAccessCredentialsReplyObj</returns>
        public SystemAccessCredentialsReplyObj RawCreds (RawCreds body = default(RawCreds))
        {
             akeyless.Client.ApiResponse<SystemAccessCredentialsReplyObj> localVarResponse = RawCredsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SystemAccessCredentialsReplyObj</returns>
        public akeyless.Client.ApiResponse< SystemAccessCredentialsReplyObj > RawCredsWithHttpInfo (RawCreds body = default(RawCreds))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< SystemAccessCredentialsReplyObj >("/raw-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RawCreds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SystemAccessCredentialsReplyObj</returns>
        public async System.Threading.Tasks.Task<SystemAccessCredentialsReplyObj> RawCredsAsync (RawCreds body = default(RawCreds))
        {
             akeyless.Client.ApiResponse<SystemAccessCredentialsReplyObj> localVarResponse = await RawCredsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SystemAccessCredentialsReplyObj)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<SystemAccessCredentialsReplyObj>> RawCredsAsyncWithHttpInfo (RawCreds body = default(RawCreds))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SystemAccessCredentialsReplyObj>("/raw-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RawCreds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RefreshKeyOutput</returns>
        public RefreshKeyOutput RefreshKey (RefreshKey body)
        {
             akeyless.Client.ApiResponse<RefreshKeyOutput> localVarResponse = RefreshKeyWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RefreshKeyOutput</returns>
        public akeyless.Client.ApiResponse< RefreshKeyOutput > RefreshKeyWithHttpInfo (RefreshKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->RefreshKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< RefreshKeyOutput >("/refresh-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of RefreshKeyOutput</returns>
        public async System.Threading.Tasks.Task<RefreshKeyOutput> RefreshKeyAsync (RefreshKey body)
        {
             akeyless.Client.ApiResponse<RefreshKeyOutput> localVarResponse = await RefreshKeyAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RefreshKeyOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<RefreshKeyOutput>> RefreshKeyAsyncWithHttpInfo (RefreshKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->RefreshKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RefreshKeyOutput>("/refresh-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ReverseRBACOutput</returns>
        public ReverseRBACOutput ReverseRBAC (ReverseRBAC body)
        {
             akeyless.Client.ApiResponse<ReverseRBACOutput> localVarResponse = ReverseRBACWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ReverseRBACOutput</returns>
        public akeyless.Client.ApiResponse< ReverseRBACOutput > ReverseRBACWithHttpInfo (ReverseRBAC body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ReverseRBAC");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< ReverseRBACOutput >("/reverse-rbac", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReverseRBAC", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ReverseRBACOutput</returns>
        public async System.Threading.Tasks.Task<ReverseRBACOutput> ReverseRBACAsync (ReverseRBAC body)
        {
             akeyless.Client.ApiResponse<ReverseRBACOutput> localVarResponse = await ReverseRBACAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ReverseRBACOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<ReverseRBACOutput>> ReverseRBACAsyncWithHttpInfo (ReverseRBAC body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ReverseRBAC");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ReverseRBACOutput>("/reverse-rbac", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReverseRBAC", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RollbackSecretOutput</returns>
        public RollbackSecretOutput RollbackSecret (RollbackSecret body)
        {
             akeyless.Client.ApiResponse<RollbackSecretOutput> localVarResponse = RollbackSecretWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RollbackSecretOutput</returns>
        public akeyless.Client.ApiResponse< RollbackSecretOutput > RollbackSecretWithHttpInfo (RollbackSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->RollbackSecret");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< RollbackSecretOutput >("/rollback-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of RollbackSecretOutput</returns>
        public async System.Threading.Tasks.Task<RollbackSecretOutput> RollbackSecretAsync (RollbackSecret body)
        {
             akeyless.Client.ApiResponse<RollbackSecretOutput> localVarResponse = await RollbackSecretAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RollbackSecretOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<RollbackSecretOutput>> RollbackSecretAsyncWithHttpInfo (RollbackSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->RollbackSecret");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RollbackSecretOutput>("/rollback-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RotateKeyOutput</returns>
        public RotateKeyOutput RotateKey (UpdateRotationSettings body)
        {
             akeyless.Client.ApiResponse<RotateKeyOutput> localVarResponse = RotateKeyWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RotateKeyOutput</returns>
        public akeyless.Client.ApiResponse< RotateKeyOutput > RotateKeyWithHttpInfo (UpdateRotationSettings body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->RotateKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< RotateKeyOutput >("/rotate-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RotateKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of RotateKeyOutput</returns>
        public async System.Threading.Tasks.Task<RotateKeyOutput> RotateKeyAsync (UpdateRotationSettings body)
        {
             akeyless.Client.ApiResponse<RotateKeyOutput> localVarResponse = await RotateKeyAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RotateKeyOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<RotateKeyOutput>> RotateKeyAsyncWithHttpInfo (UpdateRotationSettings body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->RotateKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RotateKeyOutput>("/rotate-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RotateKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object SetItemState (SetItemState body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = SetItemStateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse< Object > SetItemStateWithHttpInfo (SetItemState body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SetItemState");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/set-item-state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetItemState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetItemStateAsync (SetItemState body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = await SetItemStateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> SetItemStateAsyncWithHttpInfo (SetItemState body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SetItemState");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/set-item-state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetItemState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object SetRoleRule (SetRoleRule body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = SetRoleRuleWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse< Object > SetRoleRuleWithHttpInfo (SetRoleRule body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SetRoleRule");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/set-role-rule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRoleRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetRoleRuleAsync (SetRoleRule body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = await SetRoleRuleAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> SetRoleRuleAsyncWithHttpInfo (SetRoleRule body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SetRoleRule");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/set-role-rule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRoleRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SignPKCS1Output</returns>
        public SignPKCS1Output SignPKCS1 (SignPKCS1 body)
        {
             akeyless.Client.ApiResponse<SignPKCS1Output> localVarResponse = SignPKCS1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SignPKCS1Output</returns>
        public akeyless.Client.ApiResponse< SignPKCS1Output > SignPKCS1WithHttpInfo (SignPKCS1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SignPKCS1");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< SignPKCS1Output >("/sign-pkcs1", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SignPKCS1Output</returns>
        public async System.Threading.Tasks.Task<SignPKCS1Output> SignPKCS1Async (SignPKCS1 body)
        {
             akeyless.Client.ApiResponse<SignPKCS1Output> localVarResponse = await SignPKCS1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SignPKCS1Output)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<SignPKCS1Output>> SignPKCS1AsyncWithHttpInfo (SignPKCS1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SignPKCS1");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SignPKCS1Output>("/sign-pkcs1", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StaticCredsAuthOutput</returns>
        public StaticCredsAuthOutput StaticCredsAuth (StaticCredsAuth body)
        {
             akeyless.Client.ApiResponse<StaticCredsAuthOutput> localVarResponse = StaticCredsAuthWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StaticCredsAuthOutput</returns>
        public akeyless.Client.ApiResponse< StaticCredsAuthOutput > StaticCredsAuthWithHttpInfo (StaticCredsAuth body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->StaticCredsAuth");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< StaticCredsAuthOutput >("/static-creds-auth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StaticCredsAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of StaticCredsAuthOutput</returns>
        public async System.Threading.Tasks.Task<StaticCredsAuthOutput> StaticCredsAuthAsync (StaticCredsAuth body)
        {
             akeyless.Client.ApiResponse<StaticCredsAuthOutput> localVarResponse = await StaticCredsAuthAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StaticCredsAuthOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<StaticCredsAuthOutput>> StaticCredsAuthAsyncWithHttpInfo (StaticCredsAuth body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->StaticCredsAuth");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<StaticCredsAuthOutput>("/static-creds-auth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StaticCredsAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UidCreateChildTokenOutput</returns>
        public UidCreateChildTokenOutput UidCreateChildToken (UidCreateChildToken body)
        {
             akeyless.Client.ApiResponse<UidCreateChildTokenOutput> localVarResponse = UidCreateChildTokenWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UidCreateChildTokenOutput</returns>
        public akeyless.Client.ApiResponse< UidCreateChildTokenOutput > UidCreateChildTokenWithHttpInfo (UidCreateChildToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidCreateChildToken");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UidCreateChildTokenOutput >("/uid-create-child-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidCreateChildToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UidCreateChildTokenOutput</returns>
        public async System.Threading.Tasks.Task<UidCreateChildTokenOutput> UidCreateChildTokenAsync (UidCreateChildToken body)
        {
             akeyless.Client.ApiResponse<UidCreateChildTokenOutput> localVarResponse = await UidCreateChildTokenAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UidCreateChildTokenOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UidCreateChildTokenOutput>> UidCreateChildTokenAsyncWithHttpInfo (UidCreateChildToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidCreateChildToken");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UidCreateChildTokenOutput>("/uid-create-child-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidCreateChildToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UidGenerateTokenOutput</returns>
        public UidGenerateTokenOutput UidGenerateToken (UidGenerateToken body)
        {
             akeyless.Client.ApiResponse<UidGenerateTokenOutput> localVarResponse = UidGenerateTokenWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UidGenerateTokenOutput</returns>
        public akeyless.Client.ApiResponse< UidGenerateTokenOutput > UidGenerateTokenWithHttpInfo (UidGenerateToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidGenerateToken");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UidGenerateTokenOutput >("/uid-generate-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidGenerateToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UidGenerateTokenOutput</returns>
        public async System.Threading.Tasks.Task<UidGenerateTokenOutput> UidGenerateTokenAsync (UidGenerateToken body)
        {
             akeyless.Client.ApiResponse<UidGenerateTokenOutput> localVarResponse = await UidGenerateTokenAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UidGenerateTokenOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UidGenerateTokenOutput>> UidGenerateTokenAsyncWithHttpInfo (UidGenerateToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidGenerateToken");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UidGenerateTokenOutput>("/uid-generate-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidGenerateToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UniversalIdentityDetails</returns>
        public UniversalIdentityDetails UidListChildren (UidListChildren body)
        {
             akeyless.Client.ApiResponse<UniversalIdentityDetails> localVarResponse = UidListChildrenWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UniversalIdentityDetails</returns>
        public akeyless.Client.ApiResponse< UniversalIdentityDetails > UidListChildrenWithHttpInfo (UidListChildren body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidListChildren");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UniversalIdentityDetails >("/uid-list-children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidListChildren", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UniversalIdentityDetails</returns>
        public async System.Threading.Tasks.Task<UniversalIdentityDetails> UidListChildrenAsync (UidListChildren body)
        {
             akeyless.Client.ApiResponse<UniversalIdentityDetails> localVarResponse = await UidListChildrenAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UniversalIdentityDetails)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UniversalIdentityDetails>> UidListChildrenAsyncWithHttpInfo (UidListChildren body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidListChildren");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UniversalIdentityDetails>("/uid-list-children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidListChildren", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UidRevokeToken (UidRevokeToken body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = UidRevokeTokenWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse< Object > UidRevokeTokenWithHttpInfo (UidRevokeToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidRevokeToken");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/uid-revoke-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidRevokeToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UidRevokeTokenAsync (UidRevokeToken body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = await UidRevokeTokenAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> UidRevokeTokenAsyncWithHttpInfo (UidRevokeToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidRevokeToken");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/uid-revoke-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidRevokeToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UidRotateTokenOutput</returns>
        public UidRotateTokenOutput UidRotateToken (UidRotateToken body)
        {
             akeyless.Client.ApiResponse<UidRotateTokenOutput> localVarResponse = UidRotateTokenWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UidRotateTokenOutput</returns>
        public akeyless.Client.ApiResponse< UidRotateTokenOutput > UidRotateTokenWithHttpInfo (UidRotateToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidRotateToken");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UidRotateTokenOutput >("/uid-rotate-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidRotateToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UidRotateTokenOutput</returns>
        public async System.Threading.Tasks.Task<UidRotateTokenOutput> UidRotateTokenAsync (UidRotateToken body)
        {
             akeyless.Client.ApiResponse<UidRotateTokenOutput> localVarResponse = await UidRotateTokenAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UidRotateTokenOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UidRotateTokenOutput>> UidRotateTokenAsyncWithHttpInfo (UidRotateToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidRotateToken");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UidRotateTokenOutput>("/uid-rotate-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidRotateToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateAWSTargetDetails (UpdateAWSTargetDetails body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateAWSTargetDetailsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse< UpdateTargetOutput > UpdateAWSTargetDetailsWithHttpInfo (UpdateAWSTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAWSTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UpdateTargetOutput >("/update-aws-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAWSTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateAWSTargetDetailsAsync (UpdateAWSTargetDetails body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateAWSTargetDetailsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateAWSTargetDetailsAsyncWithHttpInfo (UpdateAWSTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAWSTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-aws-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAWSTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateDBTargetDetails (UpdateDBTargetDetails body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateDBTargetDetailsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse< UpdateTargetOutput > UpdateDBTargetDetailsWithHttpInfo (UpdateDBTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateDBTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UpdateTargetOutput >("/update-db-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDBTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateDBTargetDetailsAsync (UpdateDBTargetDetails body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateDBTargetDetailsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateDBTargetDetailsAsyncWithHttpInfo (UpdateDBTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateDBTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-db-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDBTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateItemOutput</returns>
        public UpdateItemOutput UpdateItem (UpdateItem body)
        {
             akeyless.Client.ApiResponse<UpdateItemOutput> localVarResponse = UpdateItemWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateItemOutput</returns>
        public akeyless.Client.ApiResponse< UpdateItemOutput > UpdateItemWithHttpInfo (UpdateItem body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateItem");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UpdateItemOutput >("/update-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateItemOutput</returns>
        public async System.Threading.Tasks.Task<UpdateItemOutput> UpdateItemAsync (UpdateItem body)
        {
             akeyless.Client.ApiResponse<UpdateItemOutput> localVarResponse = await UpdateItemAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateItemOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateItemOutput>> UpdateItemAsyncWithHttpInfo (UpdateItem body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateItem");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateItemOutput>("/update-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateRDPTargetDetails (UpdateRDPTargetDetails body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateRDPTargetDetailsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse< UpdateTargetOutput > UpdateRDPTargetDetailsWithHttpInfo (UpdateRDPTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRDPTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UpdateTargetOutput >("/update-rdp-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRDPTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateRDPTargetDetailsAsync (UpdateRDPTargetDetails body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateRDPTargetDetailsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateRDPTargetDetailsAsyncWithHttpInfo (UpdateRDPTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRDPTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-rdp-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRDPTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateRabbitMQTargetDetails (UpdateRabbitMQTargetDetails body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateRabbitMQTargetDetailsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse< UpdateTargetOutput > UpdateRabbitMQTargetDetailsWithHttpInfo (UpdateRabbitMQTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRabbitMQTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UpdateTargetOutput >("/update-rabbitmq-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRabbitMQTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateRabbitMQTargetDetailsAsync (UpdateRabbitMQTargetDetails body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateRabbitMQTargetDetailsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateRabbitMQTargetDetailsAsyncWithHttpInfo (UpdateRabbitMQTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRabbitMQTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-rabbitmq-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRabbitMQTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateRoleOutput</returns>
        public UpdateRoleOutput UpdateRole (UpdateRole body)
        {
             akeyless.Client.ApiResponse<UpdateRoleOutput> localVarResponse = UpdateRoleWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateRoleOutput</returns>
        public akeyless.Client.ApiResponse< UpdateRoleOutput > UpdateRoleWithHttpInfo (UpdateRole body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRole");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UpdateRoleOutput >("/update-role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateRoleOutput</returns>
        public async System.Threading.Tasks.Task<UpdateRoleOutput> UpdateRoleAsync (UpdateRole body)
        {
             akeyless.Client.ApiResponse<UpdateRoleOutput> localVarResponse = await UpdateRoleAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateRoleOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateRoleOutput>> UpdateRoleAsyncWithHttpInfo (UpdateRole body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRole");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateRoleOutput>("/update-role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateRotatedSecretOutput</returns>
        public UpdateRotatedSecretOutput UpdateRotatedSecret (UpdateRotatedSecret body)
        {
             akeyless.Client.ApiResponse<UpdateRotatedSecretOutput> localVarResponse = UpdateRotatedSecretWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateRotatedSecretOutput</returns>
        public akeyless.Client.ApiResponse< UpdateRotatedSecretOutput > UpdateRotatedSecretWithHttpInfo (UpdateRotatedSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRotatedSecret");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UpdateRotatedSecretOutput >("/update-rotated-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRotatedSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateRotatedSecretOutput</returns>
        public async System.Threading.Tasks.Task<UpdateRotatedSecretOutput> UpdateRotatedSecretAsync (UpdateRotatedSecret body)
        {
             akeyless.Client.ApiResponse<UpdateRotatedSecretOutput> localVarResponse = await UpdateRotatedSecretAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateRotatedSecretOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateRotatedSecretOutput>> UpdateRotatedSecretAsyncWithHttpInfo (UpdateRotatedSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRotatedSecret");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateRotatedSecretOutput>("/update-rotated-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRotatedSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RotateKeyOutput</returns>
        public RotateKeyOutput UpdateRotationSettings ()
        {
             akeyless.Client.ApiResponse<RotateKeyOutput> localVarResponse = UpdateRotationSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RotateKeyOutput</returns>
        public akeyless.Client.ApiResponse< RotateKeyOutput > UpdateRotationSettingsWithHttpInfo ()
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post< RotateKeyOutput >("/update-rotation-settingsrotate-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRotationSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RotateKeyOutput</returns>
        public async System.Threading.Tasks.Task<RotateKeyOutput> UpdateRotationSettingsAsync ()
        {
             akeyless.Client.ApiResponse<RotateKeyOutput> localVarResponse = await UpdateRotationSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RotateKeyOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<RotateKeyOutput>> UpdateRotationSettingsAsyncWithHttpInfo ()
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RotateKeyOutput>("/update-rotation-settingsrotate-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRotationSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateSSHTargetDetails (UpdateSSHTargetDetails body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateSSHTargetDetailsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse< UpdateTargetOutput > UpdateSSHTargetDetailsWithHttpInfo (UpdateSSHTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateSSHTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UpdateTargetOutput >("/update-ssh-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSSHTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateSSHTargetDetailsAsync (UpdateSSHTargetDetails body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateSSHTargetDetailsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateSSHTargetDetailsAsyncWithHttpInfo (UpdateSSHTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateSSHTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-ssh-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSSHTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateSecretValOutput</returns>
        public UpdateSecretValOutput UpdateSecretVal (UpdateSecretVal body)
        {
             akeyless.Client.ApiResponse<UpdateSecretValOutput> localVarResponse = UpdateSecretValWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateSecretValOutput</returns>
        public akeyless.Client.ApiResponse< UpdateSecretValOutput > UpdateSecretValWithHttpInfo (UpdateSecretVal body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateSecretVal");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UpdateSecretValOutput >("/update-secret-val", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSecretVal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateSecretValOutput</returns>
        public async System.Threading.Tasks.Task<UpdateSecretValOutput> UpdateSecretValAsync (UpdateSecretVal body)
        {
             akeyless.Client.ApiResponse<UpdateSecretValOutput> localVarResponse = await UpdateSecretValAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateSecretValOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateSecretValOutput>> UpdateSecretValAsyncWithHttpInfo (UpdateSecretVal body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateSecretVal");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateSecretValOutput>("/update-secret-val", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSecretVal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateTarget (UpdateTarget body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateTargetWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse< UpdateTargetOutput > UpdateTargetWithHttpInfo (UpdateTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UpdateTargetOutput >("/update-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateTargetAsync (UpdateTarget body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateTargetAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateTargetAsyncWithHttpInfo (UpdateTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateTargetDetails (Object body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateTargetDetailsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse< UpdateTargetOutput > UpdateTargetDetailsWithHttpInfo (Object body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UpdateTargetOutput >("/update-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateTargetDetailsAsync (Object body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateTargetDetailsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateTargetDetailsAsyncWithHttpInfo (Object body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateWebTargetDetails (UpdateWebTargetDetails body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateWebTargetDetailsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse< UpdateTargetOutput > UpdateWebTargetDetailsWithHttpInfo (UpdateWebTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateWebTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UpdateTargetOutput >("/update-web-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateWebTargetDetailsAsync (UpdateWebTargetDetails body)
        {
             akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateWebTargetDetailsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateWebTargetDetailsAsyncWithHttpInfo (UpdateWebTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateWebTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-web-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UploadRSA (UploadRSA body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = UploadRSAWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse< Object > UploadRSAWithHttpInfo (UploadRSA body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UploadRSA");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/upload-rsa", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadRSA", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UploadRSAAsync (UploadRSA body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = await UploadRSAAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> UploadRSAAsyncWithHttpInfo (UploadRSA body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UploadRSA");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/upload-rsa", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadRSA", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object VerifyPKCS1 (VerifyPKCS1 body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = VerifyPKCS1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse< Object > VerifyPKCS1WithHttpInfo (VerifyPKCS1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->VerifyPKCS1");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/verify-pkcs1", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> VerifyPKCS1Async (VerifyPKCS1 body)
        {
             akeyless.Client.ApiResponse<Object> localVarResponse = await VerifyPKCS1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> VerifyPKCS1AsyncWithHttpInfo (VerifyPKCS1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->VerifyPKCS1");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/verify-pkcs1", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
