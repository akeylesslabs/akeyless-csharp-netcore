/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using akeyless.Client;
using akeyless.Model;

namespace akeyless.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV2ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateRoleAuthMethodAssocOutput</returns>
        CreateRoleAuthMethodAssocOutput AssocRoleAuthMethod(AssocRoleAuthMethod body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateRoleAuthMethodAssocOutput</returns>
        ApiResponse<CreateRoleAuthMethodAssocOutput> AssocRoleAuthMethodWithHttpInfo(AssocRoleAuthMethod body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetItemAssocOutput</returns>
        CreateTargetItemAssocOutput AssocTargetItem(AssocTargetItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetItemAssocOutput</returns>
        ApiResponse<CreateTargetItemAssocOutput> AssocTargetItemWithHttpInfo(AssocTargetItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthOutput</returns>
        AuthOutput Auth(Auth body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthOutput</returns>
        ApiResponse<AuthOutput> AuthWithHttpInfo(Auth body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ConfigureOutput</returns>
        ConfigureOutput Configure(Configure body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ConfigureOutput</returns>
        ApiResponse<ConfigureOutput> ConfigureWithHttpInfo(Configure body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object Connect(Connect body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ConnectWithHttpInfo(Connect body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAWSTargetOutput</returns>
        CreateAWSTargetOutput CreateAWStarget(CreateAWSTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAWSTargetOutput</returns>
        ApiResponse<CreateAWSTargetOutput> CreateAWStargetWithHttpInfo(CreateAWSTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateArtifactoryTargetOutput</returns>
        CreateArtifactoryTargetOutput CreateArtifactoryTarget(CreateArtifactoryTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateArtifactoryTargetOutput</returns>
        ApiResponse<CreateArtifactoryTargetOutput> CreateArtifactoryTargetWithHttpInfo(CreateArtifactoryTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodOutput</returns>
        CreateAuthMethodOutput CreateAuthMethod(CreateAuthMethod body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodOutput</returns>
        ApiResponse<CreateAuthMethodOutput> CreateAuthMethodWithHttpInfo(CreateAuthMethod body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodAWSIAMOutput</returns>
        CreateAuthMethodAWSIAMOutput CreateAuthMethodAWSIAM(CreateAuthMethodAWSIAM body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodAWSIAMOutput</returns>
        ApiResponse<CreateAuthMethodAWSIAMOutput> CreateAuthMethodAWSIAMWithHttpInfo(CreateAuthMethodAWSIAM body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodAzureADOutput</returns>
        CreateAuthMethodAzureADOutput CreateAuthMethodAzureAD(CreateAuthMethodAzureAD body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodAzureADOutput</returns>
        ApiResponse<CreateAuthMethodAzureADOutput> CreateAuthMethodAzureADWithHttpInfo(CreateAuthMethodAzureAD body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodGCPOutput</returns>
        CreateAuthMethodGCPOutput CreateAuthMethodGCP(CreateAuthMethodGCP body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodGCPOutput</returns>
        ApiResponse<CreateAuthMethodGCPOutput> CreateAuthMethodGCPWithHttpInfo(CreateAuthMethodGCP body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodHuaweiOutput</returns>
        CreateAuthMethodHuaweiOutput CreateAuthMethodHuawei(CreateAuthMethodHuawei body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodHuaweiOutput</returns>
        ApiResponse<CreateAuthMethodHuaweiOutput> CreateAuthMethodHuaweiWithHttpInfo(CreateAuthMethodHuawei body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodK8SOutput</returns>
        CreateAuthMethodK8SOutput CreateAuthMethodK8S(CreateAuthMethodK8S body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodK8SOutput</returns>
        ApiResponse<CreateAuthMethodK8SOutput> CreateAuthMethodK8SWithHttpInfo(CreateAuthMethodK8S body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodLDAPOutput</returns>
        CreateAuthMethodLDAPOutput CreateAuthMethodLDAP(CreateAuthMethodLDAP body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodLDAPOutput</returns>
        ApiResponse<CreateAuthMethodLDAPOutput> CreateAuthMethodLDAPWithHttpInfo(CreateAuthMethodLDAP body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodOAuth2Output</returns>
        CreateAuthMethodOAuth2Output CreateAuthMethodOAuth2(CreateAuthMethodOAuth2 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodOAuth2Output</returns>
        ApiResponse<CreateAuthMethodOAuth2Output> CreateAuthMethodOAuth2WithHttpInfo(CreateAuthMethodOAuth2 body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodOIDCOutput</returns>
        CreateAuthMethodOIDCOutput CreateAuthMethodOIDC(CreateAuthMethodOIDC body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodOIDCOutput</returns>
        ApiResponse<CreateAuthMethodOIDCOutput> CreateAuthMethodOIDCWithHttpInfo(CreateAuthMethodOIDC body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodSAMLOutput</returns>
        CreateAuthMethodSAMLOutput CreateAuthMethodSAML(CreateAuthMethodSAML body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodSAMLOutput</returns>
        ApiResponse<CreateAuthMethodSAMLOutput> CreateAuthMethodSAMLWithHttpInfo(CreateAuthMethodSAML body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodUniversalIdentityOutput</returns>
        CreateAuthMethodUniversalIdentityOutput CreateAuthMethodUniversalIdentity(CreateAuthMethodUniversalIdentity body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodUniversalIdentityOutput</returns>
        ApiResponse<CreateAuthMethodUniversalIdentityOutput> CreateAuthMethodUniversalIdentityWithHttpInfo(CreateAuthMethodUniversalIdentity body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAzureTargetOutput</returns>
        CreateAzureTargetOutput CreateAzureTarget(CreateAzureTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAzureTargetOutput</returns>
        ApiResponse<CreateAzureTargetOutput> CreateAzureTargetWithHttpInfo(CreateAzureTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateClassicKeyOutput</returns>
        CreateClassicKeyOutput CreateClassicKey(CreateClassicKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateClassicKeyOutput</returns>
        ApiResponse<CreateClassicKeyOutput> CreateClassicKeyWithHttpInfo(CreateClassicKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateDBTargetOutput</returns>
        CreateDBTargetOutput CreateDBTarget(CreateDBTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateDBTargetOutput</returns>
        ApiResponse<CreateDBTargetOutput> CreateDBTargetWithHttpInfo(CreateDBTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateDFCKeyOutput</returns>
        CreateDFCKeyOutput CreateDFCKey(CreateDFCKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateDFCKeyOutput</returns>
        ApiResponse<CreateDFCKeyOutput> CreateDFCKeyWithHttpInfo(CreateDFCKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object CreateDynamicSecret(CreateDynamicSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateDynamicSecretWithHttpInfo(CreateDynamicSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateEKSTargetOutput</returns>
        CreateEKSTargetOutput CreateEKSTarget(CreateEKSTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateEKSTargetOutput</returns>
        ApiResponse<CreateEKSTargetOutput> CreateEKSTargetWithHttpInfo(CreateEKSTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateGKETargetOutput</returns>
        CreateGKETargetOutput CreateGKETarget(CreateGKETarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateGKETargetOutput</returns>
        ApiResponse<CreateGKETargetOutput> CreateGKETargetWithHttpInfo(CreateGKETarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateGcpTargetOutput</returns>
        CreateGcpTargetOutput CreateGcpTarget(CreateGcpTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateGcpTargetOutput</returns>
        ApiResponse<CreateGcpTargetOutput> CreateGcpTargetWithHttpInfo(CreateGcpTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateKeyOutput</returns>
        CreateKeyOutput CreateKey(CreateKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateKeyOutput</returns>
        ApiResponse<CreateKeyOutput> CreateKeyWithHttpInfo(CreateKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateNativeK8STargetOutput</returns>
        CreateNativeK8STargetOutput CreateNativeK8STarget(CreateNativeK8STarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateNativeK8STargetOutput</returns>
        ApiResponse<CreateNativeK8STargetOutput> CreateNativeK8STargetWithHttpInfo(CreateNativeK8STarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreatePKICertIssuerOutput</returns>
        CreatePKICertIssuerOutput CreatePKICertIssuer(CreatePKICertIssuer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreatePKICertIssuerOutput</returns>
        ApiResponse<CreatePKICertIssuerOutput> CreatePKICertIssuerWithHttpInfo(CreatePKICertIssuer body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateRabbitMQTargetOutput</returns>
        CreateRabbitMQTargetOutput CreateRabbitMQTarget(CreateRabbitMQTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateRabbitMQTargetOutput</returns>
        ApiResponse<CreateRabbitMQTargetOutput> CreateRabbitMQTargetWithHttpInfo(CreateRabbitMQTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object CreateRole(CreateRole body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateRoleWithHttpInfo(CreateRole body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateRotatedSecretOutput</returns>
        CreateRotatedSecretOutput CreateRotatedSecret(CreateRotatedSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateRotatedSecretOutput</returns>
        ApiResponse<CreateRotatedSecretOutput> CreateRotatedSecretWithHttpInfo(CreateRotatedSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateSSHCertIssuerOutput</returns>
        CreateSSHCertIssuerOutput CreateSSHCertIssuer(CreateSSHCertIssuer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateSSHCertIssuerOutput</returns>
        ApiResponse<CreateSSHCertIssuerOutput> CreateSSHCertIssuerWithHttpInfo(CreateSSHCertIssuer body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateSSHTargetOutput</returns>
        CreateSSHTargetOutput CreateSSHTarget(CreateSSHTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateSSHTargetOutput</returns>
        ApiResponse<CreateSSHTargetOutput> CreateSSHTargetWithHttpInfo(CreateSSHTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateSecretOutput</returns>
        CreateSecretOutput CreateSecret(CreateSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateSecretOutput</returns>
        ApiResponse<CreateSecretOutput> CreateSecretWithHttpInfo(CreateSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateWebTargetOutput</returns>
        CreateWebTargetOutput CreateWebTarget(CreateWebTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateWebTargetOutput</returns>
        ApiResponse<CreateWebTargetOutput> CreateWebTargetWithHttpInfo(CreateWebTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateLdapTargetOutput</returns>
        CreateLdapTargetOutput CreateldapTarget(CreateLdapTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateLdapTargetOutput</returns>
        ApiResponse<CreateLdapTargetOutput> CreateldapTargetWithHttpInfo(CreateLdapTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DecryptOutput</returns>
        DecryptOutput Decrypt(Decrypt body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DecryptOutput</returns>
        ApiResponse<DecryptOutput> DecryptWithHttpInfo(Decrypt body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DecryptPKCS1Output</returns>
        DecryptPKCS1Output DecryptPKCS1(DecryptPKCS1 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DecryptPKCS1Output</returns>
        ApiResponse<DecryptPKCS1Output> DecryptPKCS1WithHttpInfo(DecryptPKCS1 body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DecryptWithClassicKeyOutput</returns>
        DecryptWithClassicKeyOutput DecryptWithClassicKey(DecryptWithClassicKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DecryptWithClassicKeyOutput</returns>
        ApiResponse<DecryptWithClassicKeyOutput> DecryptWithClassicKeyWithHttpInfo(DecryptWithClassicKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteAuthMethodOutput</returns>
        DeleteAuthMethodOutput DeleteAuthMethod(DeleteAuthMethod body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteAuthMethodOutput</returns>
        ApiResponse<DeleteAuthMethodOutput> DeleteAuthMethodWithHttpInfo(DeleteAuthMethod body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteAuthMethodsOutput</returns>
        DeleteAuthMethodsOutput DeleteAuthMethods(DeleteAuthMethods body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteAuthMethodsOutput</returns>
        ApiResponse<DeleteAuthMethodsOutput> DeleteAuthMethodsWithHttpInfo(DeleteAuthMethods body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteItemOutput</returns>
        DeleteItemOutput DeleteItem(DeleteItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteItemOutput</returns>
        ApiResponse<DeleteItemOutput> DeleteItemWithHttpInfo(DeleteItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteItemsOutput</returns>
        DeleteItemsOutput DeleteItems(DeleteItems body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteItemsOutput</returns>
        ApiResponse<DeleteItemsOutput> DeleteItemsWithHttpInfo(DeleteItems body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object DeleteRole(DeleteRole body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteRoleWithHttpInfo(DeleteRole body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object DeleteRoleAssociation(DeleteRoleAssociation body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteRoleAssociationWithHttpInfo(DeleteRoleAssociation body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteRoleRuleOutput</returns>
        DeleteRoleRuleOutput DeleteRoleRule(DeleteRoleRule body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteRoleRuleOutput</returns>
        ApiResponse<DeleteRoleRuleOutput> DeleteRoleRuleWithHttpInfo(DeleteRoleRule body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object DeleteRoles(DeleteRoles body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteRolesWithHttpInfo(DeleteRoles body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object DeleteTarget(DeleteTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteTargetWithHttpInfo(DeleteTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object DeleteTargetAssociation(DeleteTargetAssociation body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteTargetAssociationWithHttpInfo(DeleteTargetAssociation body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object DeleteTargets(DeleteTargets body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteTargetsWithHttpInfo(DeleteTargets body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Item</returns>
        Item DescribeItem(DescribeItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Item</returns>
        ApiResponse<Item> DescribeItemWithHttpInfo(DescribeItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DescribePermissionsOutput</returns>
        DescribePermissionsOutput DescribePermissions(DescribePermissions body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DescribePermissionsOutput</returns>
        ApiResponse<DescribePermissionsOutput> DescribePermissionsWithHttpInfo(DescribePermissions body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EncryptOutput</returns>
        EncryptOutput Encrypt(Encrypt body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EncryptOutput</returns>
        ApiResponse<EncryptOutput> EncryptWithHttpInfo(Encrypt body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EncryptPKCS1Output</returns>
        EncryptPKCS1Output EncryptPKCS1(EncryptPKCS1 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EncryptPKCS1Output</returns>
        ApiResponse<EncryptPKCS1Output> EncryptPKCS1WithHttpInfo(EncryptPKCS1 body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EncryptOutput</returns>
        EncryptOutput EncryptWithClassicKey(EncryptWithClassicKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EncryptOutput</returns>
        ApiResponse<EncryptOutput> EncryptWithClassicKeyWithHttpInfo(EncryptWithClassicKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateK8SAuthConfigOutput</returns>
        GatewayCreateK8SAuthConfigOutput GatewayCreateK8SAuthConfig(GatewayCreateK8SAuthConfig body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateK8SAuthConfigOutput</returns>
        ApiResponse<GatewayCreateK8SAuthConfigOutput> GatewayCreateK8SAuthConfigWithHttpInfo(GatewayCreateK8SAuthConfig body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerArtifactoryOutput</returns>
        GatewayCreateProducerArtifactoryOutput GatewayCreateProducerArtifactory(GatewayCreateProducerArtifactory body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerArtifactoryOutput</returns>
        ApiResponse<GatewayCreateProducerArtifactoryOutput> GatewayCreateProducerArtifactoryWithHttpInfo(GatewayCreateProducerArtifactory body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerAwsOutput</returns>
        GatewayCreateProducerAwsOutput GatewayCreateProducerAws(GatewayCreateProducerAws body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerAwsOutput</returns>
        ApiResponse<GatewayCreateProducerAwsOutput> GatewayCreateProducerAwsWithHttpInfo(GatewayCreateProducerAws body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerAzureOutput</returns>
        GatewayCreateProducerAzureOutput GatewayCreateProducerAzure(GatewayCreateProducerAzure body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerAzureOutput</returns>
        ApiResponse<GatewayCreateProducerAzureOutput> GatewayCreateProducerAzureWithHttpInfo(GatewayCreateProducerAzure body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerCassandraOutput</returns>
        GatewayCreateProducerCassandraOutput GatewayCreateProducerCassandra(GatewayCreateProducerCassandra body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerCassandraOutput</returns>
        ApiResponse<GatewayCreateProducerCassandraOutput> GatewayCreateProducerCassandraWithHttpInfo(GatewayCreateProducerCassandra body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerCertificateAutomationOutput</returns>
        GatewayCreateProducerCertificateAutomationOutput GatewayCreateProducerCertificateAutomation(GatewayCreateProducerCertificateAutomation body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerCertificateAutomationOutput</returns>
        ApiResponse<GatewayCreateProducerCertificateAutomationOutput> GatewayCreateProducerCertificateAutomationWithHttpInfo(GatewayCreateProducerCertificateAutomation body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GatewayCreateProducerCustomOutput</returns>
        GatewayCreateProducerCustomOutput GatewayCreateProducerCustom(GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GatewayCreateProducerCustomOutput</returns>
        ApiResponse<GatewayCreateProducerCustomOutput> GatewayCreateProducerCustomWithHttpInfo(GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerEksOutput</returns>
        GatewayCreateProducerEksOutput GatewayCreateProducerEks(GatewayCreateProducerEks body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerEksOutput</returns>
        ApiResponse<GatewayCreateProducerEksOutput> GatewayCreateProducerEksWithHttpInfo(GatewayCreateProducerEks body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerGcpOutput</returns>
        GatewayCreateProducerGcpOutput GatewayCreateProducerGcp(GatewayCreateProducerGcp body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerGcpOutput</returns>
        ApiResponse<GatewayCreateProducerGcpOutput> GatewayCreateProducerGcpWithHttpInfo(GatewayCreateProducerGcp body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerGkeOutput</returns>
        GatewayCreateProducerGkeOutput GatewayCreateProducerGke(GatewayCreateProducerGke body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerGkeOutput</returns>
        ApiResponse<GatewayCreateProducerGkeOutput> GatewayCreateProducerGkeWithHttpInfo(GatewayCreateProducerGke body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerLdapOutput</returns>
        GatewayCreateProducerLdapOutput GatewayCreateProducerLdap(GatewayCreateProducerLdap body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerLdapOutput</returns>
        ApiResponse<GatewayCreateProducerLdapOutput> GatewayCreateProducerLdapWithHttpInfo(GatewayCreateProducerLdap body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerMSSQLOutput</returns>
        GatewayCreateProducerMSSQLOutput GatewayCreateProducerMSSQL(GatewayCreateProducerMSSQL body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerMSSQLOutput</returns>
        ApiResponse<GatewayCreateProducerMSSQLOutput> GatewayCreateProducerMSSQLWithHttpInfo(GatewayCreateProducerMSSQL body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerMongoOutput</returns>
        GatewayCreateProducerMongoOutput GatewayCreateProducerMongo(GatewayCreateProducerMongo body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerMongoOutput</returns>
        ApiResponse<GatewayCreateProducerMongoOutput> GatewayCreateProducerMongoWithHttpInfo(GatewayCreateProducerMongo body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerMySQLOutput</returns>
        GatewayCreateProducerMySQLOutput GatewayCreateProducerMySQL(GatewayCreateProducerMySQL body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerMySQLOutput</returns>
        ApiResponse<GatewayCreateProducerMySQLOutput> GatewayCreateProducerMySQLWithHttpInfo(GatewayCreateProducerMySQL body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerNativeK8SOutput</returns>
        GatewayCreateProducerNativeK8SOutput GatewayCreateProducerNativeK8S(GatewayCreateProducerNativeK8S body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerNativeK8SOutput</returns>
        ApiResponse<GatewayCreateProducerNativeK8SOutput> GatewayCreateProducerNativeK8SWithHttpInfo(GatewayCreateProducerNativeK8S body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerOracleDbOutput</returns>
        GatewayCreateProducerOracleDbOutput GatewayCreateProducerOracleDb(GatewayCreateProducerOracleDb body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerOracleDbOutput</returns>
        ApiResponse<GatewayCreateProducerOracleDbOutput> GatewayCreateProducerOracleDbWithHttpInfo(GatewayCreateProducerOracleDb body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerPostgreSQLOutput</returns>
        GatewayCreateProducerPostgreSQLOutput GatewayCreateProducerPostgreSQL(GatewayCreateProducerPostgreSQL body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerPostgreSQLOutput</returns>
        ApiResponse<GatewayCreateProducerPostgreSQLOutput> GatewayCreateProducerPostgreSQLWithHttpInfo(GatewayCreateProducerPostgreSQL body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerRabbitMQOutput</returns>
        GatewayCreateProducerRabbitMQOutput GatewayCreateProducerRabbitMQ(GatewayCreateProducerRabbitMQ body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerRabbitMQOutput</returns>
        ApiResponse<GatewayCreateProducerRabbitMQOutput> GatewayCreateProducerRabbitMQWithHttpInfo(GatewayCreateProducerRabbitMQ body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerRdpOutput</returns>
        GatewayCreateProducerRdpOutput GatewayCreateProducerRdp(GatewayCreateProducerRdp body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerRdpOutput</returns>
        ApiResponse<GatewayCreateProducerRdpOutput> GatewayCreateProducerRdpWithHttpInfo(GatewayCreateProducerRdp body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerRedshiftOutput</returns>
        GatewayCreateProducerRedshiftOutput GatewayCreateProducerRedshift(GatewayCreateProducerRedshift body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerRedshiftOutput</returns>
        ApiResponse<GatewayCreateProducerRedshiftOutput> GatewayCreateProducerRedshiftWithHttpInfo(GatewayCreateProducerRedshift body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerSnowflakeOutput</returns>
        GatewayCreateProducerSnowflakeOutput GatewayCreateProducerSnowflake(GatewayCreateProducerSnowflake body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerSnowflakeOutput</returns>
        ApiResponse<GatewayCreateProducerSnowflakeOutput> GatewayCreateProducerSnowflakeWithHttpInfo(GatewayCreateProducerSnowflake body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object GatewayDeleteAllowedManagementAccess(GatewayDeleteAllowedManagementAccess body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GatewayDeleteAllowedManagementAccessWithHttpInfo(GatewayDeleteAllowedManagementAccess body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayDeleteK8SAuthConfigOutput</returns>
        GatewayDeleteK8SAuthConfigOutput GatewayDeleteK8SAuthConfig(GatewayDeleteK8SAuthConfig body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayDeleteK8SAuthConfigOutput</returns>
        ApiResponse<GatewayDeleteK8SAuthConfigOutput> GatewayDeleteK8SAuthConfigWithHttpInfo(GatewayDeleteK8SAuthConfig body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayDeleteProducerOutput</returns>
        GatewayDeleteProducerOutput GatewayDeleteProducer(GatewayDeleteProducer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayDeleteProducerOutput</returns>
        ApiResponse<GatewayDeleteProducerOutput> GatewayDeleteProducerWithHttpInfo(GatewayDeleteProducer body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AkeylessGatewayConfig</returns>
        AkeylessGatewayConfig GatewayGetConfig(GatewayGetConfig body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AkeylessGatewayConfig</returns>
        ApiResponse<AkeylessGatewayConfig> GatewayGetConfigWithHttpInfo(GatewayGetConfig body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayGetK8SAuthConfigOutput</returns>
        GatewayGetK8SAuthConfigOutput GatewayGetK8SAuthConfig(GatewayGetK8SAuthConfig body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayGetK8SAuthConfigOutput</returns>
        ApiResponse<GatewayGetK8SAuthConfigOutput> GatewayGetK8SAuthConfigWithHttpInfo(GatewayGetK8SAuthConfig body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DSProducerDetails</returns>
        DSProducerDetails GatewayGetProducer(GatewayGetProducer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DSProducerDetails</returns>
        ApiResponse<DSProducerDetails> GatewayGetProducerWithHttpInfo(GatewayGetProducer body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;TmpUserData&gt;</returns>
        List<TmpUserData> GatewayGetTmpUsers(GatewayGetTmpUsers body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;TmpUserData&gt;</returns>
        ApiResponse<List<TmpUserData>> GatewayGetTmpUsersWithHttpInfo(GatewayGetTmpUsers body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetSubAdminsListReplyObj</returns>
        GetSubAdminsListReplyObj GatewayListAllowedManagementAccess(GatewayListAllowedManagementAccess body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetSubAdminsListReplyObj</returns>
        ApiResponse<GetSubAdminsListReplyObj> GatewayListAllowedManagementAccessWithHttpInfo(GatewayListAllowedManagementAccess body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayMigrationListOutput</returns>
        GatewayMigrationListOutput GatewayListMigration(GatewayListMigration body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayMigrationListOutput</returns>
        ApiResponse<GatewayMigrationListOutput> GatewayListMigrationWithHttpInfo(GatewayListMigration body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetProducersListReplyObj</returns>
        GetProducersListReplyObj GatewayListProducers(GatewayListProducers body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetProducersListReplyObj</returns>
        ApiResponse<GetProducersListReplyObj> GatewayListProducersWithHttpInfo(GatewayListProducers body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void GatewayRevokeTmpUsers(GatewayRevokeTmpUsers body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GatewayRevokeTmpUsersWithHttpInfo(GatewayRevokeTmpUsers body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayStartProducerOutput</returns>
        GatewayStartProducerOutput GatewayStartProducer(GatewayStartProducer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayStartProducerOutput</returns>
        ApiResponse<GatewayStartProducerOutput> GatewayStartProducerWithHttpInfo(GatewayStartProducer body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayStopProducerOutput</returns>
        GatewayStopProducerOutput GatewayStopProducer(GatewayStopProducer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayStopProducerOutput</returns>
        ApiResponse<GatewayStopProducerOutput> GatewayStopProducerWithHttpInfo(GatewayStopProducer body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayMigrationSyncOutput</returns>
        GatewayMigrationSyncOutput GatewaySyncMigration(GatewaySyncMigration body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayMigrationSyncOutput</returns>
        ApiResponse<GatewayMigrationSyncOutput> GatewaySyncMigrationWithHttpInfo(GatewaySyncMigration body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateItemOutput</returns>
        GatewayUpdateItemOutput GatewayUpdateItem(GatewayUpdateItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateItemOutput</returns>
        ApiResponse<GatewayUpdateItemOutput> GatewayUpdateItemWithHttpInfo(GatewayUpdateItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerArtifactoryOutput</returns>
        GatewayUpdateProducerArtifactoryOutput GatewayUpdateProducerArtifactory(GatewayUpdateProducerArtifactory body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerArtifactoryOutput</returns>
        ApiResponse<GatewayUpdateProducerArtifactoryOutput> GatewayUpdateProducerArtifactoryWithHttpInfo(GatewayUpdateProducerArtifactory body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerAwsOutput</returns>
        GatewayUpdateProducerAwsOutput GatewayUpdateProducerAws(GatewayUpdateProducerAws body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerAwsOutput</returns>
        ApiResponse<GatewayUpdateProducerAwsOutput> GatewayUpdateProducerAwsWithHttpInfo(GatewayUpdateProducerAws body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerAzureOutput</returns>
        GatewayUpdateProducerAzureOutput GatewayUpdateProducerAzure(GatewayUpdateProducerAzure body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerAzureOutput</returns>
        ApiResponse<GatewayUpdateProducerAzureOutput> GatewayUpdateProducerAzureWithHttpInfo(GatewayUpdateProducerAzure body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerCassandraOutput</returns>
        GatewayUpdateProducerCassandraOutput GatewayUpdateProducerCassandra(GatewayUpdateProducerCassandra body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerCassandraOutput</returns>
        ApiResponse<GatewayUpdateProducerCassandraOutput> GatewayUpdateProducerCassandraWithHttpInfo(GatewayUpdateProducerCassandra body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerCertificateAutomationOutput</returns>
        GatewayUpdateProducerCertificateAutomationOutput GatewayUpdateProducerCertificateAutomation(GatewayUpdateProducerCertificateAutomation body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerCertificateAutomationOutput</returns>
        ApiResponse<GatewayUpdateProducerCertificateAutomationOutput> GatewayUpdateProducerCertificateAutomationWithHttpInfo(GatewayUpdateProducerCertificateAutomation body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GatewayUpdateProducerCustomOutput</returns>
        GatewayUpdateProducerCustomOutput GatewayUpdateProducerCustom(GatewayUpdateProducerCustom body = default(GatewayUpdateProducerCustom));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GatewayUpdateProducerCustomOutput</returns>
        ApiResponse<GatewayUpdateProducerCustomOutput> GatewayUpdateProducerCustomWithHttpInfo(GatewayUpdateProducerCustom body = default(GatewayUpdateProducerCustom));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerEksOutput</returns>
        GatewayUpdateProducerEksOutput GatewayUpdateProducerEks(GatewayUpdateProducerEks body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerEksOutput</returns>
        ApiResponse<GatewayUpdateProducerEksOutput> GatewayUpdateProducerEksWithHttpInfo(GatewayUpdateProducerEks body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerGcpOutput</returns>
        GatewayUpdateProducerGcpOutput GatewayUpdateProducerGcp(GatewayUpdateProducerGcp body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerGcpOutput</returns>
        ApiResponse<GatewayUpdateProducerGcpOutput> GatewayUpdateProducerGcpWithHttpInfo(GatewayUpdateProducerGcp body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerGkeOutput</returns>
        GatewayUpdateProducerGkeOutput GatewayUpdateProducerGke(GatewayUpdateProducerGke body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerGkeOutput</returns>
        ApiResponse<GatewayUpdateProducerGkeOutput> GatewayUpdateProducerGkeWithHttpInfo(GatewayUpdateProducerGke body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerLdapOutput</returns>
        GatewayUpdateProducerLdapOutput GatewayUpdateProducerLdap(GatewayUpdateProducerLdap body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerLdapOutput</returns>
        ApiResponse<GatewayUpdateProducerLdapOutput> GatewayUpdateProducerLdapWithHttpInfo(GatewayUpdateProducerLdap body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerMSSQLOutput</returns>
        GatewayUpdateProducerMSSQLOutput GatewayUpdateProducerMSSQL(GatewayUpdateProducerMSSQL body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerMSSQLOutput</returns>
        ApiResponse<GatewayUpdateProducerMSSQLOutput> GatewayUpdateProducerMSSQLWithHttpInfo(GatewayUpdateProducerMSSQL body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerMongoOutput</returns>
        GatewayUpdateProducerMongoOutput GatewayUpdateProducerMongo(GatewayUpdateProducerMongo body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerMongoOutput</returns>
        ApiResponse<GatewayUpdateProducerMongoOutput> GatewayUpdateProducerMongoWithHttpInfo(GatewayUpdateProducerMongo body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerMySQLOutput</returns>
        GatewayUpdateProducerMySQLOutput GatewayUpdateProducerMySQL(GatewayUpdateProducerMySQL body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerMySQLOutput</returns>
        ApiResponse<GatewayUpdateProducerMySQLOutput> GatewayUpdateProducerMySQLWithHttpInfo(GatewayUpdateProducerMySQL body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerNativeK8SOutput</returns>
        GatewayUpdateProducerNativeK8SOutput GatewayUpdateProducerNativeK8S(GatewayUpdateProducerNativeK8S body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerNativeK8SOutput</returns>
        ApiResponse<GatewayUpdateProducerNativeK8SOutput> GatewayUpdateProducerNativeK8SWithHttpInfo(GatewayUpdateProducerNativeK8S body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerOracleDbOutput</returns>
        GatewayUpdateProducerOracleDbOutput GatewayUpdateProducerOracleDb(GatewayUpdateProducerOracleDb body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerOracleDbOutput</returns>
        ApiResponse<GatewayUpdateProducerOracleDbOutput> GatewayUpdateProducerOracleDbWithHttpInfo(GatewayUpdateProducerOracleDb body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerPostgreSQLOutput</returns>
        GatewayUpdateProducerPostgreSQLOutput GatewayUpdateProducerPostgreSQL(GatewayUpdateProducerPostgreSQL body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerPostgreSQLOutput</returns>
        ApiResponse<GatewayUpdateProducerPostgreSQLOutput> GatewayUpdateProducerPostgreSQLWithHttpInfo(GatewayUpdateProducerPostgreSQL body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerRabbitMQOutput</returns>
        GatewayUpdateProducerRabbitMQOutput GatewayUpdateProducerRabbitMQ(GatewayUpdateProducerRabbitMQ body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerRabbitMQOutput</returns>
        ApiResponse<GatewayUpdateProducerRabbitMQOutput> GatewayUpdateProducerRabbitMQWithHttpInfo(GatewayUpdateProducerRabbitMQ body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerRdpOutput</returns>
        GatewayUpdateProducerRdpOutput GatewayUpdateProducerRdp(GatewayUpdateProducerRdp body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerRdpOutput</returns>
        ApiResponse<GatewayUpdateProducerRdpOutput> GatewayUpdateProducerRdpWithHttpInfo(GatewayUpdateProducerRdp body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerRedshiftOutput</returns>
        GatewayUpdateProducerRedshiftOutput GatewayUpdateProducerRedshift(GatewayUpdateProducerRedshift body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerRedshiftOutput</returns>
        ApiResponse<GatewayUpdateProducerRedshiftOutput> GatewayUpdateProducerRedshiftWithHttpInfo(GatewayUpdateProducerRedshift body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerSnowflakeOutput</returns>
        GatewayUpdateProducerSnowflakeOutput GatewayUpdateProducerSnowflake(GatewayUpdateProducerSnowflake body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerSnowflakeOutput</returns>
        ApiResponse<GatewayUpdateProducerSnowflakeOutput> GatewayUpdateProducerSnowflakeWithHttpInfo(GatewayUpdateProducerSnowflake body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void GatewayUpdateTmpUsers(GatewayUpdateTmpUsers body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GatewayUpdateTmpUsersWithHttpInfo(GatewayUpdateTmpUsers body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetAccountLogo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetAccountLogoWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthMethod</returns>
        AuthMethod GetAuthMethod(GetAuthMethod body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthMethod</returns>
        ApiResponse<AuthMethod> GetAuthMethodWithHttpInfo(GetAuthMethod body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetDynamicSecretValue(GetDynamicSecretValue body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetDynamicSecretValueWithHttpInfo(GetDynamicSecretValue body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetKubeExecCredsOutput</returns>
        GetKubeExecCredsOutput GetKubeExecCreds(GetKubeExecCreds body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetKubeExecCredsOutput</returns>
        ApiResponse<GetKubeExecCredsOutput> GetKubeExecCredsWithHttpInfo(GetKubeExecCreds body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetPKICertificateOutput</returns>
        GetPKICertificateOutput GetPKICertificate(GetPKICertificate body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetPKICertificateOutput</returns>
        ApiResponse<GetPKICertificateOutput> GetPKICertificateWithHttpInfo(GetPKICertificate body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetRSAPublicOutput</returns>
        GetRSAPublicOutput GetRSAPublic(GetRSAPublic body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetRSAPublicOutput</returns>
        ApiResponse<GetRSAPublicOutput> GetRSAPublicWithHttpInfo(GetRSAPublic body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Role</returns>
        Role GetRole(GetRole body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> GetRoleWithHttpInfo(GetRole body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GetRotatedSecretValue(GetRotatedSecretValue body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GetRotatedSecretValueWithHttpInfo(GetRotatedSecretValue body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetSSHCertificateOutput</returns>
        GetSSHCertificateOutput GetSSHCertificate(GetSSHCertificate body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetSSHCertificateOutput</returns>
        ApiResponse<GetSSHCertificateOutput> GetSSHCertificateWithHttpInfo(GetSSHCertificate body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetSecretValue(GetSecretValue body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetSecretValueWithHttpInfo(GetSecretValue body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTags(GetTags body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTagsWithHttpInfo(GetTags body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Target</returns>
        Target GetTarget(GetTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Target</returns>
        ApiResponse<Target> GetTargetWithHttpInfo(GetTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetTargetDetailsOutput</returns>
        GetTargetDetailsOutput GetTargetDetails(GetTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetTargetDetailsOutput</returns>
        ApiResponse<GetTargetDetailsOutput> GetTargetDetailsWithHttpInfo(GetTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KMIPClientUpdateResponse</returns>
        KMIPClientUpdateResponse KmipClientDeleteRule(KmipClientDeleteRule body = default(KmipClientDeleteRule));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KMIPClientUpdateResponse</returns>
        ApiResponse<KMIPClientUpdateResponse> KmipClientDeleteRuleWithHttpInfo(KmipClientDeleteRule body = default(KmipClientDeleteRule));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KMIPClientUpdateResponse</returns>
        KMIPClientUpdateResponse KmipClientSetRule(KmipClientSetRule body = default(KmipClientSetRule));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KMIPClientUpdateResponse</returns>
        ApiResponse<KMIPClientUpdateResponse> KmipClientSetRuleWithHttpInfo(KmipClientSetRule body = default(KmipClientSetRule));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KmipCreateClientOutput</returns>
        KmipCreateClientOutput KmipCreateClient(KmipCreateClient body = default(KmipCreateClient));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KmipCreateClientOutput</returns>
        ApiResponse<KmipCreateClientOutput> KmipCreateClientWithHttpInfo(KmipCreateClient body = default(KmipCreateClient));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object KmipDeleteClient(KmipDeleteClient body = default(KmipDeleteClient));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> KmipDeleteClientWithHttpInfo(KmipDeleteClient body = default(KmipDeleteClient));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KMIPClientGetResponse</returns>
        KMIPClientGetResponse KmipDescribeClient(KmipDescribeClient body = default(KmipDescribeClient));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KMIPClientGetResponse</returns>
        ApiResponse<KMIPClientGetResponse> KmipDescribeClientWithHttpInfo(KmipDescribeClient body = default(KmipDescribeClient));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KmipDescribeServerOutput</returns>
        KmipDescribeServerOutput KmipDescribeServer(KmipDescribeServer body = default(KmipDescribeServer));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KmipDescribeServerOutput</returns>
        ApiResponse<KmipDescribeServerOutput> KmipDescribeServerWithHttpInfo(KmipDescribeServer body = default(KmipDescribeServer));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KMIPClientListResponse</returns>
        KMIPClientListResponse KmipListClients(KmipListClients body = default(KmipListClients));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KMIPClientListResponse</returns>
        ApiResponse<KMIPClientListResponse> KmipListClientsWithHttpInfo(KmipListClients body = default(KmipListClients));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KmipRenewClientCertificateOutput</returns>
        KmipRenewClientCertificateOutput KmipRenewClientCertificate(KmipRenewClientCertificate body = default(KmipRenewClientCertificate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KmipRenewClientCertificateOutput</returns>
        ApiResponse<KmipRenewClientCertificateOutput> KmipRenewClientCertificateWithHttpInfo(KmipRenewClientCertificate body = default(KmipRenewClientCertificate));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KmipRenewServerCertificateOutput</returns>
        KmipRenewServerCertificateOutput KmipRenewServerCertificate(KmipRenewServerCertificate body = default(KmipRenewServerCertificate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KmipRenewServerCertificateOutput</returns>
        ApiResponse<KmipRenewServerCertificateOutput> KmipRenewServerCertificateWithHttpInfo(KmipRenewServerCertificate body = default(KmipRenewServerCertificate));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KMIPEnvironmentCreateResponse</returns>
        KMIPEnvironmentCreateResponse KmipServerSetup(KmipServerSetup body = default(KmipServerSetup));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KMIPEnvironmentCreateResponse</returns>
        ApiResponse<KMIPEnvironmentCreateResponse> KmipServerSetupWithHttpInfo(KmipServerSetup body = default(KmipServerSetup));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KmipSetServerStateOutput</returns>
        KmipSetServerStateOutput KmipSetServerState(KmipSetServerState body = default(KmipSetServerState));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KmipSetServerStateOutput</returns>
        ApiResponse<KmipSetServerStateOutput> KmipSetServerStateWithHttpInfo(KmipSetServerState body = default(KmipSetServerState));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListAuthMethodsOutput</returns>
        ListAuthMethodsOutput ListAuthMethods(ListAuthMethods body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListAuthMethodsOutput</returns>
        ApiResponse<ListAuthMethodsOutput> ListAuthMethodsWithHttpInfo(ListAuthMethods body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListItemsInPathOutput</returns>
        ListItemsInPathOutput ListItems(ListItems body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListItemsInPathOutput</returns>
        ApiResponse<ListItemsInPathOutput> ListItemsWithHttpInfo(ListItems body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListRolesOutput</returns>
        ListRolesOutput ListRoles(ListRoles body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListRolesOutput</returns>
        ApiResponse<ListRolesOutput> ListRolesWithHttpInfo(ListRoles body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListTargetsOutput</returns>
        ListTargetsOutput ListTargets(ListTargets body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListTargetsOutput</returns>
        ApiResponse<ListTargetsOutput> ListTargetsWithHttpInfo(ListTargets body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object MoveObjects(MoveObjects body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MoveObjectsWithHttpInfo(MoveObjects body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>SystemAccessCredentialsReplyObj</returns>
        SystemAccessCredentialsReplyObj RawCreds(RawCreds body = default(RawCreds));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SystemAccessCredentialsReplyObj</returns>
        ApiResponse<SystemAccessCredentialsReplyObj> RawCredsWithHttpInfo(RawCreds body = default(RawCreds));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RefreshKeyOutput</returns>
        RefreshKeyOutput RefreshKey(RefreshKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RefreshKeyOutput</returns>
        ApiResponse<RefreshKeyOutput> RefreshKeyWithHttpInfo(RefreshKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ReverseRBACOutput</returns>
        ReverseRBACOutput ReverseRBAC(ReverseRBAC body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ReverseRBACOutput</returns>
        ApiResponse<ReverseRBACOutput> ReverseRBACWithHttpInfo(ReverseRBAC body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RollbackSecretOutput</returns>
        RollbackSecretOutput RollbackSecret(RollbackSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RollbackSecretOutput</returns>
        ApiResponse<RollbackSecretOutput> RollbackSecretWithHttpInfo(RollbackSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RotateKeyOutput</returns>
        RotateKeyOutput RotateKey(UpdateRotationSettings body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RotateKeyOutput</returns>
        ApiResponse<RotateKeyOutput> RotateKeyWithHttpInfo(UpdateRotationSettings body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object SetItemState(SetItemState body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetItemStateWithHttpInfo(SetItemState body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object SetRoleRule(SetRoleRule body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetRoleRuleWithHttpInfo(SetRoleRule body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SignJWTOutput</returns>
        SignJWTOutput SignJWTWithClassicKey(SignJWTWithClassicKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SignJWTOutput</returns>
        ApiResponse<SignJWTOutput> SignJWTWithClassicKeyWithHttpInfo(SignJWTWithClassicKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SignPKCS1Output</returns>
        SignPKCS1Output SignPKCS1(SignPKCS1 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SignPKCS1Output</returns>
        ApiResponse<SignPKCS1Output> SignPKCS1WithHttpInfo(SignPKCS1 body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SignPKICertOutput</returns>
        SignPKICertOutput SignPKICertWithClassicKey(SignPKICertWithClassicKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SignPKICertOutput</returns>
        ApiResponse<SignPKICertOutput> SignPKICertWithClassicKeyWithHttpInfo(SignPKICertWithClassicKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StaticCredsAuthOutput</returns>
        StaticCredsAuthOutput StaticCredsAuth(StaticCredsAuth body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StaticCredsAuthOutput</returns>
        ApiResponse<StaticCredsAuthOutput> StaticCredsAuthWithHttpInfo(StaticCredsAuth body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UidCreateChildTokenOutput</returns>
        UidCreateChildTokenOutput UidCreateChildToken(UidCreateChildToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UidCreateChildTokenOutput</returns>
        ApiResponse<UidCreateChildTokenOutput> UidCreateChildTokenWithHttpInfo(UidCreateChildToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UidGenerateTokenOutput</returns>
        UidGenerateTokenOutput UidGenerateToken(UidGenerateToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UidGenerateTokenOutput</returns>
        ApiResponse<UidGenerateTokenOutput> UidGenerateTokenWithHttpInfo(UidGenerateToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UniversalIdentityDetails</returns>
        UniversalIdentityDetails UidListChildren(UidListChildren body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UniversalIdentityDetails</returns>
        ApiResponse<UniversalIdentityDetails> UidListChildrenWithHttpInfo(UidListChildren body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UidRevokeToken(UidRevokeToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UidRevokeTokenWithHttpInfo(UidRevokeToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UidRotateTokenOutput</returns>
        UidRotateTokenOutput UidRotateToken(UidRotateToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UidRotateTokenOutput</returns>
        ApiResponse<UidRotateTokenOutput> UidRotateTokenWithHttpInfo(UidRotateToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UpdateAWSTarget(UpdateAWSTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateAWSTargetWithHttpInfo(UpdateAWSTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateAWSTargetDetails(UpdateAWSTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateAWSTargetDetailsWithHttpInfo(UpdateAWSTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateArtifactoryTargetOutput</returns>
        UpdateArtifactoryTargetOutput UpdateArtifactoryTarget(UpdateArtifactoryTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateArtifactoryTargetOutput</returns>
        ApiResponse<UpdateArtifactoryTargetOutput> UpdateArtifactoryTargetWithHttpInfo(UpdateArtifactoryTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UpdateAssoc(UpdateAssoc body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateAssocWithHttpInfo(UpdateAssoc body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateAuthMethodOutput</returns>
        UpdateAuthMethodOutput UpdateAuthMethod(UpdateAuthMethod body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateAuthMethodOutput</returns>
        ApiResponse<UpdateAuthMethodOutput> UpdateAuthMethodWithHttpInfo(UpdateAuthMethod body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UpdateAuthMethodAWSIAM(UpdateAuthMethodAWSIAM body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateAuthMethodAWSIAMWithHttpInfo(UpdateAuthMethodAWSIAM body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UpdateAuthMethodAzureAD(UpdateAuthMethodAzureAD body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateAuthMethodAzureADWithHttpInfo(UpdateAuthMethodAzureAD body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UpdateAuthMethodGCP(UpdateAuthMethodGCP body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateAuthMethodGCPWithHttpInfo(UpdateAuthMethodGCP body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateAuthMethodK8SOutput</returns>
        UpdateAuthMethodK8SOutput UpdateAuthMethodK8S(UpdateAuthMethodK8S body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateAuthMethodK8SOutput</returns>
        ApiResponse<UpdateAuthMethodK8SOutput> UpdateAuthMethodK8SWithHttpInfo(UpdateAuthMethodK8S body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UpdateAuthMethodLDAP(UpdateAuthMethodLDAP body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateAuthMethodLDAPWithHttpInfo(UpdateAuthMethodLDAP body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UpdateAuthMethodOAuth2(UpdateAuthMethodOAuth2 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateAuthMethodOAuth2WithHttpInfo(UpdateAuthMethodOAuth2 body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UpdateAuthMethodOIDC(UpdateAuthMethodOIDC body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateAuthMethodOIDCWithHttpInfo(UpdateAuthMethodOIDC body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UpdateAuthMethodSAML(UpdateAuthMethodSAML body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateAuthMethodSAMLWithHttpInfo(UpdateAuthMethodSAML body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UpdateAuthMethodUniversalIdentity(UpdateAuthMethodUniversalIdentity body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateAuthMethodUniversalIdentityWithHttpInfo(UpdateAuthMethodUniversalIdentity body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateAzureTargetOutput</returns>
        UpdateAzureTargetOutput UpdateAzureTarget(UpdateAzureTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateAzureTargetOutput</returns>
        ApiResponse<UpdateAzureTargetOutput> UpdateAzureTargetWithHttpInfo(UpdateAzureTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateDBTargetOutput</returns>
        UpdateDBTargetOutput UpdateDBTarget(UpdateDBTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateDBTargetOutput</returns>
        ApiResponse<UpdateDBTargetOutput> UpdateDBTargetWithHttpInfo(UpdateDBTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateDBTargetDetails(UpdateDBTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateDBTargetDetailsWithHttpInfo(UpdateDBTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateEKSTargetOutput</returns>
        UpdateEKSTargetOutput UpdateEKSTarget(UpdateEKSTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateEKSTargetOutput</returns>
        ApiResponse<UpdateEKSTargetOutput> UpdateEKSTargetWithHttpInfo(UpdateEKSTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateGKETargetOutput</returns>
        UpdateGKETargetOutput UpdateGKETarget(UpdateGKETarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateGKETargetOutput</returns>
        ApiResponse<UpdateGKETargetOutput> UpdateGKETargetWithHttpInfo(UpdateGKETarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateGcpTargetOutput</returns>
        UpdateGcpTargetOutput UpdateGcpTarget(UpdateGcpTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateGcpTargetOutput</returns>
        ApiResponse<UpdateGcpTargetOutput> UpdateGcpTargetWithHttpInfo(UpdateGcpTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateItemOutput</returns>
        UpdateItemOutput UpdateItem(UpdateItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateItemOutput</returns>
        ApiResponse<UpdateItemOutput> UpdateItemWithHttpInfo(UpdateItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateNativeK8STarget</returns>
        UpdateNativeK8STarget UpdateNativeK8STarget(UpdateNativeK8STarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateNativeK8STarget</returns>
        ApiResponse<UpdateNativeK8STarget> UpdateNativeK8STargetWithHttpInfo(UpdateNativeK8STarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdatePKICertIssuerOutput</returns>
        UpdatePKICertIssuerOutput UpdatePKICertIssuer(UpdatePKICertIssuer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdatePKICertIssuerOutput</returns>
        ApiResponse<UpdatePKICertIssuerOutput> UpdatePKICertIssuerWithHttpInfo(UpdatePKICertIssuer body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateRDPTargetDetails(UpdateRDPTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateRDPTargetDetailsWithHttpInfo(UpdateRDPTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateRabbitMQTargetOutput</returns>
        UpdateRabbitMQTargetOutput UpdateRabbitMQTarget(UpdateRabbitMQTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateRabbitMQTargetOutput</returns>
        ApiResponse<UpdateRabbitMQTargetOutput> UpdateRabbitMQTargetWithHttpInfo(UpdateRabbitMQTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateRabbitMQTargetDetails(UpdateRabbitMQTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateRabbitMQTargetDetailsWithHttpInfo(UpdateRabbitMQTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateRoleOutput</returns>
        UpdateRoleOutput UpdateRole(UpdateRole body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateRoleOutput</returns>
        ApiResponse<UpdateRoleOutput> UpdateRoleWithHttpInfo(UpdateRole body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateRotatedSecretOutput</returns>
        UpdateRotatedSecretOutput UpdateRotatedSecret(UpdateRotatedSecret body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateRotatedSecretOutput</returns>
        ApiResponse<UpdateRotatedSecretOutput> UpdateRotatedSecretWithHttpInfo(UpdateRotatedSecret body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RotateKeyOutput</returns>
        RotateKeyOutput UpdateRotationSettings();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RotateKeyOutput</returns>
        ApiResponse<RotateKeyOutput> UpdateRotationSettingsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateSSHCertIssuerOutput</returns>
        UpdateSSHCertIssuerOutput UpdateSSHCertIssuer(UpdateSSHCertIssuer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateSSHCertIssuerOutput</returns>
        ApiResponse<UpdateSSHCertIssuerOutput> UpdateSSHCertIssuerWithHttpInfo(UpdateSSHCertIssuer body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateSSHTargetOutput</returns>
        UpdateSSHTargetOutput UpdateSSHTarget(UpdateSSHTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateSSHTargetOutput</returns>
        ApiResponse<UpdateSSHTargetOutput> UpdateSSHTargetWithHttpInfo(UpdateSSHTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateSSHTargetDetails(UpdateSSHTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateSSHTargetDetailsWithHttpInfo(UpdateSSHTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateSecretValOutput</returns>
        UpdateSecretValOutput UpdateSecretVal(UpdateSecretVal body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateSecretValOutput</returns>
        ApiResponse<UpdateSecretValOutput> UpdateSecretValWithHttpInfo(UpdateSecretVal body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateTarget(UpdateTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateTargetWithHttpInfo(UpdateTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateTargetDetails(Object body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateTargetDetailsWithHttpInfo(Object body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateWebTargetOutput</returns>
        UpdateWebTargetOutput UpdateWebTarget(UpdateWebTarget body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateWebTargetOutput</returns>
        ApiResponse<UpdateWebTargetOutput> UpdateWebTargetWithHttpInfo(UpdateWebTarget body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        UpdateTargetOutput UpdateWebTargetDetails(UpdateWebTargetDetails body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        ApiResponse<UpdateTargetOutput> UpdateWebTargetDetailsWithHttpInfo(UpdateWebTargetDetails body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UploadRSA(UploadRSA body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UploadRSAWithHttpInfo(UploadRSA body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ValidateTokenOutput</returns>
        ValidateTokenOutput ValidateToken(ValidateToken body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ValidateTokenOutput</returns>
        ApiResponse<ValidateTokenOutput> ValidateTokenWithHttpInfo(ValidateToken body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>VerifyJWTOutput</returns>
        VerifyJWTOutput VerifyJWTWithClassicKey(VerifyJWTWithClassicKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of VerifyJWTOutput</returns>
        ApiResponse<VerifyJWTOutput> VerifyJWTWithClassicKeyWithHttpInfo(VerifyJWTWithClassicKey body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object VerifyPKCS1(VerifyPKCS1 body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> VerifyPKCS1WithHttpInfo(VerifyPKCS1 body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>VerifyPKICertOutput</returns>
        VerifyPKICertOutput VerifyPKICertWithClassicKey(VerifyPKICertWithClassicKey body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of VerifyPKICertOutput</returns>
        ApiResponse<VerifyPKICertOutput> VerifyPKICertWithClassicKeyWithHttpInfo(VerifyPKICertWithClassicKey body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV2ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRoleAuthMethodAssocOutput</returns>
        System.Threading.Tasks.Task<CreateRoleAuthMethodAssocOutput> AssocRoleAuthMethodAsync(AssocRoleAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRoleAuthMethodAssocOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateRoleAuthMethodAssocOutput>> AssocRoleAuthMethodWithHttpInfoAsync(AssocRoleAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTargetItemAssocOutput</returns>
        System.Threading.Tasks.Task<CreateTargetItemAssocOutput> AssocTargetItemAsync(AssocTargetItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTargetItemAssocOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTargetItemAssocOutput>> AssocTargetItemWithHttpInfoAsync(AssocTargetItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthOutput</returns>
        System.Threading.Tasks.Task<AuthOutput> AuthAsync(Auth body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthOutput>> AuthWithHttpInfoAsync(Auth body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigureOutput</returns>
        System.Threading.Tasks.Task<ConfigureOutput> ConfigureAsync(Configure body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigureOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigureOutput>> ConfigureWithHttpInfoAsync(Configure body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ConnectAsync(Connect body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConnectWithHttpInfoAsync(Connect body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAWSTargetOutput</returns>
        System.Threading.Tasks.Task<CreateAWSTargetOutput> CreateAWStargetAsync(CreateAWSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAWSTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAWSTargetOutput>> CreateAWStargetWithHttpInfoAsync(CreateAWSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateArtifactoryTargetOutput</returns>
        System.Threading.Tasks.Task<CreateArtifactoryTargetOutput> CreateArtifactoryTargetAsync(CreateArtifactoryTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateArtifactoryTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateArtifactoryTargetOutput>> CreateArtifactoryTargetWithHttpInfoAsync(CreateArtifactoryTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodOutput> CreateAuthMethodAsync(CreateAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodOutput>> CreateAuthMethodWithHttpInfoAsync(CreateAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodAWSIAMOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodAWSIAMOutput> CreateAuthMethodAWSIAMAsync(CreateAuthMethodAWSIAM body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodAWSIAMOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodAWSIAMOutput>> CreateAuthMethodAWSIAMWithHttpInfoAsync(CreateAuthMethodAWSIAM body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodAzureADOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodAzureADOutput> CreateAuthMethodAzureADAsync(CreateAuthMethodAzureAD body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodAzureADOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodAzureADOutput>> CreateAuthMethodAzureADWithHttpInfoAsync(CreateAuthMethodAzureAD body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodGCPOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodGCPOutput> CreateAuthMethodGCPAsync(CreateAuthMethodGCP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodGCPOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodGCPOutput>> CreateAuthMethodGCPWithHttpInfoAsync(CreateAuthMethodGCP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodHuaweiOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodHuaweiOutput> CreateAuthMethodHuaweiAsync(CreateAuthMethodHuawei body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodHuaweiOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodHuaweiOutput>> CreateAuthMethodHuaweiWithHttpInfoAsync(CreateAuthMethodHuawei body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodK8SOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodK8SOutput> CreateAuthMethodK8SAsync(CreateAuthMethodK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodK8SOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodK8SOutput>> CreateAuthMethodK8SWithHttpInfoAsync(CreateAuthMethodK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodLDAPOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodLDAPOutput> CreateAuthMethodLDAPAsync(CreateAuthMethodLDAP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodLDAPOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodLDAPOutput>> CreateAuthMethodLDAPWithHttpInfoAsync(CreateAuthMethodLDAP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodOAuth2Output</returns>
        System.Threading.Tasks.Task<CreateAuthMethodOAuth2Output> CreateAuthMethodOAuth2Async(CreateAuthMethodOAuth2 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodOAuth2Output)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodOAuth2Output>> CreateAuthMethodOAuth2WithHttpInfoAsync(CreateAuthMethodOAuth2 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodOIDCOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodOIDCOutput> CreateAuthMethodOIDCAsync(CreateAuthMethodOIDC body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodOIDCOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodOIDCOutput>> CreateAuthMethodOIDCWithHttpInfoAsync(CreateAuthMethodOIDC body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodSAMLOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodSAMLOutput> CreateAuthMethodSAMLAsync(CreateAuthMethodSAML body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodSAMLOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodSAMLOutput>> CreateAuthMethodSAMLWithHttpInfoAsync(CreateAuthMethodSAML body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodUniversalIdentityOutput</returns>
        System.Threading.Tasks.Task<CreateAuthMethodUniversalIdentityOutput> CreateAuthMethodUniversalIdentityAsync(CreateAuthMethodUniversalIdentity body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodUniversalIdentityOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAuthMethodUniversalIdentityOutput>> CreateAuthMethodUniversalIdentityWithHttpInfoAsync(CreateAuthMethodUniversalIdentity body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAzureTargetOutput</returns>
        System.Threading.Tasks.Task<CreateAzureTargetOutput> CreateAzureTargetAsync(CreateAzureTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAzureTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAzureTargetOutput>> CreateAzureTargetWithHttpInfoAsync(CreateAzureTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClassicKeyOutput</returns>
        System.Threading.Tasks.Task<CreateClassicKeyOutput> CreateClassicKeyAsync(CreateClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClassicKeyOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateClassicKeyOutput>> CreateClassicKeyWithHttpInfoAsync(CreateClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateDBTargetOutput</returns>
        System.Threading.Tasks.Task<CreateDBTargetOutput> CreateDBTargetAsync(CreateDBTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateDBTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateDBTargetOutput>> CreateDBTargetWithHttpInfoAsync(CreateDBTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateDFCKeyOutput</returns>
        System.Threading.Tasks.Task<CreateDFCKeyOutput> CreateDFCKeyAsync(CreateDFCKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateDFCKeyOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateDFCKeyOutput>> CreateDFCKeyWithHttpInfoAsync(CreateDFCKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateDynamicSecretAsync(CreateDynamicSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateDynamicSecretWithHttpInfoAsync(CreateDynamicSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateEKSTargetOutput</returns>
        System.Threading.Tasks.Task<CreateEKSTargetOutput> CreateEKSTargetAsync(CreateEKSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateEKSTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateEKSTargetOutput>> CreateEKSTargetWithHttpInfoAsync(CreateEKSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateGKETargetOutput</returns>
        System.Threading.Tasks.Task<CreateGKETargetOutput> CreateGKETargetAsync(CreateGKETarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateGKETargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateGKETargetOutput>> CreateGKETargetWithHttpInfoAsync(CreateGKETarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateGcpTargetOutput</returns>
        System.Threading.Tasks.Task<CreateGcpTargetOutput> CreateGcpTargetAsync(CreateGcpTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateGcpTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateGcpTargetOutput>> CreateGcpTargetWithHttpInfoAsync(CreateGcpTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateKeyOutput</returns>
        System.Threading.Tasks.Task<CreateKeyOutput> CreateKeyAsync(CreateKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateKeyOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateKeyOutput>> CreateKeyWithHttpInfoAsync(CreateKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNativeK8STargetOutput</returns>
        System.Threading.Tasks.Task<CreateNativeK8STargetOutput> CreateNativeK8STargetAsync(CreateNativeK8STarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNativeK8STargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateNativeK8STargetOutput>> CreateNativeK8STargetWithHttpInfoAsync(CreateNativeK8STarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePKICertIssuerOutput</returns>
        System.Threading.Tasks.Task<CreatePKICertIssuerOutput> CreatePKICertIssuerAsync(CreatePKICertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePKICertIssuerOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePKICertIssuerOutput>> CreatePKICertIssuerWithHttpInfoAsync(CreatePKICertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRabbitMQTargetOutput</returns>
        System.Threading.Tasks.Task<CreateRabbitMQTargetOutput> CreateRabbitMQTargetAsync(CreateRabbitMQTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRabbitMQTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateRabbitMQTargetOutput>> CreateRabbitMQTargetWithHttpInfoAsync(CreateRabbitMQTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateRoleAsync(CreateRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRoleWithHttpInfoAsync(CreateRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRotatedSecretOutput</returns>
        System.Threading.Tasks.Task<CreateRotatedSecretOutput> CreateRotatedSecretAsync(CreateRotatedSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRotatedSecretOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateRotatedSecretOutput>> CreateRotatedSecretWithHttpInfoAsync(CreateRotatedSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSSHCertIssuerOutput</returns>
        System.Threading.Tasks.Task<CreateSSHCertIssuerOutput> CreateSSHCertIssuerAsync(CreateSSHCertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSSHCertIssuerOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSSHCertIssuerOutput>> CreateSSHCertIssuerWithHttpInfoAsync(CreateSSHCertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSSHTargetOutput</returns>
        System.Threading.Tasks.Task<CreateSSHTargetOutput> CreateSSHTargetAsync(CreateSSHTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSSHTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSSHTargetOutput>> CreateSSHTargetWithHttpInfoAsync(CreateSSHTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSecretOutput</returns>
        System.Threading.Tasks.Task<CreateSecretOutput> CreateSecretAsync(CreateSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSecretOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSecretOutput>> CreateSecretWithHttpInfoAsync(CreateSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWebTargetOutput</returns>
        System.Threading.Tasks.Task<CreateWebTargetOutput> CreateWebTargetAsync(CreateWebTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWebTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWebTargetOutput>> CreateWebTargetWithHttpInfoAsync(CreateWebTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateLdapTargetOutput</returns>
        System.Threading.Tasks.Task<CreateLdapTargetOutput> CreateldapTargetAsync(CreateLdapTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateLdapTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateLdapTargetOutput>> CreateldapTargetWithHttpInfoAsync(CreateLdapTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecryptOutput</returns>
        System.Threading.Tasks.Task<DecryptOutput> DecryptAsync(Decrypt body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecryptOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecryptOutput>> DecryptWithHttpInfoAsync(Decrypt body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecryptPKCS1Output</returns>
        System.Threading.Tasks.Task<DecryptPKCS1Output> DecryptPKCS1Async(DecryptPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecryptPKCS1Output)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecryptPKCS1Output>> DecryptPKCS1WithHttpInfoAsync(DecryptPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecryptWithClassicKeyOutput</returns>
        System.Threading.Tasks.Task<DecryptWithClassicKeyOutput> DecryptWithClassicKeyAsync(DecryptWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecryptWithClassicKeyOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecryptWithClassicKeyOutput>> DecryptWithClassicKeyWithHttpInfoAsync(DecryptWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAuthMethodOutput</returns>
        System.Threading.Tasks.Task<DeleteAuthMethodOutput> DeleteAuthMethodAsync(DeleteAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAuthMethodOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAuthMethodOutput>> DeleteAuthMethodWithHttpInfoAsync(DeleteAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAuthMethodsOutput</returns>
        System.Threading.Tasks.Task<DeleteAuthMethodsOutput> DeleteAuthMethodsAsync(DeleteAuthMethods body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAuthMethodsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAuthMethodsOutput>> DeleteAuthMethodsWithHttpInfoAsync(DeleteAuthMethods body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteItemOutput</returns>
        System.Threading.Tasks.Task<DeleteItemOutput> DeleteItemAsync(DeleteItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteItemOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteItemOutput>> DeleteItemWithHttpInfoAsync(DeleteItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteItemsOutput</returns>
        System.Threading.Tasks.Task<DeleteItemsOutput> DeleteItemsAsync(DeleteItems body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteItemsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteItemsOutput>> DeleteItemsWithHttpInfoAsync(DeleteItems body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteRoleAsync(DeleteRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleWithHttpInfoAsync(DeleteRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteRoleAssociationAsync(DeleteRoleAssociation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleAssociationWithHttpInfoAsync(DeleteRoleAssociation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteRoleRuleOutput</returns>
        System.Threading.Tasks.Task<DeleteRoleRuleOutput> DeleteRoleRuleAsync(DeleteRoleRule body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteRoleRuleOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteRoleRuleOutput>> DeleteRoleRuleWithHttpInfoAsync(DeleteRoleRule body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteRolesAsync(DeleteRoles body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRolesWithHttpInfoAsync(DeleteRoles body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteTargetAsync(DeleteTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTargetWithHttpInfoAsync(DeleteTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteTargetAssociationAsync(DeleteTargetAssociation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTargetAssociationWithHttpInfoAsync(DeleteTargetAssociation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteTargetsAsync(DeleteTargets body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTargetsWithHttpInfoAsync(DeleteTargets body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Item</returns>
        System.Threading.Tasks.Task<Item> DescribeItemAsync(DescribeItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<Item>> DescribeItemWithHttpInfoAsync(DescribeItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DescribePermissionsOutput</returns>
        System.Threading.Tasks.Task<DescribePermissionsOutput> DescribePermissionsAsync(DescribePermissions body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DescribePermissionsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<DescribePermissionsOutput>> DescribePermissionsWithHttpInfoAsync(DescribePermissions body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EncryptOutput</returns>
        System.Threading.Tasks.Task<EncryptOutput> EncryptAsync(Encrypt body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EncryptOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<EncryptOutput>> EncryptWithHttpInfoAsync(Encrypt body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EncryptPKCS1Output</returns>
        System.Threading.Tasks.Task<EncryptPKCS1Output> EncryptPKCS1Async(EncryptPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EncryptPKCS1Output)</returns>
        System.Threading.Tasks.Task<ApiResponse<EncryptPKCS1Output>> EncryptPKCS1WithHttpInfoAsync(EncryptPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EncryptOutput</returns>
        System.Threading.Tasks.Task<EncryptOutput> EncryptWithClassicKeyAsync(EncryptWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EncryptOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<EncryptOutput>> EncryptWithClassicKeyWithHttpInfoAsync(EncryptWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateK8SAuthConfigOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateK8SAuthConfigOutput> GatewayCreateK8SAuthConfigAsync(GatewayCreateK8SAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateK8SAuthConfigOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateK8SAuthConfigOutput>> GatewayCreateK8SAuthConfigWithHttpInfoAsync(GatewayCreateK8SAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerArtifactoryOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerArtifactoryOutput> GatewayCreateProducerArtifactoryAsync(GatewayCreateProducerArtifactory body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerArtifactoryOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerArtifactoryOutput>> GatewayCreateProducerArtifactoryWithHttpInfoAsync(GatewayCreateProducerArtifactory body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerAwsOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerAwsOutput> GatewayCreateProducerAwsAsync(GatewayCreateProducerAws body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerAwsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerAwsOutput>> GatewayCreateProducerAwsWithHttpInfoAsync(GatewayCreateProducerAws body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerAzureOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerAzureOutput> GatewayCreateProducerAzureAsync(GatewayCreateProducerAzure body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerAzureOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerAzureOutput>> GatewayCreateProducerAzureWithHttpInfoAsync(GatewayCreateProducerAzure body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerCassandraOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerCassandraOutput> GatewayCreateProducerCassandraAsync(GatewayCreateProducerCassandra body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerCassandraOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerCassandraOutput>> GatewayCreateProducerCassandraWithHttpInfoAsync(GatewayCreateProducerCassandra body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerCertificateAutomationOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerCertificateAutomationOutput> GatewayCreateProducerCertificateAutomationAsync(GatewayCreateProducerCertificateAutomation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerCertificateAutomationOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerCertificateAutomationOutput>> GatewayCreateProducerCertificateAutomationWithHttpInfoAsync(GatewayCreateProducerCertificateAutomation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerCustomOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerCustomOutput> GatewayCreateProducerCustomAsync(GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerCustomOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerCustomOutput>> GatewayCreateProducerCustomWithHttpInfoAsync(GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerEksOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerEksOutput> GatewayCreateProducerEksAsync(GatewayCreateProducerEks body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerEksOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerEksOutput>> GatewayCreateProducerEksWithHttpInfoAsync(GatewayCreateProducerEks body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerGcpOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerGcpOutput> GatewayCreateProducerGcpAsync(GatewayCreateProducerGcp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerGcpOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerGcpOutput>> GatewayCreateProducerGcpWithHttpInfoAsync(GatewayCreateProducerGcp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerGkeOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerGkeOutput> GatewayCreateProducerGkeAsync(GatewayCreateProducerGke body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerGkeOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerGkeOutput>> GatewayCreateProducerGkeWithHttpInfoAsync(GatewayCreateProducerGke body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerLdapOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerLdapOutput> GatewayCreateProducerLdapAsync(GatewayCreateProducerLdap body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerLdapOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerLdapOutput>> GatewayCreateProducerLdapWithHttpInfoAsync(GatewayCreateProducerLdap body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerMSSQLOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerMSSQLOutput> GatewayCreateProducerMSSQLAsync(GatewayCreateProducerMSSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerMSSQLOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerMSSQLOutput>> GatewayCreateProducerMSSQLWithHttpInfoAsync(GatewayCreateProducerMSSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerMongoOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerMongoOutput> GatewayCreateProducerMongoAsync(GatewayCreateProducerMongo body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerMongoOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerMongoOutput>> GatewayCreateProducerMongoWithHttpInfoAsync(GatewayCreateProducerMongo body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerMySQLOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerMySQLOutput> GatewayCreateProducerMySQLAsync(GatewayCreateProducerMySQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerMySQLOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerMySQLOutput>> GatewayCreateProducerMySQLWithHttpInfoAsync(GatewayCreateProducerMySQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerNativeK8SOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerNativeK8SOutput> GatewayCreateProducerNativeK8SAsync(GatewayCreateProducerNativeK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerNativeK8SOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerNativeK8SOutput>> GatewayCreateProducerNativeK8SWithHttpInfoAsync(GatewayCreateProducerNativeK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerOracleDbOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerOracleDbOutput> GatewayCreateProducerOracleDbAsync(GatewayCreateProducerOracleDb body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerOracleDbOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerOracleDbOutput>> GatewayCreateProducerOracleDbWithHttpInfoAsync(GatewayCreateProducerOracleDb body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerPostgreSQLOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerPostgreSQLOutput> GatewayCreateProducerPostgreSQLAsync(GatewayCreateProducerPostgreSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerPostgreSQLOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerPostgreSQLOutput>> GatewayCreateProducerPostgreSQLWithHttpInfoAsync(GatewayCreateProducerPostgreSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerRabbitMQOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerRabbitMQOutput> GatewayCreateProducerRabbitMQAsync(GatewayCreateProducerRabbitMQ body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerRabbitMQOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerRabbitMQOutput>> GatewayCreateProducerRabbitMQWithHttpInfoAsync(GatewayCreateProducerRabbitMQ body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerRdpOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerRdpOutput> GatewayCreateProducerRdpAsync(GatewayCreateProducerRdp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerRdpOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerRdpOutput>> GatewayCreateProducerRdpWithHttpInfoAsync(GatewayCreateProducerRdp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerRedshiftOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerRedshiftOutput> GatewayCreateProducerRedshiftAsync(GatewayCreateProducerRedshift body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerRedshiftOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerRedshiftOutput>> GatewayCreateProducerRedshiftWithHttpInfoAsync(GatewayCreateProducerRedshift body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerSnowflakeOutput</returns>
        System.Threading.Tasks.Task<GatewayCreateProducerSnowflakeOutput> GatewayCreateProducerSnowflakeAsync(GatewayCreateProducerSnowflake body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerSnowflakeOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCreateProducerSnowflakeOutput>> GatewayCreateProducerSnowflakeWithHttpInfoAsync(GatewayCreateProducerSnowflake body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GatewayDeleteAllowedManagementAccessAsync(GatewayDeleteAllowedManagementAccess body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GatewayDeleteAllowedManagementAccessWithHttpInfoAsync(GatewayDeleteAllowedManagementAccess body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayDeleteK8SAuthConfigOutput</returns>
        System.Threading.Tasks.Task<GatewayDeleteK8SAuthConfigOutput> GatewayDeleteK8SAuthConfigAsync(GatewayDeleteK8SAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayDeleteK8SAuthConfigOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayDeleteK8SAuthConfigOutput>> GatewayDeleteK8SAuthConfigWithHttpInfoAsync(GatewayDeleteK8SAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayDeleteProducerOutput</returns>
        System.Threading.Tasks.Task<GatewayDeleteProducerOutput> GatewayDeleteProducerAsync(GatewayDeleteProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayDeleteProducerOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayDeleteProducerOutput>> GatewayDeleteProducerWithHttpInfoAsync(GatewayDeleteProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AkeylessGatewayConfig</returns>
        System.Threading.Tasks.Task<AkeylessGatewayConfig> GatewayGetConfigAsync(GatewayGetConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AkeylessGatewayConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<AkeylessGatewayConfig>> GatewayGetConfigWithHttpInfoAsync(GatewayGetConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayGetK8SAuthConfigOutput</returns>
        System.Threading.Tasks.Task<GatewayGetK8SAuthConfigOutput> GatewayGetK8SAuthConfigAsync(GatewayGetK8SAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayGetK8SAuthConfigOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayGetK8SAuthConfigOutput>> GatewayGetK8SAuthConfigWithHttpInfoAsync(GatewayGetK8SAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DSProducerDetails</returns>
        System.Threading.Tasks.Task<DSProducerDetails> GatewayGetProducerAsync(GatewayGetProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DSProducerDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSProducerDetails>> GatewayGetProducerWithHttpInfoAsync(GatewayGetProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TmpUserData&gt;</returns>
        System.Threading.Tasks.Task<List<TmpUserData>> GatewayGetTmpUsersAsync(GatewayGetTmpUsers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TmpUserData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TmpUserData>>> GatewayGetTmpUsersWithHttpInfoAsync(GatewayGetTmpUsers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSubAdminsListReplyObj</returns>
        System.Threading.Tasks.Task<GetSubAdminsListReplyObj> GatewayListAllowedManagementAccessAsync(GatewayListAllowedManagementAccess body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSubAdminsListReplyObj)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSubAdminsListReplyObj>> GatewayListAllowedManagementAccessWithHttpInfoAsync(GatewayListAllowedManagementAccess body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayMigrationListOutput</returns>
        System.Threading.Tasks.Task<GatewayMigrationListOutput> GatewayListMigrationAsync(GatewayListMigration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayMigrationListOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayMigrationListOutput>> GatewayListMigrationWithHttpInfoAsync(GatewayListMigration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProducersListReplyObj</returns>
        System.Threading.Tasks.Task<GetProducersListReplyObj> GatewayListProducersAsync(GatewayListProducers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProducersListReplyObj)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProducersListReplyObj>> GatewayListProducersWithHttpInfoAsync(GatewayListProducers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GatewayRevokeTmpUsersAsync(GatewayRevokeTmpUsers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GatewayRevokeTmpUsersWithHttpInfoAsync(GatewayRevokeTmpUsers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayStartProducerOutput</returns>
        System.Threading.Tasks.Task<GatewayStartProducerOutput> GatewayStartProducerAsync(GatewayStartProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayStartProducerOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayStartProducerOutput>> GatewayStartProducerWithHttpInfoAsync(GatewayStartProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayStopProducerOutput</returns>
        System.Threading.Tasks.Task<GatewayStopProducerOutput> GatewayStopProducerAsync(GatewayStopProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayStopProducerOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayStopProducerOutput>> GatewayStopProducerWithHttpInfoAsync(GatewayStopProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayMigrationSyncOutput</returns>
        System.Threading.Tasks.Task<GatewayMigrationSyncOutput> GatewaySyncMigrationAsync(GatewaySyncMigration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayMigrationSyncOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayMigrationSyncOutput>> GatewaySyncMigrationWithHttpInfoAsync(GatewaySyncMigration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateItemOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateItemOutput> GatewayUpdateItemAsync(GatewayUpdateItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateItemOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateItemOutput>> GatewayUpdateItemWithHttpInfoAsync(GatewayUpdateItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerArtifactoryOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerArtifactoryOutput> GatewayUpdateProducerArtifactoryAsync(GatewayUpdateProducerArtifactory body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerArtifactoryOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerArtifactoryOutput>> GatewayUpdateProducerArtifactoryWithHttpInfoAsync(GatewayUpdateProducerArtifactory body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerAwsOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerAwsOutput> GatewayUpdateProducerAwsAsync(GatewayUpdateProducerAws body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerAwsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerAwsOutput>> GatewayUpdateProducerAwsWithHttpInfoAsync(GatewayUpdateProducerAws body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerAzureOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerAzureOutput> GatewayUpdateProducerAzureAsync(GatewayUpdateProducerAzure body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerAzureOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerAzureOutput>> GatewayUpdateProducerAzureWithHttpInfoAsync(GatewayUpdateProducerAzure body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerCassandraOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerCassandraOutput> GatewayUpdateProducerCassandraAsync(GatewayUpdateProducerCassandra body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerCassandraOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerCassandraOutput>> GatewayUpdateProducerCassandraWithHttpInfoAsync(GatewayUpdateProducerCassandra body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerCertificateAutomationOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerCertificateAutomationOutput> GatewayUpdateProducerCertificateAutomationAsync(GatewayUpdateProducerCertificateAutomation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerCertificateAutomationOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerCertificateAutomationOutput>> GatewayUpdateProducerCertificateAutomationWithHttpInfoAsync(GatewayUpdateProducerCertificateAutomation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerCustomOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerCustomOutput> GatewayUpdateProducerCustomAsync(GatewayUpdateProducerCustom body = default(GatewayUpdateProducerCustom), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerCustomOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerCustomOutput>> GatewayUpdateProducerCustomWithHttpInfoAsync(GatewayUpdateProducerCustom body = default(GatewayUpdateProducerCustom), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerEksOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerEksOutput> GatewayUpdateProducerEksAsync(GatewayUpdateProducerEks body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerEksOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerEksOutput>> GatewayUpdateProducerEksWithHttpInfoAsync(GatewayUpdateProducerEks body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerGcpOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerGcpOutput> GatewayUpdateProducerGcpAsync(GatewayUpdateProducerGcp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerGcpOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerGcpOutput>> GatewayUpdateProducerGcpWithHttpInfoAsync(GatewayUpdateProducerGcp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerGkeOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerGkeOutput> GatewayUpdateProducerGkeAsync(GatewayUpdateProducerGke body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerGkeOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerGkeOutput>> GatewayUpdateProducerGkeWithHttpInfoAsync(GatewayUpdateProducerGke body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerLdapOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerLdapOutput> GatewayUpdateProducerLdapAsync(GatewayUpdateProducerLdap body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerLdapOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerLdapOutput>> GatewayUpdateProducerLdapWithHttpInfoAsync(GatewayUpdateProducerLdap body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerMSSQLOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerMSSQLOutput> GatewayUpdateProducerMSSQLAsync(GatewayUpdateProducerMSSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerMSSQLOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerMSSQLOutput>> GatewayUpdateProducerMSSQLWithHttpInfoAsync(GatewayUpdateProducerMSSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerMongoOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerMongoOutput> GatewayUpdateProducerMongoAsync(GatewayUpdateProducerMongo body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerMongoOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerMongoOutput>> GatewayUpdateProducerMongoWithHttpInfoAsync(GatewayUpdateProducerMongo body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerMySQLOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerMySQLOutput> GatewayUpdateProducerMySQLAsync(GatewayUpdateProducerMySQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerMySQLOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerMySQLOutput>> GatewayUpdateProducerMySQLWithHttpInfoAsync(GatewayUpdateProducerMySQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerNativeK8SOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerNativeK8SOutput> GatewayUpdateProducerNativeK8SAsync(GatewayUpdateProducerNativeK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerNativeK8SOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerNativeK8SOutput>> GatewayUpdateProducerNativeK8SWithHttpInfoAsync(GatewayUpdateProducerNativeK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerOracleDbOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerOracleDbOutput> GatewayUpdateProducerOracleDbAsync(GatewayUpdateProducerOracleDb body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerOracleDbOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerOracleDbOutput>> GatewayUpdateProducerOracleDbWithHttpInfoAsync(GatewayUpdateProducerOracleDb body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerPostgreSQLOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerPostgreSQLOutput> GatewayUpdateProducerPostgreSQLAsync(GatewayUpdateProducerPostgreSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerPostgreSQLOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerPostgreSQLOutput>> GatewayUpdateProducerPostgreSQLWithHttpInfoAsync(GatewayUpdateProducerPostgreSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerRabbitMQOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerRabbitMQOutput> GatewayUpdateProducerRabbitMQAsync(GatewayUpdateProducerRabbitMQ body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerRabbitMQOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerRabbitMQOutput>> GatewayUpdateProducerRabbitMQWithHttpInfoAsync(GatewayUpdateProducerRabbitMQ body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerRdpOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerRdpOutput> GatewayUpdateProducerRdpAsync(GatewayUpdateProducerRdp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerRdpOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerRdpOutput>> GatewayUpdateProducerRdpWithHttpInfoAsync(GatewayUpdateProducerRdp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerRedshiftOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerRedshiftOutput> GatewayUpdateProducerRedshiftAsync(GatewayUpdateProducerRedshift body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerRedshiftOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerRedshiftOutput>> GatewayUpdateProducerRedshiftWithHttpInfoAsync(GatewayUpdateProducerRedshift body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerSnowflakeOutput</returns>
        System.Threading.Tasks.Task<GatewayUpdateProducerSnowflakeOutput> GatewayUpdateProducerSnowflakeAsync(GatewayUpdateProducerSnowflake body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerSnowflakeOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayUpdateProducerSnowflakeOutput>> GatewayUpdateProducerSnowflakeWithHttpInfoAsync(GatewayUpdateProducerSnowflake body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GatewayUpdateTmpUsersAsync(GatewayUpdateTmpUsers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GatewayUpdateTmpUsersWithHttpInfoAsync(GatewayUpdateTmpUsers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> GetAccountLogoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetAccountLogoWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthMethod</returns>
        System.Threading.Tasks.Task<AuthMethod> GetAuthMethodAsync(GetAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthMethod)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthMethod>> GetAuthMethodWithHttpInfoAsync(GetAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> GetDynamicSecretValueAsync(GetDynamicSecretValue body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetDynamicSecretValueWithHttpInfoAsync(GetDynamicSecretValue body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetKubeExecCredsOutput</returns>
        System.Threading.Tasks.Task<GetKubeExecCredsOutput> GetKubeExecCredsAsync(GetKubeExecCreds body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetKubeExecCredsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetKubeExecCredsOutput>> GetKubeExecCredsWithHttpInfoAsync(GetKubeExecCreds body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPKICertificateOutput</returns>
        System.Threading.Tasks.Task<GetPKICertificateOutput> GetPKICertificateAsync(GetPKICertificate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPKICertificateOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPKICertificateOutput>> GetPKICertificateWithHttpInfoAsync(GetPKICertificate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRSAPublicOutput</returns>
        System.Threading.Tasks.Task<GetRSAPublicOutput> GetRSAPublicAsync(GetRSAPublic body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRSAPublicOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRSAPublicOutput>> GetRSAPublicWithHttpInfoAsync(GetRSAPublic body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> GetRoleAsync(GetRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleWithHttpInfoAsync(GetRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GetRotatedSecretValueAsync(GetRotatedSecretValue body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetRotatedSecretValueWithHttpInfoAsync(GetRotatedSecretValue body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSSHCertificateOutput</returns>
        System.Threading.Tasks.Task<GetSSHCertificateOutput> GetSSHCertificateAsync(GetSSHCertificate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSSHCertificateOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSSHCertificateOutput>> GetSSHCertificateWithHttpInfoAsync(GetSSHCertificate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> GetSecretValueAsync(GetSecretValue body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetSecretValueWithHttpInfoAsync(GetSecretValue body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTagsAsync(GetTags body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTagsWithHttpInfoAsync(GetTags body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Target</returns>
        System.Threading.Tasks.Task<Target> GetTargetAsync(GetTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Target)</returns>
        System.Threading.Tasks.Task<ApiResponse<Target>> GetTargetWithHttpInfoAsync(GetTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTargetDetailsOutput</returns>
        System.Threading.Tasks.Task<GetTargetDetailsOutput> GetTargetDetailsAsync(GetTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTargetDetailsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTargetDetailsOutput>> GetTargetDetailsWithHttpInfoAsync(GetTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KMIPClientUpdateResponse</returns>
        System.Threading.Tasks.Task<KMIPClientUpdateResponse> KmipClientDeleteRuleAsync(KmipClientDeleteRule body = default(KmipClientDeleteRule), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KMIPClientUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<KMIPClientUpdateResponse>> KmipClientDeleteRuleWithHttpInfoAsync(KmipClientDeleteRule body = default(KmipClientDeleteRule), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KMIPClientUpdateResponse</returns>
        System.Threading.Tasks.Task<KMIPClientUpdateResponse> KmipClientSetRuleAsync(KmipClientSetRule body = default(KmipClientSetRule), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KMIPClientUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<KMIPClientUpdateResponse>> KmipClientSetRuleWithHttpInfoAsync(KmipClientSetRule body = default(KmipClientSetRule), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KmipCreateClientOutput</returns>
        System.Threading.Tasks.Task<KmipCreateClientOutput> KmipCreateClientAsync(KmipCreateClient body = default(KmipCreateClient), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KmipCreateClientOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<KmipCreateClientOutput>> KmipCreateClientWithHttpInfoAsync(KmipCreateClient body = default(KmipCreateClient), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> KmipDeleteClientAsync(KmipDeleteClient body = default(KmipDeleteClient), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> KmipDeleteClientWithHttpInfoAsync(KmipDeleteClient body = default(KmipDeleteClient), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KMIPClientGetResponse</returns>
        System.Threading.Tasks.Task<KMIPClientGetResponse> KmipDescribeClientAsync(KmipDescribeClient body = default(KmipDescribeClient), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KMIPClientGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<KMIPClientGetResponse>> KmipDescribeClientWithHttpInfoAsync(KmipDescribeClient body = default(KmipDescribeClient), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KmipDescribeServerOutput</returns>
        System.Threading.Tasks.Task<KmipDescribeServerOutput> KmipDescribeServerAsync(KmipDescribeServer body = default(KmipDescribeServer), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KmipDescribeServerOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<KmipDescribeServerOutput>> KmipDescribeServerWithHttpInfoAsync(KmipDescribeServer body = default(KmipDescribeServer), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KMIPClientListResponse</returns>
        System.Threading.Tasks.Task<KMIPClientListResponse> KmipListClientsAsync(KmipListClients body = default(KmipListClients), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KMIPClientListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<KMIPClientListResponse>> KmipListClientsWithHttpInfoAsync(KmipListClients body = default(KmipListClients), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KmipRenewClientCertificateOutput</returns>
        System.Threading.Tasks.Task<KmipRenewClientCertificateOutput> KmipRenewClientCertificateAsync(KmipRenewClientCertificate body = default(KmipRenewClientCertificate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KmipRenewClientCertificateOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<KmipRenewClientCertificateOutput>> KmipRenewClientCertificateWithHttpInfoAsync(KmipRenewClientCertificate body = default(KmipRenewClientCertificate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KmipRenewServerCertificateOutput</returns>
        System.Threading.Tasks.Task<KmipRenewServerCertificateOutput> KmipRenewServerCertificateAsync(KmipRenewServerCertificate body = default(KmipRenewServerCertificate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KmipRenewServerCertificateOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<KmipRenewServerCertificateOutput>> KmipRenewServerCertificateWithHttpInfoAsync(KmipRenewServerCertificate body = default(KmipRenewServerCertificate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KMIPEnvironmentCreateResponse</returns>
        System.Threading.Tasks.Task<KMIPEnvironmentCreateResponse> KmipServerSetupAsync(KmipServerSetup body = default(KmipServerSetup), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KMIPEnvironmentCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<KMIPEnvironmentCreateResponse>> KmipServerSetupWithHttpInfoAsync(KmipServerSetup body = default(KmipServerSetup), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KmipSetServerStateOutput</returns>
        System.Threading.Tasks.Task<KmipSetServerStateOutput> KmipSetServerStateAsync(KmipSetServerState body = default(KmipSetServerState), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KmipSetServerStateOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<KmipSetServerStateOutput>> KmipSetServerStateWithHttpInfoAsync(KmipSetServerState body = default(KmipSetServerState), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAuthMethodsOutput</returns>
        System.Threading.Tasks.Task<ListAuthMethodsOutput> ListAuthMethodsAsync(ListAuthMethods body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAuthMethodsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAuthMethodsOutput>> ListAuthMethodsWithHttpInfoAsync(ListAuthMethods body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListItemsInPathOutput</returns>
        System.Threading.Tasks.Task<ListItemsInPathOutput> ListItemsAsync(ListItems body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListItemsInPathOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListItemsInPathOutput>> ListItemsWithHttpInfoAsync(ListItems body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRolesOutput</returns>
        System.Threading.Tasks.Task<ListRolesOutput> ListRolesAsync(ListRoles body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRolesOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRolesOutput>> ListRolesWithHttpInfoAsync(ListRoles body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTargetsOutput</returns>
        System.Threading.Tasks.Task<ListTargetsOutput> ListTargetsAsync(ListTargets body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTargetsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTargetsOutput>> ListTargetsWithHttpInfoAsync(ListTargets body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MoveObjectsAsync(MoveObjects body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MoveObjectsWithHttpInfoAsync(MoveObjects body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemAccessCredentialsReplyObj</returns>
        System.Threading.Tasks.Task<SystemAccessCredentialsReplyObj> RawCredsAsync(RawCreds body = default(RawCreds), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemAccessCredentialsReplyObj)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemAccessCredentialsReplyObj>> RawCredsWithHttpInfoAsync(RawCreds body = default(RawCreds), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefreshKeyOutput</returns>
        System.Threading.Tasks.Task<RefreshKeyOutput> RefreshKeyAsync(RefreshKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefreshKeyOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefreshKeyOutput>> RefreshKeyWithHttpInfoAsync(RefreshKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReverseRBACOutput</returns>
        System.Threading.Tasks.Task<ReverseRBACOutput> ReverseRBACAsync(ReverseRBAC body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReverseRBACOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReverseRBACOutput>> ReverseRBACWithHttpInfoAsync(ReverseRBAC body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RollbackSecretOutput</returns>
        System.Threading.Tasks.Task<RollbackSecretOutput> RollbackSecretAsync(RollbackSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RollbackSecretOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<RollbackSecretOutput>> RollbackSecretWithHttpInfoAsync(RollbackSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RotateKeyOutput</returns>
        System.Threading.Tasks.Task<RotateKeyOutput> RotateKeyAsync(UpdateRotationSettings body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RotateKeyOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<RotateKeyOutput>> RotateKeyWithHttpInfoAsync(UpdateRotationSettings body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetItemStateAsync(SetItemState body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetItemStateWithHttpInfoAsync(SetItemState body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetRoleRuleAsync(SetRoleRule body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetRoleRuleWithHttpInfoAsync(SetRoleRule body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignJWTOutput</returns>
        System.Threading.Tasks.Task<SignJWTOutput> SignJWTWithClassicKeyAsync(SignJWTWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignJWTOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignJWTOutput>> SignJWTWithClassicKeyWithHttpInfoAsync(SignJWTWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignPKCS1Output</returns>
        System.Threading.Tasks.Task<SignPKCS1Output> SignPKCS1Async(SignPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignPKCS1Output)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignPKCS1Output>> SignPKCS1WithHttpInfoAsync(SignPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignPKICertOutput</returns>
        System.Threading.Tasks.Task<SignPKICertOutput> SignPKICertWithClassicKeyAsync(SignPKICertWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignPKICertOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignPKICertOutput>> SignPKICertWithClassicKeyWithHttpInfoAsync(SignPKICertWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StaticCredsAuthOutput</returns>
        System.Threading.Tasks.Task<StaticCredsAuthOutput> StaticCredsAuthAsync(StaticCredsAuth body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StaticCredsAuthOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<StaticCredsAuthOutput>> StaticCredsAuthWithHttpInfoAsync(StaticCredsAuth body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UidCreateChildTokenOutput</returns>
        System.Threading.Tasks.Task<UidCreateChildTokenOutput> UidCreateChildTokenAsync(UidCreateChildToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UidCreateChildTokenOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UidCreateChildTokenOutput>> UidCreateChildTokenWithHttpInfoAsync(UidCreateChildToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UidGenerateTokenOutput</returns>
        System.Threading.Tasks.Task<UidGenerateTokenOutput> UidGenerateTokenAsync(UidGenerateToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UidGenerateTokenOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UidGenerateTokenOutput>> UidGenerateTokenWithHttpInfoAsync(UidGenerateToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UniversalIdentityDetails</returns>
        System.Threading.Tasks.Task<UniversalIdentityDetails> UidListChildrenAsync(UidListChildren body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UniversalIdentityDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UniversalIdentityDetails>> UidListChildrenWithHttpInfoAsync(UidListChildren body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UidRevokeTokenAsync(UidRevokeToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UidRevokeTokenWithHttpInfoAsync(UidRevokeToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UidRotateTokenOutput</returns>
        System.Threading.Tasks.Task<UidRotateTokenOutput> UidRotateTokenAsync(UidRotateToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UidRotateTokenOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UidRotateTokenOutput>> UidRotateTokenWithHttpInfoAsync(UidRotateToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAWSTargetAsync(UpdateAWSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAWSTargetWithHttpInfoAsync(UpdateAWSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateAWSTargetDetailsAsync(UpdateAWSTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateAWSTargetDetailsWithHttpInfoAsync(UpdateAWSTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateArtifactoryTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateArtifactoryTargetOutput> UpdateArtifactoryTargetAsync(UpdateArtifactoryTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateArtifactoryTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateArtifactoryTargetOutput>> UpdateArtifactoryTargetWithHttpInfoAsync(UpdateArtifactoryTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAssocAsync(UpdateAssoc body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAssocWithHttpInfoAsync(UpdateAssoc body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateAuthMethodOutput</returns>
        System.Threading.Tasks.Task<UpdateAuthMethodOutput> UpdateAuthMethodAsync(UpdateAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateAuthMethodOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAuthMethodOutput>> UpdateAuthMethodWithHttpInfoAsync(UpdateAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAuthMethodAWSIAMAsync(UpdateAuthMethodAWSIAM body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAuthMethodAWSIAMWithHttpInfoAsync(UpdateAuthMethodAWSIAM body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAuthMethodAzureADAsync(UpdateAuthMethodAzureAD body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAuthMethodAzureADWithHttpInfoAsync(UpdateAuthMethodAzureAD body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAuthMethodGCPAsync(UpdateAuthMethodGCP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAuthMethodGCPWithHttpInfoAsync(UpdateAuthMethodGCP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateAuthMethodK8SOutput</returns>
        System.Threading.Tasks.Task<UpdateAuthMethodK8SOutput> UpdateAuthMethodK8SAsync(UpdateAuthMethodK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateAuthMethodK8SOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAuthMethodK8SOutput>> UpdateAuthMethodK8SWithHttpInfoAsync(UpdateAuthMethodK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAuthMethodLDAPAsync(UpdateAuthMethodLDAP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAuthMethodLDAPWithHttpInfoAsync(UpdateAuthMethodLDAP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAuthMethodOAuth2Async(UpdateAuthMethodOAuth2 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAuthMethodOAuth2WithHttpInfoAsync(UpdateAuthMethodOAuth2 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAuthMethodOIDCAsync(UpdateAuthMethodOIDC body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAuthMethodOIDCWithHttpInfoAsync(UpdateAuthMethodOIDC body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAuthMethodSAMLAsync(UpdateAuthMethodSAML body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAuthMethodSAMLWithHttpInfoAsync(UpdateAuthMethodSAML body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAuthMethodUniversalIdentityAsync(UpdateAuthMethodUniversalIdentity body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAuthMethodUniversalIdentityWithHttpInfoAsync(UpdateAuthMethodUniversalIdentity body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateAzureTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateAzureTargetOutput> UpdateAzureTargetAsync(UpdateAzureTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateAzureTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAzureTargetOutput>> UpdateAzureTargetWithHttpInfoAsync(UpdateAzureTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateDBTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateDBTargetOutput> UpdateDBTargetAsync(UpdateDBTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateDBTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateDBTargetOutput>> UpdateDBTargetWithHttpInfoAsync(UpdateDBTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateDBTargetDetailsAsync(UpdateDBTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateDBTargetDetailsWithHttpInfoAsync(UpdateDBTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateEKSTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateEKSTargetOutput> UpdateEKSTargetAsync(UpdateEKSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateEKSTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateEKSTargetOutput>> UpdateEKSTargetWithHttpInfoAsync(UpdateEKSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateGKETargetOutput</returns>
        System.Threading.Tasks.Task<UpdateGKETargetOutput> UpdateGKETargetAsync(UpdateGKETarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateGKETargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateGKETargetOutput>> UpdateGKETargetWithHttpInfoAsync(UpdateGKETarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateGcpTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateGcpTargetOutput> UpdateGcpTargetAsync(UpdateGcpTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateGcpTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateGcpTargetOutput>> UpdateGcpTargetWithHttpInfoAsync(UpdateGcpTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateItemOutput</returns>
        System.Threading.Tasks.Task<UpdateItemOutput> UpdateItemAsync(UpdateItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateItemOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateItemOutput>> UpdateItemWithHttpInfoAsync(UpdateItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateNativeK8STarget</returns>
        System.Threading.Tasks.Task<UpdateNativeK8STarget> UpdateNativeK8STargetAsync(UpdateNativeK8STarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateNativeK8STarget)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateNativeK8STarget>> UpdateNativeK8STargetWithHttpInfoAsync(UpdateNativeK8STarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePKICertIssuerOutput</returns>
        System.Threading.Tasks.Task<UpdatePKICertIssuerOutput> UpdatePKICertIssuerAsync(UpdatePKICertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePKICertIssuerOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePKICertIssuerOutput>> UpdatePKICertIssuerWithHttpInfoAsync(UpdatePKICertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateRDPTargetDetailsAsync(UpdateRDPTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateRDPTargetDetailsWithHttpInfoAsync(UpdateRDPTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateRabbitMQTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateRabbitMQTargetOutput> UpdateRabbitMQTargetAsync(UpdateRabbitMQTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateRabbitMQTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateRabbitMQTargetOutput>> UpdateRabbitMQTargetWithHttpInfoAsync(UpdateRabbitMQTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateRabbitMQTargetDetailsAsync(UpdateRabbitMQTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateRabbitMQTargetDetailsWithHttpInfoAsync(UpdateRabbitMQTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateRoleOutput</returns>
        System.Threading.Tasks.Task<UpdateRoleOutput> UpdateRoleAsync(UpdateRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateRoleOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateRoleOutput>> UpdateRoleWithHttpInfoAsync(UpdateRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateRotatedSecretOutput</returns>
        System.Threading.Tasks.Task<UpdateRotatedSecretOutput> UpdateRotatedSecretAsync(UpdateRotatedSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateRotatedSecretOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateRotatedSecretOutput>> UpdateRotatedSecretWithHttpInfoAsync(UpdateRotatedSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RotateKeyOutput</returns>
        System.Threading.Tasks.Task<RotateKeyOutput> UpdateRotationSettingsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RotateKeyOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<RotateKeyOutput>> UpdateRotationSettingsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSSHCertIssuerOutput</returns>
        System.Threading.Tasks.Task<UpdateSSHCertIssuerOutput> UpdateSSHCertIssuerAsync(UpdateSSHCertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSSHCertIssuerOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateSSHCertIssuerOutput>> UpdateSSHCertIssuerWithHttpInfoAsync(UpdateSSHCertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSSHTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateSSHTargetOutput> UpdateSSHTargetAsync(UpdateSSHTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSSHTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateSSHTargetOutput>> UpdateSSHTargetWithHttpInfoAsync(UpdateSSHTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateSSHTargetDetailsAsync(UpdateSSHTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateSSHTargetDetailsWithHttpInfoAsync(UpdateSSHTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSecretValOutput</returns>
        System.Threading.Tasks.Task<UpdateSecretValOutput> UpdateSecretValAsync(UpdateSecretVal body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSecretValOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateSecretValOutput>> UpdateSecretValWithHttpInfoAsync(UpdateSecretVal body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateTargetAsync(UpdateTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateTargetWithHttpInfoAsync(UpdateTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateTargetDetailsAsync(Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateTargetDetailsWithHttpInfoAsync(Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateWebTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateWebTargetOutput> UpdateWebTargetAsync(UpdateWebTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateWebTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateWebTargetOutput>> UpdateWebTargetWithHttpInfoAsync(UpdateWebTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        System.Threading.Tasks.Task<UpdateTargetOutput> UpdateWebTargetDetailsAsync(UpdateWebTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTargetOutput>> UpdateWebTargetDetailsWithHttpInfoAsync(UpdateWebTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UploadRSAAsync(UploadRSA body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadRSAWithHttpInfoAsync(UploadRSA body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateTokenOutput</returns>
        System.Threading.Tasks.Task<ValidateTokenOutput> ValidateTokenAsync(ValidateToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateTokenOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateTokenOutput>> ValidateTokenWithHttpInfoAsync(ValidateToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyJWTOutput</returns>
        System.Threading.Tasks.Task<VerifyJWTOutput> VerifyJWTWithClassicKeyAsync(VerifyJWTWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyJWTOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyJWTOutput>> VerifyJWTWithClassicKeyWithHttpInfoAsync(VerifyJWTWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> VerifyPKCS1Async(VerifyPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VerifyPKCS1WithHttpInfoAsync(VerifyPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyPKICertOutput</returns>
        System.Threading.Tasks.Task<VerifyPKICertOutput> VerifyPKICertWithClassicKeyAsync(VerifyPKICertWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyPKICertOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyPKICertOutput>> VerifyPKICertWithClassicKeyWithHttpInfoAsync(VerifyPKICertWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV2Api : IV2ApiSync, IV2ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class V2Api : IV2Api
    {
        private akeyless.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public V2Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public V2Api(string basePath)
        {
            this.Configuration = akeyless.Client.Configuration.MergeConfigurations(
                akeyless.Client.GlobalConfiguration.Instance,
                new akeyless.Client.Configuration { BasePath = basePath }
            );
            this.Client = new akeyless.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new akeyless.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = akeyless.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public V2Api(akeyless.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = akeyless.Client.Configuration.MergeConfigurations(
                akeyless.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new akeyless.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new akeyless.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = akeyless.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public V2Api(akeyless.Client.ISynchronousClient client, akeyless.Client.IAsynchronousClient asyncClient, akeyless.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = akeyless.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public akeyless.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public akeyless.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public akeyless.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public akeyless.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateRoleAuthMethodAssocOutput</returns>
        public CreateRoleAuthMethodAssocOutput AssocRoleAuthMethod(AssocRoleAuthMethod body)
        {
            akeyless.Client.ApiResponse<CreateRoleAuthMethodAssocOutput> localVarResponse = AssocRoleAuthMethodWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateRoleAuthMethodAssocOutput</returns>
        public akeyless.Client.ApiResponse<CreateRoleAuthMethodAssocOutput> AssocRoleAuthMethodWithHttpInfo(AssocRoleAuthMethod body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->AssocRoleAuthMethod");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateRoleAuthMethodAssocOutput>("/assoc-role-am", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssocRoleAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRoleAuthMethodAssocOutput</returns>
        public async System.Threading.Tasks.Task<CreateRoleAuthMethodAssocOutput> AssocRoleAuthMethodAsync(AssocRoleAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateRoleAuthMethodAssocOutput> localVarResponse = await AssocRoleAuthMethodWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRoleAuthMethodAssocOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateRoleAuthMethodAssocOutput>> AssocRoleAuthMethodWithHttpInfoAsync(AssocRoleAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->AssocRoleAuthMethod");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateRoleAuthMethodAssocOutput>("/assoc-role-am", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssocRoleAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateTargetItemAssocOutput</returns>
        public CreateTargetItemAssocOutput AssocTargetItem(AssocTargetItem body)
        {
            akeyless.Client.ApiResponse<CreateTargetItemAssocOutput> localVarResponse = AssocTargetItemWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateTargetItemAssocOutput</returns>
        public akeyless.Client.ApiResponse<CreateTargetItemAssocOutput> AssocTargetItemWithHttpInfo(AssocTargetItem body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->AssocTargetItem");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateTargetItemAssocOutput>("/assoc-target-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssocTargetItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTargetItemAssocOutput</returns>
        public async System.Threading.Tasks.Task<CreateTargetItemAssocOutput> AssocTargetItemAsync(AssocTargetItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateTargetItemAssocOutput> localVarResponse = await AssocTargetItemWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTargetItemAssocOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateTargetItemAssocOutput>> AssocTargetItemWithHttpInfoAsync(AssocTargetItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->AssocTargetItem");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTargetItemAssocOutput>("/assoc-target-item", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssocTargetItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthOutput</returns>
        public AuthOutput Auth(Auth body)
        {
            akeyless.Client.ApiResponse<AuthOutput> localVarResponse = AuthWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthOutput</returns>
        public akeyless.Client.ApiResponse<AuthOutput> AuthWithHttpInfo(Auth body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Auth");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthOutput>("/auth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Auth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthOutput</returns>
        public async System.Threading.Tasks.Task<AuthOutput> AuthAsync(Auth body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<AuthOutput> localVarResponse = await AuthWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<AuthOutput>> AuthWithHttpInfoAsync(Auth body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Auth");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthOutput>("/auth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Auth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ConfigureOutput</returns>
        public ConfigureOutput Configure(Configure body)
        {
            akeyless.Client.ApiResponse<ConfigureOutput> localVarResponse = ConfigureWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ConfigureOutput</returns>
        public akeyless.Client.ApiResponse<ConfigureOutput> ConfigureWithHttpInfo(Configure body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Configure");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfigureOutput>("/configure", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Configure", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigureOutput</returns>
        public async System.Threading.Tasks.Task<ConfigureOutput> ConfigureAsync(Configure body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<ConfigureOutput> localVarResponse = await ConfigureWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigureOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<ConfigureOutput>> ConfigureWithHttpInfoAsync(Configure body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Configure");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfigureOutput>("/configure", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Configure", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object Connect(Connect body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = ConnectWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> ConnectWithHttpInfo(Connect body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Connect");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/connect", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Connect", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ConnectAsync(Connect body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await ConnectWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> ConnectWithHttpInfoAsync(Connect body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Connect");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/connect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Connect", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAWSTargetOutput</returns>
        public CreateAWSTargetOutput CreateAWStarget(CreateAWSTarget body)
        {
            akeyless.Client.ApiResponse<CreateAWSTargetOutput> localVarResponse = CreateAWStargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAWSTargetOutput</returns>
        public akeyless.Client.ApiResponse<CreateAWSTargetOutput> CreateAWStargetWithHttpInfo(CreateAWSTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAWStarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAWSTargetOutput>("/create-aws-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAWStarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAWSTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateAWSTargetOutput> CreateAWStargetAsync(CreateAWSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateAWSTargetOutput> localVarResponse = await CreateAWStargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAWSTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAWSTargetOutput>> CreateAWStargetWithHttpInfoAsync(CreateAWSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAWStarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAWSTargetOutput>("/create-aws-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAWStarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateArtifactoryTargetOutput</returns>
        public CreateArtifactoryTargetOutput CreateArtifactoryTarget(CreateArtifactoryTarget body)
        {
            akeyless.Client.ApiResponse<CreateArtifactoryTargetOutput> localVarResponse = CreateArtifactoryTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateArtifactoryTargetOutput</returns>
        public akeyless.Client.ApiResponse<CreateArtifactoryTargetOutput> CreateArtifactoryTargetWithHttpInfo(CreateArtifactoryTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateArtifactoryTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateArtifactoryTargetOutput>("/create-artifactory-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateArtifactoryTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateArtifactoryTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateArtifactoryTargetOutput> CreateArtifactoryTargetAsync(CreateArtifactoryTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateArtifactoryTargetOutput> localVarResponse = await CreateArtifactoryTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateArtifactoryTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateArtifactoryTargetOutput>> CreateArtifactoryTargetWithHttpInfoAsync(CreateArtifactoryTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateArtifactoryTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateArtifactoryTargetOutput>("/create-artifactory-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateArtifactoryTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodOutput</returns>
        public CreateAuthMethodOutput CreateAuthMethod(CreateAuthMethod body)
        {
            akeyless.Client.ApiResponse<CreateAuthMethodOutput> localVarResponse = CreateAuthMethodWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodOutput</returns>
        public akeyless.Client.ApiResponse<CreateAuthMethodOutput> CreateAuthMethodWithHttpInfo(CreateAuthMethod body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethod");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAuthMethodOutput>("/create-auth-method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodOutput> CreateAuthMethodAsync(CreateAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateAuthMethodOutput> localVarResponse = await CreateAuthMethodWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodOutput>> CreateAuthMethodWithHttpInfoAsync(CreateAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethod");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodOutput>("/create-auth-method", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodAWSIAMOutput</returns>
        public CreateAuthMethodAWSIAMOutput CreateAuthMethodAWSIAM(CreateAuthMethodAWSIAM body)
        {
            akeyless.Client.ApiResponse<CreateAuthMethodAWSIAMOutput> localVarResponse = CreateAuthMethodAWSIAMWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodAWSIAMOutput</returns>
        public akeyless.Client.ApiResponse<CreateAuthMethodAWSIAMOutput> CreateAuthMethodAWSIAMWithHttpInfo(CreateAuthMethodAWSIAM body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodAWSIAM");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAuthMethodAWSIAMOutput>("/create-auth-method-aws-iam", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodAWSIAM", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodAWSIAMOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodAWSIAMOutput> CreateAuthMethodAWSIAMAsync(CreateAuthMethodAWSIAM body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateAuthMethodAWSIAMOutput> localVarResponse = await CreateAuthMethodAWSIAMWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodAWSIAMOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodAWSIAMOutput>> CreateAuthMethodAWSIAMWithHttpInfoAsync(CreateAuthMethodAWSIAM body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodAWSIAM");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodAWSIAMOutput>("/create-auth-method-aws-iam", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodAWSIAM", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodAzureADOutput</returns>
        public CreateAuthMethodAzureADOutput CreateAuthMethodAzureAD(CreateAuthMethodAzureAD body)
        {
            akeyless.Client.ApiResponse<CreateAuthMethodAzureADOutput> localVarResponse = CreateAuthMethodAzureADWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodAzureADOutput</returns>
        public akeyless.Client.ApiResponse<CreateAuthMethodAzureADOutput> CreateAuthMethodAzureADWithHttpInfo(CreateAuthMethodAzureAD body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodAzureAD");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAuthMethodAzureADOutput>("/create-auth-method-azure-ad", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodAzureAD", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodAzureADOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodAzureADOutput> CreateAuthMethodAzureADAsync(CreateAuthMethodAzureAD body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateAuthMethodAzureADOutput> localVarResponse = await CreateAuthMethodAzureADWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodAzureADOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodAzureADOutput>> CreateAuthMethodAzureADWithHttpInfoAsync(CreateAuthMethodAzureAD body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodAzureAD");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodAzureADOutput>("/create-auth-method-azure-ad", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodAzureAD", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodGCPOutput</returns>
        public CreateAuthMethodGCPOutput CreateAuthMethodGCP(CreateAuthMethodGCP body)
        {
            akeyless.Client.ApiResponse<CreateAuthMethodGCPOutput> localVarResponse = CreateAuthMethodGCPWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodGCPOutput</returns>
        public akeyless.Client.ApiResponse<CreateAuthMethodGCPOutput> CreateAuthMethodGCPWithHttpInfo(CreateAuthMethodGCP body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodGCP");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAuthMethodGCPOutput>("/create-auth-method-gcp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodGCP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodGCPOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodGCPOutput> CreateAuthMethodGCPAsync(CreateAuthMethodGCP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateAuthMethodGCPOutput> localVarResponse = await CreateAuthMethodGCPWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodGCPOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodGCPOutput>> CreateAuthMethodGCPWithHttpInfoAsync(CreateAuthMethodGCP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodGCP");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodGCPOutput>("/create-auth-method-gcp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodGCP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodHuaweiOutput</returns>
        public CreateAuthMethodHuaweiOutput CreateAuthMethodHuawei(CreateAuthMethodHuawei body)
        {
            akeyless.Client.ApiResponse<CreateAuthMethodHuaweiOutput> localVarResponse = CreateAuthMethodHuaweiWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodHuaweiOutput</returns>
        public akeyless.Client.ApiResponse<CreateAuthMethodHuaweiOutput> CreateAuthMethodHuaweiWithHttpInfo(CreateAuthMethodHuawei body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodHuawei");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAuthMethodHuaweiOutput>("/create-auth-method-huawei", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodHuawei", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodHuaweiOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodHuaweiOutput> CreateAuthMethodHuaweiAsync(CreateAuthMethodHuawei body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateAuthMethodHuaweiOutput> localVarResponse = await CreateAuthMethodHuaweiWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodHuaweiOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodHuaweiOutput>> CreateAuthMethodHuaweiWithHttpInfoAsync(CreateAuthMethodHuawei body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodHuawei");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodHuaweiOutput>("/create-auth-method-huawei", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodHuawei", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodK8SOutput</returns>
        public CreateAuthMethodK8SOutput CreateAuthMethodK8S(CreateAuthMethodK8S body)
        {
            akeyless.Client.ApiResponse<CreateAuthMethodK8SOutput> localVarResponse = CreateAuthMethodK8SWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodK8SOutput</returns>
        public akeyless.Client.ApiResponse<CreateAuthMethodK8SOutput> CreateAuthMethodK8SWithHttpInfo(CreateAuthMethodK8S body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodK8S");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAuthMethodK8SOutput>("/create-auth-method-k8s", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodK8S", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodK8SOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodK8SOutput> CreateAuthMethodK8SAsync(CreateAuthMethodK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateAuthMethodK8SOutput> localVarResponse = await CreateAuthMethodK8SWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodK8SOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodK8SOutput>> CreateAuthMethodK8SWithHttpInfoAsync(CreateAuthMethodK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodK8S");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodK8SOutput>("/create-auth-method-k8s", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodK8S", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodLDAPOutput</returns>
        public CreateAuthMethodLDAPOutput CreateAuthMethodLDAP(CreateAuthMethodLDAP body)
        {
            akeyless.Client.ApiResponse<CreateAuthMethodLDAPOutput> localVarResponse = CreateAuthMethodLDAPWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodLDAPOutput</returns>
        public akeyless.Client.ApiResponse<CreateAuthMethodLDAPOutput> CreateAuthMethodLDAPWithHttpInfo(CreateAuthMethodLDAP body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodLDAP");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAuthMethodLDAPOutput>("/create-auth-method-ldap", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodLDAP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodLDAPOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodLDAPOutput> CreateAuthMethodLDAPAsync(CreateAuthMethodLDAP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateAuthMethodLDAPOutput> localVarResponse = await CreateAuthMethodLDAPWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodLDAPOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodLDAPOutput>> CreateAuthMethodLDAPWithHttpInfoAsync(CreateAuthMethodLDAP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodLDAP");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodLDAPOutput>("/create-auth-method-ldap", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodLDAP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodOAuth2Output</returns>
        public CreateAuthMethodOAuth2Output CreateAuthMethodOAuth2(CreateAuthMethodOAuth2 body)
        {
            akeyless.Client.ApiResponse<CreateAuthMethodOAuth2Output> localVarResponse = CreateAuthMethodOAuth2WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodOAuth2Output</returns>
        public akeyless.Client.ApiResponse<CreateAuthMethodOAuth2Output> CreateAuthMethodOAuth2WithHttpInfo(CreateAuthMethodOAuth2 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodOAuth2");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAuthMethodOAuth2Output>("/create-auth-method-oauth2", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodOAuth2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodOAuth2Output</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodOAuth2Output> CreateAuthMethodOAuth2Async(CreateAuthMethodOAuth2 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateAuthMethodOAuth2Output> localVarResponse = await CreateAuthMethodOAuth2WithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodOAuth2Output)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodOAuth2Output>> CreateAuthMethodOAuth2WithHttpInfoAsync(CreateAuthMethodOAuth2 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodOAuth2");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodOAuth2Output>("/create-auth-method-oauth2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodOAuth2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodOIDCOutput</returns>
        public CreateAuthMethodOIDCOutput CreateAuthMethodOIDC(CreateAuthMethodOIDC body)
        {
            akeyless.Client.ApiResponse<CreateAuthMethodOIDCOutput> localVarResponse = CreateAuthMethodOIDCWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodOIDCOutput</returns>
        public akeyless.Client.ApiResponse<CreateAuthMethodOIDCOutput> CreateAuthMethodOIDCWithHttpInfo(CreateAuthMethodOIDC body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodOIDC");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAuthMethodOIDCOutput>("/create-auth-method-oidc", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodOIDC", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodOIDCOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodOIDCOutput> CreateAuthMethodOIDCAsync(CreateAuthMethodOIDC body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateAuthMethodOIDCOutput> localVarResponse = await CreateAuthMethodOIDCWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodOIDCOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodOIDCOutput>> CreateAuthMethodOIDCWithHttpInfoAsync(CreateAuthMethodOIDC body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodOIDC");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodOIDCOutput>("/create-auth-method-oidc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodOIDC", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodSAMLOutput</returns>
        public CreateAuthMethodSAMLOutput CreateAuthMethodSAML(CreateAuthMethodSAML body)
        {
            akeyless.Client.ApiResponse<CreateAuthMethodSAMLOutput> localVarResponse = CreateAuthMethodSAMLWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodSAMLOutput</returns>
        public akeyless.Client.ApiResponse<CreateAuthMethodSAMLOutput> CreateAuthMethodSAMLWithHttpInfo(CreateAuthMethodSAML body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodSAML");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAuthMethodSAMLOutput>("/create-auth-method-saml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodSAML", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodSAMLOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodSAMLOutput> CreateAuthMethodSAMLAsync(CreateAuthMethodSAML body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateAuthMethodSAMLOutput> localVarResponse = await CreateAuthMethodSAMLWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodSAMLOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodSAMLOutput>> CreateAuthMethodSAMLWithHttpInfoAsync(CreateAuthMethodSAML body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodSAML");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodSAMLOutput>("/create-auth-method-saml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodSAML", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAuthMethodUniversalIdentityOutput</returns>
        public CreateAuthMethodUniversalIdentityOutput CreateAuthMethodUniversalIdentity(CreateAuthMethodUniversalIdentity body)
        {
            akeyless.Client.ApiResponse<CreateAuthMethodUniversalIdentityOutput> localVarResponse = CreateAuthMethodUniversalIdentityWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAuthMethodUniversalIdentityOutput</returns>
        public akeyless.Client.ApiResponse<CreateAuthMethodUniversalIdentityOutput> CreateAuthMethodUniversalIdentityWithHttpInfo(CreateAuthMethodUniversalIdentity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodUniversalIdentity");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAuthMethodUniversalIdentityOutput>("/create-auth-method-universal-identity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodUniversalIdentity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAuthMethodUniversalIdentityOutput</returns>
        public async System.Threading.Tasks.Task<CreateAuthMethodUniversalIdentityOutput> CreateAuthMethodUniversalIdentityAsync(CreateAuthMethodUniversalIdentity body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateAuthMethodUniversalIdentityOutput> localVarResponse = await CreateAuthMethodUniversalIdentityWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAuthMethodUniversalIdentityOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAuthMethodUniversalIdentityOutput>> CreateAuthMethodUniversalIdentityWithHttpInfoAsync(CreateAuthMethodUniversalIdentity body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAuthMethodUniversalIdentity");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAuthMethodUniversalIdentityOutput>("/create-auth-method-universal-identity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthMethodUniversalIdentity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateAzureTargetOutput</returns>
        public CreateAzureTargetOutput CreateAzureTarget(CreateAzureTarget body)
        {
            akeyless.Client.ApiResponse<CreateAzureTargetOutput> localVarResponse = CreateAzureTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateAzureTargetOutput</returns>
        public akeyless.Client.ApiResponse<CreateAzureTargetOutput> CreateAzureTargetWithHttpInfo(CreateAzureTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAzureTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAzureTargetOutput>("/create-azure-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAzureTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAzureTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateAzureTargetOutput> CreateAzureTargetAsync(CreateAzureTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateAzureTargetOutput> localVarResponse = await CreateAzureTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAzureTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateAzureTargetOutput>> CreateAzureTargetWithHttpInfoAsync(CreateAzureTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateAzureTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAzureTargetOutput>("/create-azure-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAzureTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateClassicKeyOutput</returns>
        public CreateClassicKeyOutput CreateClassicKey(CreateClassicKey body)
        {
            akeyless.Client.ApiResponse<CreateClassicKeyOutput> localVarResponse = CreateClassicKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateClassicKeyOutput</returns>
        public akeyless.Client.ApiResponse<CreateClassicKeyOutput> CreateClassicKeyWithHttpInfo(CreateClassicKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateClassicKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateClassicKeyOutput>("/create-classic-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateClassicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClassicKeyOutput</returns>
        public async System.Threading.Tasks.Task<CreateClassicKeyOutput> CreateClassicKeyAsync(CreateClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateClassicKeyOutput> localVarResponse = await CreateClassicKeyWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClassicKeyOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateClassicKeyOutput>> CreateClassicKeyWithHttpInfoAsync(CreateClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateClassicKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateClassicKeyOutput>("/create-classic-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateClassicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateDBTargetOutput</returns>
        public CreateDBTargetOutput CreateDBTarget(CreateDBTarget body)
        {
            akeyless.Client.ApiResponse<CreateDBTargetOutput> localVarResponse = CreateDBTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateDBTargetOutput</returns>
        public akeyless.Client.ApiResponse<CreateDBTargetOutput> CreateDBTargetWithHttpInfo(CreateDBTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateDBTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateDBTargetOutput>("/create-db-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDBTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateDBTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateDBTargetOutput> CreateDBTargetAsync(CreateDBTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateDBTargetOutput> localVarResponse = await CreateDBTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateDBTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateDBTargetOutput>> CreateDBTargetWithHttpInfoAsync(CreateDBTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateDBTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateDBTargetOutput>("/create-db-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDBTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateDFCKeyOutput</returns>
        public CreateDFCKeyOutput CreateDFCKey(CreateDFCKey body)
        {
            akeyless.Client.ApiResponse<CreateDFCKeyOutput> localVarResponse = CreateDFCKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateDFCKeyOutput</returns>
        public akeyless.Client.ApiResponse<CreateDFCKeyOutput> CreateDFCKeyWithHttpInfo(CreateDFCKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateDFCKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateDFCKeyOutput>("/create-dfc-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDFCKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateDFCKeyOutput</returns>
        public async System.Threading.Tasks.Task<CreateDFCKeyOutput> CreateDFCKeyAsync(CreateDFCKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateDFCKeyOutput> localVarResponse = await CreateDFCKeyWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateDFCKeyOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateDFCKeyOutput>> CreateDFCKeyWithHttpInfoAsync(CreateDFCKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateDFCKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateDFCKeyOutput>("/create-dfc-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDFCKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object CreateDynamicSecret(CreateDynamicSecret body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = CreateDynamicSecretWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> CreateDynamicSecretWithHttpInfo(CreateDynamicSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateDynamicSecret");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/create-dynamic-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDynamicSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateDynamicSecretAsync(CreateDynamicSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await CreateDynamicSecretWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> CreateDynamicSecretWithHttpInfoAsync(CreateDynamicSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateDynamicSecret");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/create-dynamic-secret", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDynamicSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateEKSTargetOutput</returns>
        public CreateEKSTargetOutput CreateEKSTarget(CreateEKSTarget body)
        {
            akeyless.Client.ApiResponse<CreateEKSTargetOutput> localVarResponse = CreateEKSTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateEKSTargetOutput</returns>
        public akeyless.Client.ApiResponse<CreateEKSTargetOutput> CreateEKSTargetWithHttpInfo(CreateEKSTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateEKSTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateEKSTargetOutput>("/create-eks-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEKSTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateEKSTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateEKSTargetOutput> CreateEKSTargetAsync(CreateEKSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateEKSTargetOutput> localVarResponse = await CreateEKSTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateEKSTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateEKSTargetOutput>> CreateEKSTargetWithHttpInfoAsync(CreateEKSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateEKSTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateEKSTargetOutput>("/create-eks-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEKSTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateGKETargetOutput</returns>
        public CreateGKETargetOutput CreateGKETarget(CreateGKETarget body)
        {
            akeyless.Client.ApiResponse<CreateGKETargetOutput> localVarResponse = CreateGKETargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateGKETargetOutput</returns>
        public akeyless.Client.ApiResponse<CreateGKETargetOutput> CreateGKETargetWithHttpInfo(CreateGKETarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateGKETarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateGKETargetOutput>("/create-gke-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGKETarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateGKETargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateGKETargetOutput> CreateGKETargetAsync(CreateGKETarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateGKETargetOutput> localVarResponse = await CreateGKETargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateGKETargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateGKETargetOutput>> CreateGKETargetWithHttpInfoAsync(CreateGKETarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateGKETarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateGKETargetOutput>("/create-gke-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGKETarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateGcpTargetOutput</returns>
        public CreateGcpTargetOutput CreateGcpTarget(CreateGcpTarget body)
        {
            akeyless.Client.ApiResponse<CreateGcpTargetOutput> localVarResponse = CreateGcpTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateGcpTargetOutput</returns>
        public akeyless.Client.ApiResponse<CreateGcpTargetOutput> CreateGcpTargetWithHttpInfo(CreateGcpTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateGcpTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateGcpTargetOutput>("/create-gcp-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGcpTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateGcpTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateGcpTargetOutput> CreateGcpTargetAsync(CreateGcpTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateGcpTargetOutput> localVarResponse = await CreateGcpTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateGcpTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateGcpTargetOutput>> CreateGcpTargetWithHttpInfoAsync(CreateGcpTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateGcpTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateGcpTargetOutput>("/create-gcp-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGcpTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateKeyOutput</returns>
        public CreateKeyOutput CreateKey(CreateKey body)
        {
            akeyless.Client.ApiResponse<CreateKeyOutput> localVarResponse = CreateKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateKeyOutput</returns>
        public akeyless.Client.ApiResponse<CreateKeyOutput> CreateKeyWithHttpInfo(CreateKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateKeyOutput>("/create-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateKeyOutput</returns>
        public async System.Threading.Tasks.Task<CreateKeyOutput> CreateKeyAsync(CreateKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateKeyOutput> localVarResponse = await CreateKeyWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateKeyOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateKeyOutput>> CreateKeyWithHttpInfoAsync(CreateKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateKeyOutput>("/create-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateNativeK8STargetOutput</returns>
        public CreateNativeK8STargetOutput CreateNativeK8STarget(CreateNativeK8STarget body)
        {
            akeyless.Client.ApiResponse<CreateNativeK8STargetOutput> localVarResponse = CreateNativeK8STargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateNativeK8STargetOutput</returns>
        public akeyless.Client.ApiResponse<CreateNativeK8STargetOutput> CreateNativeK8STargetWithHttpInfo(CreateNativeK8STarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateNativeK8STarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateNativeK8STargetOutput>("/create-k8s-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNativeK8STarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNativeK8STargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateNativeK8STargetOutput> CreateNativeK8STargetAsync(CreateNativeK8STarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateNativeK8STargetOutput> localVarResponse = await CreateNativeK8STargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNativeK8STargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateNativeK8STargetOutput>> CreateNativeK8STargetWithHttpInfoAsync(CreateNativeK8STarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateNativeK8STarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateNativeK8STargetOutput>("/create-k8s-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNativeK8STarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreatePKICertIssuerOutput</returns>
        public CreatePKICertIssuerOutput CreatePKICertIssuer(CreatePKICertIssuer body)
        {
            akeyless.Client.ApiResponse<CreatePKICertIssuerOutput> localVarResponse = CreatePKICertIssuerWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreatePKICertIssuerOutput</returns>
        public akeyless.Client.ApiResponse<CreatePKICertIssuerOutput> CreatePKICertIssuerWithHttpInfo(CreatePKICertIssuer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreatePKICertIssuer");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatePKICertIssuerOutput>("/create-pki-cert-issuer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePKICertIssuer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePKICertIssuerOutput</returns>
        public async System.Threading.Tasks.Task<CreatePKICertIssuerOutput> CreatePKICertIssuerAsync(CreatePKICertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreatePKICertIssuerOutput> localVarResponse = await CreatePKICertIssuerWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePKICertIssuerOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreatePKICertIssuerOutput>> CreatePKICertIssuerWithHttpInfoAsync(CreatePKICertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreatePKICertIssuer");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePKICertIssuerOutput>("/create-pki-cert-issuer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePKICertIssuer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateRabbitMQTargetOutput</returns>
        public CreateRabbitMQTargetOutput CreateRabbitMQTarget(CreateRabbitMQTarget body)
        {
            akeyless.Client.ApiResponse<CreateRabbitMQTargetOutput> localVarResponse = CreateRabbitMQTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateRabbitMQTargetOutput</returns>
        public akeyless.Client.ApiResponse<CreateRabbitMQTargetOutput> CreateRabbitMQTargetWithHttpInfo(CreateRabbitMQTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateRabbitMQTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateRabbitMQTargetOutput>("/create-rabbitmq-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRabbitMQTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRabbitMQTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateRabbitMQTargetOutput> CreateRabbitMQTargetAsync(CreateRabbitMQTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateRabbitMQTargetOutput> localVarResponse = await CreateRabbitMQTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRabbitMQTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateRabbitMQTargetOutput>> CreateRabbitMQTargetWithHttpInfoAsync(CreateRabbitMQTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateRabbitMQTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateRabbitMQTargetOutput>("/create-rabbitmq-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRabbitMQTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object CreateRole(CreateRole body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = CreateRoleWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> CreateRoleWithHttpInfo(CreateRole body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateRole");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/create-role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateRoleAsync(CreateRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await CreateRoleWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> CreateRoleWithHttpInfoAsync(CreateRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateRole");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/create-role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateRotatedSecretOutput</returns>
        public CreateRotatedSecretOutput CreateRotatedSecret(CreateRotatedSecret body)
        {
            akeyless.Client.ApiResponse<CreateRotatedSecretOutput> localVarResponse = CreateRotatedSecretWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateRotatedSecretOutput</returns>
        public akeyless.Client.ApiResponse<CreateRotatedSecretOutput> CreateRotatedSecretWithHttpInfo(CreateRotatedSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateRotatedSecret");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateRotatedSecretOutput>("/create-rotated-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRotatedSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRotatedSecretOutput</returns>
        public async System.Threading.Tasks.Task<CreateRotatedSecretOutput> CreateRotatedSecretAsync(CreateRotatedSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateRotatedSecretOutput> localVarResponse = await CreateRotatedSecretWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRotatedSecretOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateRotatedSecretOutput>> CreateRotatedSecretWithHttpInfoAsync(CreateRotatedSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateRotatedSecret");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateRotatedSecretOutput>("/create-rotated-secret", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRotatedSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateSSHCertIssuerOutput</returns>
        public CreateSSHCertIssuerOutput CreateSSHCertIssuer(CreateSSHCertIssuer body)
        {
            akeyless.Client.ApiResponse<CreateSSHCertIssuerOutput> localVarResponse = CreateSSHCertIssuerWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateSSHCertIssuerOutput</returns>
        public akeyless.Client.ApiResponse<CreateSSHCertIssuerOutput> CreateSSHCertIssuerWithHttpInfo(CreateSSHCertIssuer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateSSHCertIssuer");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSSHCertIssuerOutput>("/create-ssh-cert-issuer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSSHCertIssuer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSSHCertIssuerOutput</returns>
        public async System.Threading.Tasks.Task<CreateSSHCertIssuerOutput> CreateSSHCertIssuerAsync(CreateSSHCertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateSSHCertIssuerOutput> localVarResponse = await CreateSSHCertIssuerWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSSHCertIssuerOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateSSHCertIssuerOutput>> CreateSSHCertIssuerWithHttpInfoAsync(CreateSSHCertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateSSHCertIssuer");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSSHCertIssuerOutput>("/create-ssh-cert-issuer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSSHCertIssuer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateSSHTargetOutput</returns>
        public CreateSSHTargetOutput CreateSSHTarget(CreateSSHTarget body)
        {
            akeyless.Client.ApiResponse<CreateSSHTargetOutput> localVarResponse = CreateSSHTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateSSHTargetOutput</returns>
        public akeyless.Client.ApiResponse<CreateSSHTargetOutput> CreateSSHTargetWithHttpInfo(CreateSSHTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateSSHTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSSHTargetOutput>("/create-ssh-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSSHTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSSHTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateSSHTargetOutput> CreateSSHTargetAsync(CreateSSHTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateSSHTargetOutput> localVarResponse = await CreateSSHTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSSHTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateSSHTargetOutput>> CreateSSHTargetWithHttpInfoAsync(CreateSSHTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateSSHTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSSHTargetOutput>("/create-ssh-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSSHTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateSecretOutput</returns>
        public CreateSecretOutput CreateSecret(CreateSecret body)
        {
            akeyless.Client.ApiResponse<CreateSecretOutput> localVarResponse = CreateSecretWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateSecretOutput</returns>
        public akeyless.Client.ApiResponse<CreateSecretOutput> CreateSecretWithHttpInfo(CreateSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateSecret");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSecretOutput>("/create-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSecretOutput</returns>
        public async System.Threading.Tasks.Task<CreateSecretOutput> CreateSecretAsync(CreateSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateSecretOutput> localVarResponse = await CreateSecretWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSecretOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateSecretOutput>> CreateSecretWithHttpInfoAsync(CreateSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateSecret");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSecretOutput>("/create-secret", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateWebTargetOutput</returns>
        public CreateWebTargetOutput CreateWebTarget(CreateWebTarget body)
        {
            akeyless.Client.ApiResponse<CreateWebTargetOutput> localVarResponse = CreateWebTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateWebTargetOutput</returns>
        public akeyless.Client.ApiResponse<CreateWebTargetOutput> CreateWebTargetWithHttpInfo(CreateWebTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateWebTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateWebTargetOutput>("/create-web-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWebTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateWebTargetOutput> CreateWebTargetAsync(CreateWebTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateWebTargetOutput> localVarResponse = await CreateWebTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWebTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateWebTargetOutput>> CreateWebTargetWithHttpInfoAsync(CreateWebTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateWebTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateWebTargetOutput>("/create-web-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateLdapTargetOutput</returns>
        public CreateLdapTargetOutput CreateldapTarget(CreateLdapTarget body)
        {
            akeyless.Client.ApiResponse<CreateLdapTargetOutput> localVarResponse = CreateldapTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateLdapTargetOutput</returns>
        public akeyless.Client.ApiResponse<CreateLdapTargetOutput> CreateldapTargetWithHttpInfo(CreateLdapTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateldapTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateLdapTargetOutput>("/create-ldap-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateldapTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateLdapTargetOutput</returns>
        public async System.Threading.Tasks.Task<CreateLdapTargetOutput> CreateldapTargetAsync(CreateLdapTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<CreateLdapTargetOutput> localVarResponse = await CreateldapTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateLdapTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<CreateLdapTargetOutput>> CreateldapTargetWithHttpInfoAsync(CreateLdapTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->CreateldapTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateLdapTargetOutput>("/create-ldap-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateldapTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DecryptOutput</returns>
        public DecryptOutput Decrypt(Decrypt body)
        {
            akeyless.Client.ApiResponse<DecryptOutput> localVarResponse = DecryptWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DecryptOutput</returns>
        public akeyless.Client.ApiResponse<DecryptOutput> DecryptWithHttpInfo(Decrypt body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Decrypt");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DecryptOutput>("/decrypt", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Decrypt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecryptOutput</returns>
        public async System.Threading.Tasks.Task<DecryptOutput> DecryptAsync(Decrypt body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<DecryptOutput> localVarResponse = await DecryptWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecryptOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DecryptOutput>> DecryptWithHttpInfoAsync(Decrypt body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Decrypt");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DecryptOutput>("/decrypt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Decrypt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DecryptPKCS1Output</returns>
        public DecryptPKCS1Output DecryptPKCS1(DecryptPKCS1 body)
        {
            akeyless.Client.ApiResponse<DecryptPKCS1Output> localVarResponse = DecryptPKCS1WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DecryptPKCS1Output</returns>
        public akeyless.Client.ApiResponse<DecryptPKCS1Output> DecryptPKCS1WithHttpInfo(DecryptPKCS1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DecryptPKCS1");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DecryptPKCS1Output>("/decrypt-pkcs1", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DecryptPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecryptPKCS1Output</returns>
        public async System.Threading.Tasks.Task<DecryptPKCS1Output> DecryptPKCS1Async(DecryptPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<DecryptPKCS1Output> localVarResponse = await DecryptPKCS1WithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecryptPKCS1Output)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DecryptPKCS1Output>> DecryptPKCS1WithHttpInfoAsync(DecryptPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DecryptPKCS1");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DecryptPKCS1Output>("/decrypt-pkcs1", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DecryptPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DecryptWithClassicKeyOutput</returns>
        public DecryptWithClassicKeyOutput DecryptWithClassicKey(DecryptWithClassicKey body)
        {
            akeyless.Client.ApiResponse<DecryptWithClassicKeyOutput> localVarResponse = DecryptWithClassicKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DecryptWithClassicKeyOutput</returns>
        public akeyless.Client.ApiResponse<DecryptWithClassicKeyOutput> DecryptWithClassicKeyWithHttpInfo(DecryptWithClassicKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DecryptWithClassicKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DecryptWithClassicKeyOutput>("/decrypt-with-classic-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DecryptWithClassicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecryptWithClassicKeyOutput</returns>
        public async System.Threading.Tasks.Task<DecryptWithClassicKeyOutput> DecryptWithClassicKeyAsync(DecryptWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<DecryptWithClassicKeyOutput> localVarResponse = await DecryptWithClassicKeyWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecryptWithClassicKeyOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DecryptWithClassicKeyOutput>> DecryptWithClassicKeyWithHttpInfoAsync(DecryptWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DecryptWithClassicKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DecryptWithClassicKeyOutput>("/decrypt-with-classic-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DecryptWithClassicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteAuthMethodOutput</returns>
        public DeleteAuthMethodOutput DeleteAuthMethod(DeleteAuthMethod body)
        {
            akeyless.Client.ApiResponse<DeleteAuthMethodOutput> localVarResponse = DeleteAuthMethodWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteAuthMethodOutput</returns>
        public akeyless.Client.ApiResponse<DeleteAuthMethodOutput> DeleteAuthMethodWithHttpInfo(DeleteAuthMethod body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteAuthMethod");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteAuthMethodOutput>("/delete-auth-method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAuthMethodOutput</returns>
        public async System.Threading.Tasks.Task<DeleteAuthMethodOutput> DeleteAuthMethodAsync(DeleteAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<DeleteAuthMethodOutput> localVarResponse = await DeleteAuthMethodWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAuthMethodOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DeleteAuthMethodOutput>> DeleteAuthMethodWithHttpInfoAsync(DeleteAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteAuthMethod");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteAuthMethodOutput>("/delete-auth-method", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteAuthMethodsOutput</returns>
        public DeleteAuthMethodsOutput DeleteAuthMethods(DeleteAuthMethods body)
        {
            akeyless.Client.ApiResponse<DeleteAuthMethodsOutput> localVarResponse = DeleteAuthMethodsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteAuthMethodsOutput</returns>
        public akeyless.Client.ApiResponse<DeleteAuthMethodsOutput> DeleteAuthMethodsWithHttpInfo(DeleteAuthMethods body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteAuthMethods");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteAuthMethodsOutput>("/delete-auth-methods", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthMethods", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAuthMethodsOutput</returns>
        public async System.Threading.Tasks.Task<DeleteAuthMethodsOutput> DeleteAuthMethodsAsync(DeleteAuthMethods body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<DeleteAuthMethodsOutput> localVarResponse = await DeleteAuthMethodsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAuthMethodsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DeleteAuthMethodsOutput>> DeleteAuthMethodsWithHttpInfoAsync(DeleteAuthMethods body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteAuthMethods");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteAuthMethodsOutput>("/delete-auth-methods", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthMethods", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteItemOutput</returns>
        public DeleteItemOutput DeleteItem(DeleteItem body)
        {
            akeyless.Client.ApiResponse<DeleteItemOutput> localVarResponse = DeleteItemWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteItemOutput</returns>
        public akeyless.Client.ApiResponse<DeleteItemOutput> DeleteItemWithHttpInfo(DeleteItem body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteItem");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteItemOutput>("/delete-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteItemOutput</returns>
        public async System.Threading.Tasks.Task<DeleteItemOutput> DeleteItemAsync(DeleteItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<DeleteItemOutput> localVarResponse = await DeleteItemWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteItemOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DeleteItemOutput>> DeleteItemWithHttpInfoAsync(DeleteItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteItem");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteItemOutput>("/delete-item", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteItemsOutput</returns>
        public DeleteItemsOutput DeleteItems(DeleteItems body)
        {
            akeyless.Client.ApiResponse<DeleteItemsOutput> localVarResponse = DeleteItemsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteItemsOutput</returns>
        public akeyless.Client.ApiResponse<DeleteItemsOutput> DeleteItemsWithHttpInfo(DeleteItems body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteItems");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteItemsOutput>("/delete-items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteItemsOutput</returns>
        public async System.Threading.Tasks.Task<DeleteItemsOutput> DeleteItemsAsync(DeleteItems body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<DeleteItemsOutput> localVarResponse = await DeleteItemsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteItemsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DeleteItemsOutput>> DeleteItemsWithHttpInfoAsync(DeleteItems body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteItems");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteItemsOutput>("/delete-items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object DeleteRole(DeleteRole body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = DeleteRoleWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> DeleteRoleWithHttpInfo(DeleteRole body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRole");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/delete-role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteRoleAsync(DeleteRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await DeleteRoleWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> DeleteRoleWithHttpInfoAsync(DeleteRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRole");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/delete-role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object DeleteRoleAssociation(DeleteRoleAssociation body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = DeleteRoleAssociationWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> DeleteRoleAssociationWithHttpInfo(DeleteRoleAssociation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRoleAssociation");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/delete-assoc", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoleAssociation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteRoleAssociationAsync(DeleteRoleAssociation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await DeleteRoleAssociationWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> DeleteRoleAssociationWithHttpInfoAsync(DeleteRoleAssociation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRoleAssociation");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/delete-assoc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoleAssociation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteRoleRuleOutput</returns>
        public DeleteRoleRuleOutput DeleteRoleRule(DeleteRoleRule body)
        {
            akeyless.Client.ApiResponse<DeleteRoleRuleOutput> localVarResponse = DeleteRoleRuleWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteRoleRuleOutput</returns>
        public akeyless.Client.ApiResponse<DeleteRoleRuleOutput> DeleteRoleRuleWithHttpInfo(DeleteRoleRule body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRoleRule");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteRoleRuleOutput>("/delete-role-rule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoleRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteRoleRuleOutput</returns>
        public async System.Threading.Tasks.Task<DeleteRoleRuleOutput> DeleteRoleRuleAsync(DeleteRoleRule body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<DeleteRoleRuleOutput> localVarResponse = await DeleteRoleRuleWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteRoleRuleOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DeleteRoleRuleOutput>> DeleteRoleRuleWithHttpInfoAsync(DeleteRoleRule body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRoleRule");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteRoleRuleOutput>("/delete-role-rule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoleRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object DeleteRoles(DeleteRoles body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = DeleteRolesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> DeleteRolesWithHttpInfo(DeleteRoles body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRoles");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/delete-roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteRolesAsync(DeleteRoles body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await DeleteRolesWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> DeleteRolesWithHttpInfoAsync(DeleteRoles body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteRoles");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/delete-roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object DeleteTarget(DeleteTarget body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = DeleteTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> DeleteTargetWithHttpInfo(DeleteTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/delete-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteTargetAsync(DeleteTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await DeleteTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> DeleteTargetWithHttpInfoAsync(DeleteTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/delete-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object DeleteTargetAssociation(DeleteTargetAssociation body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = DeleteTargetAssociationWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> DeleteTargetAssociationWithHttpInfo(DeleteTargetAssociation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteTargetAssociation");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/delete-assoc-target-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTargetAssociation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteTargetAssociationAsync(DeleteTargetAssociation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await DeleteTargetAssociationWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> DeleteTargetAssociationWithHttpInfoAsync(DeleteTargetAssociation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteTargetAssociation");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/delete-assoc-target-item", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTargetAssociation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object DeleteTargets(DeleteTargets body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = DeleteTargetsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> DeleteTargetsWithHttpInfo(DeleteTargets body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteTargets");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/delete-targets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTargets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteTargetsAsync(DeleteTargets body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await DeleteTargetsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> DeleteTargetsWithHttpInfoAsync(DeleteTargets body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DeleteTargets");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/delete-targets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTargets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Item</returns>
        public Item DescribeItem(DescribeItem body)
        {
            akeyless.Client.ApiResponse<Item> localVarResponse = DescribeItemWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Item</returns>
        public akeyless.Client.ApiResponse<Item> DescribeItemWithHttpInfo(DescribeItem body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DescribeItem");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Item>("/describe-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DescribeItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Item</returns>
        public async System.Threading.Tasks.Task<Item> DescribeItemAsync(DescribeItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Item> localVarResponse = await DescribeItemWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Item>> DescribeItemWithHttpInfoAsync(DescribeItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DescribeItem");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Item>("/describe-item", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DescribeItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DescribePermissionsOutput</returns>
        public DescribePermissionsOutput DescribePermissions(DescribePermissions body)
        {
            akeyless.Client.ApiResponse<DescribePermissionsOutput> localVarResponse = DescribePermissionsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DescribePermissionsOutput</returns>
        public akeyless.Client.ApiResponse<DescribePermissionsOutput> DescribePermissionsWithHttpInfo(DescribePermissions body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DescribePermissions");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DescribePermissionsOutput>("/describe-permissions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DescribePermissions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DescribePermissionsOutput</returns>
        public async System.Threading.Tasks.Task<DescribePermissionsOutput> DescribePermissionsAsync(DescribePermissions body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<DescribePermissionsOutput> localVarResponse = await DescribePermissionsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DescribePermissionsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DescribePermissionsOutput>> DescribePermissionsWithHttpInfoAsync(DescribePermissions body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->DescribePermissions");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DescribePermissionsOutput>("/describe-permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DescribePermissions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EncryptOutput</returns>
        public EncryptOutput Encrypt(Encrypt body)
        {
            akeyless.Client.ApiResponse<EncryptOutput> localVarResponse = EncryptWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EncryptOutput</returns>
        public akeyless.Client.ApiResponse<EncryptOutput> EncryptWithHttpInfo(Encrypt body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Encrypt");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<EncryptOutput>("/encrypt", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Encrypt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EncryptOutput</returns>
        public async System.Threading.Tasks.Task<EncryptOutput> EncryptAsync(Encrypt body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<EncryptOutput> localVarResponse = await EncryptWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EncryptOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<EncryptOutput>> EncryptWithHttpInfoAsync(Encrypt body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->Encrypt");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EncryptOutput>("/encrypt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Encrypt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EncryptPKCS1Output</returns>
        public EncryptPKCS1Output EncryptPKCS1(EncryptPKCS1 body)
        {
            akeyless.Client.ApiResponse<EncryptPKCS1Output> localVarResponse = EncryptPKCS1WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EncryptPKCS1Output</returns>
        public akeyless.Client.ApiResponse<EncryptPKCS1Output> EncryptPKCS1WithHttpInfo(EncryptPKCS1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->EncryptPKCS1");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<EncryptPKCS1Output>("/encrypt-pkcs1", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EncryptPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EncryptPKCS1Output</returns>
        public async System.Threading.Tasks.Task<EncryptPKCS1Output> EncryptPKCS1Async(EncryptPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<EncryptPKCS1Output> localVarResponse = await EncryptPKCS1WithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EncryptPKCS1Output)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<EncryptPKCS1Output>> EncryptPKCS1WithHttpInfoAsync(EncryptPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->EncryptPKCS1");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EncryptPKCS1Output>("/encrypt-pkcs1", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EncryptPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EncryptOutput</returns>
        public EncryptOutput EncryptWithClassicKey(EncryptWithClassicKey body)
        {
            akeyless.Client.ApiResponse<EncryptOutput> localVarResponse = EncryptWithClassicKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EncryptOutput</returns>
        public akeyless.Client.ApiResponse<EncryptOutput> EncryptWithClassicKeyWithHttpInfo(EncryptWithClassicKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->EncryptWithClassicKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<EncryptOutput>("/encrypt-with-classic-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EncryptWithClassicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EncryptOutput</returns>
        public async System.Threading.Tasks.Task<EncryptOutput> EncryptWithClassicKeyAsync(EncryptWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<EncryptOutput> localVarResponse = await EncryptWithClassicKeyWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EncryptOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<EncryptOutput>> EncryptWithClassicKeyWithHttpInfoAsync(EncryptWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->EncryptWithClassicKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EncryptOutput>("/encrypt-with-classic-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EncryptWithClassicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateK8SAuthConfigOutput</returns>
        public GatewayCreateK8SAuthConfigOutput GatewayCreateK8SAuthConfig(GatewayCreateK8SAuthConfig body)
        {
            akeyless.Client.ApiResponse<GatewayCreateK8SAuthConfigOutput> localVarResponse = GatewayCreateK8SAuthConfigWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateK8SAuthConfigOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateK8SAuthConfigOutput> GatewayCreateK8SAuthConfigWithHttpInfo(GatewayCreateK8SAuthConfig body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateK8SAuthConfig");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateK8SAuthConfigOutput>("/gateway-create-k8s-auth-config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateK8SAuthConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateK8SAuthConfigOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateK8SAuthConfigOutput> GatewayCreateK8SAuthConfigAsync(GatewayCreateK8SAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateK8SAuthConfigOutput> localVarResponse = await GatewayCreateK8SAuthConfigWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateK8SAuthConfigOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateK8SAuthConfigOutput>> GatewayCreateK8SAuthConfigWithHttpInfoAsync(GatewayCreateK8SAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateK8SAuthConfig");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateK8SAuthConfigOutput>("/gateway-create-k8s-auth-config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateK8SAuthConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerArtifactoryOutput</returns>
        public GatewayCreateProducerArtifactoryOutput GatewayCreateProducerArtifactory(GatewayCreateProducerArtifactory body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerArtifactoryOutput> localVarResponse = GatewayCreateProducerArtifactoryWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerArtifactoryOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerArtifactoryOutput> GatewayCreateProducerArtifactoryWithHttpInfo(GatewayCreateProducerArtifactory body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerArtifactory");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerArtifactoryOutput>("/gateway-create-producer-artifactory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerArtifactory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerArtifactoryOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerArtifactoryOutput> GatewayCreateProducerArtifactoryAsync(GatewayCreateProducerArtifactory body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerArtifactoryOutput> localVarResponse = await GatewayCreateProducerArtifactoryWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerArtifactoryOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerArtifactoryOutput>> GatewayCreateProducerArtifactoryWithHttpInfoAsync(GatewayCreateProducerArtifactory body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerArtifactory");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerArtifactoryOutput>("/gateway-create-producer-artifactory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerArtifactory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerAwsOutput</returns>
        public GatewayCreateProducerAwsOutput GatewayCreateProducerAws(GatewayCreateProducerAws body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerAwsOutput> localVarResponse = GatewayCreateProducerAwsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerAwsOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerAwsOutput> GatewayCreateProducerAwsWithHttpInfo(GatewayCreateProducerAws body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerAws");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerAwsOutput>("/gateway-create-producer-aws", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerAws", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerAwsOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerAwsOutput> GatewayCreateProducerAwsAsync(GatewayCreateProducerAws body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerAwsOutput> localVarResponse = await GatewayCreateProducerAwsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerAwsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerAwsOutput>> GatewayCreateProducerAwsWithHttpInfoAsync(GatewayCreateProducerAws body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerAws");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerAwsOutput>("/gateway-create-producer-aws", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerAws", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerAzureOutput</returns>
        public GatewayCreateProducerAzureOutput GatewayCreateProducerAzure(GatewayCreateProducerAzure body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerAzureOutput> localVarResponse = GatewayCreateProducerAzureWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerAzureOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerAzureOutput> GatewayCreateProducerAzureWithHttpInfo(GatewayCreateProducerAzure body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerAzure");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerAzureOutput>("/gateway-create-producer-azure", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerAzure", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerAzureOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerAzureOutput> GatewayCreateProducerAzureAsync(GatewayCreateProducerAzure body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerAzureOutput> localVarResponse = await GatewayCreateProducerAzureWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerAzureOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerAzureOutput>> GatewayCreateProducerAzureWithHttpInfoAsync(GatewayCreateProducerAzure body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerAzure");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerAzureOutput>("/gateway-create-producer-azure", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerAzure", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerCassandraOutput</returns>
        public GatewayCreateProducerCassandraOutput GatewayCreateProducerCassandra(GatewayCreateProducerCassandra body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerCassandraOutput> localVarResponse = GatewayCreateProducerCassandraWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerCassandraOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerCassandraOutput> GatewayCreateProducerCassandraWithHttpInfo(GatewayCreateProducerCassandra body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerCassandra");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerCassandraOutput>("/gateway-create-producer-cassandra", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerCassandra", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerCassandraOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerCassandraOutput> GatewayCreateProducerCassandraAsync(GatewayCreateProducerCassandra body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerCassandraOutput> localVarResponse = await GatewayCreateProducerCassandraWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerCassandraOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerCassandraOutput>> GatewayCreateProducerCassandraWithHttpInfoAsync(GatewayCreateProducerCassandra body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerCassandra");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerCassandraOutput>("/gateway-create-producer-cassandra", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerCassandra", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerCertificateAutomationOutput</returns>
        public GatewayCreateProducerCertificateAutomationOutput GatewayCreateProducerCertificateAutomation(GatewayCreateProducerCertificateAutomation body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerCertificateAutomationOutput> localVarResponse = GatewayCreateProducerCertificateAutomationWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerCertificateAutomationOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerCertificateAutomationOutput> GatewayCreateProducerCertificateAutomationWithHttpInfo(GatewayCreateProducerCertificateAutomation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerCertificateAutomation");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerCertificateAutomationOutput>("/gateway-create-producer-certificate-automation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerCertificateAutomation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerCertificateAutomationOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerCertificateAutomationOutput> GatewayCreateProducerCertificateAutomationAsync(GatewayCreateProducerCertificateAutomation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerCertificateAutomationOutput> localVarResponse = await GatewayCreateProducerCertificateAutomationWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerCertificateAutomationOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerCertificateAutomationOutput>> GatewayCreateProducerCertificateAutomationWithHttpInfoAsync(GatewayCreateProducerCertificateAutomation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerCertificateAutomation");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerCertificateAutomationOutput>("/gateway-create-producer-certificate-automation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerCertificateAutomation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GatewayCreateProducerCustomOutput</returns>
        public GatewayCreateProducerCustomOutput GatewayCreateProducerCustom(GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerCustomOutput> localVarResponse = GatewayCreateProducerCustomWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GatewayCreateProducerCustomOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerCustomOutput> GatewayCreateProducerCustomWithHttpInfo(GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerCustomOutput>("/gateway-create-producer-custom", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerCustom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerCustomOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerCustomOutput> GatewayCreateProducerCustomAsync(GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerCustomOutput> localVarResponse = await GatewayCreateProducerCustomWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerCustomOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerCustomOutput>> GatewayCreateProducerCustomWithHttpInfoAsync(GatewayCreateProducerCustom body = default(GatewayCreateProducerCustom), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerCustomOutput>("/gateway-create-producer-custom", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerCustom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerEksOutput</returns>
        public GatewayCreateProducerEksOutput GatewayCreateProducerEks(GatewayCreateProducerEks body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerEksOutput> localVarResponse = GatewayCreateProducerEksWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerEksOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerEksOutput> GatewayCreateProducerEksWithHttpInfo(GatewayCreateProducerEks body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerEks");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerEksOutput>("/gateway-create-producer-eks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerEks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerEksOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerEksOutput> GatewayCreateProducerEksAsync(GatewayCreateProducerEks body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerEksOutput> localVarResponse = await GatewayCreateProducerEksWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerEksOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerEksOutput>> GatewayCreateProducerEksWithHttpInfoAsync(GatewayCreateProducerEks body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerEks");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerEksOutput>("/gateway-create-producer-eks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerEks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerGcpOutput</returns>
        public GatewayCreateProducerGcpOutput GatewayCreateProducerGcp(GatewayCreateProducerGcp body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerGcpOutput> localVarResponse = GatewayCreateProducerGcpWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerGcpOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerGcpOutput> GatewayCreateProducerGcpWithHttpInfo(GatewayCreateProducerGcp body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerGcp");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerGcpOutput>("/gateway-create-producer-gcp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerGcp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerGcpOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerGcpOutput> GatewayCreateProducerGcpAsync(GatewayCreateProducerGcp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerGcpOutput> localVarResponse = await GatewayCreateProducerGcpWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerGcpOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerGcpOutput>> GatewayCreateProducerGcpWithHttpInfoAsync(GatewayCreateProducerGcp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerGcp");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerGcpOutput>("/gateway-create-producer-gcp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerGcp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerGkeOutput</returns>
        public GatewayCreateProducerGkeOutput GatewayCreateProducerGke(GatewayCreateProducerGke body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerGkeOutput> localVarResponse = GatewayCreateProducerGkeWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerGkeOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerGkeOutput> GatewayCreateProducerGkeWithHttpInfo(GatewayCreateProducerGke body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerGke");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerGkeOutput>("/gateway-create-producer-gke", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerGke", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerGkeOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerGkeOutput> GatewayCreateProducerGkeAsync(GatewayCreateProducerGke body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerGkeOutput> localVarResponse = await GatewayCreateProducerGkeWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerGkeOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerGkeOutput>> GatewayCreateProducerGkeWithHttpInfoAsync(GatewayCreateProducerGke body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerGke");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerGkeOutput>("/gateway-create-producer-gke", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerGke", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerLdapOutput</returns>
        public GatewayCreateProducerLdapOutput GatewayCreateProducerLdap(GatewayCreateProducerLdap body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerLdapOutput> localVarResponse = GatewayCreateProducerLdapWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerLdapOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerLdapOutput> GatewayCreateProducerLdapWithHttpInfo(GatewayCreateProducerLdap body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerLdap");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerLdapOutput>("/gateway-create-producer-ldap", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerLdap", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerLdapOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerLdapOutput> GatewayCreateProducerLdapAsync(GatewayCreateProducerLdap body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerLdapOutput> localVarResponse = await GatewayCreateProducerLdapWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerLdapOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerLdapOutput>> GatewayCreateProducerLdapWithHttpInfoAsync(GatewayCreateProducerLdap body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerLdap");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerLdapOutput>("/gateway-create-producer-ldap", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerLdap", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerMSSQLOutput</returns>
        public GatewayCreateProducerMSSQLOutput GatewayCreateProducerMSSQL(GatewayCreateProducerMSSQL body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerMSSQLOutput> localVarResponse = GatewayCreateProducerMSSQLWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerMSSQLOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerMSSQLOutput> GatewayCreateProducerMSSQLWithHttpInfo(GatewayCreateProducerMSSQL body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerMSSQL");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerMSSQLOutput>("/gateway-create-producer-mssql", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerMSSQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerMSSQLOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerMSSQLOutput> GatewayCreateProducerMSSQLAsync(GatewayCreateProducerMSSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerMSSQLOutput> localVarResponse = await GatewayCreateProducerMSSQLWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerMSSQLOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerMSSQLOutput>> GatewayCreateProducerMSSQLWithHttpInfoAsync(GatewayCreateProducerMSSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerMSSQL");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerMSSQLOutput>("/gateway-create-producer-mssql", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerMSSQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerMongoOutput</returns>
        public GatewayCreateProducerMongoOutput GatewayCreateProducerMongo(GatewayCreateProducerMongo body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerMongoOutput> localVarResponse = GatewayCreateProducerMongoWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerMongoOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerMongoOutput> GatewayCreateProducerMongoWithHttpInfo(GatewayCreateProducerMongo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerMongo");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerMongoOutput>("/gateway-create-producer-mongo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerMongo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerMongoOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerMongoOutput> GatewayCreateProducerMongoAsync(GatewayCreateProducerMongo body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerMongoOutput> localVarResponse = await GatewayCreateProducerMongoWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerMongoOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerMongoOutput>> GatewayCreateProducerMongoWithHttpInfoAsync(GatewayCreateProducerMongo body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerMongo");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerMongoOutput>("/gateway-create-producer-mongo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerMongo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerMySQLOutput</returns>
        public GatewayCreateProducerMySQLOutput GatewayCreateProducerMySQL(GatewayCreateProducerMySQL body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerMySQLOutput> localVarResponse = GatewayCreateProducerMySQLWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerMySQLOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerMySQLOutput> GatewayCreateProducerMySQLWithHttpInfo(GatewayCreateProducerMySQL body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerMySQL");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerMySQLOutput>("/gateway-create-producer-mysql", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerMySQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerMySQLOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerMySQLOutput> GatewayCreateProducerMySQLAsync(GatewayCreateProducerMySQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerMySQLOutput> localVarResponse = await GatewayCreateProducerMySQLWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerMySQLOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerMySQLOutput>> GatewayCreateProducerMySQLWithHttpInfoAsync(GatewayCreateProducerMySQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerMySQL");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerMySQLOutput>("/gateway-create-producer-mysql", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerMySQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerNativeK8SOutput</returns>
        public GatewayCreateProducerNativeK8SOutput GatewayCreateProducerNativeK8S(GatewayCreateProducerNativeK8S body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerNativeK8SOutput> localVarResponse = GatewayCreateProducerNativeK8SWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerNativeK8SOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerNativeK8SOutput> GatewayCreateProducerNativeK8SWithHttpInfo(GatewayCreateProducerNativeK8S body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerNativeK8S");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerNativeK8SOutput>("/gateway-create-producer-k8s-native", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerNativeK8S", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerNativeK8SOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerNativeK8SOutput> GatewayCreateProducerNativeK8SAsync(GatewayCreateProducerNativeK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerNativeK8SOutput> localVarResponse = await GatewayCreateProducerNativeK8SWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerNativeK8SOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerNativeK8SOutput>> GatewayCreateProducerNativeK8SWithHttpInfoAsync(GatewayCreateProducerNativeK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerNativeK8S");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerNativeK8SOutput>("/gateway-create-producer-k8s-native", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerNativeK8S", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerOracleDbOutput</returns>
        public GatewayCreateProducerOracleDbOutput GatewayCreateProducerOracleDb(GatewayCreateProducerOracleDb body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerOracleDbOutput> localVarResponse = GatewayCreateProducerOracleDbWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerOracleDbOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerOracleDbOutput> GatewayCreateProducerOracleDbWithHttpInfo(GatewayCreateProducerOracleDb body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerOracleDb");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerOracleDbOutput>("/gateway-create-producer-oracle", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerOracleDb", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerOracleDbOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerOracleDbOutput> GatewayCreateProducerOracleDbAsync(GatewayCreateProducerOracleDb body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerOracleDbOutput> localVarResponse = await GatewayCreateProducerOracleDbWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerOracleDbOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerOracleDbOutput>> GatewayCreateProducerOracleDbWithHttpInfoAsync(GatewayCreateProducerOracleDb body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerOracleDb");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerOracleDbOutput>("/gateway-create-producer-oracle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerOracleDb", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerPostgreSQLOutput</returns>
        public GatewayCreateProducerPostgreSQLOutput GatewayCreateProducerPostgreSQL(GatewayCreateProducerPostgreSQL body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerPostgreSQLOutput> localVarResponse = GatewayCreateProducerPostgreSQLWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerPostgreSQLOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerPostgreSQLOutput> GatewayCreateProducerPostgreSQLWithHttpInfo(GatewayCreateProducerPostgreSQL body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerPostgreSQL");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerPostgreSQLOutput>("/gateway-create-producer-postgresql", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerPostgreSQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerPostgreSQLOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerPostgreSQLOutput> GatewayCreateProducerPostgreSQLAsync(GatewayCreateProducerPostgreSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerPostgreSQLOutput> localVarResponse = await GatewayCreateProducerPostgreSQLWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerPostgreSQLOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerPostgreSQLOutput>> GatewayCreateProducerPostgreSQLWithHttpInfoAsync(GatewayCreateProducerPostgreSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerPostgreSQL");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerPostgreSQLOutput>("/gateway-create-producer-postgresql", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerPostgreSQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerRabbitMQOutput</returns>
        public GatewayCreateProducerRabbitMQOutput GatewayCreateProducerRabbitMQ(GatewayCreateProducerRabbitMQ body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerRabbitMQOutput> localVarResponse = GatewayCreateProducerRabbitMQWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerRabbitMQOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerRabbitMQOutput> GatewayCreateProducerRabbitMQWithHttpInfo(GatewayCreateProducerRabbitMQ body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerRabbitMQ");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerRabbitMQOutput>("/gateway-create-producer-rabbitmq", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerRabbitMQ", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerRabbitMQOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerRabbitMQOutput> GatewayCreateProducerRabbitMQAsync(GatewayCreateProducerRabbitMQ body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerRabbitMQOutput> localVarResponse = await GatewayCreateProducerRabbitMQWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerRabbitMQOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerRabbitMQOutput>> GatewayCreateProducerRabbitMQWithHttpInfoAsync(GatewayCreateProducerRabbitMQ body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerRabbitMQ");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerRabbitMQOutput>("/gateway-create-producer-rabbitmq", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerRabbitMQ", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerRdpOutput</returns>
        public GatewayCreateProducerRdpOutput GatewayCreateProducerRdp(GatewayCreateProducerRdp body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerRdpOutput> localVarResponse = GatewayCreateProducerRdpWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerRdpOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerRdpOutput> GatewayCreateProducerRdpWithHttpInfo(GatewayCreateProducerRdp body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerRdp");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerRdpOutput>("/gateway-create-producer-rdp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerRdp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerRdpOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerRdpOutput> GatewayCreateProducerRdpAsync(GatewayCreateProducerRdp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerRdpOutput> localVarResponse = await GatewayCreateProducerRdpWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerRdpOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerRdpOutput>> GatewayCreateProducerRdpWithHttpInfoAsync(GatewayCreateProducerRdp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerRdp");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerRdpOutput>("/gateway-create-producer-rdp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerRdp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerRedshiftOutput</returns>
        public GatewayCreateProducerRedshiftOutput GatewayCreateProducerRedshift(GatewayCreateProducerRedshift body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerRedshiftOutput> localVarResponse = GatewayCreateProducerRedshiftWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerRedshiftOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerRedshiftOutput> GatewayCreateProducerRedshiftWithHttpInfo(GatewayCreateProducerRedshift body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerRedshift");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerRedshiftOutput>("/gateway-create-producer-redshift", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerRedshift", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerRedshiftOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerRedshiftOutput> GatewayCreateProducerRedshiftAsync(GatewayCreateProducerRedshift body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerRedshiftOutput> localVarResponse = await GatewayCreateProducerRedshiftWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerRedshiftOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerRedshiftOutput>> GatewayCreateProducerRedshiftWithHttpInfoAsync(GatewayCreateProducerRedshift body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerRedshift");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerRedshiftOutput>("/gateway-create-producer-redshift", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerRedshift", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayCreateProducerSnowflakeOutput</returns>
        public GatewayCreateProducerSnowflakeOutput GatewayCreateProducerSnowflake(GatewayCreateProducerSnowflake body)
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerSnowflakeOutput> localVarResponse = GatewayCreateProducerSnowflakeWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayCreateProducerSnowflakeOutput</returns>
        public akeyless.Client.ApiResponse<GatewayCreateProducerSnowflakeOutput> GatewayCreateProducerSnowflakeWithHttpInfo(GatewayCreateProducerSnowflake body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerSnowflake");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayCreateProducerSnowflakeOutput>("/gateway-create-producer-snowflake", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerSnowflake", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCreateProducerSnowflakeOutput</returns>
        public async System.Threading.Tasks.Task<GatewayCreateProducerSnowflakeOutput> GatewayCreateProducerSnowflakeAsync(GatewayCreateProducerSnowflake body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayCreateProducerSnowflakeOutput> localVarResponse = await GatewayCreateProducerSnowflakeWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCreateProducerSnowflakeOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayCreateProducerSnowflakeOutput>> GatewayCreateProducerSnowflakeWithHttpInfoAsync(GatewayCreateProducerSnowflake body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayCreateProducerSnowflake");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayCreateProducerSnowflakeOutput>("/gateway-create-producer-snowflake", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCreateProducerSnowflake", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object GatewayDeleteAllowedManagementAccess(GatewayDeleteAllowedManagementAccess body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = GatewayDeleteAllowedManagementAccessWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> GatewayDeleteAllowedManagementAccessWithHttpInfo(GatewayDeleteAllowedManagementAccess body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayDeleteAllowedManagementAccess");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gateway-delete-allowed-management-access", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayDeleteAllowedManagementAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GatewayDeleteAllowedManagementAccessAsync(GatewayDeleteAllowedManagementAccess body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await GatewayDeleteAllowedManagementAccessWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> GatewayDeleteAllowedManagementAccessWithHttpInfoAsync(GatewayDeleteAllowedManagementAccess body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayDeleteAllowedManagementAccess");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gateway-delete-allowed-management-access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayDeleteAllowedManagementAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayDeleteK8SAuthConfigOutput</returns>
        public GatewayDeleteK8SAuthConfigOutput GatewayDeleteK8SAuthConfig(GatewayDeleteK8SAuthConfig body)
        {
            akeyless.Client.ApiResponse<GatewayDeleteK8SAuthConfigOutput> localVarResponse = GatewayDeleteK8SAuthConfigWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayDeleteK8SAuthConfigOutput</returns>
        public akeyless.Client.ApiResponse<GatewayDeleteK8SAuthConfigOutput> GatewayDeleteK8SAuthConfigWithHttpInfo(GatewayDeleteK8SAuthConfig body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayDeleteK8SAuthConfig");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayDeleteK8SAuthConfigOutput>("/gateway-delete-k8s-auth-config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayDeleteK8SAuthConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayDeleteK8SAuthConfigOutput</returns>
        public async System.Threading.Tasks.Task<GatewayDeleteK8SAuthConfigOutput> GatewayDeleteK8SAuthConfigAsync(GatewayDeleteK8SAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayDeleteK8SAuthConfigOutput> localVarResponse = await GatewayDeleteK8SAuthConfigWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayDeleteK8SAuthConfigOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayDeleteK8SAuthConfigOutput>> GatewayDeleteK8SAuthConfigWithHttpInfoAsync(GatewayDeleteK8SAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayDeleteK8SAuthConfig");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayDeleteK8SAuthConfigOutput>("/gateway-delete-k8s-auth-config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayDeleteK8SAuthConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayDeleteProducerOutput</returns>
        public GatewayDeleteProducerOutput GatewayDeleteProducer(GatewayDeleteProducer body)
        {
            akeyless.Client.ApiResponse<GatewayDeleteProducerOutput> localVarResponse = GatewayDeleteProducerWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayDeleteProducerOutput</returns>
        public akeyless.Client.ApiResponse<GatewayDeleteProducerOutput> GatewayDeleteProducerWithHttpInfo(GatewayDeleteProducer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayDeleteProducer");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayDeleteProducerOutput>("/gateway-delete-producer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayDeleteProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayDeleteProducerOutput</returns>
        public async System.Threading.Tasks.Task<GatewayDeleteProducerOutput> GatewayDeleteProducerAsync(GatewayDeleteProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayDeleteProducerOutput> localVarResponse = await GatewayDeleteProducerWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayDeleteProducerOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayDeleteProducerOutput>> GatewayDeleteProducerWithHttpInfoAsync(GatewayDeleteProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayDeleteProducer");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayDeleteProducerOutput>("/gateway-delete-producer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayDeleteProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AkeylessGatewayConfig</returns>
        public AkeylessGatewayConfig GatewayGetConfig(GatewayGetConfig body)
        {
            akeyless.Client.ApiResponse<AkeylessGatewayConfig> localVarResponse = GatewayGetConfigWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AkeylessGatewayConfig</returns>
        public akeyless.Client.ApiResponse<AkeylessGatewayConfig> GatewayGetConfigWithHttpInfo(GatewayGetConfig body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayGetConfig");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AkeylessGatewayConfig>("/gateway-get-config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayGetConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AkeylessGatewayConfig</returns>
        public async System.Threading.Tasks.Task<AkeylessGatewayConfig> GatewayGetConfigAsync(GatewayGetConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<AkeylessGatewayConfig> localVarResponse = await GatewayGetConfigWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AkeylessGatewayConfig)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<AkeylessGatewayConfig>> GatewayGetConfigWithHttpInfoAsync(GatewayGetConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayGetConfig");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AkeylessGatewayConfig>("/gateway-get-config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayGetConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayGetK8SAuthConfigOutput</returns>
        public GatewayGetK8SAuthConfigOutput GatewayGetK8SAuthConfig(GatewayGetK8SAuthConfig body)
        {
            akeyless.Client.ApiResponse<GatewayGetK8SAuthConfigOutput> localVarResponse = GatewayGetK8SAuthConfigWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayGetK8SAuthConfigOutput</returns>
        public akeyless.Client.ApiResponse<GatewayGetK8SAuthConfigOutput> GatewayGetK8SAuthConfigWithHttpInfo(GatewayGetK8SAuthConfig body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayGetK8SAuthConfig");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayGetK8SAuthConfigOutput>("/gateway-get-k8s-auth-config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayGetK8SAuthConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayGetK8SAuthConfigOutput</returns>
        public async System.Threading.Tasks.Task<GatewayGetK8SAuthConfigOutput> GatewayGetK8SAuthConfigAsync(GatewayGetK8SAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayGetK8SAuthConfigOutput> localVarResponse = await GatewayGetK8SAuthConfigWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayGetK8SAuthConfigOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayGetK8SAuthConfigOutput>> GatewayGetK8SAuthConfigWithHttpInfoAsync(GatewayGetK8SAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayGetK8SAuthConfig");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayGetK8SAuthConfigOutput>("/gateway-get-k8s-auth-config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayGetK8SAuthConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DSProducerDetails</returns>
        public DSProducerDetails GatewayGetProducer(GatewayGetProducer body)
        {
            akeyless.Client.ApiResponse<DSProducerDetails> localVarResponse = GatewayGetProducerWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DSProducerDetails</returns>
        public akeyless.Client.ApiResponse<DSProducerDetails> GatewayGetProducerWithHttpInfo(GatewayGetProducer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayGetProducer");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DSProducerDetails>("/gateway-get-producer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayGetProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DSProducerDetails</returns>
        public async System.Threading.Tasks.Task<DSProducerDetails> GatewayGetProducerAsync(GatewayGetProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<DSProducerDetails> localVarResponse = await GatewayGetProducerWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DSProducerDetails)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<DSProducerDetails>> GatewayGetProducerWithHttpInfoAsync(GatewayGetProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayGetProducer");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DSProducerDetails>("/gateway-get-producer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayGetProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;TmpUserData&gt;</returns>
        public List<TmpUserData> GatewayGetTmpUsers(GatewayGetTmpUsers body)
        {
            akeyless.Client.ApiResponse<List<TmpUserData>> localVarResponse = GatewayGetTmpUsersWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;TmpUserData&gt;</returns>
        public akeyless.Client.ApiResponse<List<TmpUserData>> GatewayGetTmpUsersWithHttpInfo(GatewayGetTmpUsers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayGetTmpUsers");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<TmpUserData>>("/gateway-get-producer-tmp-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayGetTmpUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TmpUserData&gt;</returns>
        public async System.Threading.Tasks.Task<List<TmpUserData>> GatewayGetTmpUsersAsync(GatewayGetTmpUsers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<List<TmpUserData>> localVarResponse = await GatewayGetTmpUsersWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TmpUserData&gt;)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<List<TmpUserData>>> GatewayGetTmpUsersWithHttpInfoAsync(GatewayGetTmpUsers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayGetTmpUsers");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<TmpUserData>>("/gateway-get-producer-tmp-creds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayGetTmpUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetSubAdminsListReplyObj</returns>
        public GetSubAdminsListReplyObj GatewayListAllowedManagementAccess(GatewayListAllowedManagementAccess body)
        {
            akeyless.Client.ApiResponse<GetSubAdminsListReplyObj> localVarResponse = GatewayListAllowedManagementAccessWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetSubAdminsListReplyObj</returns>
        public akeyless.Client.ApiResponse<GetSubAdminsListReplyObj> GatewayListAllowedManagementAccessWithHttpInfo(GatewayListAllowedManagementAccess body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayListAllowedManagementAccess");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSubAdminsListReplyObj>("/gateway-list-allowed-management-access", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayListAllowedManagementAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSubAdminsListReplyObj</returns>
        public async System.Threading.Tasks.Task<GetSubAdminsListReplyObj> GatewayListAllowedManagementAccessAsync(GatewayListAllowedManagementAccess body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GetSubAdminsListReplyObj> localVarResponse = await GatewayListAllowedManagementAccessWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSubAdminsListReplyObj)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GetSubAdminsListReplyObj>> GatewayListAllowedManagementAccessWithHttpInfoAsync(GatewayListAllowedManagementAccess body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayListAllowedManagementAccess");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSubAdminsListReplyObj>("/gateway-list-allowed-management-access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayListAllowedManagementAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayMigrationListOutput</returns>
        public GatewayMigrationListOutput GatewayListMigration(GatewayListMigration body)
        {
            akeyless.Client.ApiResponse<GatewayMigrationListOutput> localVarResponse = GatewayListMigrationWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayMigrationListOutput</returns>
        public akeyless.Client.ApiResponse<GatewayMigrationListOutput> GatewayListMigrationWithHttpInfo(GatewayListMigration body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayListMigration");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayMigrationListOutput>("/gateway-list-migration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayListMigration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayMigrationListOutput</returns>
        public async System.Threading.Tasks.Task<GatewayMigrationListOutput> GatewayListMigrationAsync(GatewayListMigration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayMigrationListOutput> localVarResponse = await GatewayListMigrationWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayMigrationListOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayMigrationListOutput>> GatewayListMigrationWithHttpInfoAsync(GatewayListMigration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayListMigration");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayMigrationListOutput>("/gateway-list-migration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayListMigration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetProducersListReplyObj</returns>
        public GetProducersListReplyObj GatewayListProducers(GatewayListProducers body)
        {
            akeyless.Client.ApiResponse<GetProducersListReplyObj> localVarResponse = GatewayListProducersWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetProducersListReplyObj</returns>
        public akeyless.Client.ApiResponse<GetProducersListReplyObj> GatewayListProducersWithHttpInfo(GatewayListProducers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayListProducers");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetProducersListReplyObj>("/gateway-list-producers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayListProducers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProducersListReplyObj</returns>
        public async System.Threading.Tasks.Task<GetProducersListReplyObj> GatewayListProducersAsync(GatewayListProducers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GetProducersListReplyObj> localVarResponse = await GatewayListProducersWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProducersListReplyObj)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GetProducersListReplyObj>> GatewayListProducersWithHttpInfoAsync(GatewayListProducers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayListProducers");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetProducersListReplyObj>("/gateway-list-producers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayListProducers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void GatewayRevokeTmpUsers(GatewayRevokeTmpUsers body)
        {
            GatewayRevokeTmpUsersWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public akeyless.Client.ApiResponse<Object> GatewayRevokeTmpUsersWithHttpInfo(GatewayRevokeTmpUsers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayRevokeTmpUsers");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gateway-revoke-producer-tmp-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayRevokeTmpUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GatewayRevokeTmpUsersAsync(GatewayRevokeTmpUsers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GatewayRevokeTmpUsersWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> GatewayRevokeTmpUsersWithHttpInfoAsync(GatewayRevokeTmpUsers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayRevokeTmpUsers");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gateway-revoke-producer-tmp-creds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayRevokeTmpUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayStartProducerOutput</returns>
        public GatewayStartProducerOutput GatewayStartProducer(GatewayStartProducer body)
        {
            akeyless.Client.ApiResponse<GatewayStartProducerOutput> localVarResponse = GatewayStartProducerWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayStartProducerOutput</returns>
        public akeyless.Client.ApiResponse<GatewayStartProducerOutput> GatewayStartProducerWithHttpInfo(GatewayStartProducer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayStartProducer");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayStartProducerOutput>("/gateway-start-producer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayStartProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayStartProducerOutput</returns>
        public async System.Threading.Tasks.Task<GatewayStartProducerOutput> GatewayStartProducerAsync(GatewayStartProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayStartProducerOutput> localVarResponse = await GatewayStartProducerWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayStartProducerOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayStartProducerOutput>> GatewayStartProducerWithHttpInfoAsync(GatewayStartProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayStartProducer");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayStartProducerOutput>("/gateway-start-producer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayStartProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayStopProducerOutput</returns>
        public GatewayStopProducerOutput GatewayStopProducer(GatewayStopProducer body)
        {
            akeyless.Client.ApiResponse<GatewayStopProducerOutput> localVarResponse = GatewayStopProducerWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayStopProducerOutput</returns>
        public akeyless.Client.ApiResponse<GatewayStopProducerOutput> GatewayStopProducerWithHttpInfo(GatewayStopProducer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayStopProducer");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayStopProducerOutput>("/gateway-stop-producer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayStopProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayStopProducerOutput</returns>
        public async System.Threading.Tasks.Task<GatewayStopProducerOutput> GatewayStopProducerAsync(GatewayStopProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayStopProducerOutput> localVarResponse = await GatewayStopProducerWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayStopProducerOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayStopProducerOutput>> GatewayStopProducerWithHttpInfoAsync(GatewayStopProducer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayStopProducer");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayStopProducerOutput>("/gateway-stop-producer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayStopProducer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayMigrationSyncOutput</returns>
        public GatewayMigrationSyncOutput GatewaySyncMigration(GatewaySyncMigration body)
        {
            akeyless.Client.ApiResponse<GatewayMigrationSyncOutput> localVarResponse = GatewaySyncMigrationWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayMigrationSyncOutput</returns>
        public akeyless.Client.ApiResponse<GatewayMigrationSyncOutput> GatewaySyncMigrationWithHttpInfo(GatewaySyncMigration body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewaySyncMigration");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayMigrationSyncOutput>("/gateway-sync-migration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewaySyncMigration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayMigrationSyncOutput</returns>
        public async System.Threading.Tasks.Task<GatewayMigrationSyncOutput> GatewaySyncMigrationAsync(GatewaySyncMigration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayMigrationSyncOutput> localVarResponse = await GatewaySyncMigrationWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayMigrationSyncOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayMigrationSyncOutput>> GatewaySyncMigrationWithHttpInfoAsync(GatewaySyncMigration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewaySyncMigration");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayMigrationSyncOutput>("/gateway-sync-migration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewaySyncMigration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateItemOutput</returns>
        public GatewayUpdateItemOutput GatewayUpdateItem(GatewayUpdateItem body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateItemOutput> localVarResponse = GatewayUpdateItemWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateItemOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateItemOutput> GatewayUpdateItemWithHttpInfo(GatewayUpdateItem body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateItem");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateItemOutput>("/gateway-update-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateItemOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateItemOutput> GatewayUpdateItemAsync(GatewayUpdateItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateItemOutput> localVarResponse = await GatewayUpdateItemWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateItemOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateItemOutput>> GatewayUpdateItemWithHttpInfoAsync(GatewayUpdateItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateItem");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateItemOutput>("/gateway-update-item", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerArtifactoryOutput</returns>
        public GatewayUpdateProducerArtifactoryOutput GatewayUpdateProducerArtifactory(GatewayUpdateProducerArtifactory body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerArtifactoryOutput> localVarResponse = GatewayUpdateProducerArtifactoryWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerArtifactoryOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerArtifactoryOutput> GatewayUpdateProducerArtifactoryWithHttpInfo(GatewayUpdateProducerArtifactory body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerArtifactory");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerArtifactoryOutput>("/gateway-update-producer-artifactory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerArtifactory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerArtifactoryOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerArtifactoryOutput> GatewayUpdateProducerArtifactoryAsync(GatewayUpdateProducerArtifactory body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerArtifactoryOutput> localVarResponse = await GatewayUpdateProducerArtifactoryWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerArtifactoryOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerArtifactoryOutput>> GatewayUpdateProducerArtifactoryWithHttpInfoAsync(GatewayUpdateProducerArtifactory body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerArtifactory");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerArtifactoryOutput>("/gateway-update-producer-artifactory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerArtifactory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerAwsOutput</returns>
        public GatewayUpdateProducerAwsOutput GatewayUpdateProducerAws(GatewayUpdateProducerAws body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerAwsOutput> localVarResponse = GatewayUpdateProducerAwsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerAwsOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerAwsOutput> GatewayUpdateProducerAwsWithHttpInfo(GatewayUpdateProducerAws body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerAws");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerAwsOutput>("/gateway-update-producer-aws", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerAws", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerAwsOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerAwsOutput> GatewayUpdateProducerAwsAsync(GatewayUpdateProducerAws body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerAwsOutput> localVarResponse = await GatewayUpdateProducerAwsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerAwsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerAwsOutput>> GatewayUpdateProducerAwsWithHttpInfoAsync(GatewayUpdateProducerAws body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerAws");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerAwsOutput>("/gateway-update-producer-aws", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerAws", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerAzureOutput</returns>
        public GatewayUpdateProducerAzureOutput GatewayUpdateProducerAzure(GatewayUpdateProducerAzure body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerAzureOutput> localVarResponse = GatewayUpdateProducerAzureWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerAzureOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerAzureOutput> GatewayUpdateProducerAzureWithHttpInfo(GatewayUpdateProducerAzure body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerAzure");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerAzureOutput>("/gateway-update-producer-azure", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerAzure", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerAzureOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerAzureOutput> GatewayUpdateProducerAzureAsync(GatewayUpdateProducerAzure body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerAzureOutput> localVarResponse = await GatewayUpdateProducerAzureWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerAzureOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerAzureOutput>> GatewayUpdateProducerAzureWithHttpInfoAsync(GatewayUpdateProducerAzure body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerAzure");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerAzureOutput>("/gateway-update-producer-azure", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerAzure", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerCassandraOutput</returns>
        public GatewayUpdateProducerCassandraOutput GatewayUpdateProducerCassandra(GatewayUpdateProducerCassandra body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerCassandraOutput> localVarResponse = GatewayUpdateProducerCassandraWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerCassandraOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerCassandraOutput> GatewayUpdateProducerCassandraWithHttpInfo(GatewayUpdateProducerCassandra body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerCassandra");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerCassandraOutput>("/gateway-update-producer-cassandra", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerCassandra", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerCassandraOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerCassandraOutput> GatewayUpdateProducerCassandraAsync(GatewayUpdateProducerCassandra body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerCassandraOutput> localVarResponse = await GatewayUpdateProducerCassandraWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerCassandraOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerCassandraOutput>> GatewayUpdateProducerCassandraWithHttpInfoAsync(GatewayUpdateProducerCassandra body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerCassandra");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerCassandraOutput>("/gateway-update-producer-cassandra", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerCassandra", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerCertificateAutomationOutput</returns>
        public GatewayUpdateProducerCertificateAutomationOutput GatewayUpdateProducerCertificateAutomation(GatewayUpdateProducerCertificateAutomation body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerCertificateAutomationOutput> localVarResponse = GatewayUpdateProducerCertificateAutomationWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerCertificateAutomationOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerCertificateAutomationOutput> GatewayUpdateProducerCertificateAutomationWithHttpInfo(GatewayUpdateProducerCertificateAutomation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerCertificateAutomation");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerCertificateAutomationOutput>("/gateway-update-producer-certificate-automation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerCertificateAutomation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerCertificateAutomationOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerCertificateAutomationOutput> GatewayUpdateProducerCertificateAutomationAsync(GatewayUpdateProducerCertificateAutomation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerCertificateAutomationOutput> localVarResponse = await GatewayUpdateProducerCertificateAutomationWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerCertificateAutomationOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerCertificateAutomationOutput>> GatewayUpdateProducerCertificateAutomationWithHttpInfoAsync(GatewayUpdateProducerCertificateAutomation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerCertificateAutomation");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerCertificateAutomationOutput>("/gateway-update-producer-certificate-automation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerCertificateAutomation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GatewayUpdateProducerCustomOutput</returns>
        public GatewayUpdateProducerCustomOutput GatewayUpdateProducerCustom(GatewayUpdateProducerCustom body = default(GatewayUpdateProducerCustom))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerCustomOutput> localVarResponse = GatewayUpdateProducerCustomWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GatewayUpdateProducerCustomOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerCustomOutput> GatewayUpdateProducerCustomWithHttpInfo(GatewayUpdateProducerCustom body = default(GatewayUpdateProducerCustom))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerCustomOutput>("/gateway-update-producer-custom", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerCustom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerCustomOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerCustomOutput> GatewayUpdateProducerCustomAsync(GatewayUpdateProducerCustom body = default(GatewayUpdateProducerCustom), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerCustomOutput> localVarResponse = await GatewayUpdateProducerCustomWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerCustomOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerCustomOutput>> GatewayUpdateProducerCustomWithHttpInfoAsync(GatewayUpdateProducerCustom body = default(GatewayUpdateProducerCustom), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerCustomOutput>("/gateway-update-producer-custom", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerCustom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerEksOutput</returns>
        public GatewayUpdateProducerEksOutput GatewayUpdateProducerEks(GatewayUpdateProducerEks body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerEksOutput> localVarResponse = GatewayUpdateProducerEksWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerEksOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerEksOutput> GatewayUpdateProducerEksWithHttpInfo(GatewayUpdateProducerEks body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerEks");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerEksOutput>("/gateway-update-producer-eks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerEks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerEksOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerEksOutput> GatewayUpdateProducerEksAsync(GatewayUpdateProducerEks body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerEksOutput> localVarResponse = await GatewayUpdateProducerEksWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerEksOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerEksOutput>> GatewayUpdateProducerEksWithHttpInfoAsync(GatewayUpdateProducerEks body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerEks");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerEksOutput>("/gateway-update-producer-eks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerEks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerGcpOutput</returns>
        public GatewayUpdateProducerGcpOutput GatewayUpdateProducerGcp(GatewayUpdateProducerGcp body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerGcpOutput> localVarResponse = GatewayUpdateProducerGcpWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerGcpOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerGcpOutput> GatewayUpdateProducerGcpWithHttpInfo(GatewayUpdateProducerGcp body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerGcp");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerGcpOutput>("/gateway-update-producer-gcp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerGcp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerGcpOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerGcpOutput> GatewayUpdateProducerGcpAsync(GatewayUpdateProducerGcp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerGcpOutput> localVarResponse = await GatewayUpdateProducerGcpWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerGcpOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerGcpOutput>> GatewayUpdateProducerGcpWithHttpInfoAsync(GatewayUpdateProducerGcp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerGcp");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerGcpOutput>("/gateway-update-producer-gcp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerGcp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerGkeOutput</returns>
        public GatewayUpdateProducerGkeOutput GatewayUpdateProducerGke(GatewayUpdateProducerGke body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerGkeOutput> localVarResponse = GatewayUpdateProducerGkeWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerGkeOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerGkeOutput> GatewayUpdateProducerGkeWithHttpInfo(GatewayUpdateProducerGke body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerGke");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerGkeOutput>("/gateway-update-producer-gke", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerGke", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerGkeOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerGkeOutput> GatewayUpdateProducerGkeAsync(GatewayUpdateProducerGke body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerGkeOutput> localVarResponse = await GatewayUpdateProducerGkeWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerGkeOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerGkeOutput>> GatewayUpdateProducerGkeWithHttpInfoAsync(GatewayUpdateProducerGke body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerGke");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerGkeOutput>("/gateway-update-producer-gke", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerGke", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerLdapOutput</returns>
        public GatewayUpdateProducerLdapOutput GatewayUpdateProducerLdap(GatewayUpdateProducerLdap body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerLdapOutput> localVarResponse = GatewayUpdateProducerLdapWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerLdapOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerLdapOutput> GatewayUpdateProducerLdapWithHttpInfo(GatewayUpdateProducerLdap body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerLdap");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerLdapOutput>("/gateway-update-producer-ldap", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerLdap", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerLdapOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerLdapOutput> GatewayUpdateProducerLdapAsync(GatewayUpdateProducerLdap body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerLdapOutput> localVarResponse = await GatewayUpdateProducerLdapWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerLdapOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerLdapOutput>> GatewayUpdateProducerLdapWithHttpInfoAsync(GatewayUpdateProducerLdap body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerLdap");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerLdapOutput>("/gateway-update-producer-ldap", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerLdap", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerMSSQLOutput</returns>
        public GatewayUpdateProducerMSSQLOutput GatewayUpdateProducerMSSQL(GatewayUpdateProducerMSSQL body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerMSSQLOutput> localVarResponse = GatewayUpdateProducerMSSQLWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerMSSQLOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerMSSQLOutput> GatewayUpdateProducerMSSQLWithHttpInfo(GatewayUpdateProducerMSSQL body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerMSSQL");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerMSSQLOutput>("/gateway-update-producer-mssql", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerMSSQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerMSSQLOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerMSSQLOutput> GatewayUpdateProducerMSSQLAsync(GatewayUpdateProducerMSSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerMSSQLOutput> localVarResponse = await GatewayUpdateProducerMSSQLWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerMSSQLOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerMSSQLOutput>> GatewayUpdateProducerMSSQLWithHttpInfoAsync(GatewayUpdateProducerMSSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerMSSQL");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerMSSQLOutput>("/gateway-update-producer-mssql", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerMSSQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerMongoOutput</returns>
        public GatewayUpdateProducerMongoOutput GatewayUpdateProducerMongo(GatewayUpdateProducerMongo body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerMongoOutput> localVarResponse = GatewayUpdateProducerMongoWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerMongoOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerMongoOutput> GatewayUpdateProducerMongoWithHttpInfo(GatewayUpdateProducerMongo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerMongo");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerMongoOutput>("/gateway-update-producer-mongo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerMongo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerMongoOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerMongoOutput> GatewayUpdateProducerMongoAsync(GatewayUpdateProducerMongo body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerMongoOutput> localVarResponse = await GatewayUpdateProducerMongoWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerMongoOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerMongoOutput>> GatewayUpdateProducerMongoWithHttpInfoAsync(GatewayUpdateProducerMongo body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerMongo");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerMongoOutput>("/gateway-update-producer-mongo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerMongo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerMySQLOutput</returns>
        public GatewayUpdateProducerMySQLOutput GatewayUpdateProducerMySQL(GatewayUpdateProducerMySQL body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerMySQLOutput> localVarResponse = GatewayUpdateProducerMySQLWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerMySQLOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerMySQLOutput> GatewayUpdateProducerMySQLWithHttpInfo(GatewayUpdateProducerMySQL body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerMySQL");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerMySQLOutput>("/gateway-update-producer-mysql", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerMySQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerMySQLOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerMySQLOutput> GatewayUpdateProducerMySQLAsync(GatewayUpdateProducerMySQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerMySQLOutput> localVarResponse = await GatewayUpdateProducerMySQLWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerMySQLOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerMySQLOutput>> GatewayUpdateProducerMySQLWithHttpInfoAsync(GatewayUpdateProducerMySQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerMySQL");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerMySQLOutput>("/gateway-update-producer-mysql", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerMySQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerNativeK8SOutput</returns>
        public GatewayUpdateProducerNativeK8SOutput GatewayUpdateProducerNativeK8S(GatewayUpdateProducerNativeK8S body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerNativeK8SOutput> localVarResponse = GatewayUpdateProducerNativeK8SWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerNativeK8SOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerNativeK8SOutput> GatewayUpdateProducerNativeK8SWithHttpInfo(GatewayUpdateProducerNativeK8S body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerNativeK8S");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerNativeK8SOutput>("/gateway-update-producer-k8s-native", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerNativeK8S", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerNativeK8SOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerNativeK8SOutput> GatewayUpdateProducerNativeK8SAsync(GatewayUpdateProducerNativeK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerNativeK8SOutput> localVarResponse = await GatewayUpdateProducerNativeK8SWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerNativeK8SOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerNativeK8SOutput>> GatewayUpdateProducerNativeK8SWithHttpInfoAsync(GatewayUpdateProducerNativeK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerNativeK8S");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerNativeK8SOutput>("/gateway-update-producer-k8s-native", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerNativeK8S", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerOracleDbOutput</returns>
        public GatewayUpdateProducerOracleDbOutput GatewayUpdateProducerOracleDb(GatewayUpdateProducerOracleDb body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerOracleDbOutput> localVarResponse = GatewayUpdateProducerOracleDbWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerOracleDbOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerOracleDbOutput> GatewayUpdateProducerOracleDbWithHttpInfo(GatewayUpdateProducerOracleDb body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerOracleDb");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerOracleDbOutput>("/gateway-update-producer-oracle", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerOracleDb", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerOracleDbOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerOracleDbOutput> GatewayUpdateProducerOracleDbAsync(GatewayUpdateProducerOracleDb body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerOracleDbOutput> localVarResponse = await GatewayUpdateProducerOracleDbWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerOracleDbOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerOracleDbOutput>> GatewayUpdateProducerOracleDbWithHttpInfoAsync(GatewayUpdateProducerOracleDb body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerOracleDb");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerOracleDbOutput>("/gateway-update-producer-oracle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerOracleDb", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerPostgreSQLOutput</returns>
        public GatewayUpdateProducerPostgreSQLOutput GatewayUpdateProducerPostgreSQL(GatewayUpdateProducerPostgreSQL body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerPostgreSQLOutput> localVarResponse = GatewayUpdateProducerPostgreSQLWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerPostgreSQLOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerPostgreSQLOutput> GatewayUpdateProducerPostgreSQLWithHttpInfo(GatewayUpdateProducerPostgreSQL body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerPostgreSQL");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerPostgreSQLOutput>("/gateway-update-producer-postgresql", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerPostgreSQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerPostgreSQLOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerPostgreSQLOutput> GatewayUpdateProducerPostgreSQLAsync(GatewayUpdateProducerPostgreSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerPostgreSQLOutput> localVarResponse = await GatewayUpdateProducerPostgreSQLWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerPostgreSQLOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerPostgreSQLOutput>> GatewayUpdateProducerPostgreSQLWithHttpInfoAsync(GatewayUpdateProducerPostgreSQL body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerPostgreSQL");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerPostgreSQLOutput>("/gateway-update-producer-postgresql", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerPostgreSQL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerRabbitMQOutput</returns>
        public GatewayUpdateProducerRabbitMQOutput GatewayUpdateProducerRabbitMQ(GatewayUpdateProducerRabbitMQ body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerRabbitMQOutput> localVarResponse = GatewayUpdateProducerRabbitMQWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerRabbitMQOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerRabbitMQOutput> GatewayUpdateProducerRabbitMQWithHttpInfo(GatewayUpdateProducerRabbitMQ body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerRabbitMQ");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerRabbitMQOutput>("/gateway-update-producer-rabbitmq", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerRabbitMQ", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerRabbitMQOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerRabbitMQOutput> GatewayUpdateProducerRabbitMQAsync(GatewayUpdateProducerRabbitMQ body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerRabbitMQOutput> localVarResponse = await GatewayUpdateProducerRabbitMQWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerRabbitMQOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerRabbitMQOutput>> GatewayUpdateProducerRabbitMQWithHttpInfoAsync(GatewayUpdateProducerRabbitMQ body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerRabbitMQ");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerRabbitMQOutput>("/gateway-update-producer-rabbitmq", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerRabbitMQ", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerRdpOutput</returns>
        public GatewayUpdateProducerRdpOutput GatewayUpdateProducerRdp(GatewayUpdateProducerRdp body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerRdpOutput> localVarResponse = GatewayUpdateProducerRdpWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerRdpOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerRdpOutput> GatewayUpdateProducerRdpWithHttpInfo(GatewayUpdateProducerRdp body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerRdp");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerRdpOutput>("/gateway-update-producer-rdp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerRdp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerRdpOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerRdpOutput> GatewayUpdateProducerRdpAsync(GatewayUpdateProducerRdp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerRdpOutput> localVarResponse = await GatewayUpdateProducerRdpWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerRdpOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerRdpOutput>> GatewayUpdateProducerRdpWithHttpInfoAsync(GatewayUpdateProducerRdp body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerRdp");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerRdpOutput>("/gateway-update-producer-rdp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerRdp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerRedshiftOutput</returns>
        public GatewayUpdateProducerRedshiftOutput GatewayUpdateProducerRedshift(GatewayUpdateProducerRedshift body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerRedshiftOutput> localVarResponse = GatewayUpdateProducerRedshiftWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerRedshiftOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerRedshiftOutput> GatewayUpdateProducerRedshiftWithHttpInfo(GatewayUpdateProducerRedshift body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerRedshift");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerRedshiftOutput>("/gateway-update-producer-redshift", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerRedshift", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerRedshiftOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerRedshiftOutput> GatewayUpdateProducerRedshiftAsync(GatewayUpdateProducerRedshift body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerRedshiftOutput> localVarResponse = await GatewayUpdateProducerRedshiftWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerRedshiftOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerRedshiftOutput>> GatewayUpdateProducerRedshiftWithHttpInfoAsync(GatewayUpdateProducerRedshift body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerRedshift");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerRedshiftOutput>("/gateway-update-producer-redshift", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerRedshift", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GatewayUpdateProducerSnowflakeOutput</returns>
        public GatewayUpdateProducerSnowflakeOutput GatewayUpdateProducerSnowflake(GatewayUpdateProducerSnowflake body)
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerSnowflakeOutput> localVarResponse = GatewayUpdateProducerSnowflakeWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GatewayUpdateProducerSnowflakeOutput</returns>
        public akeyless.Client.ApiResponse<GatewayUpdateProducerSnowflakeOutput> GatewayUpdateProducerSnowflakeWithHttpInfo(GatewayUpdateProducerSnowflake body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerSnowflake");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GatewayUpdateProducerSnowflakeOutput>("/gateway-update-producer-snowflake", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerSnowflake", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayUpdateProducerSnowflakeOutput</returns>
        public async System.Threading.Tasks.Task<GatewayUpdateProducerSnowflakeOutput> GatewayUpdateProducerSnowflakeAsync(GatewayUpdateProducerSnowflake body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GatewayUpdateProducerSnowflakeOutput> localVarResponse = await GatewayUpdateProducerSnowflakeWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayUpdateProducerSnowflakeOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GatewayUpdateProducerSnowflakeOutput>> GatewayUpdateProducerSnowflakeWithHttpInfoAsync(GatewayUpdateProducerSnowflake body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateProducerSnowflake");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GatewayUpdateProducerSnowflakeOutput>("/gateway-update-producer-snowflake", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateProducerSnowflake", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void GatewayUpdateTmpUsers(GatewayUpdateTmpUsers body)
        {
            GatewayUpdateTmpUsersWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public akeyless.Client.ApiResponse<Object> GatewayUpdateTmpUsersWithHttpInfo(GatewayUpdateTmpUsers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateTmpUsers");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gateway-update-producer-tmp-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateTmpUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GatewayUpdateTmpUsersAsync(GatewayUpdateTmpUsers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GatewayUpdateTmpUsersWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> GatewayUpdateTmpUsersWithHttpInfoAsync(GatewayUpdateTmpUsers body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GatewayUpdateTmpUsers");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gateway-update-producer-tmp-creds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayUpdateTmpUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetAccountLogo()
        {
            akeyless.Client.ApiResponse<Dictionary<string, string>> localVarResponse = GetAccountLogoWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public akeyless.Client.ApiResponse<Dictionary<string, string>> GetAccountLogoWithHttpInfo()
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, string>>("/get-account-logo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> GetAccountLogoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Dictionary<string, string>> localVarResponse = await GetAccountLogoWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Dictionary<string, string>>> GetAccountLogoWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, string>>("/get-account-logo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthMethod</returns>
        public AuthMethod GetAuthMethod(GetAuthMethod body)
        {
            akeyless.Client.ApiResponse<AuthMethod> localVarResponse = GetAuthMethodWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthMethod</returns>
        public akeyless.Client.ApiResponse<AuthMethod> GetAuthMethodWithHttpInfo(GetAuthMethod body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetAuthMethod");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthMethod>("/get-auth-method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthMethod</returns>
        public async System.Threading.Tasks.Task<AuthMethod> GetAuthMethodAsync(GetAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<AuthMethod> localVarResponse = await GetAuthMethodWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthMethod)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<AuthMethod>> GetAuthMethodWithHttpInfoAsync(GetAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetAuthMethod");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthMethod>("/get-auth-method", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetDynamicSecretValue(GetDynamicSecretValue body)
        {
            akeyless.Client.ApiResponse<Dictionary<string, string>> localVarResponse = GetDynamicSecretValueWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public akeyless.Client.ApiResponse<Dictionary<string, string>> GetDynamicSecretValueWithHttpInfo(GetDynamicSecretValue body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetDynamicSecretValue");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, string>>("/get-dynamic-secret-value", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDynamicSecretValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> GetDynamicSecretValueAsync(GetDynamicSecretValue body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Dictionary<string, string>> localVarResponse = await GetDynamicSecretValueWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Dictionary<string, string>>> GetDynamicSecretValueWithHttpInfoAsync(GetDynamicSecretValue body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetDynamicSecretValue");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, string>>("/get-dynamic-secret-value", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDynamicSecretValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetKubeExecCredsOutput</returns>
        public GetKubeExecCredsOutput GetKubeExecCreds(GetKubeExecCreds body)
        {
            akeyless.Client.ApiResponse<GetKubeExecCredsOutput> localVarResponse = GetKubeExecCredsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetKubeExecCredsOutput</returns>
        public akeyless.Client.ApiResponse<GetKubeExecCredsOutput> GetKubeExecCredsWithHttpInfo(GetKubeExecCreds body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetKubeExecCreds");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetKubeExecCredsOutput>("/get-kube-exec-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKubeExecCreds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetKubeExecCredsOutput</returns>
        public async System.Threading.Tasks.Task<GetKubeExecCredsOutput> GetKubeExecCredsAsync(GetKubeExecCreds body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GetKubeExecCredsOutput> localVarResponse = await GetKubeExecCredsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetKubeExecCredsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GetKubeExecCredsOutput>> GetKubeExecCredsWithHttpInfoAsync(GetKubeExecCreds body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetKubeExecCreds");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetKubeExecCredsOutput>("/get-kube-exec-creds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKubeExecCreds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetPKICertificateOutput</returns>
        public GetPKICertificateOutput GetPKICertificate(GetPKICertificate body)
        {
            akeyless.Client.ApiResponse<GetPKICertificateOutput> localVarResponse = GetPKICertificateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetPKICertificateOutput</returns>
        public akeyless.Client.ApiResponse<GetPKICertificateOutput> GetPKICertificateWithHttpInfo(GetPKICertificate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetPKICertificate");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetPKICertificateOutput>("/get-pki-certificate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPKICertificate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPKICertificateOutput</returns>
        public async System.Threading.Tasks.Task<GetPKICertificateOutput> GetPKICertificateAsync(GetPKICertificate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GetPKICertificateOutput> localVarResponse = await GetPKICertificateWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPKICertificateOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GetPKICertificateOutput>> GetPKICertificateWithHttpInfoAsync(GetPKICertificate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetPKICertificate");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetPKICertificateOutput>("/get-pki-certificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPKICertificate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetRSAPublicOutput</returns>
        public GetRSAPublicOutput GetRSAPublic(GetRSAPublic body)
        {
            akeyless.Client.ApiResponse<GetRSAPublicOutput> localVarResponse = GetRSAPublicWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetRSAPublicOutput</returns>
        public akeyless.Client.ApiResponse<GetRSAPublicOutput> GetRSAPublicWithHttpInfo(GetRSAPublic body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetRSAPublic");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetRSAPublicOutput>("/get-rsa-public", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRSAPublic", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRSAPublicOutput</returns>
        public async System.Threading.Tasks.Task<GetRSAPublicOutput> GetRSAPublicAsync(GetRSAPublic body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GetRSAPublicOutput> localVarResponse = await GetRSAPublicWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRSAPublicOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GetRSAPublicOutput>> GetRSAPublicWithHttpInfoAsync(GetRSAPublic body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetRSAPublic");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetRSAPublicOutput>("/get-rsa-public", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRSAPublic", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Role</returns>
        public Role GetRole(GetRole body)
        {
            akeyless.Client.ApiResponse<Role> localVarResponse = GetRoleWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Role</returns>
        public akeyless.Client.ApiResponse<Role> GetRoleWithHttpInfo(GetRole body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetRole");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Role>("/get-role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> GetRoleAsync(GetRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Role> localVarResponse = await GetRoleWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Role>> GetRoleWithHttpInfoAsync(GetRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetRole");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Role>("/get-role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GetRotatedSecretValue(GetRotatedSecretValue body)
        {
            akeyless.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = GetRotatedSecretValueWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public akeyless.Client.ApiResponse<Dictionary<string, Object>> GetRotatedSecretValueWithHttpInfo(GetRotatedSecretValue body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetRotatedSecretValue");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, Object>>("/get-rotated-secret-value", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRotatedSecretValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GetRotatedSecretValueAsync(GetRotatedSecretValue body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = await GetRotatedSecretValueWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Dictionary<string, Object>>> GetRotatedSecretValueWithHttpInfoAsync(GetRotatedSecretValue body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetRotatedSecretValue");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, Object>>("/get-rotated-secret-value", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRotatedSecretValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetSSHCertificateOutput</returns>
        public GetSSHCertificateOutput GetSSHCertificate(GetSSHCertificate body)
        {
            akeyless.Client.ApiResponse<GetSSHCertificateOutput> localVarResponse = GetSSHCertificateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetSSHCertificateOutput</returns>
        public akeyless.Client.ApiResponse<GetSSHCertificateOutput> GetSSHCertificateWithHttpInfo(GetSSHCertificate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetSSHCertificate");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSSHCertificateOutput>("/get-ssh-certificate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSSHCertificate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSSHCertificateOutput</returns>
        public async System.Threading.Tasks.Task<GetSSHCertificateOutput> GetSSHCertificateAsync(GetSSHCertificate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GetSSHCertificateOutput> localVarResponse = await GetSSHCertificateWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSSHCertificateOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GetSSHCertificateOutput>> GetSSHCertificateWithHttpInfoAsync(GetSSHCertificate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetSSHCertificate");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSSHCertificateOutput>("/get-ssh-certificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSSHCertificate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetSecretValue(GetSecretValue body)
        {
            akeyless.Client.ApiResponse<Dictionary<string, string>> localVarResponse = GetSecretValueWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public akeyless.Client.ApiResponse<Dictionary<string, string>> GetSecretValueWithHttpInfo(GetSecretValue body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetSecretValue");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, string>>("/get-secret-value", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> GetSecretValueAsync(GetSecretValue body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Dictionary<string, string>> localVarResponse = await GetSecretValueWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Dictionary<string, string>>> GetSecretValueWithHttpInfoAsync(GetSecretValue body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetSecretValue");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, string>>("/get-secret-value", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTags(GetTags body)
        {
            akeyless.Client.ApiResponse<List<string>> localVarResponse = GetTagsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public akeyless.Client.ApiResponse<List<string>> GetTagsWithHttpInfo(GetTags body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetTags");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<string>>("/get-tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTagsAsync(GetTags body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<List<string>> localVarResponse = await GetTagsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<List<string>>> GetTagsWithHttpInfoAsync(GetTags body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetTags");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<string>>("/get-tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Target</returns>
        public Target GetTarget(GetTarget body)
        {
            akeyless.Client.ApiResponse<Target> localVarResponse = GetTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Target</returns>
        public akeyless.Client.ApiResponse<Target> GetTargetWithHttpInfo(GetTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Target>("/get-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Target</returns>
        public async System.Threading.Tasks.Task<Target> GetTargetAsync(GetTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Target> localVarResponse = await GetTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Target)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Target>> GetTargetWithHttpInfoAsync(GetTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Target>("/get-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetTargetDetailsOutput</returns>
        public GetTargetDetailsOutput GetTargetDetails(GetTargetDetails body)
        {
            akeyless.Client.ApiResponse<GetTargetDetailsOutput> localVarResponse = GetTargetDetailsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetTargetDetailsOutput</returns>
        public akeyless.Client.ApiResponse<GetTargetDetailsOutput> GetTargetDetailsWithHttpInfo(GetTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetTargetDetailsOutput>("/get-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTargetDetailsOutput</returns>
        public async System.Threading.Tasks.Task<GetTargetDetailsOutput> GetTargetDetailsAsync(GetTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<GetTargetDetailsOutput> localVarResponse = await GetTargetDetailsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTargetDetailsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<GetTargetDetailsOutput>> GetTargetDetailsWithHttpInfoAsync(GetTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->GetTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetTargetDetailsOutput>("/get-target-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KMIPClientUpdateResponse</returns>
        public KMIPClientUpdateResponse KmipClientDeleteRule(KmipClientDeleteRule body = default(KmipClientDeleteRule))
        {
            akeyless.Client.ApiResponse<KMIPClientUpdateResponse> localVarResponse = KmipClientDeleteRuleWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KMIPClientUpdateResponse</returns>
        public akeyless.Client.ApiResponse<KMIPClientUpdateResponse> KmipClientDeleteRuleWithHttpInfo(KmipClientDeleteRule body = default(KmipClientDeleteRule))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KMIPClientUpdateResponse>("/kmip-client-delete-rule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipClientDeleteRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KMIPClientUpdateResponse</returns>
        public async System.Threading.Tasks.Task<KMIPClientUpdateResponse> KmipClientDeleteRuleAsync(KmipClientDeleteRule body = default(KmipClientDeleteRule), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<KMIPClientUpdateResponse> localVarResponse = await KmipClientDeleteRuleWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KMIPClientUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<KMIPClientUpdateResponse>> KmipClientDeleteRuleWithHttpInfoAsync(KmipClientDeleteRule body = default(KmipClientDeleteRule), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<KMIPClientUpdateResponse>("/kmip-client-delete-rule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipClientDeleteRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KMIPClientUpdateResponse</returns>
        public KMIPClientUpdateResponse KmipClientSetRule(KmipClientSetRule body = default(KmipClientSetRule))
        {
            akeyless.Client.ApiResponse<KMIPClientUpdateResponse> localVarResponse = KmipClientSetRuleWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KMIPClientUpdateResponse</returns>
        public akeyless.Client.ApiResponse<KMIPClientUpdateResponse> KmipClientSetRuleWithHttpInfo(KmipClientSetRule body = default(KmipClientSetRule))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KMIPClientUpdateResponse>("/kmip-client-set-rule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipClientSetRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KMIPClientUpdateResponse</returns>
        public async System.Threading.Tasks.Task<KMIPClientUpdateResponse> KmipClientSetRuleAsync(KmipClientSetRule body = default(KmipClientSetRule), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<KMIPClientUpdateResponse> localVarResponse = await KmipClientSetRuleWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KMIPClientUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<KMIPClientUpdateResponse>> KmipClientSetRuleWithHttpInfoAsync(KmipClientSetRule body = default(KmipClientSetRule), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<KMIPClientUpdateResponse>("/kmip-client-set-rule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipClientSetRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KmipCreateClientOutput</returns>
        public KmipCreateClientOutput KmipCreateClient(KmipCreateClient body = default(KmipCreateClient))
        {
            akeyless.Client.ApiResponse<KmipCreateClientOutput> localVarResponse = KmipCreateClientWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KmipCreateClientOutput</returns>
        public akeyless.Client.ApiResponse<KmipCreateClientOutput> KmipCreateClientWithHttpInfo(KmipCreateClient body = default(KmipCreateClient))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KmipCreateClientOutput>("/kmip-create-client", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipCreateClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KmipCreateClientOutput</returns>
        public async System.Threading.Tasks.Task<KmipCreateClientOutput> KmipCreateClientAsync(KmipCreateClient body = default(KmipCreateClient), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<KmipCreateClientOutput> localVarResponse = await KmipCreateClientWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KmipCreateClientOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<KmipCreateClientOutput>> KmipCreateClientWithHttpInfoAsync(KmipCreateClient body = default(KmipCreateClient), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<KmipCreateClientOutput>("/kmip-create-client", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipCreateClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object KmipDeleteClient(KmipDeleteClient body = default(KmipDeleteClient))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = KmipDeleteClientWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> KmipDeleteClientWithHttpInfo(KmipDeleteClient body = default(KmipDeleteClient))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/kmip-delete-client", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipDeleteClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> KmipDeleteClientAsync(KmipDeleteClient body = default(KmipDeleteClient), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await KmipDeleteClientWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> KmipDeleteClientWithHttpInfoAsync(KmipDeleteClient body = default(KmipDeleteClient), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/kmip-delete-client", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipDeleteClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KMIPClientGetResponse</returns>
        public KMIPClientGetResponse KmipDescribeClient(KmipDescribeClient body = default(KmipDescribeClient))
        {
            akeyless.Client.ApiResponse<KMIPClientGetResponse> localVarResponse = KmipDescribeClientWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KMIPClientGetResponse</returns>
        public akeyless.Client.ApiResponse<KMIPClientGetResponse> KmipDescribeClientWithHttpInfo(KmipDescribeClient body = default(KmipDescribeClient))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KMIPClientGetResponse>("/kmip-get-client", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipDescribeClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KMIPClientGetResponse</returns>
        public async System.Threading.Tasks.Task<KMIPClientGetResponse> KmipDescribeClientAsync(KmipDescribeClient body = default(KmipDescribeClient), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<KMIPClientGetResponse> localVarResponse = await KmipDescribeClientWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KMIPClientGetResponse)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<KMIPClientGetResponse>> KmipDescribeClientWithHttpInfoAsync(KmipDescribeClient body = default(KmipDescribeClient), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<KMIPClientGetResponse>("/kmip-get-client", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipDescribeClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KmipDescribeServerOutput</returns>
        public KmipDescribeServerOutput KmipDescribeServer(KmipDescribeServer body = default(KmipDescribeServer))
        {
            akeyless.Client.ApiResponse<KmipDescribeServerOutput> localVarResponse = KmipDescribeServerWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KmipDescribeServerOutput</returns>
        public akeyless.Client.ApiResponse<KmipDescribeServerOutput> KmipDescribeServerWithHttpInfo(KmipDescribeServer body = default(KmipDescribeServer))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KmipDescribeServerOutput>("/kmip-get-environment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipDescribeServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KmipDescribeServerOutput</returns>
        public async System.Threading.Tasks.Task<KmipDescribeServerOutput> KmipDescribeServerAsync(KmipDescribeServer body = default(KmipDescribeServer), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<KmipDescribeServerOutput> localVarResponse = await KmipDescribeServerWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KmipDescribeServerOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<KmipDescribeServerOutput>> KmipDescribeServerWithHttpInfoAsync(KmipDescribeServer body = default(KmipDescribeServer), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<KmipDescribeServerOutput>("/kmip-get-environment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipDescribeServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KMIPClientListResponse</returns>
        public KMIPClientListResponse KmipListClients(KmipListClients body = default(KmipListClients))
        {
            akeyless.Client.ApiResponse<KMIPClientListResponse> localVarResponse = KmipListClientsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KMIPClientListResponse</returns>
        public akeyless.Client.ApiResponse<KMIPClientListResponse> KmipListClientsWithHttpInfo(KmipListClients body = default(KmipListClients))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KMIPClientListResponse>("/kmip-list-clients", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipListClients", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KMIPClientListResponse</returns>
        public async System.Threading.Tasks.Task<KMIPClientListResponse> KmipListClientsAsync(KmipListClients body = default(KmipListClients), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<KMIPClientListResponse> localVarResponse = await KmipListClientsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KMIPClientListResponse)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<KMIPClientListResponse>> KmipListClientsWithHttpInfoAsync(KmipListClients body = default(KmipListClients), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<KMIPClientListResponse>("/kmip-list-clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipListClients", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KmipRenewClientCertificateOutput</returns>
        public KmipRenewClientCertificateOutput KmipRenewClientCertificate(KmipRenewClientCertificate body = default(KmipRenewClientCertificate))
        {
            akeyless.Client.ApiResponse<KmipRenewClientCertificateOutput> localVarResponse = KmipRenewClientCertificateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KmipRenewClientCertificateOutput</returns>
        public akeyless.Client.ApiResponse<KmipRenewClientCertificateOutput> KmipRenewClientCertificateWithHttpInfo(KmipRenewClientCertificate body = default(KmipRenewClientCertificate))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KmipRenewClientCertificateOutput>("/kmip-renew-client", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipRenewClientCertificate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KmipRenewClientCertificateOutput</returns>
        public async System.Threading.Tasks.Task<KmipRenewClientCertificateOutput> KmipRenewClientCertificateAsync(KmipRenewClientCertificate body = default(KmipRenewClientCertificate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<KmipRenewClientCertificateOutput> localVarResponse = await KmipRenewClientCertificateWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KmipRenewClientCertificateOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<KmipRenewClientCertificateOutput>> KmipRenewClientCertificateWithHttpInfoAsync(KmipRenewClientCertificate body = default(KmipRenewClientCertificate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<KmipRenewClientCertificateOutput>("/kmip-renew-client", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipRenewClientCertificate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KmipRenewServerCertificateOutput</returns>
        public KmipRenewServerCertificateOutput KmipRenewServerCertificate(KmipRenewServerCertificate body = default(KmipRenewServerCertificate))
        {
            akeyless.Client.ApiResponse<KmipRenewServerCertificateOutput> localVarResponse = KmipRenewServerCertificateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KmipRenewServerCertificateOutput</returns>
        public akeyless.Client.ApiResponse<KmipRenewServerCertificateOutput> KmipRenewServerCertificateWithHttpInfo(KmipRenewServerCertificate body = default(KmipRenewServerCertificate))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KmipRenewServerCertificateOutput>("/kmip-renew-environment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipRenewServerCertificate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KmipRenewServerCertificateOutput</returns>
        public async System.Threading.Tasks.Task<KmipRenewServerCertificateOutput> KmipRenewServerCertificateAsync(KmipRenewServerCertificate body = default(KmipRenewServerCertificate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<KmipRenewServerCertificateOutput> localVarResponse = await KmipRenewServerCertificateWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KmipRenewServerCertificateOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<KmipRenewServerCertificateOutput>> KmipRenewServerCertificateWithHttpInfoAsync(KmipRenewServerCertificate body = default(KmipRenewServerCertificate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<KmipRenewServerCertificateOutput>("/kmip-renew-environment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipRenewServerCertificate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KMIPEnvironmentCreateResponse</returns>
        public KMIPEnvironmentCreateResponse KmipServerSetup(KmipServerSetup body = default(KmipServerSetup))
        {
            akeyless.Client.ApiResponse<KMIPEnvironmentCreateResponse> localVarResponse = KmipServerSetupWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KMIPEnvironmentCreateResponse</returns>
        public akeyless.Client.ApiResponse<KMIPEnvironmentCreateResponse> KmipServerSetupWithHttpInfo(KmipServerSetup body = default(KmipServerSetup))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KMIPEnvironmentCreateResponse>("/kmip-create-environment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipServerSetup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KMIPEnvironmentCreateResponse</returns>
        public async System.Threading.Tasks.Task<KMIPEnvironmentCreateResponse> KmipServerSetupAsync(KmipServerSetup body = default(KmipServerSetup), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<KMIPEnvironmentCreateResponse> localVarResponse = await KmipServerSetupWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KMIPEnvironmentCreateResponse)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<KMIPEnvironmentCreateResponse>> KmipServerSetupWithHttpInfoAsync(KmipServerSetup body = default(KmipServerSetup), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<KMIPEnvironmentCreateResponse>("/kmip-create-environment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipServerSetup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KmipSetServerStateOutput</returns>
        public KmipSetServerStateOutput KmipSetServerState(KmipSetServerState body = default(KmipSetServerState))
        {
            akeyless.Client.ApiResponse<KmipSetServerStateOutput> localVarResponse = KmipSetServerStateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KmipSetServerStateOutput</returns>
        public akeyless.Client.ApiResponse<KmipSetServerStateOutput> KmipSetServerStateWithHttpInfo(KmipSetServerState body = default(KmipSetServerState))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KmipSetServerStateOutput>("/kmip-set-environment-state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipSetServerState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KmipSetServerStateOutput</returns>
        public async System.Threading.Tasks.Task<KmipSetServerStateOutput> KmipSetServerStateAsync(KmipSetServerState body = default(KmipSetServerState), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<KmipSetServerStateOutput> localVarResponse = await KmipSetServerStateWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KmipSetServerStateOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<KmipSetServerStateOutput>> KmipSetServerStateWithHttpInfoAsync(KmipSetServerState body = default(KmipSetServerState), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<KmipSetServerStateOutput>("/kmip-set-environment-state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KmipSetServerState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListAuthMethodsOutput</returns>
        public ListAuthMethodsOutput ListAuthMethods(ListAuthMethods body)
        {
            akeyless.Client.ApiResponse<ListAuthMethodsOutput> localVarResponse = ListAuthMethodsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListAuthMethodsOutput</returns>
        public akeyless.Client.ApiResponse<ListAuthMethodsOutput> ListAuthMethodsWithHttpInfo(ListAuthMethods body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListAuthMethods");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ListAuthMethodsOutput>("/list-auth-methods", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAuthMethods", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAuthMethodsOutput</returns>
        public async System.Threading.Tasks.Task<ListAuthMethodsOutput> ListAuthMethodsAsync(ListAuthMethods body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<ListAuthMethodsOutput> localVarResponse = await ListAuthMethodsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAuthMethodsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<ListAuthMethodsOutput>> ListAuthMethodsWithHttpInfoAsync(ListAuthMethods body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListAuthMethods");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ListAuthMethodsOutput>("/list-auth-methods", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAuthMethods", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListItemsInPathOutput</returns>
        public ListItemsInPathOutput ListItems(ListItems body)
        {
            akeyless.Client.ApiResponse<ListItemsInPathOutput> localVarResponse = ListItemsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListItemsInPathOutput</returns>
        public akeyless.Client.ApiResponse<ListItemsInPathOutput> ListItemsWithHttpInfo(ListItems body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListItems");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ListItemsInPathOutput>("/list-items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListItemsInPathOutput</returns>
        public async System.Threading.Tasks.Task<ListItemsInPathOutput> ListItemsAsync(ListItems body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<ListItemsInPathOutput> localVarResponse = await ListItemsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListItemsInPathOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<ListItemsInPathOutput>> ListItemsWithHttpInfoAsync(ListItems body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListItems");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ListItemsInPathOutput>("/list-items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListRolesOutput</returns>
        public ListRolesOutput ListRoles(ListRoles body)
        {
            akeyless.Client.ApiResponse<ListRolesOutput> localVarResponse = ListRolesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListRolesOutput</returns>
        public akeyless.Client.ApiResponse<ListRolesOutput> ListRolesWithHttpInfo(ListRoles body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListRoles");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ListRolesOutput>("/list-roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRolesOutput</returns>
        public async System.Threading.Tasks.Task<ListRolesOutput> ListRolesAsync(ListRoles body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<ListRolesOutput> localVarResponse = await ListRolesWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRolesOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<ListRolesOutput>> ListRolesWithHttpInfoAsync(ListRoles body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListRoles");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ListRolesOutput>("/list-roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ListTargetsOutput</returns>
        public ListTargetsOutput ListTargets(ListTargets body)
        {
            akeyless.Client.ApiResponse<ListTargetsOutput> localVarResponse = ListTargetsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListTargetsOutput</returns>
        public akeyless.Client.ApiResponse<ListTargetsOutput> ListTargetsWithHttpInfo(ListTargets body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListTargets");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ListTargetsOutput>("/list-targets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTargets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTargetsOutput</returns>
        public async System.Threading.Tasks.Task<ListTargetsOutput> ListTargetsAsync(ListTargets body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<ListTargetsOutput> localVarResponse = await ListTargetsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTargetsOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<ListTargetsOutput>> ListTargetsWithHttpInfoAsync(ListTargets body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ListTargets");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ListTargetsOutput>("/list-targets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTargets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object MoveObjects(MoveObjects body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = MoveObjectsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> MoveObjectsWithHttpInfo(MoveObjects body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->MoveObjects");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/move-objects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MoveObjectsAsync(MoveObjects body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await MoveObjectsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> MoveObjectsWithHttpInfoAsync(MoveObjects body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->MoveObjects");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/move-objects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>SystemAccessCredentialsReplyObj</returns>
        public SystemAccessCredentialsReplyObj RawCreds(RawCreds body = default(RawCreds))
        {
            akeyless.Client.ApiResponse<SystemAccessCredentialsReplyObj> localVarResponse = RawCredsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SystemAccessCredentialsReplyObj</returns>
        public akeyless.Client.ApiResponse<SystemAccessCredentialsReplyObj> RawCredsWithHttpInfo(RawCreds body = default(RawCreds))
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SystemAccessCredentialsReplyObj>("/raw-creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RawCreds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemAccessCredentialsReplyObj</returns>
        public async System.Threading.Tasks.Task<SystemAccessCredentialsReplyObj> RawCredsAsync(RawCreds body = default(RawCreds), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<SystemAccessCredentialsReplyObj> localVarResponse = await RawCredsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemAccessCredentialsReplyObj)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<SystemAccessCredentialsReplyObj>> RawCredsWithHttpInfoAsync(RawCreds body = default(RawCreds), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SystemAccessCredentialsReplyObj>("/raw-creds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RawCreds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RefreshKeyOutput</returns>
        public RefreshKeyOutput RefreshKey(RefreshKey body)
        {
            akeyless.Client.ApiResponse<RefreshKeyOutput> localVarResponse = RefreshKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RefreshKeyOutput</returns>
        public akeyless.Client.ApiResponse<RefreshKeyOutput> RefreshKeyWithHttpInfo(RefreshKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->RefreshKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RefreshKeyOutput>("/refresh-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefreshKeyOutput</returns>
        public async System.Threading.Tasks.Task<RefreshKeyOutput> RefreshKeyAsync(RefreshKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<RefreshKeyOutput> localVarResponse = await RefreshKeyWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefreshKeyOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<RefreshKeyOutput>> RefreshKeyWithHttpInfoAsync(RefreshKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->RefreshKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RefreshKeyOutput>("/refresh-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ReverseRBACOutput</returns>
        public ReverseRBACOutput ReverseRBAC(ReverseRBAC body)
        {
            akeyless.Client.ApiResponse<ReverseRBACOutput> localVarResponse = ReverseRBACWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ReverseRBACOutput</returns>
        public akeyless.Client.ApiResponse<ReverseRBACOutput> ReverseRBACWithHttpInfo(ReverseRBAC body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ReverseRBAC");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ReverseRBACOutput>("/reverse-rbac", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReverseRBAC", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReverseRBACOutput</returns>
        public async System.Threading.Tasks.Task<ReverseRBACOutput> ReverseRBACAsync(ReverseRBAC body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<ReverseRBACOutput> localVarResponse = await ReverseRBACWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReverseRBACOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<ReverseRBACOutput>> ReverseRBACWithHttpInfoAsync(ReverseRBAC body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ReverseRBAC");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ReverseRBACOutput>("/reverse-rbac", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReverseRBAC", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RollbackSecretOutput</returns>
        public RollbackSecretOutput RollbackSecret(RollbackSecret body)
        {
            akeyless.Client.ApiResponse<RollbackSecretOutput> localVarResponse = RollbackSecretWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RollbackSecretOutput</returns>
        public akeyless.Client.ApiResponse<RollbackSecretOutput> RollbackSecretWithHttpInfo(RollbackSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->RollbackSecret");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RollbackSecretOutput>("/rollback-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RollbackSecretOutput</returns>
        public async System.Threading.Tasks.Task<RollbackSecretOutput> RollbackSecretAsync(RollbackSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<RollbackSecretOutput> localVarResponse = await RollbackSecretWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RollbackSecretOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<RollbackSecretOutput>> RollbackSecretWithHttpInfoAsync(RollbackSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->RollbackSecret");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RollbackSecretOutput>("/rollback-secret", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RotateKeyOutput</returns>
        public RotateKeyOutput RotateKey(UpdateRotationSettings body)
        {
            akeyless.Client.ApiResponse<RotateKeyOutput> localVarResponse = RotateKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RotateKeyOutput</returns>
        public akeyless.Client.ApiResponse<RotateKeyOutput> RotateKeyWithHttpInfo(UpdateRotationSettings body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->RotateKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RotateKeyOutput>("/rotate-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RotateKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RotateKeyOutput</returns>
        public async System.Threading.Tasks.Task<RotateKeyOutput> RotateKeyAsync(UpdateRotationSettings body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<RotateKeyOutput> localVarResponse = await RotateKeyWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RotateKeyOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<RotateKeyOutput>> RotateKeyWithHttpInfoAsync(UpdateRotationSettings body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->RotateKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RotateKeyOutput>("/rotate-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RotateKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object SetItemState(SetItemState body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = SetItemStateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> SetItemStateWithHttpInfo(SetItemState body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SetItemState");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/set-item-state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetItemState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetItemStateAsync(SetItemState body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await SetItemStateWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> SetItemStateWithHttpInfoAsync(SetItemState body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SetItemState");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/set-item-state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetItemState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object SetRoleRule(SetRoleRule body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = SetRoleRuleWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> SetRoleRuleWithHttpInfo(SetRoleRule body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SetRoleRule");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/set-role-rule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRoleRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetRoleRuleAsync(SetRoleRule body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await SetRoleRuleWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> SetRoleRuleWithHttpInfoAsync(SetRoleRule body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SetRoleRule");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/set-role-rule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRoleRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SignJWTOutput</returns>
        public SignJWTOutput SignJWTWithClassicKey(SignJWTWithClassicKey body)
        {
            akeyless.Client.ApiResponse<SignJWTOutput> localVarResponse = SignJWTWithClassicKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SignJWTOutput</returns>
        public akeyless.Client.ApiResponse<SignJWTOutput> SignJWTWithClassicKeyWithHttpInfo(SignJWTWithClassicKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SignJWTWithClassicKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SignJWTOutput>("/sign-jwt-with-classic-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignJWTWithClassicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignJWTOutput</returns>
        public async System.Threading.Tasks.Task<SignJWTOutput> SignJWTWithClassicKeyAsync(SignJWTWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<SignJWTOutput> localVarResponse = await SignJWTWithClassicKeyWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignJWTOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<SignJWTOutput>> SignJWTWithClassicKeyWithHttpInfoAsync(SignJWTWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SignJWTWithClassicKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SignJWTOutput>("/sign-jwt-with-classic-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignJWTWithClassicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SignPKCS1Output</returns>
        public SignPKCS1Output SignPKCS1(SignPKCS1 body)
        {
            akeyless.Client.ApiResponse<SignPKCS1Output> localVarResponse = SignPKCS1WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SignPKCS1Output</returns>
        public akeyless.Client.ApiResponse<SignPKCS1Output> SignPKCS1WithHttpInfo(SignPKCS1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SignPKCS1");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SignPKCS1Output>("/sign-pkcs1", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignPKCS1Output</returns>
        public async System.Threading.Tasks.Task<SignPKCS1Output> SignPKCS1Async(SignPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<SignPKCS1Output> localVarResponse = await SignPKCS1WithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignPKCS1Output)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<SignPKCS1Output>> SignPKCS1WithHttpInfoAsync(SignPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SignPKCS1");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SignPKCS1Output>("/sign-pkcs1", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SignPKICertOutput</returns>
        public SignPKICertOutput SignPKICertWithClassicKey(SignPKICertWithClassicKey body)
        {
            akeyless.Client.ApiResponse<SignPKICertOutput> localVarResponse = SignPKICertWithClassicKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SignPKICertOutput</returns>
        public akeyless.Client.ApiResponse<SignPKICertOutput> SignPKICertWithClassicKeyWithHttpInfo(SignPKICertWithClassicKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SignPKICertWithClassicKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SignPKICertOutput>("/sign-pki-cert-with-classic-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignPKICertWithClassicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignPKICertOutput</returns>
        public async System.Threading.Tasks.Task<SignPKICertOutput> SignPKICertWithClassicKeyAsync(SignPKICertWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<SignPKICertOutput> localVarResponse = await SignPKICertWithClassicKeyWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignPKICertOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<SignPKICertOutput>> SignPKICertWithClassicKeyWithHttpInfoAsync(SignPKICertWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->SignPKICertWithClassicKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SignPKICertOutput>("/sign-pki-cert-with-classic-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignPKICertWithClassicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StaticCredsAuthOutput</returns>
        public StaticCredsAuthOutput StaticCredsAuth(StaticCredsAuth body)
        {
            akeyless.Client.ApiResponse<StaticCredsAuthOutput> localVarResponse = StaticCredsAuthWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StaticCredsAuthOutput</returns>
        public akeyless.Client.ApiResponse<StaticCredsAuthOutput> StaticCredsAuthWithHttpInfo(StaticCredsAuth body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->StaticCredsAuth");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StaticCredsAuthOutput>("/static-creds-auth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StaticCredsAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StaticCredsAuthOutput</returns>
        public async System.Threading.Tasks.Task<StaticCredsAuthOutput> StaticCredsAuthAsync(StaticCredsAuth body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<StaticCredsAuthOutput> localVarResponse = await StaticCredsAuthWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StaticCredsAuthOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<StaticCredsAuthOutput>> StaticCredsAuthWithHttpInfoAsync(StaticCredsAuth body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->StaticCredsAuth");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<StaticCredsAuthOutput>("/static-creds-auth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StaticCredsAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UidCreateChildTokenOutput</returns>
        public UidCreateChildTokenOutput UidCreateChildToken(UidCreateChildToken body)
        {
            akeyless.Client.ApiResponse<UidCreateChildTokenOutput> localVarResponse = UidCreateChildTokenWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UidCreateChildTokenOutput</returns>
        public akeyless.Client.ApiResponse<UidCreateChildTokenOutput> UidCreateChildTokenWithHttpInfo(UidCreateChildToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidCreateChildToken");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UidCreateChildTokenOutput>("/uid-create-child-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidCreateChildToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UidCreateChildTokenOutput</returns>
        public async System.Threading.Tasks.Task<UidCreateChildTokenOutput> UidCreateChildTokenAsync(UidCreateChildToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UidCreateChildTokenOutput> localVarResponse = await UidCreateChildTokenWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UidCreateChildTokenOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UidCreateChildTokenOutput>> UidCreateChildTokenWithHttpInfoAsync(UidCreateChildToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidCreateChildToken");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UidCreateChildTokenOutput>("/uid-create-child-token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidCreateChildToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UidGenerateTokenOutput</returns>
        public UidGenerateTokenOutput UidGenerateToken(UidGenerateToken body)
        {
            akeyless.Client.ApiResponse<UidGenerateTokenOutput> localVarResponse = UidGenerateTokenWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UidGenerateTokenOutput</returns>
        public akeyless.Client.ApiResponse<UidGenerateTokenOutput> UidGenerateTokenWithHttpInfo(UidGenerateToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidGenerateToken");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UidGenerateTokenOutput>("/uid-generate-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidGenerateToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UidGenerateTokenOutput</returns>
        public async System.Threading.Tasks.Task<UidGenerateTokenOutput> UidGenerateTokenAsync(UidGenerateToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UidGenerateTokenOutput> localVarResponse = await UidGenerateTokenWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UidGenerateTokenOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UidGenerateTokenOutput>> UidGenerateTokenWithHttpInfoAsync(UidGenerateToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidGenerateToken");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UidGenerateTokenOutput>("/uid-generate-token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidGenerateToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UniversalIdentityDetails</returns>
        public UniversalIdentityDetails UidListChildren(UidListChildren body)
        {
            akeyless.Client.ApiResponse<UniversalIdentityDetails> localVarResponse = UidListChildrenWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UniversalIdentityDetails</returns>
        public akeyless.Client.ApiResponse<UniversalIdentityDetails> UidListChildrenWithHttpInfo(UidListChildren body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidListChildren");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UniversalIdentityDetails>("/uid-list-children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidListChildren", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UniversalIdentityDetails</returns>
        public async System.Threading.Tasks.Task<UniversalIdentityDetails> UidListChildrenAsync(UidListChildren body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UniversalIdentityDetails> localVarResponse = await UidListChildrenWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UniversalIdentityDetails)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UniversalIdentityDetails>> UidListChildrenWithHttpInfoAsync(UidListChildren body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidListChildren");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UniversalIdentityDetails>("/uid-list-children", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidListChildren", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UidRevokeToken(UidRevokeToken body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = UidRevokeTokenWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> UidRevokeTokenWithHttpInfo(UidRevokeToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidRevokeToken");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/uid-revoke-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidRevokeToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UidRevokeTokenAsync(UidRevokeToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await UidRevokeTokenWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> UidRevokeTokenWithHttpInfoAsync(UidRevokeToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidRevokeToken");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/uid-revoke-token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidRevokeToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UidRotateTokenOutput</returns>
        public UidRotateTokenOutput UidRotateToken(UidRotateToken body)
        {
            akeyless.Client.ApiResponse<UidRotateTokenOutput> localVarResponse = UidRotateTokenWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UidRotateTokenOutput</returns>
        public akeyless.Client.ApiResponse<UidRotateTokenOutput> UidRotateTokenWithHttpInfo(UidRotateToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidRotateToken");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UidRotateTokenOutput>("/uid-rotate-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidRotateToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UidRotateTokenOutput</returns>
        public async System.Threading.Tasks.Task<UidRotateTokenOutput> UidRotateTokenAsync(UidRotateToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UidRotateTokenOutput> localVarResponse = await UidRotateTokenWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UidRotateTokenOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UidRotateTokenOutput>> UidRotateTokenWithHttpInfoAsync(UidRotateToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UidRotateToken");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UidRotateTokenOutput>("/uid-rotate-token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UidRotateToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UpdateAWSTarget(UpdateAWSTarget body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = UpdateAWSTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> UpdateAWSTargetWithHttpInfo(UpdateAWSTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAWSTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/update-aws-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAWSTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAWSTargetAsync(UpdateAWSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await UpdateAWSTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> UpdateAWSTargetWithHttpInfoAsync(UpdateAWSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAWSTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/update-aws-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAWSTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateAWSTargetDetails(UpdateAWSTargetDetails body)
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateAWSTargetDetailsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateTargetOutput> UpdateAWSTargetDetailsWithHttpInfo(UpdateAWSTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAWSTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateTargetOutput>("/update-aws-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAWSTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateAWSTargetDetailsAsync(UpdateAWSTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateAWSTargetDetailsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateAWSTargetDetailsWithHttpInfoAsync(UpdateAWSTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAWSTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-aws-target-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAWSTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateArtifactoryTargetOutput</returns>
        public UpdateArtifactoryTargetOutput UpdateArtifactoryTarget(UpdateArtifactoryTarget body)
        {
            akeyless.Client.ApiResponse<UpdateArtifactoryTargetOutput> localVarResponse = UpdateArtifactoryTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateArtifactoryTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateArtifactoryTargetOutput> UpdateArtifactoryTargetWithHttpInfo(UpdateArtifactoryTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateArtifactoryTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateArtifactoryTargetOutput>("/update-artifactory-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateArtifactoryTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateArtifactoryTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateArtifactoryTargetOutput> UpdateArtifactoryTargetAsync(UpdateArtifactoryTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateArtifactoryTargetOutput> localVarResponse = await UpdateArtifactoryTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateArtifactoryTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateArtifactoryTargetOutput>> UpdateArtifactoryTargetWithHttpInfoAsync(UpdateArtifactoryTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateArtifactoryTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateArtifactoryTargetOutput>("/update-artifactory-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateArtifactoryTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UpdateAssoc(UpdateAssoc body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = UpdateAssocWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> UpdateAssocWithHttpInfo(UpdateAssoc body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAssoc");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/update-assoc", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAssoc", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAssocAsync(UpdateAssoc body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await UpdateAssocWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> UpdateAssocWithHttpInfoAsync(UpdateAssoc body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAssoc");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/update-assoc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAssoc", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateAuthMethodOutput</returns>
        public UpdateAuthMethodOutput UpdateAuthMethod(UpdateAuthMethod body)
        {
            akeyless.Client.ApiResponse<UpdateAuthMethodOutput> localVarResponse = UpdateAuthMethodWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateAuthMethodOutput</returns>
        public akeyless.Client.ApiResponse<UpdateAuthMethodOutput> UpdateAuthMethodWithHttpInfo(UpdateAuthMethod body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethod");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateAuthMethodOutput>("/update-auth-method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateAuthMethodOutput</returns>
        public async System.Threading.Tasks.Task<UpdateAuthMethodOutput> UpdateAuthMethodAsync(UpdateAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateAuthMethodOutput> localVarResponse = await UpdateAuthMethodWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateAuthMethodOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateAuthMethodOutput>> UpdateAuthMethodWithHttpInfoAsync(UpdateAuthMethod body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethod");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateAuthMethodOutput>("/update-auth-method", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UpdateAuthMethodAWSIAM(UpdateAuthMethodAWSIAM body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = UpdateAuthMethodAWSIAMWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> UpdateAuthMethodAWSIAMWithHttpInfo(UpdateAuthMethodAWSIAM body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodAWSIAM");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/update-auth-method-aws-iam", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodAWSIAM", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAuthMethodAWSIAMAsync(UpdateAuthMethodAWSIAM body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await UpdateAuthMethodAWSIAMWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> UpdateAuthMethodAWSIAMWithHttpInfoAsync(UpdateAuthMethodAWSIAM body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodAWSIAM");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/update-auth-method-aws-iam", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodAWSIAM", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UpdateAuthMethodAzureAD(UpdateAuthMethodAzureAD body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = UpdateAuthMethodAzureADWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> UpdateAuthMethodAzureADWithHttpInfo(UpdateAuthMethodAzureAD body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodAzureAD");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/update-auth-method-azure-ad", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodAzureAD", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAuthMethodAzureADAsync(UpdateAuthMethodAzureAD body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await UpdateAuthMethodAzureADWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> UpdateAuthMethodAzureADWithHttpInfoAsync(UpdateAuthMethodAzureAD body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodAzureAD");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/update-auth-method-azure-ad", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodAzureAD", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UpdateAuthMethodGCP(UpdateAuthMethodGCP body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = UpdateAuthMethodGCPWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> UpdateAuthMethodGCPWithHttpInfo(UpdateAuthMethodGCP body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodGCP");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/update-auth-method-gcp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodGCP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAuthMethodGCPAsync(UpdateAuthMethodGCP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await UpdateAuthMethodGCPWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> UpdateAuthMethodGCPWithHttpInfoAsync(UpdateAuthMethodGCP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodGCP");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/update-auth-method-gcp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodGCP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateAuthMethodK8SOutput</returns>
        public UpdateAuthMethodK8SOutput UpdateAuthMethodK8S(UpdateAuthMethodK8S body)
        {
            akeyless.Client.ApiResponse<UpdateAuthMethodK8SOutput> localVarResponse = UpdateAuthMethodK8SWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateAuthMethodK8SOutput</returns>
        public akeyless.Client.ApiResponse<UpdateAuthMethodK8SOutput> UpdateAuthMethodK8SWithHttpInfo(UpdateAuthMethodK8S body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodK8S");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateAuthMethodK8SOutput>("/update-auth-method-k8s", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodK8S", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateAuthMethodK8SOutput</returns>
        public async System.Threading.Tasks.Task<UpdateAuthMethodK8SOutput> UpdateAuthMethodK8SAsync(UpdateAuthMethodK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateAuthMethodK8SOutput> localVarResponse = await UpdateAuthMethodK8SWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateAuthMethodK8SOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateAuthMethodK8SOutput>> UpdateAuthMethodK8SWithHttpInfoAsync(UpdateAuthMethodK8S body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodK8S");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateAuthMethodK8SOutput>("/update-auth-method-k8s", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodK8S", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UpdateAuthMethodLDAP(UpdateAuthMethodLDAP body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = UpdateAuthMethodLDAPWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> UpdateAuthMethodLDAPWithHttpInfo(UpdateAuthMethodLDAP body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodLDAP");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/update-auth-method-ldap", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodLDAP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAuthMethodLDAPAsync(UpdateAuthMethodLDAP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await UpdateAuthMethodLDAPWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> UpdateAuthMethodLDAPWithHttpInfoAsync(UpdateAuthMethodLDAP body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodLDAP");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/update-auth-method-ldap", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodLDAP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UpdateAuthMethodOAuth2(UpdateAuthMethodOAuth2 body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = UpdateAuthMethodOAuth2WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> UpdateAuthMethodOAuth2WithHttpInfo(UpdateAuthMethodOAuth2 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodOAuth2");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/update-auth-method-oauth2", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodOAuth2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAuthMethodOAuth2Async(UpdateAuthMethodOAuth2 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await UpdateAuthMethodOAuth2WithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> UpdateAuthMethodOAuth2WithHttpInfoAsync(UpdateAuthMethodOAuth2 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodOAuth2");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/update-auth-method-oauth2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodOAuth2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UpdateAuthMethodOIDC(UpdateAuthMethodOIDC body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = UpdateAuthMethodOIDCWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> UpdateAuthMethodOIDCWithHttpInfo(UpdateAuthMethodOIDC body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodOIDC");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/update-auth-method-oidc", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodOIDC", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAuthMethodOIDCAsync(UpdateAuthMethodOIDC body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await UpdateAuthMethodOIDCWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> UpdateAuthMethodOIDCWithHttpInfoAsync(UpdateAuthMethodOIDC body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodOIDC");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/update-auth-method-oidc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodOIDC", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UpdateAuthMethodSAML(UpdateAuthMethodSAML body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = UpdateAuthMethodSAMLWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> UpdateAuthMethodSAMLWithHttpInfo(UpdateAuthMethodSAML body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodSAML");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/update-auth-method-saml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodSAML", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAuthMethodSAMLAsync(UpdateAuthMethodSAML body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await UpdateAuthMethodSAMLWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> UpdateAuthMethodSAMLWithHttpInfoAsync(UpdateAuthMethodSAML body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodSAML");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/update-auth-method-saml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodSAML", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UpdateAuthMethodUniversalIdentity(UpdateAuthMethodUniversalIdentity body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = UpdateAuthMethodUniversalIdentityWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> UpdateAuthMethodUniversalIdentityWithHttpInfo(UpdateAuthMethodUniversalIdentity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodUniversalIdentity");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/update-auth-method-universal-identity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodUniversalIdentity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAuthMethodUniversalIdentityAsync(UpdateAuthMethodUniversalIdentity body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await UpdateAuthMethodUniversalIdentityWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> UpdateAuthMethodUniversalIdentityWithHttpInfoAsync(UpdateAuthMethodUniversalIdentity body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAuthMethodUniversalIdentity");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/update-auth-method-universal-identity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthMethodUniversalIdentity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateAzureTargetOutput</returns>
        public UpdateAzureTargetOutput UpdateAzureTarget(UpdateAzureTarget body)
        {
            akeyless.Client.ApiResponse<UpdateAzureTargetOutput> localVarResponse = UpdateAzureTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateAzureTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateAzureTargetOutput> UpdateAzureTargetWithHttpInfo(UpdateAzureTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAzureTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateAzureTargetOutput>("/update-azure-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAzureTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateAzureTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateAzureTargetOutput> UpdateAzureTargetAsync(UpdateAzureTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateAzureTargetOutput> localVarResponse = await UpdateAzureTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateAzureTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateAzureTargetOutput>> UpdateAzureTargetWithHttpInfoAsync(UpdateAzureTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateAzureTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateAzureTargetOutput>("/update-azure-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAzureTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateDBTargetOutput</returns>
        public UpdateDBTargetOutput UpdateDBTarget(UpdateDBTarget body)
        {
            akeyless.Client.ApiResponse<UpdateDBTargetOutput> localVarResponse = UpdateDBTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateDBTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateDBTargetOutput> UpdateDBTargetWithHttpInfo(UpdateDBTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateDBTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateDBTargetOutput>("/update-db-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDBTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateDBTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateDBTargetOutput> UpdateDBTargetAsync(UpdateDBTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateDBTargetOutput> localVarResponse = await UpdateDBTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateDBTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateDBTargetOutput>> UpdateDBTargetWithHttpInfoAsync(UpdateDBTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateDBTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateDBTargetOutput>("/update-db-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDBTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateDBTargetDetails(UpdateDBTargetDetails body)
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateDBTargetDetailsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateTargetOutput> UpdateDBTargetDetailsWithHttpInfo(UpdateDBTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateDBTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateTargetOutput>("/update-db-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDBTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateDBTargetDetailsAsync(UpdateDBTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateDBTargetDetailsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateDBTargetDetailsWithHttpInfoAsync(UpdateDBTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateDBTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-db-target-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDBTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateEKSTargetOutput</returns>
        public UpdateEKSTargetOutput UpdateEKSTarget(UpdateEKSTarget body)
        {
            akeyless.Client.ApiResponse<UpdateEKSTargetOutput> localVarResponse = UpdateEKSTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateEKSTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateEKSTargetOutput> UpdateEKSTargetWithHttpInfo(UpdateEKSTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateEKSTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateEKSTargetOutput>("/update-eks-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEKSTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateEKSTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateEKSTargetOutput> UpdateEKSTargetAsync(UpdateEKSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateEKSTargetOutput> localVarResponse = await UpdateEKSTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateEKSTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateEKSTargetOutput>> UpdateEKSTargetWithHttpInfoAsync(UpdateEKSTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateEKSTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateEKSTargetOutput>("/update-eks-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEKSTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateGKETargetOutput</returns>
        public UpdateGKETargetOutput UpdateGKETarget(UpdateGKETarget body)
        {
            akeyless.Client.ApiResponse<UpdateGKETargetOutput> localVarResponse = UpdateGKETargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateGKETargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateGKETargetOutput> UpdateGKETargetWithHttpInfo(UpdateGKETarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateGKETarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateGKETargetOutput>("/update-gke-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGKETarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateGKETargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateGKETargetOutput> UpdateGKETargetAsync(UpdateGKETarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateGKETargetOutput> localVarResponse = await UpdateGKETargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateGKETargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateGKETargetOutput>> UpdateGKETargetWithHttpInfoAsync(UpdateGKETarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateGKETarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateGKETargetOutput>("/update-gke-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGKETarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateGcpTargetOutput</returns>
        public UpdateGcpTargetOutput UpdateGcpTarget(UpdateGcpTarget body)
        {
            akeyless.Client.ApiResponse<UpdateGcpTargetOutput> localVarResponse = UpdateGcpTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateGcpTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateGcpTargetOutput> UpdateGcpTargetWithHttpInfo(UpdateGcpTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateGcpTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateGcpTargetOutput>("/update-gcp-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGcpTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateGcpTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateGcpTargetOutput> UpdateGcpTargetAsync(UpdateGcpTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateGcpTargetOutput> localVarResponse = await UpdateGcpTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateGcpTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateGcpTargetOutput>> UpdateGcpTargetWithHttpInfoAsync(UpdateGcpTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateGcpTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateGcpTargetOutput>("/update-gcp-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGcpTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateItemOutput</returns>
        public UpdateItemOutput UpdateItem(UpdateItem body)
        {
            akeyless.Client.ApiResponse<UpdateItemOutput> localVarResponse = UpdateItemWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateItemOutput</returns>
        public akeyless.Client.ApiResponse<UpdateItemOutput> UpdateItemWithHttpInfo(UpdateItem body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateItem");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateItemOutput>("/update-item", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateItemOutput</returns>
        public async System.Threading.Tasks.Task<UpdateItemOutput> UpdateItemAsync(UpdateItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateItemOutput> localVarResponse = await UpdateItemWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateItemOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateItemOutput>> UpdateItemWithHttpInfoAsync(UpdateItem body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateItem");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateItemOutput>("/update-item", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateNativeK8STarget</returns>
        public UpdateNativeK8STarget UpdateNativeK8STarget(UpdateNativeK8STarget body)
        {
            akeyless.Client.ApiResponse<UpdateNativeK8STarget> localVarResponse = UpdateNativeK8STargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateNativeK8STarget</returns>
        public akeyless.Client.ApiResponse<UpdateNativeK8STarget> UpdateNativeK8STargetWithHttpInfo(UpdateNativeK8STarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateNativeK8STarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateNativeK8STarget>("/update-k8s-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNativeK8STarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateNativeK8STarget</returns>
        public async System.Threading.Tasks.Task<UpdateNativeK8STarget> UpdateNativeK8STargetAsync(UpdateNativeK8STarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateNativeK8STarget> localVarResponse = await UpdateNativeK8STargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateNativeK8STarget)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateNativeK8STarget>> UpdateNativeK8STargetWithHttpInfoAsync(UpdateNativeK8STarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateNativeK8STarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateNativeK8STarget>("/update-k8s-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNativeK8STarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdatePKICertIssuerOutput</returns>
        public UpdatePKICertIssuerOutput UpdatePKICertIssuer(UpdatePKICertIssuer body)
        {
            akeyless.Client.ApiResponse<UpdatePKICertIssuerOutput> localVarResponse = UpdatePKICertIssuerWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdatePKICertIssuerOutput</returns>
        public akeyless.Client.ApiResponse<UpdatePKICertIssuerOutput> UpdatePKICertIssuerWithHttpInfo(UpdatePKICertIssuer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdatePKICertIssuer");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdatePKICertIssuerOutput>("/update-pki-cert-issuer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePKICertIssuer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePKICertIssuerOutput</returns>
        public async System.Threading.Tasks.Task<UpdatePKICertIssuerOutput> UpdatePKICertIssuerAsync(UpdatePKICertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdatePKICertIssuerOutput> localVarResponse = await UpdatePKICertIssuerWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePKICertIssuerOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdatePKICertIssuerOutput>> UpdatePKICertIssuerWithHttpInfoAsync(UpdatePKICertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdatePKICertIssuer");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdatePKICertIssuerOutput>("/update-pki-cert-issuer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePKICertIssuer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateRDPTargetDetails(UpdateRDPTargetDetails body)
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateRDPTargetDetailsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateTargetOutput> UpdateRDPTargetDetailsWithHttpInfo(UpdateRDPTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRDPTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateTargetOutput>("/update-rdp-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRDPTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateRDPTargetDetailsAsync(UpdateRDPTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateRDPTargetDetailsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateRDPTargetDetailsWithHttpInfoAsync(UpdateRDPTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRDPTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-rdp-target-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRDPTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateRabbitMQTargetOutput</returns>
        public UpdateRabbitMQTargetOutput UpdateRabbitMQTarget(UpdateRabbitMQTarget body)
        {
            akeyless.Client.ApiResponse<UpdateRabbitMQTargetOutput> localVarResponse = UpdateRabbitMQTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateRabbitMQTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateRabbitMQTargetOutput> UpdateRabbitMQTargetWithHttpInfo(UpdateRabbitMQTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRabbitMQTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateRabbitMQTargetOutput>("/update-rabbitmq-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRabbitMQTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateRabbitMQTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateRabbitMQTargetOutput> UpdateRabbitMQTargetAsync(UpdateRabbitMQTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateRabbitMQTargetOutput> localVarResponse = await UpdateRabbitMQTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateRabbitMQTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateRabbitMQTargetOutput>> UpdateRabbitMQTargetWithHttpInfoAsync(UpdateRabbitMQTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRabbitMQTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateRabbitMQTargetOutput>("/update-rabbitmq-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRabbitMQTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateRabbitMQTargetDetails(UpdateRabbitMQTargetDetails body)
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateRabbitMQTargetDetailsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateTargetOutput> UpdateRabbitMQTargetDetailsWithHttpInfo(UpdateRabbitMQTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRabbitMQTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateTargetOutput>("/update-rabbitmq-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRabbitMQTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateRabbitMQTargetDetailsAsync(UpdateRabbitMQTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateRabbitMQTargetDetailsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateRabbitMQTargetDetailsWithHttpInfoAsync(UpdateRabbitMQTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRabbitMQTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-rabbitmq-target-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRabbitMQTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateRoleOutput</returns>
        public UpdateRoleOutput UpdateRole(UpdateRole body)
        {
            akeyless.Client.ApiResponse<UpdateRoleOutput> localVarResponse = UpdateRoleWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateRoleOutput</returns>
        public akeyless.Client.ApiResponse<UpdateRoleOutput> UpdateRoleWithHttpInfo(UpdateRole body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRole");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateRoleOutput>("/update-role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateRoleOutput</returns>
        public async System.Threading.Tasks.Task<UpdateRoleOutput> UpdateRoleAsync(UpdateRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateRoleOutput> localVarResponse = await UpdateRoleWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateRoleOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateRoleOutput>> UpdateRoleWithHttpInfoAsync(UpdateRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRole");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateRoleOutput>("/update-role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateRotatedSecretOutput</returns>
        public UpdateRotatedSecretOutput UpdateRotatedSecret(UpdateRotatedSecret body)
        {
            akeyless.Client.ApiResponse<UpdateRotatedSecretOutput> localVarResponse = UpdateRotatedSecretWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateRotatedSecretOutput</returns>
        public akeyless.Client.ApiResponse<UpdateRotatedSecretOutput> UpdateRotatedSecretWithHttpInfo(UpdateRotatedSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRotatedSecret");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateRotatedSecretOutput>("/update-rotated-secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRotatedSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateRotatedSecretOutput</returns>
        public async System.Threading.Tasks.Task<UpdateRotatedSecretOutput> UpdateRotatedSecretAsync(UpdateRotatedSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateRotatedSecretOutput> localVarResponse = await UpdateRotatedSecretWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateRotatedSecretOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateRotatedSecretOutput>> UpdateRotatedSecretWithHttpInfoAsync(UpdateRotatedSecret body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateRotatedSecret");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateRotatedSecretOutput>("/update-rotated-secret", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRotatedSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RotateKeyOutput</returns>
        public RotateKeyOutput UpdateRotationSettings()
        {
            akeyless.Client.ApiResponse<RotateKeyOutput> localVarResponse = UpdateRotationSettingsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RotateKeyOutput</returns>
        public akeyless.Client.ApiResponse<RotateKeyOutput> UpdateRotationSettingsWithHttpInfo()
        {
            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<RotateKeyOutput>("/update-rotation-settingsrotate-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRotationSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RotateKeyOutput</returns>
        public async System.Threading.Tasks.Task<RotateKeyOutput> UpdateRotationSettingsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<RotateKeyOutput> localVarResponse = await UpdateRotationSettingsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RotateKeyOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<RotateKeyOutput>> UpdateRotationSettingsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RotateKeyOutput>("/update-rotation-settingsrotate-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRotationSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateSSHCertIssuerOutput</returns>
        public UpdateSSHCertIssuerOutput UpdateSSHCertIssuer(UpdateSSHCertIssuer body)
        {
            akeyless.Client.ApiResponse<UpdateSSHCertIssuerOutput> localVarResponse = UpdateSSHCertIssuerWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateSSHCertIssuerOutput</returns>
        public akeyless.Client.ApiResponse<UpdateSSHCertIssuerOutput> UpdateSSHCertIssuerWithHttpInfo(UpdateSSHCertIssuer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateSSHCertIssuer");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateSSHCertIssuerOutput>("/update-ssh-cert-issuer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSSHCertIssuer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSSHCertIssuerOutput</returns>
        public async System.Threading.Tasks.Task<UpdateSSHCertIssuerOutput> UpdateSSHCertIssuerAsync(UpdateSSHCertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateSSHCertIssuerOutput> localVarResponse = await UpdateSSHCertIssuerWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSSHCertIssuerOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateSSHCertIssuerOutput>> UpdateSSHCertIssuerWithHttpInfoAsync(UpdateSSHCertIssuer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateSSHCertIssuer");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateSSHCertIssuerOutput>("/update-ssh-cert-issuer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSSHCertIssuer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateSSHTargetOutput</returns>
        public UpdateSSHTargetOutput UpdateSSHTarget(UpdateSSHTarget body)
        {
            akeyless.Client.ApiResponse<UpdateSSHTargetOutput> localVarResponse = UpdateSSHTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateSSHTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateSSHTargetOutput> UpdateSSHTargetWithHttpInfo(UpdateSSHTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateSSHTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateSSHTargetOutput>("/update-ssh-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSSHTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSSHTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateSSHTargetOutput> UpdateSSHTargetAsync(UpdateSSHTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateSSHTargetOutput> localVarResponse = await UpdateSSHTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSSHTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateSSHTargetOutput>> UpdateSSHTargetWithHttpInfoAsync(UpdateSSHTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateSSHTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateSSHTargetOutput>("/update-ssh-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSSHTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateSSHTargetDetails(UpdateSSHTargetDetails body)
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateSSHTargetDetailsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateTargetOutput> UpdateSSHTargetDetailsWithHttpInfo(UpdateSSHTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateSSHTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateTargetOutput>("/update-ssh-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSSHTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateSSHTargetDetailsAsync(UpdateSSHTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateSSHTargetDetailsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateSSHTargetDetailsWithHttpInfoAsync(UpdateSSHTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateSSHTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-ssh-target-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSSHTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateSecretValOutput</returns>
        public UpdateSecretValOutput UpdateSecretVal(UpdateSecretVal body)
        {
            akeyless.Client.ApiResponse<UpdateSecretValOutput> localVarResponse = UpdateSecretValWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateSecretValOutput</returns>
        public akeyless.Client.ApiResponse<UpdateSecretValOutput> UpdateSecretValWithHttpInfo(UpdateSecretVal body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateSecretVal");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateSecretValOutput>("/update-secret-val", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSecretVal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSecretValOutput</returns>
        public async System.Threading.Tasks.Task<UpdateSecretValOutput> UpdateSecretValAsync(UpdateSecretVal body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateSecretValOutput> localVarResponse = await UpdateSecretValWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSecretValOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateSecretValOutput>> UpdateSecretValWithHttpInfoAsync(UpdateSecretVal body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateSecretVal");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateSecretValOutput>("/update-secret-val", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSecretVal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateTarget(UpdateTarget body)
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateTargetOutput> UpdateTargetWithHttpInfo(UpdateTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateTargetOutput>("/update-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateTargetAsync(UpdateTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateTargetWithHttpInfoAsync(UpdateTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateTargetDetails(Object body)
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateTargetDetailsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateTargetOutput> UpdateTargetDetailsWithHttpInfo(Object body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateTargetOutput>("/update-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateTargetDetailsAsync(Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateTargetDetailsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateTargetDetailsWithHttpInfoAsync(Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-target-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateWebTargetOutput</returns>
        public UpdateWebTargetOutput UpdateWebTarget(UpdateWebTarget body)
        {
            akeyless.Client.ApiResponse<UpdateWebTargetOutput> localVarResponse = UpdateWebTargetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateWebTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateWebTargetOutput> UpdateWebTargetWithHttpInfo(UpdateWebTarget body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateWebTarget");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateWebTargetOutput>("/update-web-target", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateWebTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateWebTargetOutput> UpdateWebTargetAsync(UpdateWebTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateWebTargetOutput> localVarResponse = await UpdateWebTargetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateWebTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateWebTargetOutput>> UpdateWebTargetWithHttpInfoAsync(UpdateWebTarget body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateWebTarget");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateWebTargetOutput>("/update-web-target", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UpdateTargetOutput</returns>
        public UpdateTargetOutput UpdateWebTargetDetails(UpdateWebTargetDetails body)
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = UpdateWebTargetDetailsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdateTargetOutput</returns>
        public akeyless.Client.ApiResponse<UpdateTargetOutput> UpdateWebTargetDetailsWithHttpInfo(UpdateWebTargetDetails body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateWebTargetDetails");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateTargetOutput>("/update-web-target-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTargetOutput</returns>
        public async System.Threading.Tasks.Task<UpdateTargetOutput> UpdateWebTargetDetailsAsync(UpdateWebTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<UpdateTargetOutput> localVarResponse = await UpdateWebTargetDetailsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTargetOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<UpdateTargetOutput>> UpdateWebTargetDetailsWithHttpInfoAsync(UpdateWebTargetDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UpdateWebTargetDetails");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateTargetOutput>("/update-web-target-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebTargetDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UploadRSA(UploadRSA body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = UploadRSAWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> UploadRSAWithHttpInfo(UploadRSA body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UploadRSA");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/upload-rsa", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadRSA", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UploadRSAAsync(UploadRSA body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await UploadRSAWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> UploadRSAWithHttpInfoAsync(UploadRSA body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->UploadRSA");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/upload-rsa", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadRSA", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ValidateTokenOutput</returns>
        public ValidateTokenOutput ValidateToken(ValidateToken body)
        {
            akeyless.Client.ApiResponse<ValidateTokenOutput> localVarResponse = ValidateTokenWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ValidateTokenOutput</returns>
        public akeyless.Client.ApiResponse<ValidateTokenOutput> ValidateTokenWithHttpInfo(ValidateToken body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ValidateToken");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ValidateTokenOutput>("/validate-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateTokenOutput</returns>
        public async System.Threading.Tasks.Task<ValidateTokenOutput> ValidateTokenAsync(ValidateToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<ValidateTokenOutput> localVarResponse = await ValidateTokenWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateTokenOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<ValidateTokenOutput>> ValidateTokenWithHttpInfoAsync(ValidateToken body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->ValidateToken");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ValidateTokenOutput>("/validate-token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>VerifyJWTOutput</returns>
        public VerifyJWTOutput VerifyJWTWithClassicKey(VerifyJWTWithClassicKey body)
        {
            akeyless.Client.ApiResponse<VerifyJWTOutput> localVarResponse = VerifyJWTWithClassicKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of VerifyJWTOutput</returns>
        public akeyless.Client.ApiResponse<VerifyJWTOutput> VerifyJWTWithClassicKeyWithHttpInfo(VerifyJWTWithClassicKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->VerifyJWTWithClassicKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<VerifyJWTOutput>("/verify-jwt-with-classic-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyJWTWithClassicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyJWTOutput</returns>
        public async System.Threading.Tasks.Task<VerifyJWTOutput> VerifyJWTWithClassicKeyAsync(VerifyJWTWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<VerifyJWTOutput> localVarResponse = await VerifyJWTWithClassicKeyWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyJWTOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<VerifyJWTOutput>> VerifyJWTWithClassicKeyWithHttpInfoAsync(VerifyJWTWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->VerifyJWTWithClassicKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<VerifyJWTOutput>("/verify-jwt-with-classic-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyJWTWithClassicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object VerifyPKCS1(VerifyPKCS1 body)
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = VerifyPKCS1WithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public akeyless.Client.ApiResponse<Object> VerifyPKCS1WithHttpInfo(VerifyPKCS1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->VerifyPKCS1");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/verify-pkcs1", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> VerifyPKCS1Async(VerifyPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<Object> localVarResponse = await VerifyPKCS1WithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<Object>> VerifyPKCS1WithHttpInfoAsync(VerifyPKCS1 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->VerifyPKCS1");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/verify-pkcs1", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyPKCS1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>VerifyPKICertOutput</returns>
        public VerifyPKICertOutput VerifyPKICertWithClassicKey(VerifyPKICertWithClassicKey body)
        {
            akeyless.Client.ApiResponse<VerifyPKICertOutput> localVarResponse = VerifyPKICertWithClassicKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of VerifyPKICertOutput</returns>
        public akeyless.Client.ApiResponse<VerifyPKICertOutput> VerifyPKICertWithClassicKeyWithHttpInfo(VerifyPKICertWithClassicKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->VerifyPKICertWithClassicKey");

            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<VerifyPKICertOutput>("/verify-pki-cert-with-classic-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyPKICertWithClassicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyPKICertOutput</returns>
        public async System.Threading.Tasks.Task<VerifyPKICertOutput> VerifyPKICertWithClassicKeyAsync(VerifyPKICertWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            akeyless.Client.ApiResponse<VerifyPKICertOutput> localVarResponse = await VerifyPKICertWithClassicKeyWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="akeyless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyPKICertOutput)</returns>
        public async System.Threading.Tasks.Task<akeyless.Client.ApiResponse<VerifyPKICertOutput>> VerifyPKICertWithClassicKeyWithHttpInfoAsync(VerifyPKICertWithClassicKey body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new akeyless.Client.ApiException(400, "Missing required parameter 'body' when calling V2Api->VerifyPKICertWithClassicKey");


            akeyless.Client.RequestOptions localVarRequestOptions = new akeyless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = akeyless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = akeyless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<VerifyPKICertOutput>("/verify-pki-cert-with-classic-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyPKICertWithClassicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
