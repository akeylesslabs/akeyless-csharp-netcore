/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ExternalKMSKeyId
    /// </summary>
    [DataContract(Name = "ExternalKMSKeyId")]
    public partial class ExternalKMSKeyId : IEquatable<ExternalKMSKeyId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalKMSKeyId" /> class.
        /// </summary>
        /// <param name="keyId">keyId.</param>
        /// <param name="keyReference">keyReference.</param>
        public ExternalKMSKeyId(string keyId = default(string), string keyReference = default(string))
        {
            this.KeyId = keyId;
            this.KeyReference = keyReference;
        }

        /// <summary>
        /// Gets or Sets KeyId
        /// </summary>
        [DataMember(Name = "key_id", EmitDefaultValue = false)]
        public string KeyId { get; set; }

        /// <summary>
        /// Gets or Sets KeyReference
        /// </summary>
        [DataMember(Name = "key_reference", EmitDefaultValue = false)]
        public string KeyReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalKMSKeyId {\n");
            sb.Append("  KeyId: ").Append(KeyId).Append("\n");
            sb.Append("  KeyReference: ").Append(KeyReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalKMSKeyId);
        }

        /// <summary>
        /// Returns true if ExternalKMSKeyId instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalKMSKeyId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalKMSKeyId input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KeyId == input.KeyId ||
                    (this.KeyId != null &&
                    this.KeyId.Equals(input.KeyId))
                ) && 
                (
                    this.KeyReference == input.KeyReference ||
                    (this.KeyReference != null &&
                    this.KeyReference.Equals(input.KeyReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KeyId != null)
                    hashCode = hashCode * 59 + this.KeyId.GetHashCode();
                if (this.KeyReference != null)
                    hashCode = hashCode * 59 + this.KeyReference.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
