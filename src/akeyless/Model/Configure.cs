/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// Configure
    /// </summary>
    [DataContract(Name = "configure")]
    public partial class Configure : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Configure" /> class.
        /// </summary>
        /// <param name="accessId">Access ID.</param>
        /// <param name="accessKey">Access Key.</param>
        /// <param name="accessType">Access Type (access_key/password/azure_ad/saml/oidc/aws_iam/gcp/k8s/cert) (default to &quot;access_key&quot;).</param>
        /// <param name="accountId">Account id (relevant only for access-type&#x3D;password where the email address is associated with more than one account).</param>
        /// <param name="adminEmail">Email (relevant only for access-type&#x3D;password).</param>
        /// <param name="adminPassword">Password (relevant only for access-type&#x3D;password).</param>
        /// <param name="azureAdObjectId">Azure Active Directory ObjectId (relevant only for access-type&#x3D;azure_ad).</param>
        /// <param name="certData">Certificate data encoded in base64. Used if file was not provided. (relevant only for access-type&#x3D;cert in Curl Context).</param>
        /// <param name="certIssuerName">Certificate Issuer Name.</param>
        /// <param name="certUsername">The username to sign in the SSH certificate (use a comma-separated list for more than one username).</param>
        /// <param name="defaultLocationPrefix">Default path prefix for name of items, targets and auth methods.</param>
        /// <param name="disablePafxfast">Disable the FAST negotiation in the Kerberos authentication method.</param>
        /// <param name="gatewaySpn">The service principal name of the gateway as registered in LDAP (i.e., HTTP/gateway).</param>
        /// <param name="gcpAudience">GCP JWT audience (default to &quot;akeyless.io&quot;).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="k8sAuthConfigName">The K8S Auth config name (relevant only for access-type&#x3D;k8s).</param>
        /// <param name="kerberosToken">KerberosToken represents a Kerberos token generated for the gateway SPN (Service Principal Name)..</param>
        /// <param name="kerberosUsername">TThe username for the entry within the keytab to authenticate via Kerberos.</param>
        /// <param name="keyData">Private key data encoded in base64. Used if file was not provided.(relevant only for access-type&#x3D;cert in Curl Context).</param>
        /// <param name="keytabData">Base64-encoded content of a valid keytab file, containing the service account&#39;s entry..</param>
        /// <param name="krb5ConfData">Base64-encoded content of a valid krb5.conf file, specifying the settings and parameters required for Kerberos authentication..</param>
        /// <param name="legacySigningAlgName">Set this option to output legacy (&#39;ssh-rsa-cert-v01@openssh.com&#39;) signing algorithm name in the certificate..</param>
        /// <param name="ociAuthType">The type of the OCI configuration to use [instance/apikey/resource] (relevant only for access-type&#x3D;oci) (default to &quot;apikey&quot;).</param>
        /// <param name="ociGroupOcid">A list of Oracle Cloud IDs groups (relevant only for access-type&#x3D;oci).</param>
        public Configure(string accessId = default(string), string accessKey = default(string), string accessType = @"access_key", string accountId = default(string), string adminEmail = default(string), string adminPassword = default(string), string azureAdObjectId = default(string), string certData = default(string), string certIssuerName = default(string), string certUsername = default(string), string defaultLocationPrefix = default(string), string disablePafxfast = default(string), string gatewaySpn = default(string), string gcpAudience = @"akeyless.io", bool json = false, string k8sAuthConfigName = default(string), string kerberosToken = default(string), string kerberosUsername = default(string), string keyData = default(string), string keytabData = default(string), string krb5ConfData = default(string), bool legacySigningAlgName = default(bool), string ociAuthType = @"apikey", List<string> ociGroupOcid = default(List<string>))
        {
            this.AccessId = accessId;
            this.AccessKey = accessKey;
            // use default value if no "accessType" provided
            this.AccessType = accessType ?? @"access_key";
            this.AccountId = accountId;
            this.AdminEmail = adminEmail;
            this.AdminPassword = adminPassword;
            this.AzureAdObjectId = azureAdObjectId;
            this.CertData = certData;
            this.CertIssuerName = certIssuerName;
            this.CertUsername = certUsername;
            this.DefaultLocationPrefix = defaultLocationPrefix;
            this.DisablePafxfast = disablePafxfast;
            this.GatewaySpn = gatewaySpn;
            // use default value if no "gcpAudience" provided
            this.GcpAudience = gcpAudience ?? @"akeyless.io";
            this.Json = json;
            this.K8sAuthConfigName = k8sAuthConfigName;
            this.KerberosToken = kerberosToken;
            this.KerberosUsername = kerberosUsername;
            this.KeyData = keyData;
            this.KeytabData = keytabData;
            this.Krb5ConfData = krb5ConfData;
            this.LegacySigningAlgName = legacySigningAlgName;
            // use default value if no "ociAuthType" provided
            this.OciAuthType = ociAuthType ?? @"apikey";
            this.OciGroupOcid = ociGroupOcid;
        }

        /// <summary>
        /// Access ID
        /// </summary>
        /// <value>Access ID</value>
        [DataMember(Name = "access-id", EmitDefaultValue = false)]
        public string AccessId { get; set; }

        /// <summary>
        /// Access Key
        /// </summary>
        /// <value>Access Key</value>
        [DataMember(Name = "access-key", EmitDefaultValue = false)]
        public string AccessKey { get; set; }

        /// <summary>
        /// Access Type (access_key/password/azure_ad/saml/oidc/aws_iam/gcp/k8s/cert)
        /// </summary>
        /// <value>Access Type (access_key/password/azure_ad/saml/oidc/aws_iam/gcp/k8s/cert)</value>
        [DataMember(Name = "access-type", EmitDefaultValue = false)]
        public string AccessType { get; set; }

        /// <summary>
        /// Account id (relevant only for access-type&#x3D;password where the email address is associated with more than one account)
        /// </summary>
        /// <value>Account id (relevant only for access-type&#x3D;password where the email address is associated with more than one account)</value>
        [DataMember(Name = "account-id", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Email (relevant only for access-type&#x3D;password)
        /// </summary>
        /// <value>Email (relevant only for access-type&#x3D;password)</value>
        [DataMember(Name = "admin-email", EmitDefaultValue = false)]
        public string AdminEmail { get; set; }

        /// <summary>
        /// Password (relevant only for access-type&#x3D;password)
        /// </summary>
        /// <value>Password (relevant only for access-type&#x3D;password)</value>
        [DataMember(Name = "admin-password", EmitDefaultValue = false)]
        public string AdminPassword { get; set; }

        /// <summary>
        /// Azure Active Directory ObjectId (relevant only for access-type&#x3D;azure_ad)
        /// </summary>
        /// <value>Azure Active Directory ObjectId (relevant only for access-type&#x3D;azure_ad)</value>
        [DataMember(Name = "azure-ad-object-id", EmitDefaultValue = false)]
        public string AzureAdObjectId { get; set; }

        /// <summary>
        /// Certificate data encoded in base64. Used if file was not provided. (relevant only for access-type&#x3D;cert in Curl Context)
        /// </summary>
        /// <value>Certificate data encoded in base64. Used if file was not provided. (relevant only for access-type&#x3D;cert in Curl Context)</value>
        [DataMember(Name = "cert-data", EmitDefaultValue = false)]
        public string CertData { get; set; }

        /// <summary>
        /// Certificate Issuer Name
        /// </summary>
        /// <value>Certificate Issuer Name</value>
        [DataMember(Name = "cert-issuer-name", EmitDefaultValue = false)]
        public string CertIssuerName { get; set; }

        /// <summary>
        /// The username to sign in the SSH certificate (use a comma-separated list for more than one username)
        /// </summary>
        /// <value>The username to sign in the SSH certificate (use a comma-separated list for more than one username)</value>
        [DataMember(Name = "cert-username", EmitDefaultValue = false)]
        public string CertUsername { get; set; }

        /// <summary>
        /// Default path prefix for name of items, targets and auth methods
        /// </summary>
        /// <value>Default path prefix for name of items, targets and auth methods</value>
        [DataMember(Name = "default-location-prefix", EmitDefaultValue = false)]
        public string DefaultLocationPrefix { get; set; }

        /// <summary>
        /// Disable the FAST negotiation in the Kerberos authentication method
        /// </summary>
        /// <value>Disable the FAST negotiation in the Kerberos authentication method</value>
        [DataMember(Name = "disable-pafxfast", EmitDefaultValue = false)]
        public string DisablePafxfast { get; set; }

        /// <summary>
        /// The service principal name of the gateway as registered in LDAP (i.e., HTTP/gateway)
        /// </summary>
        /// <value>The service principal name of the gateway as registered in LDAP (i.e., HTTP/gateway)</value>
        [DataMember(Name = "gateway-spn", EmitDefaultValue = false)]
        public string GatewaySpn { get; set; }

        /// <summary>
        /// GCP JWT audience
        /// </summary>
        /// <value>GCP JWT audience</value>
        [DataMember(Name = "gcp-audience", EmitDefaultValue = false)]
        public string GcpAudience { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The K8S Auth config name (relevant only for access-type&#x3D;k8s)
        /// </summary>
        /// <value>The K8S Auth config name (relevant only for access-type&#x3D;k8s)</value>
        [DataMember(Name = "k8s-auth-config-name", EmitDefaultValue = false)]
        public string K8sAuthConfigName { get; set; }

        /// <summary>
        /// KerberosToken represents a Kerberos token generated for the gateway SPN (Service Principal Name).
        /// </summary>
        /// <value>KerberosToken represents a Kerberos token generated for the gateway SPN (Service Principal Name).</value>
        [DataMember(Name = "kerberos-token", EmitDefaultValue = false)]
        public string KerberosToken { get; set; }

        /// <summary>
        /// TThe username for the entry within the keytab to authenticate via Kerberos
        /// </summary>
        /// <value>TThe username for the entry within the keytab to authenticate via Kerberos</value>
        [DataMember(Name = "kerberos-username", EmitDefaultValue = false)]
        public string KerberosUsername { get; set; }

        /// <summary>
        /// Private key data encoded in base64. Used if file was not provided.(relevant only for access-type&#x3D;cert in Curl Context)
        /// </summary>
        /// <value>Private key data encoded in base64. Used if file was not provided.(relevant only for access-type&#x3D;cert in Curl Context)</value>
        [DataMember(Name = "key-data", EmitDefaultValue = false)]
        public string KeyData { get; set; }

        /// <summary>
        /// Base64-encoded content of a valid keytab file, containing the service account&#39;s entry.
        /// </summary>
        /// <value>Base64-encoded content of a valid keytab file, containing the service account&#39;s entry.</value>
        [DataMember(Name = "keytab-data", EmitDefaultValue = false)]
        public string KeytabData { get; set; }

        /// <summary>
        /// Base64-encoded content of a valid krb5.conf file, specifying the settings and parameters required for Kerberos authentication.
        /// </summary>
        /// <value>Base64-encoded content of a valid krb5.conf file, specifying the settings and parameters required for Kerberos authentication.</value>
        [DataMember(Name = "krb5-conf-data", EmitDefaultValue = false)]
        public string Krb5ConfData { get; set; }

        /// <summary>
        /// Set this option to output legacy (&#39;ssh-rsa-cert-v01@openssh.com&#39;) signing algorithm name in the certificate.
        /// </summary>
        /// <value>Set this option to output legacy (&#39;ssh-rsa-cert-v01@openssh.com&#39;) signing algorithm name in the certificate.</value>
        [DataMember(Name = "legacy-signing-alg-name", EmitDefaultValue = true)]
        public bool LegacySigningAlgName { get; set; }

        /// <summary>
        /// The type of the OCI configuration to use [instance/apikey/resource] (relevant only for access-type&#x3D;oci)
        /// </summary>
        /// <value>The type of the OCI configuration to use [instance/apikey/resource] (relevant only for access-type&#x3D;oci)</value>
        [DataMember(Name = "oci-auth-type", EmitDefaultValue = false)]
        public string OciAuthType { get; set; }

        /// <summary>
        /// A list of Oracle Cloud IDs groups (relevant only for access-type&#x3D;oci)
        /// </summary>
        /// <value>A list of Oracle Cloud IDs groups (relevant only for access-type&#x3D;oci)</value>
        [DataMember(Name = "oci-group-ocid", EmitDefaultValue = false)]
        public List<string> OciGroupOcid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Configure {\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AdminEmail: ").Append(AdminEmail).Append("\n");
            sb.Append("  AdminPassword: ").Append(AdminPassword).Append("\n");
            sb.Append("  AzureAdObjectId: ").Append(AzureAdObjectId).Append("\n");
            sb.Append("  CertData: ").Append(CertData).Append("\n");
            sb.Append("  CertIssuerName: ").Append(CertIssuerName).Append("\n");
            sb.Append("  CertUsername: ").Append(CertUsername).Append("\n");
            sb.Append("  DefaultLocationPrefix: ").Append(DefaultLocationPrefix).Append("\n");
            sb.Append("  DisablePafxfast: ").Append(DisablePafxfast).Append("\n");
            sb.Append("  GatewaySpn: ").Append(GatewaySpn).Append("\n");
            sb.Append("  GcpAudience: ").Append(GcpAudience).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  K8sAuthConfigName: ").Append(K8sAuthConfigName).Append("\n");
            sb.Append("  KerberosToken: ").Append(KerberosToken).Append("\n");
            sb.Append("  KerberosUsername: ").Append(KerberosUsername).Append("\n");
            sb.Append("  KeyData: ").Append(KeyData).Append("\n");
            sb.Append("  KeytabData: ").Append(KeytabData).Append("\n");
            sb.Append("  Krb5ConfData: ").Append(Krb5ConfData).Append("\n");
            sb.Append("  LegacySigningAlgName: ").Append(LegacySigningAlgName).Append("\n");
            sb.Append("  OciAuthType: ").Append(OciAuthType).Append("\n");
            sb.Append("  OciGroupOcid: ").Append(OciGroupOcid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
