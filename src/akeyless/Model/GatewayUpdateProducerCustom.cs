/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayUpdateProducerCustom is a command that updates a custom producer. [Deprecated: Use dynamic-secret-update-custom command]
    /// </summary>
    [DataContract(Name = "gatewayUpdateProducerCustom")]
    public partial class GatewayUpdateProducerCustom : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateProducerCustom" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayUpdateProducerCustom() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateProducerCustom" /> class.
        /// </summary>
        /// <param name="adminRotationIntervalDays">Define rotation interval in days.</param>
        /// <param name="createSyncUrl">URL of an endpoint that implements /sync/create method, for example https://webhook.example.com/sync/create (required).</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="enableAdminRotation">Should admin credentials be rotated (default to false).</param>
        /// <param name="itemCustomFields">Additional custom fields to associate with the item.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Dynamic secret name (required).</param>
        /// <param name="newName">Dynamic secret name.</param>
        /// <param name="payload">Secret payload to be sent with each create/revoke webhook request.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="revokeSyncUrl">URL of an endpoint that implements /sync/revoke method, for example https://webhook.example.com/sync/revoke (required).</param>
        /// <param name="rotateSyncUrl">URL of an endpoint that implements /sync/rotate method, for example https://webhook.example.com/sync/rotate.</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="timeoutSec">Maximum allowed time in seconds for the webhook to return the results (default to 60).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public GatewayUpdateProducerCustom(long adminRotationIntervalDays = default(long), string createSyncUrl = default(string), string deleteProtection = default(string), bool enableAdminRotation = false, Dictionary<string, string> itemCustomFields = default(Dictionary<string, string>), bool json = false, string name = default(string), string newName = default(string), string payload = default(string), string producerEncryptionKeyName = default(string), string revokeSyncUrl = default(string), string rotateSyncUrl = default(string), List<string> tags = default(List<string>), long timeoutSec = 60, string token = default(string), string uidToken = default(string), string userTtl = @"60m")
        {
            // to ensure "createSyncUrl" is required (not null)
            if (createSyncUrl == null)
            {
                throw new ArgumentNullException("createSyncUrl is a required property for GatewayUpdateProducerCustom and cannot be null");
            }
            this.CreateSyncUrl = createSyncUrl;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayUpdateProducerCustom and cannot be null");
            }
            this.Name = name;
            // to ensure "revokeSyncUrl" is required (not null)
            if (revokeSyncUrl == null)
            {
                throw new ArgumentNullException("revokeSyncUrl is a required property for GatewayUpdateProducerCustom and cannot be null");
            }
            this.RevokeSyncUrl = revokeSyncUrl;
            this.AdminRotationIntervalDays = adminRotationIntervalDays;
            this.DeleteProtection = deleteProtection;
            this.EnableAdminRotation = enableAdminRotation;
            this.ItemCustomFields = itemCustomFields;
            this.Json = json;
            this.NewName = newName;
            this.Payload = payload;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.RotateSyncUrl = rotateSyncUrl;
            this.Tags = tags;
            this.TimeoutSec = timeoutSec;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? @"60m";
        }

        /// <summary>
        /// Define rotation interval in days
        /// </summary>
        /// <value>Define rotation interval in days</value>
        [DataMember(Name = "admin-rotation-interval-days", EmitDefaultValue = false)]
        public long AdminRotationIntervalDays { get; set; }

        /// <summary>
        /// URL of an endpoint that implements /sync/create method, for example https://webhook.example.com/sync/create
        /// </summary>
        /// <value>URL of an endpoint that implements /sync/create method, for example https://webhook.example.com/sync/create</value>
        [DataMember(Name = "create-sync-url", IsRequired = true, EmitDefaultValue = true)]
        public string CreateSyncUrl { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Should admin credentials be rotated
        /// </summary>
        /// <value>Should admin credentials be rotated</value>
        [DataMember(Name = "enable-admin-rotation", EmitDefaultValue = true)]
        public bool EnableAdminRotation { get; set; }

        /// <summary>
        /// Additional custom fields to associate with the item
        /// </summary>
        /// <value>Additional custom fields to associate with the item</value>
        [DataMember(Name = "item-custom-fields", EmitDefaultValue = false)]
        public Dictionary<string, string> ItemCustomFields { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Secret payload to be sent with each create/revoke webhook request
        /// </summary>
        /// <value>Secret payload to be sent with each create/revoke webhook request</value>
        [DataMember(Name = "payload", EmitDefaultValue = false)]
        public string Payload { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// URL of an endpoint that implements /sync/revoke method, for example https://webhook.example.com/sync/revoke
        /// </summary>
        /// <value>URL of an endpoint that implements /sync/revoke method, for example https://webhook.example.com/sync/revoke</value>
        [DataMember(Name = "revoke-sync-url", IsRequired = true, EmitDefaultValue = true)]
        public string RevokeSyncUrl { get; set; }

        /// <summary>
        /// URL of an endpoint that implements /sync/rotate method, for example https://webhook.example.com/sync/rotate
        /// </summary>
        /// <value>URL of an endpoint that implements /sync/rotate method, for example https://webhook.example.com/sync/rotate</value>
        [DataMember(Name = "rotate-sync-url", EmitDefaultValue = false)]
        public string RotateSyncUrl { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Maximum allowed time in seconds for the webhook to return the results
        /// </summary>
        /// <value>Maximum allowed time in seconds for the webhook to return the results</value>
        [DataMember(Name = "timeout-sec", EmitDefaultValue = false)]
        public long TimeoutSec { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayUpdateProducerCustom {\n");
            sb.Append("  AdminRotationIntervalDays: ").Append(AdminRotationIntervalDays).Append("\n");
            sb.Append("  CreateSyncUrl: ").Append(CreateSyncUrl).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  EnableAdminRotation: ").Append(EnableAdminRotation).Append("\n");
            sb.Append("  ItemCustomFields: ").Append(ItemCustomFields).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  RevokeSyncUrl: ").Append(RevokeSyncUrl).Append("\n");
            sb.Append("  RotateSyncUrl: ").Append(RotateSyncUrl).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TimeoutSec: ").Append(TimeoutSec).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
