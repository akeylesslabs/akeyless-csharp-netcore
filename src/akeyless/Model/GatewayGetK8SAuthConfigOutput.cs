/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GatewayGetK8SAuthConfigOutput
    /// </summary>
    [DataContract(Name = "GatewayGetK8SAuthConfigOutput")]
    public partial class GatewayGetK8SAuthConfigOutput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayGetK8SAuthConfigOutput" /> class.
        /// </summary>
        /// <param name="amTokenExpiration">AuthMethodTokenExpiration is time in seconds of expiration of the Akeyless Kube Auth Method token.</param>
        /// <param name="authMethodAccessId">AuthMethodAccessId of the Kubernetes auth method.</param>
        /// <param name="authMethodPrvKeyPem">AuthMethodSigningKey is the private key (in base64 of the PEM format) associated with the public key defined in the Kubernetes auth method, that used to sign the internal token for the Akeyless Kubernetes Auth Method.</param>
        /// <param name="clusterApiType">ClusterApiType defines types of API access to cluster.</param>
        /// <param name="disableIssValidation">DisableISSValidation is optional parameter to disable ISS validation.</param>
        /// <param name="id">id.</param>
        /// <param name="k8sAuthType">k8sAuthType.</param>
        /// <param name="k8sCaCert">K8SCACert is the CA Cert to use to call into the kubernetes API.</param>
        /// <param name="k8sClientCertData">K8sClientCertData is the client certificate for k8s client certificate authentication.</param>
        /// <param name="k8sClientKeyData">K8sClientKeyData is the client key for k8s client certificate authentication.</param>
        /// <param name="k8sHost">K8SHost is the url string for the kubernetes API.</param>
        /// <param name="k8sIssuer">K8SIssuer is the claim that specifies who issued the Kubernetes token.</param>
        /// <param name="k8sPubKeysPem">K8SPublicKeysPEM is the list of public key in PEM format.</param>
        /// <param name="k8sTokenReviewerJwt">K8STokenReviewerJWT is the bearer for clusterApiTypeK8s, used during TokenReview API call.</param>
        /// <param name="name">name.</param>
        /// <param name="protectionKey">protectionKey.</param>
        /// <param name="rancherApiKey">RancherApiKey the bear token for clusterApiTypeRancher.</param>
        /// <param name="rancherClusterId">RancherClusterId cluster id as define in rancher (in case of clusterApiTypeRancher).</param>
        /// <param name="useLocalCaJwt">UseLocalCAJwt is an optional parameter to set defaulting to using the local service account when running in a Kubernetes pod.</param>
        public GatewayGetK8SAuthConfigOutput(long amTokenExpiration = default(long), string authMethodAccessId = default(string), string authMethodPrvKeyPem = default(string), string clusterApiType = default(string), bool disableIssValidation = default(bool), string id = default(string), string k8sAuthType = default(string), string k8sCaCert = default(string), string k8sClientCertData = default(string), string k8sClientKeyData = default(string), string k8sHost = default(string), string k8sIssuer = default(string), List<string> k8sPubKeysPem = default(List<string>), string k8sTokenReviewerJwt = default(string), string name = default(string), string protectionKey = default(string), string rancherApiKey = default(string), string rancherClusterId = default(string), bool useLocalCaJwt = default(bool))
        {
            this.AmTokenExpiration = amTokenExpiration;
            this.AuthMethodAccessId = authMethodAccessId;
            this.AuthMethodPrvKeyPem = authMethodPrvKeyPem;
            this.ClusterApiType = clusterApiType;
            this.DisableIssValidation = disableIssValidation;
            this.Id = id;
            this.K8sAuthType = k8sAuthType;
            this.K8sCaCert = k8sCaCert;
            this.K8sClientCertData = k8sClientCertData;
            this.K8sClientKeyData = k8sClientKeyData;
            this.K8sHost = k8sHost;
            this.K8sIssuer = k8sIssuer;
            this.K8sPubKeysPem = k8sPubKeysPem;
            this.K8sTokenReviewerJwt = k8sTokenReviewerJwt;
            this.Name = name;
            this.ProtectionKey = protectionKey;
            this.RancherApiKey = rancherApiKey;
            this.RancherClusterId = rancherClusterId;
            this.UseLocalCaJwt = useLocalCaJwt;
        }

        /// <summary>
        /// AuthMethodTokenExpiration is time in seconds of expiration of the Akeyless Kube Auth Method token
        /// </summary>
        /// <value>AuthMethodTokenExpiration is time in seconds of expiration of the Akeyless Kube Auth Method token</value>
        [DataMember(Name = "am_token_expiration", EmitDefaultValue = false)]
        public long AmTokenExpiration { get; set; }

        /// <summary>
        /// AuthMethodAccessId of the Kubernetes auth method
        /// </summary>
        /// <value>AuthMethodAccessId of the Kubernetes auth method</value>
        [DataMember(Name = "auth_method_access_id", EmitDefaultValue = false)]
        public string AuthMethodAccessId { get; set; }

        /// <summary>
        /// AuthMethodSigningKey is the private key (in base64 of the PEM format) associated with the public key defined in the Kubernetes auth method, that used to sign the internal token for the Akeyless Kubernetes Auth Method
        /// </summary>
        /// <value>AuthMethodSigningKey is the private key (in base64 of the PEM format) associated with the public key defined in the Kubernetes auth method, that used to sign the internal token for the Akeyless Kubernetes Auth Method</value>
        [DataMember(Name = "auth_method_prv_key_pem", EmitDefaultValue = false)]
        public string AuthMethodPrvKeyPem { get; set; }

        /// <summary>
        /// ClusterApiType defines types of API access to cluster
        /// </summary>
        /// <value>ClusterApiType defines types of API access to cluster</value>
        [DataMember(Name = "cluster_api_type", EmitDefaultValue = false)]
        public string ClusterApiType { get; set; }

        /// <summary>
        /// DisableISSValidation is optional parameter to disable ISS validation
        /// </summary>
        /// <value>DisableISSValidation is optional parameter to disable ISS validation</value>
        [DataMember(Name = "disable_iss_validation", EmitDefaultValue = true)]
        public bool DisableIssValidation { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets K8sAuthType
        /// </summary>
        [DataMember(Name = "k8s_auth_type", EmitDefaultValue = false)]
        public string K8sAuthType { get; set; }

        /// <summary>
        /// K8SCACert is the CA Cert to use to call into the kubernetes API
        /// </summary>
        /// <value>K8SCACert is the CA Cert to use to call into the kubernetes API</value>
        [DataMember(Name = "k8s_ca_cert", EmitDefaultValue = false)]
        public string K8sCaCert { get; set; }

        /// <summary>
        /// K8sClientCertData is the client certificate for k8s client certificate authentication
        /// </summary>
        /// <value>K8sClientCertData is the client certificate for k8s client certificate authentication</value>
        [DataMember(Name = "k8s_client_cert_data", EmitDefaultValue = false)]
        public string K8sClientCertData { get; set; }

        /// <summary>
        /// K8sClientKeyData is the client key for k8s client certificate authentication
        /// </summary>
        /// <value>K8sClientKeyData is the client key for k8s client certificate authentication</value>
        [DataMember(Name = "k8s_client_key_data", EmitDefaultValue = false)]
        public string K8sClientKeyData { get; set; }

        /// <summary>
        /// K8SHost is the url string for the kubernetes API
        /// </summary>
        /// <value>K8SHost is the url string for the kubernetes API</value>
        [DataMember(Name = "k8s_host", EmitDefaultValue = false)]
        public string K8sHost { get; set; }

        /// <summary>
        /// K8SIssuer is the claim that specifies who issued the Kubernetes token
        /// </summary>
        /// <value>K8SIssuer is the claim that specifies who issued the Kubernetes token</value>
        [DataMember(Name = "k8s_issuer", EmitDefaultValue = false)]
        public string K8sIssuer { get; set; }

        /// <summary>
        /// K8SPublicKeysPEM is the list of public key in PEM format
        /// </summary>
        /// <value>K8SPublicKeysPEM is the list of public key in PEM format</value>
        [DataMember(Name = "k8s_pub_keys_pem", EmitDefaultValue = false)]
        public List<string> K8sPubKeysPem { get; set; }

        /// <summary>
        /// K8STokenReviewerJWT is the bearer for clusterApiTypeK8s, used during TokenReview API call
        /// </summary>
        /// <value>K8STokenReviewerJWT is the bearer for clusterApiTypeK8s, used during TokenReview API call</value>
        [DataMember(Name = "k8s_token_reviewer_jwt", EmitDefaultValue = false)]
        public string K8sTokenReviewerJwt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProtectionKey
        /// </summary>
        [DataMember(Name = "protection_key", EmitDefaultValue = false)]
        public string ProtectionKey { get; set; }

        /// <summary>
        /// RancherApiKey the bear token for clusterApiTypeRancher
        /// </summary>
        /// <value>RancherApiKey the bear token for clusterApiTypeRancher</value>
        [DataMember(Name = "rancher_api_key", EmitDefaultValue = false)]
        public string RancherApiKey { get; set; }

        /// <summary>
        /// RancherClusterId cluster id as define in rancher (in case of clusterApiTypeRancher)
        /// </summary>
        /// <value>RancherClusterId cluster id as define in rancher (in case of clusterApiTypeRancher)</value>
        [DataMember(Name = "rancher_cluster_id", EmitDefaultValue = false)]
        public string RancherClusterId { get; set; }

        /// <summary>
        /// UseLocalCAJwt is an optional parameter to set defaulting to using the local service account when running in a Kubernetes pod
        /// </summary>
        /// <value>UseLocalCAJwt is an optional parameter to set defaulting to using the local service account when running in a Kubernetes pod</value>
        [DataMember(Name = "use_local_ca_jwt", EmitDefaultValue = true)]
        public bool UseLocalCaJwt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayGetK8SAuthConfigOutput {\n");
            sb.Append("  AmTokenExpiration: ").Append(AmTokenExpiration).Append("\n");
            sb.Append("  AuthMethodAccessId: ").Append(AuthMethodAccessId).Append("\n");
            sb.Append("  AuthMethodPrvKeyPem: ").Append(AuthMethodPrvKeyPem).Append("\n");
            sb.Append("  ClusterApiType: ").Append(ClusterApiType).Append("\n");
            sb.Append("  DisableIssValidation: ").Append(DisableIssValidation).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  K8sAuthType: ").Append(K8sAuthType).Append("\n");
            sb.Append("  K8sCaCert: ").Append(K8sCaCert).Append("\n");
            sb.Append("  K8sClientCertData: ").Append(K8sClientCertData).Append("\n");
            sb.Append("  K8sClientKeyData: ").Append(K8sClientKeyData).Append("\n");
            sb.Append("  K8sHost: ").Append(K8sHost).Append("\n");
            sb.Append("  K8sIssuer: ").Append(K8sIssuer).Append("\n");
            sb.Append("  K8sPubKeysPem: ").Append(K8sPubKeysPem).Append("\n");
            sb.Append("  K8sTokenReviewerJwt: ").Append(K8sTokenReviewerJwt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProtectionKey: ").Append(ProtectionKey).Append("\n");
            sb.Append("  RancherApiKey: ").Append(RancherApiKey).Append("\n");
            sb.Append("  RancherClusterId: ").Append(RancherClusterId).Append("\n");
            sb.Append("  UseLocalCaJwt: ").Append(UseLocalCaJwt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
