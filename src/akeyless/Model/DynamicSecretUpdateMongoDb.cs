/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// dynamicSecretUpdateMongoDb is a command that updates either mongodb  dynamic secret or mongodb atlas dynamic secret
    /// </summary>
    [DataContract(Name = "dynamicSecretUpdateMongoDb")]
    public partial class DynamicSecretUpdateMongoDb : IEquatable<DynamicSecretUpdateMongoDb>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicSecretUpdateMongoDb" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DynamicSecretUpdateMongoDb() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicSecretUpdateMongoDb" /> class.
        /// </summary>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="mongodbAtlasApiPrivateKey">MongoDB Atlas private key.</param>
        /// <param name="mongodbAtlasApiPublicKey">MongoDB Atlas public key.</param>
        /// <param name="mongodbAtlasProjectId">MongoDB Atlas project ID.</param>
        /// <param name="mongodbCustomData">MongoDB custom data.</param>
        /// <param name="mongodbDefaultAuthDb">MongoDB server default authentication database.</param>
        /// <param name="mongodbHostPort">MongoDB server host and port.</param>
        /// <param name="mongodbName">MongoDB Name.</param>
        /// <param name="mongodbPassword">MongoDB server password. You will prompted to provide a password if it will not appear in CLI parameters.</param>
        /// <param name="mongodbRoles">MongoDB Roles (default to &quot;[]&quot;).</param>
        /// <param name="mongodbServerUri">MongoDB server URI.</param>
        /// <param name="mongodbUriOptions">MongoDB server URI options.</param>
        /// <param name="mongodbUsername">MongoDB server username.</param>
        /// <param name="name">Dynamic secret name (required).</param>
        /// <param name="newName">Dynamic secret new name.</param>
        /// <param name="passwordLength">The length of the password to be generated.</param>
        /// <param name="producerEncryptionKeyName">Encrypt producer with following key.</param>
        /// <param name="secureAccessBastionIssuer">Path to the SSH Certificate Issuer for your Akeyless Bastion.</param>
        /// <param name="secureAccessEnable">Enable/Disable secure remote access [true/false].</param>
        /// <param name="secureAccessHost">Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts).</param>
        /// <param name="secureAccessWeb">Enable Web Secure Remote Access (default to false).</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public DynamicSecretUpdateMongoDb(string deleteProtection = default(string), string description = default(string), bool json = false, string mongodbAtlasApiPrivateKey = default(string), string mongodbAtlasApiPublicKey = default(string), string mongodbAtlasProjectId = default(string), string mongodbCustomData = default(string), string mongodbDefaultAuthDb = default(string), string mongodbHostPort = default(string), string mongodbName = default(string), string mongodbPassword = default(string), string mongodbRoles = "[]", string mongodbServerUri = default(string), string mongodbUriOptions = default(string), string mongodbUsername = default(string), string name = default(string), string newName = default(string), string passwordLength = default(string), string producerEncryptionKeyName = default(string), string secureAccessBastionIssuer = default(string), string secureAccessEnable = default(string), List<string> secureAccessHost = default(List<string>), bool secureAccessWeb = false, List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userTtl = "60m")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DynamicSecretUpdateMongoDb and cannot be null");
            }
            this.Name = name;
            this.DeleteProtection = deleteProtection;
            this.Description = description;
            this.Json = json;
            this.MongodbAtlasApiPrivateKey = mongodbAtlasApiPrivateKey;
            this.MongodbAtlasApiPublicKey = mongodbAtlasApiPublicKey;
            this.MongodbAtlasProjectId = mongodbAtlasProjectId;
            this.MongodbCustomData = mongodbCustomData;
            this.MongodbDefaultAuthDb = mongodbDefaultAuthDb;
            this.MongodbHostPort = mongodbHostPort;
            this.MongodbName = mongodbName;
            this.MongodbPassword = mongodbPassword;
            // use default value if no "mongodbRoles" provided
            this.MongodbRoles = mongodbRoles ?? "[]";
            this.MongodbServerUri = mongodbServerUri;
            this.MongodbUriOptions = mongodbUriOptions;
            this.MongodbUsername = mongodbUsername;
            this.NewName = newName;
            this.PasswordLength = passwordLength;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.SecureAccessBastionIssuer = secureAccessBastionIssuer;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessHost = secureAccessHost;
            this.SecureAccessWeb = secureAccessWeb;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "60m";
        }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// MongoDB Atlas private key
        /// </summary>
        /// <value>MongoDB Atlas private key</value>
        [DataMember(Name = "mongodb-atlas-api-private-key", EmitDefaultValue = false)]
        public string MongodbAtlasApiPrivateKey { get; set; }

        /// <summary>
        /// MongoDB Atlas public key
        /// </summary>
        /// <value>MongoDB Atlas public key</value>
        [DataMember(Name = "mongodb-atlas-api-public-key", EmitDefaultValue = false)]
        public string MongodbAtlasApiPublicKey { get; set; }

        /// <summary>
        /// MongoDB Atlas project ID
        /// </summary>
        /// <value>MongoDB Atlas project ID</value>
        [DataMember(Name = "mongodb-atlas-project-id", EmitDefaultValue = false)]
        public string MongodbAtlasProjectId { get; set; }

        /// <summary>
        /// MongoDB custom data
        /// </summary>
        /// <value>MongoDB custom data</value>
        [DataMember(Name = "mongodb-custom-data", EmitDefaultValue = false)]
        public string MongodbCustomData { get; set; }

        /// <summary>
        /// MongoDB server default authentication database
        /// </summary>
        /// <value>MongoDB server default authentication database</value>
        [DataMember(Name = "mongodb-default-auth-db", EmitDefaultValue = false)]
        public string MongodbDefaultAuthDb { get; set; }

        /// <summary>
        /// MongoDB server host and port
        /// </summary>
        /// <value>MongoDB server host and port</value>
        [DataMember(Name = "mongodb-host-port", EmitDefaultValue = false)]
        public string MongodbHostPort { get; set; }

        /// <summary>
        /// MongoDB Name
        /// </summary>
        /// <value>MongoDB Name</value>
        [DataMember(Name = "mongodb-name", EmitDefaultValue = false)]
        public string MongodbName { get; set; }

        /// <summary>
        /// MongoDB server password. You will prompted to provide a password if it will not appear in CLI parameters
        /// </summary>
        /// <value>MongoDB server password. You will prompted to provide a password if it will not appear in CLI parameters</value>
        [DataMember(Name = "mongodb-password", EmitDefaultValue = false)]
        public string MongodbPassword { get; set; }

        /// <summary>
        /// MongoDB Roles
        /// </summary>
        /// <value>MongoDB Roles</value>
        [DataMember(Name = "mongodb-roles", EmitDefaultValue = false)]
        public string MongodbRoles { get; set; }

        /// <summary>
        /// MongoDB server URI
        /// </summary>
        /// <value>MongoDB server URI</value>
        [DataMember(Name = "mongodb-server-uri", EmitDefaultValue = false)]
        public string MongodbServerUri { get; set; }

        /// <summary>
        /// MongoDB server URI options
        /// </summary>
        /// <value>MongoDB server URI options</value>
        [DataMember(Name = "mongodb-uri-options", EmitDefaultValue = false)]
        public string MongodbUriOptions { get; set; }

        /// <summary>
        /// MongoDB server username
        /// </summary>
        /// <value>MongoDB server username</value>
        [DataMember(Name = "mongodb-username", EmitDefaultValue = false)]
        public string MongodbUsername { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Dynamic secret new name
        /// </summary>
        /// <value>Dynamic secret new name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// The length of the password to be generated
        /// </summary>
        /// <value>The length of the password to be generated</value>
        [DataMember(Name = "password-length", EmitDefaultValue = false)]
        public string PasswordLength { get; set; }

        /// <summary>
        /// Encrypt producer with following key
        /// </summary>
        /// <value>Encrypt producer with following key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Path to the SSH Certificate Issuer for your Akeyless Bastion
        /// </summary>
        /// <value>Path to the SSH Certificate Issuer for your Akeyless Bastion</value>
        [DataMember(Name = "secure-access-bastion-issuer", EmitDefaultValue = false)]
        public string SecureAccessBastionIssuer { get; set; }

        /// <summary>
        /// Enable/Disable secure remote access [true/false]
        /// </summary>
        /// <value>Enable/Disable secure remote access [true/false]</value>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts)
        /// </summary>
        /// <value>Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts)</value>
        [DataMember(Name = "secure-access-host", EmitDefaultValue = false)]
        public List<string> SecureAccessHost { get; set; }

        /// <summary>
        /// Enable Web Secure Remote Access
        /// </summary>
        /// <value>Enable Web Secure Remote Access</value>
        [DataMember(Name = "secure-access-web", EmitDefaultValue = true)]
        public bool SecureAccessWeb { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DynamicSecretUpdateMongoDb {\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  MongodbAtlasApiPrivateKey: ").Append(MongodbAtlasApiPrivateKey).Append("\n");
            sb.Append("  MongodbAtlasApiPublicKey: ").Append(MongodbAtlasApiPublicKey).Append("\n");
            sb.Append("  MongodbAtlasProjectId: ").Append(MongodbAtlasProjectId).Append("\n");
            sb.Append("  MongodbCustomData: ").Append(MongodbCustomData).Append("\n");
            sb.Append("  MongodbDefaultAuthDb: ").Append(MongodbDefaultAuthDb).Append("\n");
            sb.Append("  MongodbHostPort: ").Append(MongodbHostPort).Append("\n");
            sb.Append("  MongodbName: ").Append(MongodbName).Append("\n");
            sb.Append("  MongodbPassword: ").Append(MongodbPassword).Append("\n");
            sb.Append("  MongodbRoles: ").Append(MongodbRoles).Append("\n");
            sb.Append("  MongodbServerUri: ").Append(MongodbServerUri).Append("\n");
            sb.Append("  MongodbUriOptions: ").Append(MongodbUriOptions).Append("\n");
            sb.Append("  MongodbUsername: ").Append(MongodbUsername).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  PasswordLength: ").Append(PasswordLength).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  SecureAccessBastionIssuer: ").Append(SecureAccessBastionIssuer).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessHost: ").Append(SecureAccessHost).Append("\n");
            sb.Append("  SecureAccessWeb: ").Append(SecureAccessWeb).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DynamicSecretUpdateMongoDb);
        }

        /// <summary>
        /// Returns true if DynamicSecretUpdateMongoDb instances are equal
        /// </summary>
        /// <param name="input">Instance of DynamicSecretUpdateMongoDb to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DynamicSecretUpdateMongoDb input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    (this.DeleteProtection != null &&
                    this.DeleteProtection.Equals(input.DeleteProtection))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.MongodbAtlasApiPrivateKey == input.MongodbAtlasApiPrivateKey ||
                    (this.MongodbAtlasApiPrivateKey != null &&
                    this.MongodbAtlasApiPrivateKey.Equals(input.MongodbAtlasApiPrivateKey))
                ) && 
                (
                    this.MongodbAtlasApiPublicKey == input.MongodbAtlasApiPublicKey ||
                    (this.MongodbAtlasApiPublicKey != null &&
                    this.MongodbAtlasApiPublicKey.Equals(input.MongodbAtlasApiPublicKey))
                ) && 
                (
                    this.MongodbAtlasProjectId == input.MongodbAtlasProjectId ||
                    (this.MongodbAtlasProjectId != null &&
                    this.MongodbAtlasProjectId.Equals(input.MongodbAtlasProjectId))
                ) && 
                (
                    this.MongodbCustomData == input.MongodbCustomData ||
                    (this.MongodbCustomData != null &&
                    this.MongodbCustomData.Equals(input.MongodbCustomData))
                ) && 
                (
                    this.MongodbDefaultAuthDb == input.MongodbDefaultAuthDb ||
                    (this.MongodbDefaultAuthDb != null &&
                    this.MongodbDefaultAuthDb.Equals(input.MongodbDefaultAuthDb))
                ) && 
                (
                    this.MongodbHostPort == input.MongodbHostPort ||
                    (this.MongodbHostPort != null &&
                    this.MongodbHostPort.Equals(input.MongodbHostPort))
                ) && 
                (
                    this.MongodbName == input.MongodbName ||
                    (this.MongodbName != null &&
                    this.MongodbName.Equals(input.MongodbName))
                ) && 
                (
                    this.MongodbPassword == input.MongodbPassword ||
                    (this.MongodbPassword != null &&
                    this.MongodbPassword.Equals(input.MongodbPassword))
                ) && 
                (
                    this.MongodbRoles == input.MongodbRoles ||
                    (this.MongodbRoles != null &&
                    this.MongodbRoles.Equals(input.MongodbRoles))
                ) && 
                (
                    this.MongodbServerUri == input.MongodbServerUri ||
                    (this.MongodbServerUri != null &&
                    this.MongodbServerUri.Equals(input.MongodbServerUri))
                ) && 
                (
                    this.MongodbUriOptions == input.MongodbUriOptions ||
                    (this.MongodbUriOptions != null &&
                    this.MongodbUriOptions.Equals(input.MongodbUriOptions))
                ) && 
                (
                    this.MongodbUsername == input.MongodbUsername ||
                    (this.MongodbUsername != null &&
                    this.MongodbUsername.Equals(input.MongodbUsername))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                ) && 
                (
                    this.PasswordLength == input.PasswordLength ||
                    (this.PasswordLength != null &&
                    this.PasswordLength.Equals(input.PasswordLength))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.SecureAccessBastionIssuer == input.SecureAccessBastionIssuer ||
                    (this.SecureAccessBastionIssuer != null &&
                    this.SecureAccessBastionIssuer.Equals(input.SecureAccessBastionIssuer))
                ) && 
                (
                    this.SecureAccessEnable == input.SecureAccessEnable ||
                    (this.SecureAccessEnable != null &&
                    this.SecureAccessEnable.Equals(input.SecureAccessEnable))
                ) && 
                (
                    this.SecureAccessHost == input.SecureAccessHost ||
                    this.SecureAccessHost != null &&
                    input.SecureAccessHost != null &&
                    this.SecureAccessHost.SequenceEqual(input.SecureAccessHost)
                ) && 
                (
                    this.SecureAccessWeb == input.SecureAccessWeb ||
                    this.SecureAccessWeb.Equals(input.SecureAccessWeb)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeleteProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteProtection.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.MongodbAtlasApiPrivateKey != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbAtlasApiPrivateKey.GetHashCode();
                }
                if (this.MongodbAtlasApiPublicKey != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbAtlasApiPublicKey.GetHashCode();
                }
                if (this.MongodbAtlasProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbAtlasProjectId.GetHashCode();
                }
                if (this.MongodbCustomData != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbCustomData.GetHashCode();
                }
                if (this.MongodbDefaultAuthDb != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbDefaultAuthDb.GetHashCode();
                }
                if (this.MongodbHostPort != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbHostPort.GetHashCode();
                }
                if (this.MongodbName != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbName.GetHashCode();
                }
                if (this.MongodbPassword != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbPassword.GetHashCode();
                }
                if (this.MongodbRoles != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbRoles.GetHashCode();
                }
                if (this.MongodbServerUri != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbServerUri.GetHashCode();
                }
                if (this.MongodbUriOptions != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbUriOptions.GetHashCode();
                }
                if (this.MongodbUsername != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbUsername.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NewName != null)
                {
                    hashCode = (hashCode * 59) + this.NewName.GetHashCode();
                }
                if (this.PasswordLength != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordLength.GetHashCode();
                }
                if (this.ProducerEncryptionKeyName != null)
                {
                    hashCode = (hashCode * 59) + this.ProducerEncryptionKeyName.GetHashCode();
                }
                if (this.SecureAccessBastionIssuer != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessBastionIssuer.GetHashCode();
                }
                if (this.SecureAccessEnable != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessEnable.GetHashCode();
                }
                if (this.SecureAccessHost != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessHost.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SecureAccessWeb.GetHashCode();
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TargetName != null)
                {
                    hashCode = (hashCode * 59) + this.TargetName.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UserTtl != null)
                {
                    hashCode = (hashCode * 59) + this.UserTtl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
