/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// createAuthMethodOCI is a command that Creates a new Oracle Auth Method that will be used in the account using OCI principle and groups.
    /// </summary>
    [DataContract(Name = "createAuthMethodOCI")]
    public partial class CreateAuthMethodOCI : IEquatable<CreateAuthMethodOCI>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAuthMethodOCI" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAuthMethodOCI() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAuthMethodOCI" /> class.
        /// </summary>
        /// <param name="accessExpires">Access expiration date in Unix timestamp (select 0 for access without expiry date) (default to 0).</param>
        /// <param name="boundIps">A CIDR whitelist with the IPs that the access is restricted to.</param>
        /// <param name="description">Auth Method description.</param>
        /// <param name="forceSubClaims">if true: enforce role-association must include sub claims.</param>
        /// <param name="groupOcid">A list of required groups ocids (required).</param>
        /// <param name="gwBoundIps">A CIDR whitelist with the GW IPs that the access is restricted to.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="jwtTtl">Jwt TTL (default to 0).</param>
        /// <param name="name">Auth Method name (required).</param>
        /// <param name="tenantOcid">The Oracle Cloud tenant ID (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public CreateAuthMethodOCI(long accessExpires = 0, List<string> boundIps = default(List<string>), string description = default(string), bool forceSubClaims = default(bool), List<string> groupOcid = default(List<string>), List<string> gwBoundIps = default(List<string>), bool json = false, long jwtTtl = 0, string name = default(string), string tenantOcid = default(string), string token = default(string), string uidToken = default(string))
        {
            // to ensure "groupOcid" is required (not null)
            if (groupOcid == null)
            {
                throw new ArgumentNullException("groupOcid is a required property for CreateAuthMethodOCI and cannot be null");
            }
            this.GroupOcid = groupOcid;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateAuthMethodOCI and cannot be null");
            }
            this.Name = name;
            // to ensure "tenantOcid" is required (not null)
            if (tenantOcid == null)
            {
                throw new ArgumentNullException("tenantOcid is a required property for CreateAuthMethodOCI and cannot be null");
            }
            this.TenantOcid = tenantOcid;
            this.AccessExpires = accessExpires;
            this.BoundIps = boundIps;
            this.Description = description;
            this.ForceSubClaims = forceSubClaims;
            this.GwBoundIps = gwBoundIps;
            this.Json = json;
            this.JwtTtl = jwtTtl;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Access expiration date in Unix timestamp (select 0 for access without expiry date)
        /// </summary>
        /// <value>Access expiration date in Unix timestamp (select 0 for access without expiry date)</value>
        [DataMember(Name = "access-expires", EmitDefaultValue = false)]
        public long AccessExpires { get; set; }

        /// <summary>
        /// A CIDR whitelist with the IPs that the access is restricted to
        /// </summary>
        /// <value>A CIDR whitelist with the IPs that the access is restricted to</value>
        [DataMember(Name = "bound-ips", EmitDefaultValue = false)]
        public List<string> BoundIps { get; set; }

        /// <summary>
        /// Auth Method description
        /// </summary>
        /// <value>Auth Method description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// if true: enforce role-association must include sub claims
        /// </summary>
        /// <value>if true: enforce role-association must include sub claims</value>
        [DataMember(Name = "force-sub-claims", EmitDefaultValue = true)]
        public bool ForceSubClaims { get; set; }

        /// <summary>
        /// A list of required groups ocids
        /// </summary>
        /// <value>A list of required groups ocids</value>
        [DataMember(Name = "group-ocid", IsRequired = true, EmitDefaultValue = true)]
        public List<string> GroupOcid { get; set; }

        /// <summary>
        /// A CIDR whitelist with the GW IPs that the access is restricted to
        /// </summary>
        /// <value>A CIDR whitelist with the GW IPs that the access is restricted to</value>
        [DataMember(Name = "gw-bound-ips", EmitDefaultValue = false)]
        public List<string> GwBoundIps { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Jwt TTL
        /// </summary>
        /// <value>Jwt TTL</value>
        [DataMember(Name = "jwt-ttl", EmitDefaultValue = false)]
        public long JwtTtl { get; set; }

        /// <summary>
        /// Auth Method name
        /// </summary>
        /// <value>Auth Method name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The Oracle Cloud tenant ID
        /// </summary>
        /// <value>The Oracle Cloud tenant ID</value>
        [DataMember(Name = "tenant-ocid", IsRequired = true, EmitDefaultValue = true)]
        public string TenantOcid { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAuthMethodOCI {\n");
            sb.Append("  AccessExpires: ").Append(AccessExpires).Append("\n");
            sb.Append("  BoundIps: ").Append(BoundIps).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ForceSubClaims: ").Append(ForceSubClaims).Append("\n");
            sb.Append("  GroupOcid: ").Append(GroupOcid).Append("\n");
            sb.Append("  GwBoundIps: ").Append(GwBoundIps).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  JwtTtl: ").Append(JwtTtl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TenantOcid: ").Append(TenantOcid).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAuthMethodOCI);
        }

        /// <summary>
        /// Returns true if CreateAuthMethodOCI instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAuthMethodOCI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAuthMethodOCI input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessExpires == input.AccessExpires ||
                    this.AccessExpires.Equals(input.AccessExpires)
                ) && 
                (
                    this.BoundIps == input.BoundIps ||
                    this.BoundIps != null &&
                    input.BoundIps != null &&
                    this.BoundIps.SequenceEqual(input.BoundIps)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ForceSubClaims == input.ForceSubClaims ||
                    this.ForceSubClaims.Equals(input.ForceSubClaims)
                ) && 
                (
                    this.GroupOcid == input.GroupOcid ||
                    this.GroupOcid != null &&
                    input.GroupOcid != null &&
                    this.GroupOcid.SequenceEqual(input.GroupOcid)
                ) && 
                (
                    this.GwBoundIps == input.GwBoundIps ||
                    this.GwBoundIps != null &&
                    input.GwBoundIps != null &&
                    this.GwBoundIps.SequenceEqual(input.GwBoundIps)
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.JwtTtl == input.JwtTtl ||
                    this.JwtTtl.Equals(input.JwtTtl)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TenantOcid == input.TenantOcid ||
                    (this.TenantOcid != null &&
                    this.TenantOcid.Equals(input.TenantOcid))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AccessExpires.GetHashCode();
                if (this.BoundIps != null)
                {
                    hashCode = (hashCode * 59) + this.BoundIps.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ForceSubClaims.GetHashCode();
                if (this.GroupOcid != null)
                {
                    hashCode = (hashCode * 59) + this.GroupOcid.GetHashCode();
                }
                if (this.GwBoundIps != null)
                {
                    hashCode = (hashCode * 59) + this.GwBoundIps.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                hashCode = (hashCode * 59) + this.JwtTtl.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.TenantOcid != null)
                {
                    hashCode = (hashCode * 59) + this.TenantOcid.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
