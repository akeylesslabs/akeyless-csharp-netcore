/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// DecryptPKCS1
    /// </summary>
    [DataContract]
    public partial class DecryptPKCS1 :  IEquatable<DecryptPKCS1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DecryptPKCS1" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DecryptPKCS1() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DecryptPKCS1" /> class.
        /// </summary>
        /// <param name="ciphertext">Ciphertext to be decrypted in base64 encoded format (required).</param>
        /// <param name="keyName">The name of the RSA key to use in the decryption process (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public DecryptPKCS1(string ciphertext = default(string), string keyName = default(string), string token = default(string), string uidToken = default(string))
        {
            // to ensure "ciphertext" is required (not null)
            this.Ciphertext = ciphertext ?? throw new ArgumentNullException("ciphertext is a required property for DecryptPKCS1 and cannot be null");
            // to ensure "keyName" is required (not null)
            this.KeyName = keyName ?? throw new ArgumentNullException("keyName is a required property for DecryptPKCS1 and cannot be null");
            this.Token = token;
            this.UidToken = uidToken;
        }
        
        /// <summary>
        /// Ciphertext to be decrypted in base64 encoded format
        /// </summary>
        /// <value>Ciphertext to be decrypted in base64 encoded format</value>
        [DataMember(Name="ciphertext", EmitDefaultValue=false)]
        public string Ciphertext { get; set; }

        /// <summary>
        /// The name of the RSA key to use in the decryption process
        /// </summary>
        /// <value>The name of the RSA key to use in the decryption process</value>
        [DataMember(Name="key-name", EmitDefaultValue=false)]
        public string KeyName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DecryptPKCS1 {\n");
            sb.Append("  Ciphertext: ").Append(Ciphertext).Append("\n");
            sb.Append("  KeyName: ").Append(KeyName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DecryptPKCS1);
        }

        /// <summary>
        /// Returns true if DecryptPKCS1 instances are equal
        /// </summary>
        /// <param name="input">Instance of DecryptPKCS1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DecryptPKCS1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ciphertext == input.Ciphertext ||
                    (this.Ciphertext != null &&
                    this.Ciphertext.Equals(input.Ciphertext))
                ) && 
                (
                    this.KeyName == input.KeyName ||
                    (this.KeyName != null &&
                    this.KeyName.Equals(input.KeyName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ciphertext != null)
                    hashCode = hashCode * 59 + this.Ciphertext.GetHashCode();
                if (this.KeyName != null)
                    hashCode = hashCode * 59 + this.KeyName.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
