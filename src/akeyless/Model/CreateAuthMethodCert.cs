/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// createAuthMethodCert is a command that creates a new auth method that will be able to authenticate using a client certificae
    /// </summary>
    [DataContract(Name = "createAuthMethodCert")]
    public partial class CreateAuthMethodCert : IEquatable<CreateAuthMethodCert>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAuthMethodCert" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAuthMethodCert() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAuthMethodCert" /> class.
        /// </summary>
        /// <param name="accessExpires">Access expiration date in Unix timestamp (select 0 for access without expiry date) (default to 0).</param>
        /// <param name="boundCommonNames">A list of names. At least one must exist in the Common Name. Supports globbing..</param>
        /// <param name="boundDnsSans">A list of DNS names. At least one must exist in the SANs. Supports globbing..</param>
        /// <param name="boundEmailSans">A list of Email Addresses. At least one must exist in the SANs. Supports globbing..</param>
        /// <param name="boundExtensions">A list of extensions formatted as \&quot;oid:value\&quot;. Expects the extension value to be some type of ASN1 encoded string. All values much match. Supports globbing on \&quot;value\&quot;..</param>
        /// <param name="boundIps">A CIDR whitelist with the IPs that the access is restricted to.</param>
        /// <param name="boundOrganizationalUnits">A list of Organizational Units names. At least one must exist in the OU field..</param>
        /// <param name="boundUriSans">A list of URIs. At least one must exist in the SANs. Supports globbing..</param>
        /// <param name="certificateData">The certificate data in base64, if no file was provided.</param>
        /// <param name="forceSubClaims">if true: enforce role-association must include sub claims.</param>
        /// <param name="gwBoundIps">A CIDR whitelist with the GW IPs that the access is restricted to.</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="jwtTtl">Jwt TTL.</param>
        /// <param name="name">Auth Method name (required).</param>
        /// <param name="revokedCertIds">A list of revoked cert ids.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="uniqueIdentifier">A unique identifier (ID) value should be configured, such as common_name or organizational_unit Whenever a user logs in with a token, these authentication types issue a \&quot;sub claim\&quot; that contains details uniquely identifying that user. This sub claim includes a key containing the ID value that you configured, and is used to distinguish between different users from within the same organization. (required).</param>
        public CreateAuthMethodCert(long accessExpires = 0, List<string> boundCommonNames = default(List<string>), List<string> boundDnsSans = default(List<string>), List<string> boundEmailSans = default(List<string>), List<string> boundExtensions = default(List<string>), List<string> boundIps = default(List<string>), List<string> boundOrganizationalUnits = default(List<string>), List<string> boundUriSans = default(List<string>), string certificateData = default(string), bool forceSubClaims = default(bool), List<string> gwBoundIps = default(List<string>), bool json = default(bool), long jwtTtl = default(long), string name = default(string), List<string> revokedCertIds = default(List<string>), string token = default(string), string uidToken = default(string), string uniqueIdentifier = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for CreateAuthMethodCert and cannot be null");
            }
            this.Name = name;
            // to ensure "uniqueIdentifier" is required (not null)
            if (uniqueIdentifier == null) {
                throw new ArgumentNullException("uniqueIdentifier is a required property for CreateAuthMethodCert and cannot be null");
            }
            this.UniqueIdentifier = uniqueIdentifier;
            this.AccessExpires = accessExpires;
            this.BoundCommonNames = boundCommonNames;
            this.BoundDnsSans = boundDnsSans;
            this.BoundEmailSans = boundEmailSans;
            this.BoundExtensions = boundExtensions;
            this.BoundIps = boundIps;
            this.BoundOrganizationalUnits = boundOrganizationalUnits;
            this.BoundUriSans = boundUriSans;
            this.CertificateData = certificateData;
            this.ForceSubClaims = forceSubClaims;
            this.GwBoundIps = gwBoundIps;
            this.Json = json;
            this.JwtTtl = jwtTtl;
            this.RevokedCertIds = revokedCertIds;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Access expiration date in Unix timestamp (select 0 for access without expiry date)
        /// </summary>
        /// <value>Access expiration date in Unix timestamp (select 0 for access without expiry date)</value>
        [DataMember(Name = "access-expires", EmitDefaultValue = false)]
        public long AccessExpires { get; set; }

        /// <summary>
        /// A list of names. At least one must exist in the Common Name. Supports globbing.
        /// </summary>
        /// <value>A list of names. At least one must exist in the Common Name. Supports globbing.</value>
        [DataMember(Name = "bound-common-names", EmitDefaultValue = false)]
        public List<string> BoundCommonNames { get; set; }

        /// <summary>
        /// A list of DNS names. At least one must exist in the SANs. Supports globbing.
        /// </summary>
        /// <value>A list of DNS names. At least one must exist in the SANs. Supports globbing.</value>
        [DataMember(Name = "bound-dns-sans", EmitDefaultValue = false)]
        public List<string> BoundDnsSans { get; set; }

        /// <summary>
        /// A list of Email Addresses. At least one must exist in the SANs. Supports globbing.
        /// </summary>
        /// <value>A list of Email Addresses. At least one must exist in the SANs. Supports globbing.</value>
        [DataMember(Name = "bound-email-sans", EmitDefaultValue = false)]
        public List<string> BoundEmailSans { get; set; }

        /// <summary>
        /// A list of extensions formatted as \&quot;oid:value\&quot;. Expects the extension value to be some type of ASN1 encoded string. All values much match. Supports globbing on \&quot;value\&quot;.
        /// </summary>
        /// <value>A list of extensions formatted as \&quot;oid:value\&quot;. Expects the extension value to be some type of ASN1 encoded string. All values much match. Supports globbing on \&quot;value\&quot;.</value>
        [DataMember(Name = "bound-extensions", EmitDefaultValue = false)]
        public List<string> BoundExtensions { get; set; }

        /// <summary>
        /// A CIDR whitelist with the IPs that the access is restricted to
        /// </summary>
        /// <value>A CIDR whitelist with the IPs that the access is restricted to</value>
        [DataMember(Name = "bound-ips", EmitDefaultValue = false)]
        public List<string> BoundIps { get; set; }

        /// <summary>
        /// A list of Organizational Units names. At least one must exist in the OU field.
        /// </summary>
        /// <value>A list of Organizational Units names. At least one must exist in the OU field.</value>
        [DataMember(Name = "bound-organizational-units", EmitDefaultValue = false)]
        public List<string> BoundOrganizationalUnits { get; set; }

        /// <summary>
        /// A list of URIs. At least one must exist in the SANs. Supports globbing.
        /// </summary>
        /// <value>A list of URIs. At least one must exist in the SANs. Supports globbing.</value>
        [DataMember(Name = "bound-uri-sans", EmitDefaultValue = false)]
        public List<string> BoundUriSans { get; set; }

        /// <summary>
        /// The certificate data in base64, if no file was provided
        /// </summary>
        /// <value>The certificate data in base64, if no file was provided</value>
        [DataMember(Name = "certificate-data", EmitDefaultValue = false)]
        public string CertificateData { get; set; }

        /// <summary>
        /// if true: enforce role-association must include sub claims
        /// </summary>
        /// <value>if true: enforce role-association must include sub claims</value>
        [DataMember(Name = "force-sub-claims", EmitDefaultValue = true)]
        public bool ForceSubClaims { get; set; }

        /// <summary>
        /// A CIDR whitelist with the GW IPs that the access is restricted to
        /// </summary>
        /// <value>A CIDR whitelist with the GW IPs that the access is restricted to</value>
        [DataMember(Name = "gw-bound-ips", EmitDefaultValue = false)]
        public List<string> GwBoundIps { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Jwt TTL
        /// </summary>
        /// <value>Jwt TTL</value>
        [DataMember(Name = "jwt-ttl", EmitDefaultValue = false)]
        public long JwtTtl { get; set; }

        /// <summary>
        /// Auth Method name
        /// </summary>
        /// <value>Auth Method name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A list of revoked cert ids
        /// </summary>
        /// <value>A list of revoked cert ids</value>
        [DataMember(Name = "revoked-cert-ids", EmitDefaultValue = false)]
        public List<string> RevokedCertIds { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// A unique identifier (ID) value should be configured, such as common_name or organizational_unit Whenever a user logs in with a token, these authentication types issue a \&quot;sub claim\&quot; that contains details uniquely identifying that user. This sub claim includes a key containing the ID value that you configured, and is used to distinguish between different users from within the same organization.
        /// </summary>
        /// <value>A unique identifier (ID) value should be configured, such as common_name or organizational_unit Whenever a user logs in with a token, these authentication types issue a \&quot;sub claim\&quot; that contains details uniquely identifying that user. This sub claim includes a key containing the ID value that you configured, and is used to distinguish between different users from within the same organization.</value>
        [DataMember(Name = "unique-identifier", IsRequired = true, EmitDefaultValue = false)]
        public string UniqueIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAuthMethodCert {\n");
            sb.Append("  AccessExpires: ").Append(AccessExpires).Append("\n");
            sb.Append("  BoundCommonNames: ").Append(BoundCommonNames).Append("\n");
            sb.Append("  BoundDnsSans: ").Append(BoundDnsSans).Append("\n");
            sb.Append("  BoundEmailSans: ").Append(BoundEmailSans).Append("\n");
            sb.Append("  BoundExtensions: ").Append(BoundExtensions).Append("\n");
            sb.Append("  BoundIps: ").Append(BoundIps).Append("\n");
            sb.Append("  BoundOrganizationalUnits: ").Append(BoundOrganizationalUnits).Append("\n");
            sb.Append("  BoundUriSans: ").Append(BoundUriSans).Append("\n");
            sb.Append("  CertificateData: ").Append(CertificateData).Append("\n");
            sb.Append("  ForceSubClaims: ").Append(ForceSubClaims).Append("\n");
            sb.Append("  GwBoundIps: ").Append(GwBoundIps).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  JwtTtl: ").Append(JwtTtl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RevokedCertIds: ").Append(RevokedCertIds).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UniqueIdentifier: ").Append(UniqueIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAuthMethodCert);
        }

        /// <summary>
        /// Returns true if CreateAuthMethodCert instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAuthMethodCert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAuthMethodCert input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessExpires == input.AccessExpires ||
                    this.AccessExpires.Equals(input.AccessExpires)
                ) && 
                (
                    this.BoundCommonNames == input.BoundCommonNames ||
                    this.BoundCommonNames != null &&
                    input.BoundCommonNames != null &&
                    this.BoundCommonNames.SequenceEqual(input.BoundCommonNames)
                ) && 
                (
                    this.BoundDnsSans == input.BoundDnsSans ||
                    this.BoundDnsSans != null &&
                    input.BoundDnsSans != null &&
                    this.BoundDnsSans.SequenceEqual(input.BoundDnsSans)
                ) && 
                (
                    this.BoundEmailSans == input.BoundEmailSans ||
                    this.BoundEmailSans != null &&
                    input.BoundEmailSans != null &&
                    this.BoundEmailSans.SequenceEqual(input.BoundEmailSans)
                ) && 
                (
                    this.BoundExtensions == input.BoundExtensions ||
                    this.BoundExtensions != null &&
                    input.BoundExtensions != null &&
                    this.BoundExtensions.SequenceEqual(input.BoundExtensions)
                ) && 
                (
                    this.BoundIps == input.BoundIps ||
                    this.BoundIps != null &&
                    input.BoundIps != null &&
                    this.BoundIps.SequenceEqual(input.BoundIps)
                ) && 
                (
                    this.BoundOrganizationalUnits == input.BoundOrganizationalUnits ||
                    this.BoundOrganizationalUnits != null &&
                    input.BoundOrganizationalUnits != null &&
                    this.BoundOrganizationalUnits.SequenceEqual(input.BoundOrganizationalUnits)
                ) && 
                (
                    this.BoundUriSans == input.BoundUriSans ||
                    this.BoundUriSans != null &&
                    input.BoundUriSans != null &&
                    this.BoundUriSans.SequenceEqual(input.BoundUriSans)
                ) && 
                (
                    this.CertificateData == input.CertificateData ||
                    (this.CertificateData != null &&
                    this.CertificateData.Equals(input.CertificateData))
                ) && 
                (
                    this.ForceSubClaims == input.ForceSubClaims ||
                    this.ForceSubClaims.Equals(input.ForceSubClaims)
                ) && 
                (
                    this.GwBoundIps == input.GwBoundIps ||
                    this.GwBoundIps != null &&
                    input.GwBoundIps != null &&
                    this.GwBoundIps.SequenceEqual(input.GwBoundIps)
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.JwtTtl == input.JwtTtl ||
                    this.JwtTtl.Equals(input.JwtTtl)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RevokedCertIds == input.RevokedCertIds ||
                    this.RevokedCertIds != null &&
                    input.RevokedCertIds != null &&
                    this.RevokedCertIds.SequenceEqual(input.RevokedCertIds)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UniqueIdentifier == input.UniqueIdentifier ||
                    (this.UniqueIdentifier != null &&
                    this.UniqueIdentifier.Equals(input.UniqueIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AccessExpires.GetHashCode();
                if (this.BoundCommonNames != null)
                    hashCode = hashCode * 59 + this.BoundCommonNames.GetHashCode();
                if (this.BoundDnsSans != null)
                    hashCode = hashCode * 59 + this.BoundDnsSans.GetHashCode();
                if (this.BoundEmailSans != null)
                    hashCode = hashCode * 59 + this.BoundEmailSans.GetHashCode();
                if (this.BoundExtensions != null)
                    hashCode = hashCode * 59 + this.BoundExtensions.GetHashCode();
                if (this.BoundIps != null)
                    hashCode = hashCode * 59 + this.BoundIps.GetHashCode();
                if (this.BoundOrganizationalUnits != null)
                    hashCode = hashCode * 59 + this.BoundOrganizationalUnits.GetHashCode();
                if (this.BoundUriSans != null)
                    hashCode = hashCode * 59 + this.BoundUriSans.GetHashCode();
                if (this.CertificateData != null)
                    hashCode = hashCode * 59 + this.CertificateData.GetHashCode();
                hashCode = hashCode * 59 + this.ForceSubClaims.GetHashCode();
                if (this.GwBoundIps != null)
                    hashCode = hashCode * 59 + this.GwBoundIps.GetHashCode();
                hashCode = hashCode * 59 + this.Json.GetHashCode();
                hashCode = hashCode * 59 + this.JwtTtl.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RevokedCertIds != null)
                    hashCode = hashCode * 59 + this.RevokedCertIds.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.UniqueIdentifier != null)
                    hashCode = hashCode * 59 + this.UniqueIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
