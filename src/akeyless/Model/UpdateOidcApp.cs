/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UpdateOidcApp
    /// </summary>
    [DataContract(Name = "updateOidcApp")]
    public partial class UpdateOidcApp : IEquatable<UpdateOidcApp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateOidcApp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateOidcApp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateOidcApp" /> class.
        /// </summary>
        /// <param name="audience">A comma separated list of allowed audiences.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="key">The name of a key that used to encrypt the OIDC application (if empty, the account default protectionKey key will be used).</param>
        /// <param name="name">OIDC application name (required).</param>
        /// <param name="permissionAssignment">A json string defining the access permission assignment for this app.</param>
        /// <param name="_public">Set to true if the app is public (cannot keep secrets).</param>
        /// <param name="redirectUris">A comma separated list of allowed redirect uris.</param>
        /// <param name="scopes">A comma separated list of allowed scopes (default to &quot;openid&quot;).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public UpdateOidcApp(string audience = default(string), bool json = false, string key = default(string), string name = default(string), string permissionAssignment = default(string), bool _public = default(bool), string redirectUris = default(string), string scopes = "openid", string token = default(string), string uidToken = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UpdateOidcApp and cannot be null");
            }
            this.Name = name;
            this.Audience = audience;
            this.Json = json;
            this.Key = key;
            this.PermissionAssignment = permissionAssignment;
            this.Public = _public;
            this.RedirectUris = redirectUris;
            // use default value if no "scopes" provided
            this.Scopes = scopes ?? "openid";
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// A comma separated list of allowed audiences
        /// </summary>
        /// <value>A comma separated list of allowed audiences</value>
        [DataMember(Name = "audience", EmitDefaultValue = false)]
        public string Audience { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the OIDC application (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the OIDC application (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// OIDC application name
        /// </summary>
        /// <value>OIDC application name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// A json string defining the access permission assignment for this app
        /// </summary>
        /// <value>A json string defining the access permission assignment for this app</value>
        [DataMember(Name = "permission-assignment", EmitDefaultValue = false)]
        public string PermissionAssignment { get; set; }

        /// <summary>
        /// Set to true if the app is public (cannot keep secrets)
        /// </summary>
        /// <value>Set to true if the app is public (cannot keep secrets)</value>
        [DataMember(Name = "public", EmitDefaultValue = true)]
        public bool Public { get; set; }

        /// <summary>
        /// A comma separated list of allowed redirect uris
        /// </summary>
        /// <value>A comma separated list of allowed redirect uris</value>
        [DataMember(Name = "redirect-uris", EmitDefaultValue = false)]
        public string RedirectUris { get; set; }

        /// <summary>
        /// A comma separated list of allowed scopes
        /// </summary>
        /// <value>A comma separated list of allowed scopes</value>
        [DataMember(Name = "scopes", EmitDefaultValue = false)]
        public string Scopes { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateOidcApp {\n");
            sb.Append("  Audience: ").Append(Audience).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PermissionAssignment: ").Append(PermissionAssignment).Append("\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("  RedirectUris: ").Append(RedirectUris).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateOidcApp);
        }

        /// <summary>
        /// Returns true if UpdateOidcApp instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateOidcApp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateOidcApp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Audience == input.Audience ||
                    (this.Audience != null &&
                    this.Audience.Equals(input.Audience))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PermissionAssignment == input.PermissionAssignment ||
                    (this.PermissionAssignment != null &&
                    this.PermissionAssignment.Equals(input.PermissionAssignment))
                ) && 
                (
                    this.Public == input.Public ||
                    this.Public.Equals(input.Public)
                ) && 
                (
                    this.RedirectUris == input.RedirectUris ||
                    (this.RedirectUris != null &&
                    this.RedirectUris.Equals(input.RedirectUris))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    (this.Scopes != null &&
                    this.Scopes.Equals(input.Scopes))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Audience != null)
                {
                    hashCode = (hashCode * 59) + this.Audience.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.PermissionAssignment != null)
                {
                    hashCode = (hashCode * 59) + this.PermissionAssignment.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Public.GetHashCode();
                if (this.RedirectUris != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUris.GetHashCode();
                }
                if (this.Scopes != null)
                {
                    hashCode = (hashCode * 59) + this.Scopes.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
