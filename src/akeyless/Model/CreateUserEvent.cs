/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CreateUserEvent
    /// </summary>
    [DataContract(Name = "createUserEvent")]
    public partial class CreateUserEvent : IEquatable<CreateUserEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateUserEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserEvent" /> class.
        /// </summary>
        /// <param name="capabilities">List of the required capabilities options: [read, update, delete,sra_transparently_connect]. Relevant only for request-access event types.</param>
        /// <param name="comment">Deprecated - use description.</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="eventSource">eventSource.</param>
        /// <param name="eventType">eventType (required).</param>
        /// <param name="itemName">EventItemName Event item name (required).</param>
        /// <param name="itemType">EventItemType Event item type (required).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="requestAccessTtl">For how long to grant the requested access, in minutes.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public CreateUserEvent(List<string> capabilities = default(List<string>), string comment = default(string), string description = default(string), string eventSource = default(string), string eventType = default(string), string itemName = default(string), string itemType = default(string), bool json = false, long requestAccessTtl = default(long), string token = default(string), string uidToken = default(string))
        {
            // to ensure "eventType" is required (not null)
            if (eventType == null)
            {
                throw new ArgumentNullException("eventType is a required property for CreateUserEvent and cannot be null");
            }
            this.EventType = eventType;
            // to ensure "itemName" is required (not null)
            if (itemName == null)
            {
                throw new ArgumentNullException("itemName is a required property for CreateUserEvent and cannot be null");
            }
            this.ItemName = itemName;
            // to ensure "itemType" is required (not null)
            if (itemType == null)
            {
                throw new ArgumentNullException("itemType is a required property for CreateUserEvent and cannot be null");
            }
            this.ItemType = itemType;
            this.Capabilities = capabilities;
            this.Comment = comment;
            this.Description = description;
            this.EventSource = eventSource;
            this.Json = json;
            this.RequestAccessTtl = requestAccessTtl;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// List of the required capabilities options: [read, update, delete,sra_transparently_connect]. Relevant only for request-access event types
        /// </summary>
        /// <value>List of the required capabilities options: [read, update, delete,sra_transparently_connect]. Relevant only for request-access event types</value>
        [DataMember(Name = "capabilities", EmitDefaultValue = false)]
        public List<string> Capabilities { get; set; }

        /// <summary>
        /// Deprecated - use description
        /// </summary>
        /// <value>Deprecated - use description</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EventSource
        /// </summary>
        [DataMember(Name = "event-source", EmitDefaultValue = false)]
        public string EventSource { get; set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name = "event-type", IsRequired = true, EmitDefaultValue = true)]
        public string EventType { get; set; }

        /// <summary>
        /// EventItemName Event item name
        /// </summary>
        /// <value>EventItemName Event item name</value>
        [DataMember(Name = "item-name", IsRequired = true, EmitDefaultValue = true)]
        public string ItemName { get; set; }

        /// <summary>
        /// EventItemType Event item type
        /// </summary>
        /// <value>EventItemType Event item type</value>
        [DataMember(Name = "item-type", IsRequired = true, EmitDefaultValue = true)]
        public string ItemType { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// For how long to grant the requested access, in minutes
        /// </summary>
        /// <value>For how long to grant the requested access, in minutes</value>
        [DataMember(Name = "request-access-ttl", EmitDefaultValue = false)]
        public long RequestAccessTtl { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateUserEvent {\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EventSource: ").Append(EventSource).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  RequestAccessTtl: ").Append(RequestAccessTtl).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateUserEvent);
        }

        /// <summary>
        /// Returns true if CreateUserEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateUserEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateUserEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Capabilities == input.Capabilities ||
                    this.Capabilities != null &&
                    input.Capabilities != null &&
                    this.Capabilities.SequenceEqual(input.Capabilities)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EventSource == input.EventSource ||
                    (this.EventSource != null &&
                    this.EventSource.Equals(input.EventSource))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.ItemName == input.ItemName ||
                    (this.ItemName != null &&
                    this.ItemName.Equals(input.ItemName))
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    (this.ItemType != null &&
                    this.ItemType.Equals(input.ItemType))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.RequestAccessTtl == input.RequestAccessTtl ||
                    this.RequestAccessTtl.Equals(input.RequestAccessTtl)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Capabilities != null)
                {
                    hashCode = (hashCode * 59) + this.Capabilities.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.EventSource != null)
                {
                    hashCode = (hashCode * 59) + this.EventSource.GetHashCode();
                }
                if (this.EventType != null)
                {
                    hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                }
                if (this.ItemName != null)
                {
                    hashCode = (hashCode * 59) + this.ItemName.GetHashCode();
                }
                if (this.ItemType != null)
                {
                    hashCode = (hashCode * 59) + this.ItemType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                hashCode = (hashCode * 59) + this.RequestAccessTtl.GetHashCode();
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
