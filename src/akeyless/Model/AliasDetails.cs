/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// AliasDetails
    /// </summary>
    [DataContract(Name = "aliasDetails")]
    public partial class AliasDetails : IEquatable<AliasDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AliasDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AliasDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AliasDetails" /> class.
        /// </summary>
        /// <param name="accountAlias">Account alias (required).</param>
        /// <param name="authMethodName">Auth method name (required).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        public AliasDetails(string accountAlias = default(string), string authMethodName = default(string), bool json = false)
        {
            // to ensure "accountAlias" is required (not null)
            if (accountAlias == null)
            {
                throw new ArgumentNullException("accountAlias is a required property for AliasDetails and cannot be null");
            }
            this.AccountAlias = accountAlias;
            // to ensure "authMethodName" is required (not null)
            if (authMethodName == null)
            {
                throw new ArgumentNullException("authMethodName is a required property for AliasDetails and cannot be null");
            }
            this.AuthMethodName = authMethodName;
            this.Json = json;
        }

        /// <summary>
        /// Account alias
        /// </summary>
        /// <value>Account alias</value>
        [DataMember(Name = "account-alias", IsRequired = true, EmitDefaultValue = true)]
        public string AccountAlias { get; set; }

        /// <summary>
        /// Auth method name
        /// </summary>
        /// <value>Auth method name</value>
        [DataMember(Name = "auth-method-name", IsRequired = true, EmitDefaultValue = true)]
        public string AuthMethodName { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AliasDetails {\n");
            sb.Append("  AccountAlias: ").Append(AccountAlias).Append("\n");
            sb.Append("  AuthMethodName: ").Append(AuthMethodName).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AliasDetails);
        }

        /// <summary>
        /// Returns true if AliasDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of AliasDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AliasDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountAlias == input.AccountAlias ||
                    (this.AccountAlias != null &&
                    this.AccountAlias.Equals(input.AccountAlias))
                ) && 
                (
                    this.AuthMethodName == input.AuthMethodName ||
                    (this.AuthMethodName != null &&
                    this.AuthMethodName.Equals(input.AuthMethodName))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountAlias != null)
                {
                    hashCode = (hashCode * 59) + this.AccountAlias.GetHashCode();
                }
                if (this.AuthMethodName != null)
                {
                    hashCode = (hashCode * 59) + this.AuthMethodName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
