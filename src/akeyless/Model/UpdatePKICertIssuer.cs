/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UpdatePKICertIssuer
    /// </summary>
    [DataContract(Name = "UpdatePKICertIssuer")]
    public partial class UpdatePKICertIssuer : IEquatable<UpdatePKICertIssuer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePKICertIssuer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdatePKICertIssuer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePKICertIssuer" /> class.
        /// </summary>
        /// <param name="addTag">List of the new tags that will be attached to this item.</param>
        /// <param name="allowAnyName">If set, clients can request certificates for any CN.</param>
        /// <param name="allowSubdomains">If set, clients can request certificates for subdomains and wildcard subdomains of the allowed domains.</param>
        /// <param name="allowedDomains">A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list).</param>
        /// <param name="allowedUriSans">A list of the allowed URIs that clients can request to be included in the certificate as part of the URI Subject Alternative Names (in a comma-delimited list).</param>
        /// <param name="clientFlag">If set, certificates will be flagged for client auth use.</param>
        /// <param name="codeSigningFlag">If set, certificates will be flagged for code signing use.</param>
        /// <param name="country">A comma-separated list of the country that will be set in the issued certificate.</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="keyUsage">key-usage (default to &quot;DigitalSignature,KeyAgreement,KeyEncipherment&quot;).</param>
        /// <param name="locality">A comma-separated list of the locality that will be set in the issued certificate.</param>
        /// <param name="metadata">A metadata about the issuer.</param>
        /// <param name="name">PKI certificate issuer name (required).</param>
        /// <param name="newName">New item name.</param>
        /// <param name="notEnforceHostnames">If set, any names are allowed for CN and SANs in the certificate and not only a valid host name.</param>
        /// <param name="notRequireCn">If set, clients can request certificates without a CN.</param>
        /// <param name="organizationalUnits">A comma-separated list of organizational units (OU) that will be set in the issued certificate.</param>
        /// <param name="organizations">A comma-separated list of organizations (O) that will be set in the issued certificate.</param>
        /// <param name="postalCode">A comma-separated list of the postal code that will be set in the issued certificate.</param>
        /// <param name="province">A comma-separated list of the province that will be set in the issued certificate.</param>
        /// <param name="rmTag">List of the existent tags that will be removed from this item.</param>
        /// <param name="serverFlag">If set, certificates will be flagged for server auth use.</param>
        /// <param name="signerKeyName">A key to sign the certificate with (required).</param>
        /// <param name="streetAddress">A comma-separated list of the street address that will be set in the issued certificate.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="ttl">he requested Time To Live for the certificate, in seconds (required).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public UpdatePKICertIssuer(List<string> addTag = default(List<string>), bool allowAnyName = default(bool), bool allowSubdomains = default(bool), string allowedDomains = default(string), string allowedUriSans = default(string), bool clientFlag = default(bool), bool codeSigningFlag = default(bool), string country = default(string), bool json = default(bool), string keyUsage = "DigitalSignature,KeyAgreement,KeyEncipherment", string locality = default(string), string metadata = default(string), string name = default(string), string newName = default(string), bool notEnforceHostnames = default(bool), bool notRequireCn = default(bool), string organizationalUnits = default(string), string organizations = default(string), string postalCode = default(string), string province = default(string), List<string> rmTag = default(List<string>), bool serverFlag = default(bool), string signerKeyName = default(string), string streetAddress = default(string), string token = default(string), long ttl = default(long), string uidToken = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UpdatePKICertIssuer and cannot be null");
            }
            this.Name = name;
            // to ensure "signerKeyName" is required (not null)
            if (signerKeyName == null)
            {
                throw new ArgumentNullException("signerKeyName is a required property for UpdatePKICertIssuer and cannot be null");
            }
            this.SignerKeyName = signerKeyName;
            this.Ttl = ttl;
            this.AddTag = addTag;
            this.AllowAnyName = allowAnyName;
            this.AllowSubdomains = allowSubdomains;
            this.AllowedDomains = allowedDomains;
            this.AllowedUriSans = allowedUriSans;
            this.ClientFlag = clientFlag;
            this.CodeSigningFlag = codeSigningFlag;
            this.Country = country;
            this.Json = json;
            // use default value if no "keyUsage" provided
            this.KeyUsage = keyUsage ?? "DigitalSignature,KeyAgreement,KeyEncipherment";
            this.Locality = locality;
            this.Metadata = metadata;
            this.NewName = newName;
            this.NotEnforceHostnames = notEnforceHostnames;
            this.NotRequireCn = notRequireCn;
            this.OrganizationalUnits = organizationalUnits;
            this.Organizations = organizations;
            this.PostalCode = postalCode;
            this.Province = province;
            this.RmTag = rmTag;
            this.ServerFlag = serverFlag;
            this.StreetAddress = streetAddress;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// List of the new tags that will be attached to this item
        /// </summary>
        /// <value>List of the new tags that will be attached to this item</value>
        [DataMember(Name = "add-tag", EmitDefaultValue = false)]
        public List<string> AddTag { get; set; }

        /// <summary>
        /// If set, clients can request certificates for any CN
        /// </summary>
        /// <value>If set, clients can request certificates for any CN</value>
        [DataMember(Name = "allow-any-name", EmitDefaultValue = true)]
        public bool AllowAnyName { get; set; }

        /// <summary>
        /// If set, clients can request certificates for subdomains and wildcard subdomains of the allowed domains
        /// </summary>
        /// <value>If set, clients can request certificates for subdomains and wildcard subdomains of the allowed domains</value>
        [DataMember(Name = "allow-subdomains", EmitDefaultValue = true)]
        public bool AllowSubdomains { get; set; }

        /// <summary>
        /// A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list)
        /// </summary>
        /// <value>A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list)</value>
        [DataMember(Name = "allowed-domains", EmitDefaultValue = false)]
        public string AllowedDomains { get; set; }

        /// <summary>
        /// A list of the allowed URIs that clients can request to be included in the certificate as part of the URI Subject Alternative Names (in a comma-delimited list)
        /// </summary>
        /// <value>A list of the allowed URIs that clients can request to be included in the certificate as part of the URI Subject Alternative Names (in a comma-delimited list)</value>
        [DataMember(Name = "allowed-uri-sans", EmitDefaultValue = false)]
        public string AllowedUriSans { get; set; }

        /// <summary>
        /// If set, certificates will be flagged for client auth use
        /// </summary>
        /// <value>If set, certificates will be flagged for client auth use</value>
        [DataMember(Name = "client-flag", EmitDefaultValue = true)]
        public bool ClientFlag { get; set; }

        /// <summary>
        /// If set, certificates will be flagged for code signing use
        /// </summary>
        /// <value>If set, certificates will be flagged for code signing use</value>
        [DataMember(Name = "code-signing-flag", EmitDefaultValue = true)]
        public bool CodeSigningFlag { get; set; }

        /// <summary>
        /// A comma-separated list of the country that will be set in the issued certificate
        /// </summary>
        /// <value>A comma-separated list of the country that will be set in the issued certificate</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// key-usage
        /// </summary>
        /// <value>key-usage</value>
        [DataMember(Name = "key-usage", EmitDefaultValue = false)]
        public string KeyUsage { get; set; }

        /// <summary>
        /// A comma-separated list of the locality that will be set in the issued certificate
        /// </summary>
        /// <value>A comma-separated list of the locality that will be set in the issued certificate</value>
        [DataMember(Name = "locality", EmitDefaultValue = false)]
        public string Locality { get; set; }

        /// <summary>
        /// A metadata about the issuer
        /// </summary>
        /// <value>A metadata about the issuer</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// PKI certificate issuer name
        /// </summary>
        /// <value>PKI certificate issuer name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// New item name
        /// </summary>
        /// <value>New item name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// If set, any names are allowed for CN and SANs in the certificate and not only a valid host name
        /// </summary>
        /// <value>If set, any names are allowed for CN and SANs in the certificate and not only a valid host name</value>
        [DataMember(Name = "not-enforce-hostnames", EmitDefaultValue = true)]
        public bool NotEnforceHostnames { get; set; }

        /// <summary>
        /// If set, clients can request certificates without a CN
        /// </summary>
        /// <value>If set, clients can request certificates without a CN</value>
        [DataMember(Name = "not-require-cn", EmitDefaultValue = true)]
        public bool NotRequireCn { get; set; }

        /// <summary>
        /// A comma-separated list of organizational units (OU) that will be set in the issued certificate
        /// </summary>
        /// <value>A comma-separated list of organizational units (OU) that will be set in the issued certificate</value>
        [DataMember(Name = "organizational-units", EmitDefaultValue = false)]
        public string OrganizationalUnits { get; set; }

        /// <summary>
        /// A comma-separated list of organizations (O) that will be set in the issued certificate
        /// </summary>
        /// <value>A comma-separated list of organizations (O) that will be set in the issued certificate</value>
        [DataMember(Name = "organizations", EmitDefaultValue = false)]
        public string Organizations { get; set; }

        /// <summary>
        /// A comma-separated list of the postal code that will be set in the issued certificate
        /// </summary>
        /// <value>A comma-separated list of the postal code that will be set in the issued certificate</value>
        [DataMember(Name = "postal-code", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// A comma-separated list of the province that will be set in the issued certificate
        /// </summary>
        /// <value>A comma-separated list of the province that will be set in the issued certificate</value>
        [DataMember(Name = "province", EmitDefaultValue = false)]
        public string Province { get; set; }

        /// <summary>
        /// List of the existent tags that will be removed from this item
        /// </summary>
        /// <value>List of the existent tags that will be removed from this item</value>
        [DataMember(Name = "rm-tag", EmitDefaultValue = false)]
        public List<string> RmTag { get; set; }

        /// <summary>
        /// If set, certificates will be flagged for server auth use
        /// </summary>
        /// <value>If set, certificates will be flagged for server auth use</value>
        [DataMember(Name = "server-flag", EmitDefaultValue = true)]
        public bool ServerFlag { get; set; }

        /// <summary>
        /// A key to sign the certificate with
        /// </summary>
        /// <value>A key to sign the certificate with</value>
        [DataMember(Name = "signer-key-name", IsRequired = true, EmitDefaultValue = true)]
        public string SignerKeyName { get; set; }

        /// <summary>
        /// A comma-separated list of the street address that will be set in the issued certificate
        /// </summary>
        /// <value>A comma-separated list of the street address that will be set in the issued certificate</value>
        [DataMember(Name = "street-address", EmitDefaultValue = false)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// he requested Time To Live for the certificate, in seconds
        /// </summary>
        /// <value>he requested Time To Live for the certificate, in seconds</value>
        [DataMember(Name = "ttl", IsRequired = true, EmitDefaultValue = true)]
        public long Ttl { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdatePKICertIssuer {\n");
            sb.Append("  AddTag: ").Append(AddTag).Append("\n");
            sb.Append("  AllowAnyName: ").Append(AllowAnyName).Append("\n");
            sb.Append("  AllowSubdomains: ").Append(AllowSubdomains).Append("\n");
            sb.Append("  AllowedDomains: ").Append(AllowedDomains).Append("\n");
            sb.Append("  AllowedUriSans: ").Append(AllowedUriSans).Append("\n");
            sb.Append("  ClientFlag: ").Append(ClientFlag).Append("\n");
            sb.Append("  CodeSigningFlag: ").Append(CodeSigningFlag).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeyUsage: ").Append(KeyUsage).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  NotEnforceHostnames: ").Append(NotEnforceHostnames).Append("\n");
            sb.Append("  NotRequireCn: ").Append(NotRequireCn).Append("\n");
            sb.Append("  OrganizationalUnits: ").Append(OrganizationalUnits).Append("\n");
            sb.Append("  Organizations: ").Append(Organizations).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  RmTag: ").Append(RmTag).Append("\n");
            sb.Append("  ServerFlag: ").Append(ServerFlag).Append("\n");
            sb.Append("  SignerKeyName: ").Append(SignerKeyName).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdatePKICertIssuer);
        }

        /// <summary>
        /// Returns true if UpdatePKICertIssuer instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdatePKICertIssuer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdatePKICertIssuer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AddTag == input.AddTag ||
                    this.AddTag != null &&
                    input.AddTag != null &&
                    this.AddTag.SequenceEqual(input.AddTag)
                ) && 
                (
                    this.AllowAnyName == input.AllowAnyName ||
                    this.AllowAnyName.Equals(input.AllowAnyName)
                ) && 
                (
                    this.AllowSubdomains == input.AllowSubdomains ||
                    this.AllowSubdomains.Equals(input.AllowSubdomains)
                ) && 
                (
                    this.AllowedDomains == input.AllowedDomains ||
                    (this.AllowedDomains != null &&
                    this.AllowedDomains.Equals(input.AllowedDomains))
                ) && 
                (
                    this.AllowedUriSans == input.AllowedUriSans ||
                    (this.AllowedUriSans != null &&
                    this.AllowedUriSans.Equals(input.AllowedUriSans))
                ) && 
                (
                    this.ClientFlag == input.ClientFlag ||
                    this.ClientFlag.Equals(input.ClientFlag)
                ) && 
                (
                    this.CodeSigningFlag == input.CodeSigningFlag ||
                    this.CodeSigningFlag.Equals(input.CodeSigningFlag)
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.KeyUsage == input.KeyUsage ||
                    (this.KeyUsage != null &&
                    this.KeyUsage.Equals(input.KeyUsage))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                ) && 
                (
                    this.NotEnforceHostnames == input.NotEnforceHostnames ||
                    this.NotEnforceHostnames.Equals(input.NotEnforceHostnames)
                ) && 
                (
                    this.NotRequireCn == input.NotRequireCn ||
                    this.NotRequireCn.Equals(input.NotRequireCn)
                ) && 
                (
                    this.OrganizationalUnits == input.OrganizationalUnits ||
                    (this.OrganizationalUnits != null &&
                    this.OrganizationalUnits.Equals(input.OrganizationalUnits))
                ) && 
                (
                    this.Organizations == input.Organizations ||
                    (this.Organizations != null &&
                    this.Organizations.Equals(input.Organizations))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Province == input.Province ||
                    (this.Province != null &&
                    this.Province.Equals(input.Province))
                ) && 
                (
                    this.RmTag == input.RmTag ||
                    this.RmTag != null &&
                    input.RmTag != null &&
                    this.RmTag.SequenceEqual(input.RmTag)
                ) && 
                (
                    this.ServerFlag == input.ServerFlag ||
                    this.ServerFlag.Equals(input.ServerFlag)
                ) && 
                (
                    this.SignerKeyName == input.SignerKeyName ||
                    (this.SignerKeyName != null &&
                    this.SignerKeyName.Equals(input.SignerKeyName))
                ) && 
                (
                    this.StreetAddress == input.StreetAddress ||
                    (this.StreetAddress != null &&
                    this.StreetAddress.Equals(input.StreetAddress))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Ttl == input.Ttl ||
                    this.Ttl.Equals(input.Ttl)
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddTag != null)
                {
                    hashCode = (hashCode * 59) + this.AddTag.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowAnyName.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowSubdomains.GetHashCode();
                if (this.AllowedDomains != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedDomains.GetHashCode();
                }
                if (this.AllowedUriSans != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedUriSans.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClientFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.CodeSigningFlag.GetHashCode();
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.KeyUsage != null)
                {
                    hashCode = (hashCode * 59) + this.KeyUsage.GetHashCode();
                }
                if (this.Locality != null)
                {
                    hashCode = (hashCode * 59) + this.Locality.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NewName != null)
                {
                    hashCode = (hashCode * 59) + this.NewName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotEnforceHostnames.GetHashCode();
                hashCode = (hashCode * 59) + this.NotRequireCn.GetHashCode();
                if (this.OrganizationalUnits != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationalUnits.GetHashCode();
                }
                if (this.Organizations != null)
                {
                    hashCode = (hashCode * 59) + this.Organizations.GetHashCode();
                }
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.Province != null)
                {
                    hashCode = (hashCode * 59) + this.Province.GetHashCode();
                }
                if (this.RmTag != null)
                {
                    hashCode = (hashCode * 59) + this.RmTag.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ServerFlag.GetHashCode();
                if (this.SignerKeyName != null)
                {
                    hashCode = (hashCode * 59) + this.SignerKeyName.GetHashCode();
                }
                if (this.StreetAddress != null)
                {
                    hashCode = (hashCode * 59) + this.StreetAddress.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Ttl.GetHashCode();
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
