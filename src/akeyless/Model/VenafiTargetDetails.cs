/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// VenafiTargetDetails
    /// </summary>
    [DataContract(Name = "VenafiTargetDetails")]
    public partial class VenafiTargetDetails : IEquatable<VenafiTargetDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VenafiTargetDetails" /> class.
        /// </summary>
        /// <param name="venafiApiKey">venafiApiKey.</param>
        /// <param name="venafiBaseUrl">venafiBaseUrl.</param>
        /// <param name="venafiTppAccessToken">venafiTppAccessToken.</param>
        /// <param name="venafiTppClientId">venafiTppClientId.</param>
        /// <param name="venafiTppPassword">Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead.</param>
        /// <param name="venafiTppRefreshToken">venafiTppRefreshToken.</param>
        /// <param name="venafiTppUsername">Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead.</param>
        /// <param name="venafiUseTpp">venafiUseTpp.</param>
        /// <param name="venafiZone">venafiZone.</param>
        public VenafiTargetDetails(string venafiApiKey = default(string), string venafiBaseUrl = default(string), string venafiTppAccessToken = default(string), string venafiTppClientId = default(string), string venafiTppPassword = default(string), string venafiTppRefreshToken = default(string), string venafiTppUsername = default(string), bool venafiUseTpp = default(bool), string venafiZone = default(string))
        {
            this.VenafiApiKey = venafiApiKey;
            this.VenafiBaseUrl = venafiBaseUrl;
            this.VenafiTppAccessToken = venafiTppAccessToken;
            this.VenafiTppClientId = venafiTppClientId;
            this.VenafiTppPassword = venafiTppPassword;
            this.VenafiTppRefreshToken = venafiTppRefreshToken;
            this.VenafiTppUsername = venafiTppUsername;
            this.VenafiUseTpp = venafiUseTpp;
            this.VenafiZone = venafiZone;
        }

        /// <summary>
        /// Gets or Sets VenafiApiKey
        /// </summary>
        [DataMember(Name = "venafi_api_key", EmitDefaultValue = false)]
        public string VenafiApiKey { get; set; }

        /// <summary>
        /// Gets or Sets VenafiBaseUrl
        /// </summary>
        [DataMember(Name = "venafi_base_url", EmitDefaultValue = false)]
        public string VenafiBaseUrl { get; set; }

        /// <summary>
        /// Gets or Sets VenafiTppAccessToken
        /// </summary>
        [DataMember(Name = "venafi_tpp_access_token", EmitDefaultValue = false)]
        public string VenafiTppAccessToken { get; set; }

        /// <summary>
        /// Gets or Sets VenafiTppClientId
        /// </summary>
        [DataMember(Name = "venafi_tpp_client_id", EmitDefaultValue = false)]
        public string VenafiTppClientId { get; set; }

        /// <summary>
        /// Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead
        /// </summary>
        /// <value>Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead</value>
        [DataMember(Name = "venafi_tpp_password", EmitDefaultValue = false)]
        public string VenafiTppPassword { get; set; }

        /// <summary>
        /// Gets or Sets VenafiTppRefreshToken
        /// </summary>
        [DataMember(Name = "venafi_tpp_refresh_token", EmitDefaultValue = false)]
        public string VenafiTppRefreshToken { get; set; }

        /// <summary>
        /// Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead
        /// </summary>
        /// <value>Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead</value>
        [DataMember(Name = "venafi_tpp_username", EmitDefaultValue = false)]
        public string VenafiTppUsername { get; set; }

        /// <summary>
        /// Gets or Sets VenafiUseTpp
        /// </summary>
        [DataMember(Name = "venafi_use_tpp", EmitDefaultValue = true)]
        public bool VenafiUseTpp { get; set; }

        /// <summary>
        /// Gets or Sets VenafiZone
        /// </summary>
        [DataMember(Name = "venafi_zone", EmitDefaultValue = false)]
        public string VenafiZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VenafiTargetDetails {\n");
            sb.Append("  VenafiApiKey: ").Append(VenafiApiKey).Append("\n");
            sb.Append("  VenafiBaseUrl: ").Append(VenafiBaseUrl).Append("\n");
            sb.Append("  VenafiTppAccessToken: ").Append(VenafiTppAccessToken).Append("\n");
            sb.Append("  VenafiTppClientId: ").Append(VenafiTppClientId).Append("\n");
            sb.Append("  VenafiTppPassword: ").Append(VenafiTppPassword).Append("\n");
            sb.Append("  VenafiTppRefreshToken: ").Append(VenafiTppRefreshToken).Append("\n");
            sb.Append("  VenafiTppUsername: ").Append(VenafiTppUsername).Append("\n");
            sb.Append("  VenafiUseTpp: ").Append(VenafiUseTpp).Append("\n");
            sb.Append("  VenafiZone: ").Append(VenafiZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VenafiTargetDetails);
        }

        /// <summary>
        /// Returns true if VenafiTargetDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of VenafiTargetDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VenafiTargetDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VenafiApiKey == input.VenafiApiKey ||
                    (this.VenafiApiKey != null &&
                    this.VenafiApiKey.Equals(input.VenafiApiKey))
                ) && 
                (
                    this.VenafiBaseUrl == input.VenafiBaseUrl ||
                    (this.VenafiBaseUrl != null &&
                    this.VenafiBaseUrl.Equals(input.VenafiBaseUrl))
                ) && 
                (
                    this.VenafiTppAccessToken == input.VenafiTppAccessToken ||
                    (this.VenafiTppAccessToken != null &&
                    this.VenafiTppAccessToken.Equals(input.VenafiTppAccessToken))
                ) && 
                (
                    this.VenafiTppClientId == input.VenafiTppClientId ||
                    (this.VenafiTppClientId != null &&
                    this.VenafiTppClientId.Equals(input.VenafiTppClientId))
                ) && 
                (
                    this.VenafiTppPassword == input.VenafiTppPassword ||
                    (this.VenafiTppPassword != null &&
                    this.VenafiTppPassword.Equals(input.VenafiTppPassword))
                ) && 
                (
                    this.VenafiTppRefreshToken == input.VenafiTppRefreshToken ||
                    (this.VenafiTppRefreshToken != null &&
                    this.VenafiTppRefreshToken.Equals(input.VenafiTppRefreshToken))
                ) && 
                (
                    this.VenafiTppUsername == input.VenafiTppUsername ||
                    (this.VenafiTppUsername != null &&
                    this.VenafiTppUsername.Equals(input.VenafiTppUsername))
                ) && 
                (
                    this.VenafiUseTpp == input.VenafiUseTpp ||
                    this.VenafiUseTpp.Equals(input.VenafiUseTpp)
                ) && 
                (
                    this.VenafiZone == input.VenafiZone ||
                    (this.VenafiZone != null &&
                    this.VenafiZone.Equals(input.VenafiZone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VenafiApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.VenafiApiKey.GetHashCode();
                }
                if (this.VenafiBaseUrl != null)
                {
                    hashCode = (hashCode * 59) + this.VenafiBaseUrl.GetHashCode();
                }
                if (this.VenafiTppAccessToken != null)
                {
                    hashCode = (hashCode * 59) + this.VenafiTppAccessToken.GetHashCode();
                }
                if (this.VenafiTppClientId != null)
                {
                    hashCode = (hashCode * 59) + this.VenafiTppClientId.GetHashCode();
                }
                if (this.VenafiTppPassword != null)
                {
                    hashCode = (hashCode * 59) + this.VenafiTppPassword.GetHashCode();
                }
                if (this.VenafiTppRefreshToken != null)
                {
                    hashCode = (hashCode * 59) + this.VenafiTppRefreshToken.GetHashCode();
                }
                if (this.VenafiTppUsername != null)
                {
                    hashCode = (hashCode * 59) + this.VenafiTppUsername.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VenafiUseTpp.GetHashCode();
                if (this.VenafiZone != null)
                {
                    hashCode = (hashCode * 59) + this.VenafiZone.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
