/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// updateEventForwarder is a command that updates an event forwarder [Deprecated - please use event-forwarder-update-* command]
    /// </summary>
    [DataContract(Name = "updateEventForwarder")]
    public partial class UpdateEventForwarder : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateEventForwarder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateEventForwarder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateEventForwarder" /> class.
        /// </summary>
        /// <param name="adminName">Workstation Admin Name.</param>
        /// <param name="authType">The authentication type to use when connecting to ServiceNow (user-pass / jwt) (default to &quot;user-pass&quot;).</param>
        /// <param name="clientId">The client ID to use when connecting to ServiceNow with jwt authentication.</param>
        /// <param name="description">Description of the object (default to &quot;default_comment&quot;).</param>
        /// <param name="emailTo">A comma seperated list of email addresses to send event to (relevant only for \&quot;email\&quot; Event Forwarder).</param>
        /// <param name="enable">Enable/Disable Event Forwarder [true/false] (default to &quot;true&quot;).</param>
        /// <param name="eventSourceLocations">Event sources.</param>
        /// <param name="eventTypes">Event types.</param>
        /// <param name="host">Workstation Host.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">EventForwarder name (required).</param>
        /// <param name="newComment">Deprecated - use description (default to &quot;default_comment&quot;).</param>
        /// <param name="newName">New EventForwarder name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userEmail">The user email to use when connecting to ServiceNow with jwt authentication.</param>
        public UpdateEventForwarder(string adminName = default(string), string authType = @"user-pass", string clientId = default(string), string description = @"default_comment", string emailTo = default(string), string enable = @"true", List<string> eventSourceLocations = default(List<string>), List<string> eventTypes = default(List<string>), string host = default(string), bool json = false, string name = default(string), string newComment = @"default_comment", string newName = default(string), string token = default(string), string uidToken = default(string), string userEmail = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UpdateEventForwarder and cannot be null");
            }
            this.Name = name;
            this.AdminName = adminName;
            // use default value if no "authType" provided
            this.AuthType = authType ?? @"user-pass";
            this.ClientId = clientId;
            // use default value if no "description" provided
            this.Description = description ?? @"default_comment";
            this.EmailTo = emailTo;
            // use default value if no "enable" provided
            this.Enable = enable ?? @"true";
            this.EventSourceLocations = eventSourceLocations;
            this.EventTypes = eventTypes;
            this.Host = host;
            this.Json = json;
            // use default value if no "newComment" provided
            this.NewComment = newComment ?? @"default_comment";
            this.NewName = newName;
            this.Token = token;
            this.UidToken = uidToken;
            this.UserEmail = userEmail;
        }

        /// <summary>
        /// Workstation Admin Name
        /// </summary>
        /// <value>Workstation Admin Name</value>
        [DataMember(Name = "admin-name", EmitDefaultValue = false)]
        public string AdminName { get; set; }

        /// <summary>
        /// The authentication type to use when connecting to ServiceNow (user-pass / jwt)
        /// </summary>
        /// <value>The authentication type to use when connecting to ServiceNow (user-pass / jwt)</value>
        [DataMember(Name = "auth-type", EmitDefaultValue = false)]
        public string AuthType { get; set; }

        /// <summary>
        /// The client ID to use when connecting to ServiceNow with jwt authentication
        /// </summary>
        /// <value>The client ID to use when connecting to ServiceNow with jwt authentication</value>
        [DataMember(Name = "client-id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// A comma seperated list of email addresses to send event to (relevant only for \&quot;email\&quot; Event Forwarder)
        /// </summary>
        /// <value>A comma seperated list of email addresses to send event to (relevant only for \&quot;email\&quot; Event Forwarder)</value>
        [DataMember(Name = "email-to", EmitDefaultValue = false)]
        public string EmailTo { get; set; }

        /// <summary>
        /// Enable/Disable Event Forwarder [true/false]
        /// </summary>
        /// <value>Enable/Disable Event Forwarder [true/false]</value>
        [DataMember(Name = "enable", EmitDefaultValue = false)]
        public string Enable { get; set; }

        /// <summary>
        /// Event sources
        /// </summary>
        /// <value>Event sources</value>
        [DataMember(Name = "event-source-locations", EmitDefaultValue = false)]
        public List<string> EventSourceLocations { get; set; }

        /// <summary>
        /// Event types
        /// </summary>
        /// <value>Event types</value>
        [DataMember(Name = "event-types", EmitDefaultValue = false)]
        public List<string> EventTypes { get; set; }

        /// <summary>
        /// Workstation Host
        /// </summary>
        /// <value>Workstation Host</value>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// EventForwarder name
        /// </summary>
        /// <value>EventForwarder name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Deprecated - use description
        /// </summary>
        /// <value>Deprecated - use description</value>
        [DataMember(Name = "new-comment", EmitDefaultValue = false)]
        public string NewComment { get; set; }

        /// <summary>
        /// New EventForwarder name
        /// </summary>
        /// <value>New EventForwarder name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// The user email to use when connecting to ServiceNow with jwt authentication
        /// </summary>
        /// <value>The user email to use when connecting to ServiceNow with jwt authentication</value>
        [DataMember(Name = "user-email", EmitDefaultValue = false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateEventForwarder {\n");
            sb.Append("  AdminName: ").Append(AdminName).Append("\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EmailTo: ").Append(EmailTo).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  EventSourceLocations: ").Append(EventSourceLocations).Append("\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewComment: ").Append(NewComment).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
