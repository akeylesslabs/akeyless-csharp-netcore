/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// LogForwardingConfigPart
    /// </summary>
    [DataContract]
    public partial class LogForwardingConfigPart :  IEquatable<LogForwardingConfigPart>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogForwardingConfigPart" /> class.
        /// </summary>
        /// <param name="awsS3Config">awsS3Config.</param>
        /// <param name="azureAnalyticsConfig">azureAnalyticsConfig.</param>
        /// <param name="elasticsearchConfig">elasticsearchConfig.</param>
        /// <param name="loganEnable">loganEnable.</param>
        /// <param name="loganUrl">loganUrl.</param>
        /// <param name="logstashConfig">logstashConfig.</param>
        /// <param name="logzIoConfig">logzIoConfig.</param>
        /// <param name="pullIntervalSec">pullIntervalSec.</param>
        /// <param name="splunkConfig">splunkConfig.</param>
        /// <param name="syslogConfig">syslogConfig.</param>
        /// <param name="targetLogType">targetLogType.</param>
        public LogForwardingConfigPart(AwsS3LogForwardingConfig awsS3Config = default(AwsS3LogForwardingConfig), AzureLogAnalyticsForwardingConfig azureAnalyticsConfig = default(AzureLogAnalyticsForwardingConfig), ElasticsearchLogForwardingConfig elasticsearchConfig = default(ElasticsearchLogForwardingConfig), bool loganEnable = default(bool), string loganUrl = default(string), LogstashLogForwardingConfig logstashConfig = default(LogstashLogForwardingConfig), LogzIoLogForwardingConfig logzIoConfig = default(LogzIoLogForwardingConfig), string pullIntervalSec = default(string), SplunkLogForwardingConfig splunkConfig = default(SplunkLogForwardingConfig), SyslogLogForwardingConfig syslogConfig = default(SyslogLogForwardingConfig), string targetLogType = default(string))
        {
            this.AwsS3Config = awsS3Config;
            this.AzureAnalyticsConfig = azureAnalyticsConfig;
            this.ElasticsearchConfig = elasticsearchConfig;
            this.LoganEnable = loganEnable;
            this.LoganUrl = loganUrl;
            this.LogstashConfig = logstashConfig;
            this.LogzIoConfig = logzIoConfig;
            this.PullIntervalSec = pullIntervalSec;
            this.SplunkConfig = splunkConfig;
            this.SyslogConfig = syslogConfig;
            this.TargetLogType = targetLogType;
        }
        
        /// <summary>
        /// Gets or Sets AwsS3Config
        /// </summary>
        [DataMember(Name="aws_s3_config", EmitDefaultValue=false)]
        public AwsS3LogForwardingConfig AwsS3Config { get; set; }

        /// <summary>
        /// Gets or Sets AzureAnalyticsConfig
        /// </summary>
        [DataMember(Name="azure_analytics_config", EmitDefaultValue=false)]
        public AzureLogAnalyticsForwardingConfig AzureAnalyticsConfig { get; set; }

        /// <summary>
        /// Gets or Sets ElasticsearchConfig
        /// </summary>
        [DataMember(Name="elasticsearch_config", EmitDefaultValue=false)]
        public ElasticsearchLogForwardingConfig ElasticsearchConfig { get; set; }

        /// <summary>
        /// Gets or Sets LoganEnable
        /// </summary>
        [DataMember(Name="logan_enable", EmitDefaultValue=false)]
        public bool LoganEnable { get; set; }

        /// <summary>
        /// Gets or Sets LoganUrl
        /// </summary>
        [DataMember(Name="logan_url", EmitDefaultValue=false)]
        public string LoganUrl { get; set; }

        /// <summary>
        /// Gets or Sets LogstashConfig
        /// </summary>
        [DataMember(Name="logstash_config", EmitDefaultValue=false)]
        public LogstashLogForwardingConfig LogstashConfig { get; set; }

        /// <summary>
        /// Gets or Sets LogzIoConfig
        /// </summary>
        [DataMember(Name="logz_io_config", EmitDefaultValue=false)]
        public LogzIoLogForwardingConfig LogzIoConfig { get; set; }

        /// <summary>
        /// Gets or Sets PullIntervalSec
        /// </summary>
        [DataMember(Name="pull_interval_sec", EmitDefaultValue=false)]
        public string PullIntervalSec { get; set; }

        /// <summary>
        /// Gets or Sets SplunkConfig
        /// </summary>
        [DataMember(Name="splunk_config", EmitDefaultValue=false)]
        public SplunkLogForwardingConfig SplunkConfig { get; set; }

        /// <summary>
        /// Gets or Sets SyslogConfig
        /// </summary>
        [DataMember(Name="syslog_config", EmitDefaultValue=false)]
        public SyslogLogForwardingConfig SyslogConfig { get; set; }

        /// <summary>
        /// Gets or Sets TargetLogType
        /// </summary>
        [DataMember(Name="target_log_type", EmitDefaultValue=false)]
        public string TargetLogType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogForwardingConfigPart {\n");
            sb.Append("  AwsS3Config: ").Append(AwsS3Config).Append("\n");
            sb.Append("  AzureAnalyticsConfig: ").Append(AzureAnalyticsConfig).Append("\n");
            sb.Append("  ElasticsearchConfig: ").Append(ElasticsearchConfig).Append("\n");
            sb.Append("  LoganEnable: ").Append(LoganEnable).Append("\n");
            sb.Append("  LoganUrl: ").Append(LoganUrl).Append("\n");
            sb.Append("  LogstashConfig: ").Append(LogstashConfig).Append("\n");
            sb.Append("  LogzIoConfig: ").Append(LogzIoConfig).Append("\n");
            sb.Append("  PullIntervalSec: ").Append(PullIntervalSec).Append("\n");
            sb.Append("  SplunkConfig: ").Append(SplunkConfig).Append("\n");
            sb.Append("  SyslogConfig: ").Append(SyslogConfig).Append("\n");
            sb.Append("  TargetLogType: ").Append(TargetLogType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogForwardingConfigPart);
        }

        /// <summary>
        /// Returns true if LogForwardingConfigPart instances are equal
        /// </summary>
        /// <param name="input">Instance of LogForwardingConfigPart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogForwardingConfigPart input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AwsS3Config == input.AwsS3Config ||
                    (this.AwsS3Config != null &&
                    this.AwsS3Config.Equals(input.AwsS3Config))
                ) && 
                (
                    this.AzureAnalyticsConfig == input.AzureAnalyticsConfig ||
                    (this.AzureAnalyticsConfig != null &&
                    this.AzureAnalyticsConfig.Equals(input.AzureAnalyticsConfig))
                ) && 
                (
                    this.ElasticsearchConfig == input.ElasticsearchConfig ||
                    (this.ElasticsearchConfig != null &&
                    this.ElasticsearchConfig.Equals(input.ElasticsearchConfig))
                ) && 
                (
                    this.LoganEnable == input.LoganEnable ||
                    this.LoganEnable.Equals(input.LoganEnable)
                ) && 
                (
                    this.LoganUrl == input.LoganUrl ||
                    (this.LoganUrl != null &&
                    this.LoganUrl.Equals(input.LoganUrl))
                ) && 
                (
                    this.LogstashConfig == input.LogstashConfig ||
                    (this.LogstashConfig != null &&
                    this.LogstashConfig.Equals(input.LogstashConfig))
                ) && 
                (
                    this.LogzIoConfig == input.LogzIoConfig ||
                    (this.LogzIoConfig != null &&
                    this.LogzIoConfig.Equals(input.LogzIoConfig))
                ) && 
                (
                    this.PullIntervalSec == input.PullIntervalSec ||
                    (this.PullIntervalSec != null &&
                    this.PullIntervalSec.Equals(input.PullIntervalSec))
                ) && 
                (
                    this.SplunkConfig == input.SplunkConfig ||
                    (this.SplunkConfig != null &&
                    this.SplunkConfig.Equals(input.SplunkConfig))
                ) && 
                (
                    this.SyslogConfig == input.SyslogConfig ||
                    (this.SyslogConfig != null &&
                    this.SyslogConfig.Equals(input.SyslogConfig))
                ) && 
                (
                    this.TargetLogType == input.TargetLogType ||
                    (this.TargetLogType != null &&
                    this.TargetLogType.Equals(input.TargetLogType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AwsS3Config != null)
                    hashCode = hashCode * 59 + this.AwsS3Config.GetHashCode();
                if (this.AzureAnalyticsConfig != null)
                    hashCode = hashCode * 59 + this.AzureAnalyticsConfig.GetHashCode();
                if (this.ElasticsearchConfig != null)
                    hashCode = hashCode * 59 + this.ElasticsearchConfig.GetHashCode();
                hashCode = hashCode * 59 + this.LoganEnable.GetHashCode();
                if (this.LoganUrl != null)
                    hashCode = hashCode * 59 + this.LoganUrl.GetHashCode();
                if (this.LogstashConfig != null)
                    hashCode = hashCode * 59 + this.LogstashConfig.GetHashCode();
                if (this.LogzIoConfig != null)
                    hashCode = hashCode * 59 + this.LogzIoConfig.GetHashCode();
                if (this.PullIntervalSec != null)
                    hashCode = hashCode * 59 + this.PullIntervalSec.GetHashCode();
                if (this.SplunkConfig != null)
                    hashCode = hashCode * 59 + this.SplunkConfig.GetHashCode();
                if (this.SyslogConfig != null)
                    hashCode = hashCode * 59 + this.SyslogConfig.GetHashCode();
                if (this.TargetLogType != null)
                    hashCode = hashCode * 59 + this.TargetLogType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
