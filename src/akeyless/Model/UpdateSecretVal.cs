/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UpdateSecretVal
    /// </summary>
    [DataContract(Name = "updateSecretVal")]
    public partial class UpdateSecretVal : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSecretVal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateSecretVal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSecretVal" /> class.
        /// </summary>
        /// <param name="accessibility">for personal password manager (default to &quot;regular&quot;).</param>
        /// <param name="customField">For Password Management use, additional fields.</param>
        /// <param name="format">Secret format [text/json/key-value] (relevant only for type &#39;generic&#39;) (default to &quot;text&quot;).</param>
        /// <param name="injectUrl">For Password Management use, reflect the website context.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="keepPrevVersion">Whether to keep previous version [true/false]. If not set, use default according to account settings.</param>
        /// <param name="key">The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="lastVersion">The last version number before the update.</param>
        /// <param name="multiline">The provided value is a multiline value (separated by &#39;\\n&#39;).</param>
        /// <param name="name">Secret name (required).</param>
        /// <param name="newVersion">Deprecated.</param>
        /// <param name="password">For Password Management use, additional fields.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="username">For Password Management use.</param>
        /// <param name="value">The secret value (relevant only for type &#39;generic&#39;) (required).</param>
        public UpdateSecretVal(string accessibility = @"regular", Dictionary<string, string> customField = default(Dictionary<string, string>), string format = @"text", List<string> injectUrl = default(List<string>), bool json = false, string keepPrevVersion = default(string), string key = default(string), int lastVersion = default(int), bool multiline = default(bool), string name = default(string), bool newVersion = default(bool), string password = default(string), string token = default(string), string uidToken = default(string), string username = default(string), string value = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UpdateSecretVal and cannot be null");
            }
            this.Name = name;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for UpdateSecretVal and cannot be null");
            }
            this.Value = value;
            // use default value if no "accessibility" provided
            this.Accessibility = accessibility ?? @"regular";
            this.CustomField = customField;
            // use default value if no "format" provided
            this.Format = format ?? @"text";
            this.InjectUrl = injectUrl;
            this.Json = json;
            this.KeepPrevVersion = keepPrevVersion;
            this.Key = key;
            this.LastVersion = lastVersion;
            this.Multiline = multiline;
            this.NewVersion = newVersion;
            this.Password = password;
            this.Token = token;
            this.UidToken = uidToken;
            this.Username = username;
        }

        /// <summary>
        /// for personal password manager
        /// </summary>
        /// <value>for personal password manager</value>
        [DataMember(Name = "accessibility", EmitDefaultValue = false)]
        public string Accessibility { get; set; }

        /// <summary>
        /// For Password Management use, additional fields
        /// </summary>
        /// <value>For Password Management use, additional fields</value>
        [DataMember(Name = "custom-field", EmitDefaultValue = false)]
        public Dictionary<string, string> CustomField { get; set; }

        /// <summary>
        /// Secret format [text/json/key-value] (relevant only for type &#39;generic&#39;)
        /// </summary>
        /// <value>Secret format [text/json/key-value] (relevant only for type &#39;generic&#39;)</value>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public string Format { get; set; }

        /// <summary>
        /// For Password Management use, reflect the website context
        /// </summary>
        /// <value>For Password Management use, reflect the website context</value>
        [DataMember(Name = "inject-url", EmitDefaultValue = false)]
        public List<string> InjectUrl { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Whether to keep previous version [true/false]. If not set, use default according to account settings
        /// </summary>
        /// <value>Whether to keep previous version [true/false]. If not set, use default according to account settings</value>
        [DataMember(Name = "keep-prev-version", EmitDefaultValue = false)]
        public string KeepPrevVersion { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// The last version number before the update
        /// </summary>
        /// <value>The last version number before the update</value>
        [DataMember(Name = "last-version", EmitDefaultValue = false)]
        public int LastVersion { get; set; }

        /// <summary>
        /// The provided value is a multiline value (separated by &#39;\\n&#39;)
        /// </summary>
        /// <value>The provided value is a multiline value (separated by &#39;\\n&#39;)</value>
        [DataMember(Name = "multiline", EmitDefaultValue = true)]
        public bool Multiline { get; set; }

        /// <summary>
        /// Secret name
        /// </summary>
        /// <value>Secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Deprecated
        /// </summary>
        /// <value>Deprecated</value>
        [DataMember(Name = "new-version", EmitDefaultValue = true)]
        public bool NewVersion { get; set; }

        /// <summary>
        /// For Password Management use, additional fields
        /// </summary>
        /// <value>For Password Management use, additional fields</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// For Password Management use
        /// </summary>
        /// <value>For Password Management use</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// The secret value (relevant only for type &#39;generic&#39;)
        /// </summary>
        /// <value>The secret value (relevant only for type &#39;generic&#39;)</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateSecretVal {\n");
            sb.Append("  Accessibility: ").Append(Accessibility).Append("\n");
            sb.Append("  CustomField: ").Append(CustomField).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  InjectUrl: ").Append(InjectUrl).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeepPrevVersion: ").Append(KeepPrevVersion).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  LastVersion: ").Append(LastVersion).Append("\n");
            sb.Append("  Multiline: ").Append(Multiline).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewVersion: ").Append(NewVersion).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
