/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UpdateSecretVal
    /// </summary>
    [DataContract(Name = "updateSecretVal")]
    public partial class UpdateSecretVal : IEquatable<UpdateSecretVal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSecretVal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateSecretVal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSecretVal" /> class.
        /// </summary>
        /// <param name="accessibility">for personal password manager.</param>
        /// <param name="keepPrevVersion">keepPrevVersion.</param>
        /// <param name="key">The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="multiline">The provided value is a multiline value (separated by &#39;\\n&#39;).</param>
        /// <param name="name">Secret name (required).</param>
        /// <param name="newVersion">Deprecated.</param>
        /// <param name="passwordManagerCustomField">For Password Management use, additional fields.</param>
        /// <param name="passwordManagerInjectUrl">For Password Management use, reflect the website context.</param>
        /// <param name="passwordManagerPassword">For Password Management use, additional fields.</param>
        /// <param name="passwordManagerUsername">For Password Management use.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="value">The new secret value (required).</param>
        public UpdateSecretVal(string accessibility = default(string), string keepPrevVersion = default(string), string key = default(string), bool multiline = default(bool), string name = default(string), bool newVersion = default(bool), Dictionary<string, string> passwordManagerCustomField = default(Dictionary<string, string>), string passwordManagerInjectUrl = default(string), string passwordManagerPassword = default(string), string passwordManagerUsername = default(string), string token = default(string), string uidToken = default(string), string value = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for UpdateSecretVal and cannot be null");
            }
            this.Name = name;
            // to ensure "value" is required (not null)
            if (value == null) {
                throw new ArgumentNullException("value is a required property for UpdateSecretVal and cannot be null");
            }
            this.Value = value;
            this.Accessibility = accessibility;
            this.KeepPrevVersion = keepPrevVersion;
            this.Key = key;
            this.Multiline = multiline;
            this.NewVersion = newVersion;
            this.PasswordManagerCustomField = passwordManagerCustomField;
            this.PasswordManagerInjectUrl = passwordManagerInjectUrl;
            this.PasswordManagerPassword = passwordManagerPassword;
            this.PasswordManagerUsername = passwordManagerUsername;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// for personal password manager
        /// </summary>
        /// <value>for personal password manager</value>
        [DataMember(Name = "accessibility", EmitDefaultValue = false)]
        public string Accessibility { get; set; }

        /// <summary>
        /// Gets or Sets KeepPrevVersion
        /// </summary>
        [DataMember(Name = "keep-prev-version", EmitDefaultValue = false)]
        public string KeepPrevVersion { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// The provided value is a multiline value (separated by &#39;\\n&#39;)
        /// </summary>
        /// <value>The provided value is a multiline value (separated by &#39;\\n&#39;)</value>
        [DataMember(Name = "multiline", EmitDefaultValue = true)]
        public bool Multiline { get; set; }

        /// <summary>
        /// Secret name
        /// </summary>
        /// <value>Secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Deprecated
        /// </summary>
        /// <value>Deprecated</value>
        [DataMember(Name = "new-version", EmitDefaultValue = true)]
        public bool NewVersion { get; set; }

        /// <summary>
        /// For Password Management use, additional fields
        /// </summary>
        /// <value>For Password Management use, additional fields</value>
        [DataMember(Name = "password-manager-custom-field", EmitDefaultValue = false)]
        public Dictionary<string, string> PasswordManagerCustomField { get; set; }

        /// <summary>
        /// For Password Management use, reflect the website context
        /// </summary>
        /// <value>For Password Management use, reflect the website context</value>
        [DataMember(Name = "password-manager-inject-url", EmitDefaultValue = false)]
        public string PasswordManagerInjectUrl { get; set; }

        /// <summary>
        /// For Password Management use, additional fields
        /// </summary>
        /// <value>For Password Management use, additional fields</value>
        [DataMember(Name = "password-manager-password", EmitDefaultValue = false)]
        public string PasswordManagerPassword { get; set; }

        /// <summary>
        /// For Password Management use
        /// </summary>
        /// <value>For Password Management use</value>
        [DataMember(Name = "password-manager-username", EmitDefaultValue = false)]
        public string PasswordManagerUsername { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// The new secret value
        /// </summary>
        /// <value>The new secret value</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateSecretVal {\n");
            sb.Append("  Accessibility: ").Append(Accessibility).Append("\n");
            sb.Append("  KeepPrevVersion: ").Append(KeepPrevVersion).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Multiline: ").Append(Multiline).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewVersion: ").Append(NewVersion).Append("\n");
            sb.Append("  PasswordManagerCustomField: ").Append(PasswordManagerCustomField).Append("\n");
            sb.Append("  PasswordManagerInjectUrl: ").Append(PasswordManagerInjectUrl).Append("\n");
            sb.Append("  PasswordManagerPassword: ").Append(PasswordManagerPassword).Append("\n");
            sb.Append("  PasswordManagerUsername: ").Append(PasswordManagerUsername).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateSecretVal);
        }

        /// <summary>
        /// Returns true if UpdateSecretVal instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateSecretVal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateSecretVal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Accessibility == input.Accessibility ||
                    (this.Accessibility != null &&
                    this.Accessibility.Equals(input.Accessibility))
                ) && 
                (
                    this.KeepPrevVersion == input.KeepPrevVersion ||
                    (this.KeepPrevVersion != null &&
                    this.KeepPrevVersion.Equals(input.KeepPrevVersion))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Multiline == input.Multiline ||
                    this.Multiline.Equals(input.Multiline)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewVersion == input.NewVersion ||
                    this.NewVersion.Equals(input.NewVersion)
                ) && 
                (
                    this.PasswordManagerCustomField == input.PasswordManagerCustomField ||
                    this.PasswordManagerCustomField != null &&
                    input.PasswordManagerCustomField != null &&
                    this.PasswordManagerCustomField.SequenceEqual(input.PasswordManagerCustomField)
                ) && 
                (
                    this.PasswordManagerInjectUrl == input.PasswordManagerInjectUrl ||
                    (this.PasswordManagerInjectUrl != null &&
                    this.PasswordManagerInjectUrl.Equals(input.PasswordManagerInjectUrl))
                ) && 
                (
                    this.PasswordManagerPassword == input.PasswordManagerPassword ||
                    (this.PasswordManagerPassword != null &&
                    this.PasswordManagerPassword.Equals(input.PasswordManagerPassword))
                ) && 
                (
                    this.PasswordManagerUsername == input.PasswordManagerUsername ||
                    (this.PasswordManagerUsername != null &&
                    this.PasswordManagerUsername.Equals(input.PasswordManagerUsername))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accessibility != null)
                    hashCode = hashCode * 59 + this.Accessibility.GetHashCode();
                if (this.KeepPrevVersion != null)
                    hashCode = hashCode * 59 + this.KeepPrevVersion.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                hashCode = hashCode * 59 + this.Multiline.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.NewVersion.GetHashCode();
                if (this.PasswordManagerCustomField != null)
                    hashCode = hashCode * 59 + this.PasswordManagerCustomField.GetHashCode();
                if (this.PasswordManagerInjectUrl != null)
                    hashCode = hashCode * 59 + this.PasswordManagerInjectUrl.GetHashCode();
                if (this.PasswordManagerPassword != null)
                    hashCode = hashCode * 59 + this.PasswordManagerPassword.GetHashCode();
                if (this.PasswordManagerUsername != null)
                    hashCode = hashCode * 59 + this.PasswordManagerUsername.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
