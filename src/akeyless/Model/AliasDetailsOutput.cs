/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// AliasDetailsOutput
    /// </summary>
    [DataContract(Name = "aliasDetailsOutput")]
    public partial class AliasDetailsOutput : IEquatable<AliasDetailsOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AliasDetailsOutput" /> class.
        /// </summary>
        /// <param name="accessType">accessType.</param>
        /// <param name="tenantTag">tenantTag.</param>
        public AliasDetailsOutput(string accessType = default(string), string tenantTag = default(string))
        {
            this.AccessType = accessType;
            this.TenantTag = tenantTag;
        }

        /// <summary>
        /// Gets or Sets AccessType
        /// </summary>
        [DataMember(Name = "access_type", EmitDefaultValue = false)]
        public string AccessType { get; set; }

        /// <summary>
        /// Gets or Sets TenantTag
        /// </summary>
        [DataMember(Name = "tenant_tag", EmitDefaultValue = false)]
        public string TenantTag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AliasDetailsOutput {\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  TenantTag: ").Append(TenantTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AliasDetailsOutput);
        }

        /// <summary>
        /// Returns true if AliasDetailsOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of AliasDetailsOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AliasDetailsOutput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessType == input.AccessType ||
                    (this.AccessType != null &&
                    this.AccessType.Equals(input.AccessType))
                ) && 
                (
                    this.TenantTag == input.TenantTag ||
                    (this.TenantTag != null &&
                    this.TenantTag.Equals(input.TenantTag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessType != null)
                {
                    hashCode = (hashCode * 59) + this.AccessType.GetHashCode();
                }
                if (this.TenantTag != null)
                {
                    hashCode = (hashCode * 59) + this.TenantTag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
