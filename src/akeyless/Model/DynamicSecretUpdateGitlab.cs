/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// dynamicSecretUpdateGitlab is a command that updates gitlab dynamic secret
    /// </summary>
    [DataContract(Name = "dynamicSecretUpdateGitlab")]
    public partial class DynamicSecretUpdateGitlab : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicSecretUpdateGitlab" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DynamicSecretUpdateGitlab() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicSecretUpdateGitlab" /> class.
        /// </summary>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="gitlabAccessToken">Gitlab access token.</param>
        /// <param name="gitlabAccessType">Gitlab access token type [project,group] (required).</param>
        /// <param name="gitlabCertificate">Gitlab tls certificate (base64 encoded).</param>
        /// <param name="gitlabRole">Gitlab role.</param>
        /// <param name="gitlabTokenScopes">Comma-separated list of access token scopes to grant (required).</param>
        /// <param name="gitlabUrl">Gitlab base url (default to &quot;https://gitlab.com/&quot;).</param>
        /// <param name="groupName">Gitlab group name, required for access-type&#x3D;group.</param>
        /// <param name="installationOrganization">Gitlab project name, required for access-type&#x3D;project.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Dynamic secret name (required).</param>
        /// <param name="newName">Dynamic secret name.</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="ttl">Access Token TTL.</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public DynamicSecretUpdateGitlab(string deleteProtection = default(string), string description = default(string), string gitlabAccessToken = default(string), string gitlabAccessType = default(string), string gitlabCertificate = default(string), string gitlabRole = default(string), string gitlabTokenScopes = default(string), string gitlabUrl = @"https://gitlab.com/", string groupName = default(string), string installationOrganization = default(string), bool json = false, string name = default(string), string newName = default(string), List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string ttl = default(string), string uidToken = default(string))
        {
            // to ensure "gitlabAccessType" is required (not null)
            if (gitlabAccessType == null)
            {
                throw new ArgumentNullException("gitlabAccessType is a required property for DynamicSecretUpdateGitlab and cannot be null");
            }
            this.GitlabAccessType = gitlabAccessType;
            // to ensure "gitlabTokenScopes" is required (not null)
            if (gitlabTokenScopes == null)
            {
                throw new ArgumentNullException("gitlabTokenScopes is a required property for DynamicSecretUpdateGitlab and cannot be null");
            }
            this.GitlabTokenScopes = gitlabTokenScopes;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DynamicSecretUpdateGitlab and cannot be null");
            }
            this.Name = name;
            this.DeleteProtection = deleteProtection;
            this.Description = description;
            this.GitlabAccessToken = gitlabAccessToken;
            this.GitlabCertificate = gitlabCertificate;
            this.GitlabRole = gitlabRole;
            // use default value if no "gitlabUrl" provided
            this.GitlabUrl = gitlabUrl ?? @"https://gitlab.com/";
            this.GroupName = groupName;
            this.InstallationOrganization = installationOrganization;
            this.Json = json;
            this.NewName = newName;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.Ttl = ttl;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gitlab access token
        /// </summary>
        /// <value>Gitlab access token</value>
        [DataMember(Name = "gitlab-access-token", EmitDefaultValue = false)]
        public string GitlabAccessToken { get; set; }

        /// <summary>
        /// Gitlab access token type [project,group]
        /// </summary>
        /// <value>Gitlab access token type [project,group]</value>
        [DataMember(Name = "gitlab-access-type", IsRequired = true, EmitDefaultValue = true)]
        public string GitlabAccessType { get; set; }

        /// <summary>
        /// Gitlab tls certificate (base64 encoded)
        /// </summary>
        /// <value>Gitlab tls certificate (base64 encoded)</value>
        [DataMember(Name = "gitlab-certificate", EmitDefaultValue = false)]
        public string GitlabCertificate { get; set; }

        /// <summary>
        /// Gitlab role
        /// </summary>
        /// <value>Gitlab role</value>
        [DataMember(Name = "gitlab-role", EmitDefaultValue = false)]
        public string GitlabRole { get; set; }

        /// <summary>
        /// Comma-separated list of access token scopes to grant
        /// </summary>
        /// <value>Comma-separated list of access token scopes to grant</value>
        [DataMember(Name = "gitlab-token-scopes", IsRequired = true, EmitDefaultValue = true)]
        public string GitlabTokenScopes { get; set; }

        /// <summary>
        /// Gitlab base url
        /// </summary>
        /// <value>Gitlab base url</value>
        [DataMember(Name = "gitlab-url", EmitDefaultValue = false)]
        public string GitlabUrl { get; set; }

        /// <summary>
        /// Gitlab group name, required for access-type&#x3D;group
        /// </summary>
        /// <value>Gitlab group name, required for access-type&#x3D;group</value>
        [DataMember(Name = "group-name", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gitlab project name, required for access-type&#x3D;project
        /// </summary>
        /// <value>Gitlab project name, required for access-type&#x3D;project</value>
        [DataMember(Name = "installation-organization", EmitDefaultValue = false)]
        public string InstallationOrganization { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Access Token TTL
        /// </summary>
        /// <value>Access Token TTL</value>
        [DataMember(Name = "ttl", EmitDefaultValue = false)]
        public string Ttl { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DynamicSecretUpdateGitlab {\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GitlabAccessToken: ").Append(GitlabAccessToken).Append("\n");
            sb.Append("  GitlabAccessType: ").Append(GitlabAccessType).Append("\n");
            sb.Append("  GitlabCertificate: ").Append(GitlabCertificate).Append("\n");
            sb.Append("  GitlabRole: ").Append(GitlabRole).Append("\n");
            sb.Append("  GitlabTokenScopes: ").Append(GitlabTokenScopes).Append("\n");
            sb.Append("  GitlabUrl: ").Append(GitlabUrl).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  InstallationOrganization: ").Append(InstallationOrganization).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
