/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateProducerHanaDb is a command that creates hanadb producer
    /// </summary>
    [DataContract(Name = "gatewayCreateProducerHanaDb")]
    public partial class GatewayCreateProducerHanaDb : IEquatable<GatewayCreateProducerHanaDb>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerHanaDb" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerHanaDb() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerHanaDb" /> class.
        /// </summary>
        /// <param name="deleteProtection">Protection from accidental deletion of this item.</param>
        /// <param name="hanaDbname">HanaDb Name.</param>
        /// <param name="hanadbCreateStatements">HanaDb Creation statements.</param>
        /// <param name="hanadbHost">HanaDb Host (default to &quot;127.0.0.1&quot;).</param>
        /// <param name="hanadbPassword">HanaDb Password.</param>
        /// <param name="hanadbPort">HanaDb Port (default to &quot;443&quot;).</param>
        /// <param name="hanadbRevocationStatements">HanaDb Revocation statements.</param>
        /// <param name="hanadbUsername">HanaDb Username.</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="name">Producer name (required).</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="secureAccessBastionIssuer">secureAccessBastionIssuer.</param>
        /// <param name="secureAccessDbSchema">secureAccessDbSchema.</param>
        /// <param name="secureAccessEnable">secureAccessEnable.</param>
        /// <param name="secureAccessHost">secureAccessHost.</param>
        /// <param name="secureAccessWeb">secureAccessWeb.</param>
        /// <param name="tags">List of the tags attached to this secret.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public GatewayCreateProducerHanaDb(string deleteProtection = default(string), string hanaDbname = default(string), string hanadbCreateStatements = default(string), string hanadbHost = "127.0.0.1", string hanadbPassword = default(string), string hanadbPort = "443", string hanadbRevocationStatements = default(string), string hanadbUsername = default(string), bool json = default(bool), string name = default(string), string producerEncryptionKeyName = default(string), string secureAccessBastionIssuer = default(string), string secureAccessDbSchema = default(string), string secureAccessEnable = default(string), List<string> secureAccessHost = default(List<string>), bool secureAccessWeb = default(bool), List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userTtl = "60m")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayCreateProducerHanaDb and cannot be null");
            }
            this.Name = name;
            this.DeleteProtection = deleteProtection;
            this.HanaDbname = hanaDbname;
            this.HanadbCreateStatements = hanadbCreateStatements;
            // use default value if no "hanadbHost" provided
            this.HanadbHost = hanadbHost ?? "127.0.0.1";
            this.HanadbPassword = hanadbPassword;
            // use default value if no "hanadbPort" provided
            this.HanadbPort = hanadbPort ?? "443";
            this.HanadbRevocationStatements = hanadbRevocationStatements;
            this.HanadbUsername = hanadbUsername;
            this.Json = json;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.SecureAccessBastionIssuer = secureAccessBastionIssuer;
            this.SecureAccessDbSchema = secureAccessDbSchema;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessHost = secureAccessHost;
            this.SecureAccessWeb = secureAccessWeb;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "60m";
        }

        /// <summary>
        /// Protection from accidental deletion of this item
        /// </summary>
        /// <value>Protection from accidental deletion of this item</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// HanaDb Name
        /// </summary>
        /// <value>HanaDb Name</value>
        [DataMember(Name = "hana-dbname", EmitDefaultValue = false)]
        public string HanaDbname { get; set; }

        /// <summary>
        /// HanaDb Creation statements
        /// </summary>
        /// <value>HanaDb Creation statements</value>
        [DataMember(Name = "hanadb-create-statements", EmitDefaultValue = false)]
        public string HanadbCreateStatements { get; set; }

        /// <summary>
        /// HanaDb Host
        /// </summary>
        /// <value>HanaDb Host</value>
        [DataMember(Name = "hanadb-host", EmitDefaultValue = false)]
        public string HanadbHost { get; set; }

        /// <summary>
        /// HanaDb Password
        /// </summary>
        /// <value>HanaDb Password</value>
        [DataMember(Name = "hanadb-password", EmitDefaultValue = false)]
        public string HanadbPassword { get; set; }

        /// <summary>
        /// HanaDb Port
        /// </summary>
        /// <value>HanaDb Port</value>
        [DataMember(Name = "hanadb-port", EmitDefaultValue = false)]
        public string HanadbPort { get; set; }

        /// <summary>
        /// HanaDb Revocation statements
        /// </summary>
        /// <value>HanaDb Revocation statements</value>
        [DataMember(Name = "hanadb-revocation-statements", EmitDefaultValue = false)]
        public string HanadbRevocationStatements { get; set; }

        /// <summary>
        /// HanaDb Username
        /// </summary>
        /// <value>HanaDb Username</value>
        [DataMember(Name = "hanadb-username", EmitDefaultValue = false)]
        public string HanadbUsername { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Producer name
        /// </summary>
        /// <value>Producer name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessBastionIssuer
        /// </summary>
        [DataMember(Name = "secure-access-bastion-issuer", EmitDefaultValue = false)]
        public string SecureAccessBastionIssuer { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessDbSchema
        /// </summary>
        [DataMember(Name = "secure-access-db-schema", EmitDefaultValue = false)]
        public string SecureAccessDbSchema { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessEnable
        /// </summary>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessHost
        /// </summary>
        [DataMember(Name = "secure-access-host", EmitDefaultValue = false)]
        public List<string> SecureAccessHost { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessWeb
        /// </summary>
        [DataMember(Name = "secure-access-web", EmitDefaultValue = true)]
        public bool SecureAccessWeb { get; set; }

        /// <summary>
        /// List of the tags attached to this secret
        /// </summary>
        /// <value>List of the tags attached to this secret</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerHanaDb {\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  HanaDbname: ").Append(HanaDbname).Append("\n");
            sb.Append("  HanadbCreateStatements: ").Append(HanadbCreateStatements).Append("\n");
            sb.Append("  HanadbHost: ").Append(HanadbHost).Append("\n");
            sb.Append("  HanadbPassword: ").Append(HanadbPassword).Append("\n");
            sb.Append("  HanadbPort: ").Append(HanadbPort).Append("\n");
            sb.Append("  HanadbRevocationStatements: ").Append(HanadbRevocationStatements).Append("\n");
            sb.Append("  HanadbUsername: ").Append(HanadbUsername).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  SecureAccessBastionIssuer: ").Append(SecureAccessBastionIssuer).Append("\n");
            sb.Append("  SecureAccessDbSchema: ").Append(SecureAccessDbSchema).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessHost: ").Append(SecureAccessHost).Append("\n");
            sb.Append("  SecureAccessWeb: ").Append(SecureAccessWeb).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayCreateProducerHanaDb);
        }

        /// <summary>
        /// Returns true if GatewayCreateProducerHanaDb instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayCreateProducerHanaDb to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayCreateProducerHanaDb input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    (this.DeleteProtection != null &&
                    this.DeleteProtection.Equals(input.DeleteProtection))
                ) && 
                (
                    this.HanaDbname == input.HanaDbname ||
                    (this.HanaDbname != null &&
                    this.HanaDbname.Equals(input.HanaDbname))
                ) && 
                (
                    this.HanadbCreateStatements == input.HanadbCreateStatements ||
                    (this.HanadbCreateStatements != null &&
                    this.HanadbCreateStatements.Equals(input.HanadbCreateStatements))
                ) && 
                (
                    this.HanadbHost == input.HanadbHost ||
                    (this.HanadbHost != null &&
                    this.HanadbHost.Equals(input.HanadbHost))
                ) && 
                (
                    this.HanadbPassword == input.HanadbPassword ||
                    (this.HanadbPassword != null &&
                    this.HanadbPassword.Equals(input.HanadbPassword))
                ) && 
                (
                    this.HanadbPort == input.HanadbPort ||
                    (this.HanadbPort != null &&
                    this.HanadbPort.Equals(input.HanadbPort))
                ) && 
                (
                    this.HanadbRevocationStatements == input.HanadbRevocationStatements ||
                    (this.HanadbRevocationStatements != null &&
                    this.HanadbRevocationStatements.Equals(input.HanadbRevocationStatements))
                ) && 
                (
                    this.HanadbUsername == input.HanadbUsername ||
                    (this.HanadbUsername != null &&
                    this.HanadbUsername.Equals(input.HanadbUsername))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.SecureAccessBastionIssuer == input.SecureAccessBastionIssuer ||
                    (this.SecureAccessBastionIssuer != null &&
                    this.SecureAccessBastionIssuer.Equals(input.SecureAccessBastionIssuer))
                ) && 
                (
                    this.SecureAccessDbSchema == input.SecureAccessDbSchema ||
                    (this.SecureAccessDbSchema != null &&
                    this.SecureAccessDbSchema.Equals(input.SecureAccessDbSchema))
                ) && 
                (
                    this.SecureAccessEnable == input.SecureAccessEnable ||
                    (this.SecureAccessEnable != null &&
                    this.SecureAccessEnable.Equals(input.SecureAccessEnable))
                ) && 
                (
                    this.SecureAccessHost == input.SecureAccessHost ||
                    this.SecureAccessHost != null &&
                    input.SecureAccessHost != null &&
                    this.SecureAccessHost.SequenceEqual(input.SecureAccessHost)
                ) && 
                (
                    this.SecureAccessWeb == input.SecureAccessWeb ||
                    this.SecureAccessWeb.Equals(input.SecureAccessWeb)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeleteProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteProtection.GetHashCode();
                }
                if (this.HanaDbname != null)
                {
                    hashCode = (hashCode * 59) + this.HanaDbname.GetHashCode();
                }
                if (this.HanadbCreateStatements != null)
                {
                    hashCode = (hashCode * 59) + this.HanadbCreateStatements.GetHashCode();
                }
                if (this.HanadbHost != null)
                {
                    hashCode = (hashCode * 59) + this.HanadbHost.GetHashCode();
                }
                if (this.HanadbPassword != null)
                {
                    hashCode = (hashCode * 59) + this.HanadbPassword.GetHashCode();
                }
                if (this.HanadbPort != null)
                {
                    hashCode = (hashCode * 59) + this.HanadbPort.GetHashCode();
                }
                if (this.HanadbRevocationStatements != null)
                {
                    hashCode = (hashCode * 59) + this.HanadbRevocationStatements.GetHashCode();
                }
                if (this.HanadbUsername != null)
                {
                    hashCode = (hashCode * 59) + this.HanadbUsername.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ProducerEncryptionKeyName != null)
                {
                    hashCode = (hashCode * 59) + this.ProducerEncryptionKeyName.GetHashCode();
                }
                if (this.SecureAccessBastionIssuer != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessBastionIssuer.GetHashCode();
                }
                if (this.SecureAccessDbSchema != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessDbSchema.GetHashCode();
                }
                if (this.SecureAccessEnable != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessEnable.GetHashCode();
                }
                if (this.SecureAccessHost != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessHost.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SecureAccessWeb.GetHashCode();
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TargetName != null)
                {
                    hashCode = (hashCode * 59) + this.TargetName.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UserTtl != null)
                {
                    hashCode = (hashCode * 59) + this.UserTtl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
