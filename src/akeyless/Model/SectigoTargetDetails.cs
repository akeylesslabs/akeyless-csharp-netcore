/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SectigoTargetDetails
    /// </summary>
    [DataContract(Name = "SectigoTargetDetails")]
    public partial class SectigoTargetDetails : IEquatable<SectigoTargetDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SectigoTargetDetails" /> class.
        /// </summary>
        /// <param name="certificateProfileId">certificateProfileId.</param>
        /// <param name="customerUri">customerUri.</param>
        /// <param name="externalRequester">externalRequester.</param>
        /// <param name="orgId">orgId.</param>
        /// <param name="password">password.</param>
        /// <param name="timeout">A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years..</param>
        /// <param name="username">username.</param>
        public SectigoTargetDetails(long certificateProfileId = default(long), string customerUri = default(string), string externalRequester = default(string), long orgId = default(long), string password = default(string), long timeout = default(long), string username = default(string))
        {
            this.CertificateProfileId = certificateProfileId;
            this.CustomerUri = customerUri;
            this.ExternalRequester = externalRequester;
            this.OrgId = orgId;
            this.Password = password;
            this.Timeout = timeout;
            this.Username = username;
        }

        /// <summary>
        /// Gets or Sets CertificateProfileId
        /// </summary>
        [DataMember(Name = "certificate_profile_id", EmitDefaultValue = false)]
        public long CertificateProfileId { get; set; }

        /// <summary>
        /// Gets or Sets CustomerUri
        /// </summary>
        [DataMember(Name = "customer_uri", EmitDefaultValue = false)]
        public string CustomerUri { get; set; }

        /// <summary>
        /// Gets or Sets ExternalRequester
        /// </summary>
        [DataMember(Name = "external_requester", EmitDefaultValue = false)]
        public string ExternalRequester { get; set; }

        /// <summary>
        /// Gets or Sets OrgId
        /// </summary>
        [DataMember(Name = "org_id", EmitDefaultValue = false)]
        public long OrgId { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
        /// </summary>
        /// <value>A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.</value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public long Timeout { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SectigoTargetDetails {\n");
            sb.Append("  CertificateProfileId: ").Append(CertificateProfileId).Append("\n");
            sb.Append("  CustomerUri: ").Append(CustomerUri).Append("\n");
            sb.Append("  ExternalRequester: ").Append(ExternalRequester).Append("\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SectigoTargetDetails);
        }

        /// <summary>
        /// Returns true if SectigoTargetDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SectigoTargetDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SectigoTargetDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CertificateProfileId == input.CertificateProfileId ||
                    this.CertificateProfileId.Equals(input.CertificateProfileId)
                ) && 
                (
                    this.CustomerUri == input.CustomerUri ||
                    (this.CustomerUri != null &&
                    this.CustomerUri.Equals(input.CustomerUri))
                ) && 
                (
                    this.ExternalRequester == input.ExternalRequester ||
                    (this.ExternalRequester != null &&
                    this.ExternalRequester.Equals(input.ExternalRequester))
                ) && 
                (
                    this.OrgId == input.OrgId ||
                    this.OrgId.Equals(input.OrgId)
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    this.Timeout.Equals(input.Timeout)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CertificateProfileId.GetHashCode();
                if (this.CustomerUri != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerUri.GetHashCode();
                }
                if (this.ExternalRequester != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalRequester.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrgId.GetHashCode();
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
