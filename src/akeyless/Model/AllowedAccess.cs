/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// AllowedAccess
    /// </summary>
    [DataContract(Name = "AllowedAccess")]
    public partial class AllowedAccess : IEquatable<AllowedAccess>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllowedAccess" /> class.
        /// </summary>
        /// <param name="accessId">accessId.</param>
        /// <param name="accessType">accessType.</param>
        /// <param name="clusterId">clusterId.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="description">description.</param>
        /// <param name="editable">editable.</param>
        /// <param name="error">error.</param>
        /// <param name="id">id.</param>
        /// <param name="isValid">isValid.</param>
        /// <param name="name">name.</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="subClaims">subClaims.</param>
        /// <param name="subClaimsCaseInsensitive">subClaimsCaseInsensitive.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public AllowedAccess(string accessId = default(string), string accessType = default(string), long clusterId = default(long), DateTime createdAt = default(DateTime), string description = default(string), bool editable = default(bool), string error = default(string), long id = default(long), bool isValid = default(bool), string name = default(string), List<string> permissions = default(List<string>), Dictionary<string, List<string>> subClaims = default(Dictionary<string, List<string>>), bool subClaimsCaseInsensitive = default(bool), DateTime updatedAt = default(DateTime))
        {
            this.AccessId = accessId;
            this.AccessType = accessType;
            this.ClusterId = clusterId;
            this.CreatedAt = createdAt;
            this.Description = description;
            this.Editable = editable;
            this.Error = error;
            this.Id = id;
            this.IsValid = isValid;
            this.Name = name;
            this.Permissions = permissions;
            this.SubClaims = subClaims;
            this.SubClaimsCaseInsensitive = subClaimsCaseInsensitive;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets AccessId
        /// </summary>
        [DataMember(Name = "access_id", EmitDefaultValue = false)]
        public string AccessId { get; set; }

        /// <summary>
        /// Gets or Sets AccessType
        /// </summary>
        [DataMember(Name = "access_type", EmitDefaultValue = false)]
        public string AccessType { get; set; }

        /// <summary>
        /// Gets or Sets ClusterId
        /// </summary>
        [DataMember(Name = "cluster_id", EmitDefaultValue = false)]
        public long ClusterId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Editable
        /// </summary>
        [DataMember(Name = "editable", EmitDefaultValue = true)]
        public bool Editable { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [DataMember(Name = "is_valid", EmitDefaultValue = true)]
        public bool IsValid { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name = "permissions", EmitDefaultValue = false)]
        public List<string> Permissions { get; set; }

        /// <summary>
        /// Gets or Sets SubClaims
        /// </summary>
        [DataMember(Name = "sub_claims", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> SubClaims { get; set; }

        /// <summary>
        /// Gets or Sets SubClaimsCaseInsensitive
        /// </summary>
        [DataMember(Name = "sub_claims_case_insensitive", EmitDefaultValue = true)]
        public bool SubClaimsCaseInsensitive { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AllowedAccess {\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Editable: ").Append(Editable).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  SubClaims: ").Append(SubClaims).Append("\n");
            sb.Append("  SubClaimsCaseInsensitive: ").Append(SubClaimsCaseInsensitive).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllowedAccess);
        }

        /// <summary>
        /// Returns true if AllowedAccess instances are equal
        /// </summary>
        /// <param name="input">Instance of AllowedAccess to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllowedAccess input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessId == input.AccessId ||
                    (this.AccessId != null &&
                    this.AccessId.Equals(input.AccessId))
                ) && 
                (
                    this.AccessType == input.AccessType ||
                    (this.AccessType != null &&
                    this.AccessType.Equals(input.AccessType))
                ) && 
                (
                    this.ClusterId == input.ClusterId ||
                    this.ClusterId.Equals(input.ClusterId)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Editable == input.Editable ||
                    this.Editable.Equals(input.Editable)
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.IsValid == input.IsValid ||
                    this.IsValid.Equals(input.IsValid)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    input.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.SubClaims == input.SubClaims ||
                    this.SubClaims != null &&
                    input.SubClaims != null &&
                    this.SubClaims.SequenceEqual(input.SubClaims)
                ) && 
                (
                    this.SubClaimsCaseInsensitive == input.SubClaimsCaseInsensitive ||
                    this.SubClaimsCaseInsensitive.Equals(input.SubClaimsCaseInsensitive)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessId != null)
                {
                    hashCode = (hashCode * 59) + this.AccessId.GetHashCode();
                }
                if (this.AccessType != null)
                {
                    hashCode = (hashCode * 59) + this.AccessType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClusterId.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Editable.GetHashCode();
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.IsValid.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Permissions != null)
                {
                    hashCode = (hashCode * 59) + this.Permissions.GetHashCode();
                }
                if (this.SubClaims != null)
                {
                    hashCode = (hashCode * 59) + this.SubClaims.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SubClaimsCaseInsensitive.GetHashCode();
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
