/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UpdateAccountSettings
    /// </summary>
    [DataContract(Name = "updateAccountSettings")]
    public partial class UpdateAccountSettings : IEquatable<UpdateAccountSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAccountSettings" /> class.
        /// </summary>
        /// <param name="address">Address.</param>
        /// <param name="boundIps">A default list of comma-separated CIDR block that are allowed to authenticate..</param>
        /// <param name="city">City.</param>
        /// <param name="companyName">Company name.</param>
        /// <param name="country">Country.</param>
        /// <param name="defaultKeyName">Set the account default key based on the DFC key name. Use \&quot;set-original-akeyless-default-key\&quot; to revert to using the original default key of the account..</param>
        /// <param name="defaultShareLinkTtlMinutes">Set the default ttl in minutes for sharing item number between 60 and 43200.</param>
        /// <param name="defaultVersioning">If set to true, new versions is enabled by default.</param>
        /// <param name="dpEnableClassicKeyProtection">Set to update protection with classic keys state [true/false].</param>
        /// <param name="dynamicSecretMaxTtl">Set the maximum ttl for dynamic secrets.</param>
        /// <param name="dynamicSecretMaxTtlEnable">Set a maximum ttl for dynamic secrets [true/false].</param>
        /// <param name="enableItemSharing">Enable sharing items [true/false].</param>
        /// <param name="enablePasswordExpiration">Enable password expiration policy [true/false].</param>
        /// <param name="forceNewVersions">If set to true, new version will be created on update.</param>
        /// <param name="gwBoundIps">A default list of comma-separated CIDR block that acts as a trusted Gateway entity..</param>
        /// <param name="invalidCharacters">Characters that cannot be used for items/targets/roles/auths/event_forwarder names. Empty string will enforce nothing. (default to &quot;notReceivedInvalidCharacter&quot;).</param>
        /// <param name="itemType">VersionSettingsObjectType defines object types for account version settings.</param>
        /// <param name="itemsDeletionProtection">Set or unset the default behaviour of items deletion protection [true/false].</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="jwtTtlDefault">Default ttl.</param>
        /// <param name="jwtTtlMax">Maximum ttl.</param>
        /// <param name="jwtTtlMin">Minimum ttl.</param>
        /// <param name="lockBoundIps">Lock bound-ips setting globally in the account..</param>
        /// <param name="lockDefaultKey">Lock the account&#39;s default protection key, if set - users will not be able to use a different protection key, relevant only if default-key-name is configured [true/false].</param>
        /// <param name="lockGwBoundIps">Lock gw-bound-ips setting in the account..</param>
        /// <param name="maxRotationInterval">Set the maximum rotation interval for rotated secrets auto rotation settings.</param>
        /// <param name="maxRotationIntervalEnable">Set a maximum rotation interval for rotated secrets auto rotation settings [true/false].</param>
        /// <param name="maxVersions">Max versions.</param>
        /// <param name="passwordExpirationDays">Specifies the number of days that a password is valid before it must be changed. A default value of 90 days is used..</param>
        /// <param name="passwordExpirationNotificationDays">Specifies the number of days before a user receives notification that their password will expire. A default value of 14 days is used..</param>
        /// <param name="passwordLength">Password length between 5 - to 50 characters.</param>
        /// <param name="phone">Phone number.</param>
        /// <param name="postalCode">Postal code.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="usageEventEnable">Enable event for objects that have not been used or changed [true/false].</param>
        /// <param name="usageEventInterval">Interval by days for unused objects. Default and minimum interval is 90 days.</param>
        /// <param name="usageEventObjectType">Usage event is supported for auth method or secrets-and-keys [auth/item].</param>
        /// <param name="useLowerLetters">Password must contain lower case letters [true/false].</param>
        /// <param name="useNumbers">Password must contain numbers [true/false].</param>
        /// <param name="useSpecialCharacters">Password must contain special characters [true/false].</param>
        /// <param name="useCapitalLetters">Password must contain capital letters [true/false].</param>
        public UpdateAccountSettings(string address = default(string), List<string> boundIps = default(List<string>), string city = default(string), string companyName = default(string), string country = default(string), string defaultKeyName = default(string), string defaultShareLinkTtlMinutes = default(string), string defaultVersioning = default(string), string dpEnableClassicKeyProtection = default(string), long dynamicSecretMaxTtl = default(long), string dynamicSecretMaxTtlEnable = default(string), string enableItemSharing = default(string), string enablePasswordExpiration = default(string), string forceNewVersions = default(string), List<string> gwBoundIps = default(List<string>), string invalidCharacters = "notReceivedInvalidCharacter", string itemType = default(string), string itemsDeletionProtection = default(string), bool json = false, long jwtTtlDefault = default(long), long jwtTtlMax = default(long), long jwtTtlMin = default(long), string lockBoundIps = default(string), string lockDefaultKey = default(string), string lockGwBoundIps = default(string), int maxRotationInterval = default(int), string maxRotationIntervalEnable = default(string), string maxVersions = default(string), string passwordExpirationDays = default(string), string passwordExpirationNotificationDays = default(string), long passwordLength = default(long), string phone = default(string), string postalCode = default(string), string token = default(string), string uidToken = default(string), string usageEventEnable = default(string), long usageEventInterval = default(long), string usageEventObjectType = default(string), string useLowerLetters = default(string), string useNumbers = default(string), string useSpecialCharacters = default(string), string useCapitalLetters = default(string))
        {
            this.Address = address;
            this.BoundIps = boundIps;
            this.City = city;
            this.CompanyName = companyName;
            this.Country = country;
            this.DefaultKeyName = defaultKeyName;
            this.DefaultShareLinkTtlMinutes = defaultShareLinkTtlMinutes;
            this.DefaultVersioning = defaultVersioning;
            this.DpEnableClassicKeyProtection = dpEnableClassicKeyProtection;
            this.DynamicSecretMaxTtl = dynamicSecretMaxTtl;
            this.DynamicSecretMaxTtlEnable = dynamicSecretMaxTtlEnable;
            this.EnableItemSharing = enableItemSharing;
            this.EnablePasswordExpiration = enablePasswordExpiration;
            this.ForceNewVersions = forceNewVersions;
            this.GwBoundIps = gwBoundIps;
            // use default value if no "invalidCharacters" provided
            this.InvalidCharacters = invalidCharacters ?? "notReceivedInvalidCharacter";
            this.ItemType = itemType;
            this.ItemsDeletionProtection = itemsDeletionProtection;
            this.Json = json;
            this.JwtTtlDefault = jwtTtlDefault;
            this.JwtTtlMax = jwtTtlMax;
            this.JwtTtlMin = jwtTtlMin;
            this.LockBoundIps = lockBoundIps;
            this.LockDefaultKey = lockDefaultKey;
            this.LockGwBoundIps = lockGwBoundIps;
            this.MaxRotationInterval = maxRotationInterval;
            this.MaxRotationIntervalEnable = maxRotationIntervalEnable;
            this.MaxVersions = maxVersions;
            this.PasswordExpirationDays = passwordExpirationDays;
            this.PasswordExpirationNotificationDays = passwordExpirationNotificationDays;
            this.PasswordLength = passwordLength;
            this.Phone = phone;
            this.PostalCode = postalCode;
            this.Token = token;
            this.UidToken = uidToken;
            this.UsageEventEnable = usageEventEnable;
            this.UsageEventInterval = usageEventInterval;
            this.UsageEventObjectType = usageEventObjectType;
            this.UseLowerLetters = useLowerLetters;
            this.UseNumbers = useNumbers;
            this.UseSpecialCharacters = useSpecialCharacters;
            this.UseCapitalLetters = useCapitalLetters;
        }

        /// <summary>
        /// Address
        /// </summary>
        /// <value>Address</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// A default list of comma-separated CIDR block that are allowed to authenticate.
        /// </summary>
        /// <value>A default list of comma-separated CIDR block that are allowed to authenticate.</value>
        [DataMember(Name = "bound-ips", EmitDefaultValue = false)]
        public List<string> BoundIps { get; set; }

        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Company name
        /// </summary>
        /// <value>Company name</value>
        [DataMember(Name = "company-name", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Country
        /// </summary>
        /// <value>Country</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Set the account default key based on the DFC key name. Use \&quot;set-original-akeyless-default-key\&quot; to revert to using the original default key of the account.
        /// </summary>
        /// <value>Set the account default key based on the DFC key name. Use \&quot;set-original-akeyless-default-key\&quot; to revert to using the original default key of the account.</value>
        [DataMember(Name = "default-key-name", EmitDefaultValue = false)]
        public string DefaultKeyName { get; set; }

        /// <summary>
        /// Set the default ttl in minutes for sharing item number between 60 and 43200
        /// </summary>
        /// <value>Set the default ttl in minutes for sharing item number between 60 and 43200</value>
        [DataMember(Name = "default-share-link-ttl-minutes", EmitDefaultValue = false)]
        public string DefaultShareLinkTtlMinutes { get; set; }

        /// <summary>
        /// If set to true, new versions is enabled by default
        /// </summary>
        /// <value>If set to true, new versions is enabled by default</value>
        [DataMember(Name = "default-versioning", EmitDefaultValue = false)]
        public string DefaultVersioning { get; set; }

        /// <summary>
        /// Set to update protection with classic keys state [true/false]
        /// </summary>
        /// <value>Set to update protection with classic keys state [true/false]</value>
        [DataMember(Name = "dp-enable-classic-key-protection", EmitDefaultValue = false)]
        public string DpEnableClassicKeyProtection { get; set; }

        /// <summary>
        /// Set the maximum ttl for dynamic secrets
        /// </summary>
        /// <value>Set the maximum ttl for dynamic secrets</value>
        [DataMember(Name = "dynamic-secret-max-ttl", EmitDefaultValue = false)]
        public long DynamicSecretMaxTtl { get; set; }

        /// <summary>
        /// Set a maximum ttl for dynamic secrets [true/false]
        /// </summary>
        /// <value>Set a maximum ttl for dynamic secrets [true/false]</value>
        [DataMember(Name = "dynamic-secret-max-ttl-enable", EmitDefaultValue = false)]
        public string DynamicSecretMaxTtlEnable { get; set; }

        /// <summary>
        /// Enable sharing items [true/false]
        /// </summary>
        /// <value>Enable sharing items [true/false]</value>
        [DataMember(Name = "enable-item-sharing", EmitDefaultValue = false)]
        public string EnableItemSharing { get; set; }

        /// <summary>
        /// Enable password expiration policy [true/false]
        /// </summary>
        /// <value>Enable password expiration policy [true/false]</value>
        [DataMember(Name = "enable-password-expiration", EmitDefaultValue = false)]
        public string EnablePasswordExpiration { get; set; }

        /// <summary>
        /// If set to true, new version will be created on update
        /// </summary>
        /// <value>If set to true, new version will be created on update</value>
        [DataMember(Name = "force-new-versions", EmitDefaultValue = false)]
        public string ForceNewVersions { get; set; }

        /// <summary>
        /// A default list of comma-separated CIDR block that acts as a trusted Gateway entity.
        /// </summary>
        /// <value>A default list of comma-separated CIDR block that acts as a trusted Gateway entity.</value>
        [DataMember(Name = "gw-bound-ips", EmitDefaultValue = false)]
        public List<string> GwBoundIps { get; set; }

        /// <summary>
        /// Characters that cannot be used for items/targets/roles/auths/event_forwarder names. Empty string will enforce nothing.
        /// </summary>
        /// <value>Characters that cannot be used for items/targets/roles/auths/event_forwarder names. Empty string will enforce nothing.</value>
        [DataMember(Name = "invalid-characters", EmitDefaultValue = false)]
        public string InvalidCharacters { get; set; }

        /// <summary>
        /// VersionSettingsObjectType defines object types for account version settings
        /// </summary>
        /// <value>VersionSettingsObjectType defines object types for account version settings</value>
        [DataMember(Name = "item-type", EmitDefaultValue = false)]
        public string ItemType { get; set; }

        /// <summary>
        /// Set or unset the default behaviour of items deletion protection [true/false]
        /// </summary>
        /// <value>Set or unset the default behaviour of items deletion protection [true/false]</value>
        [DataMember(Name = "items-deletion-protection", EmitDefaultValue = false)]
        public string ItemsDeletionProtection { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Default ttl
        /// </summary>
        /// <value>Default ttl</value>
        [DataMember(Name = "jwt-ttl-default", EmitDefaultValue = false)]
        public long JwtTtlDefault { get; set; }

        /// <summary>
        /// Maximum ttl
        /// </summary>
        /// <value>Maximum ttl</value>
        [DataMember(Name = "jwt-ttl-max", EmitDefaultValue = false)]
        public long JwtTtlMax { get; set; }

        /// <summary>
        /// Minimum ttl
        /// </summary>
        /// <value>Minimum ttl</value>
        [DataMember(Name = "jwt-ttl-min", EmitDefaultValue = false)]
        public long JwtTtlMin { get; set; }

        /// <summary>
        /// Lock bound-ips setting globally in the account.
        /// </summary>
        /// <value>Lock bound-ips setting globally in the account.</value>
        [DataMember(Name = "lock-bound-ips", EmitDefaultValue = false)]
        public string LockBoundIps { get; set; }

        /// <summary>
        /// Lock the account&#39;s default protection key, if set - users will not be able to use a different protection key, relevant only if default-key-name is configured [true/false]
        /// </summary>
        /// <value>Lock the account&#39;s default protection key, if set - users will not be able to use a different protection key, relevant only if default-key-name is configured [true/false]</value>
        [DataMember(Name = "lock-default-key", EmitDefaultValue = false)]
        public string LockDefaultKey { get; set; }

        /// <summary>
        /// Lock gw-bound-ips setting in the account.
        /// </summary>
        /// <value>Lock gw-bound-ips setting in the account.</value>
        [DataMember(Name = "lock-gw-bound-ips", EmitDefaultValue = false)]
        public string LockGwBoundIps { get; set; }

        /// <summary>
        /// Set the maximum rotation interval for rotated secrets auto rotation settings
        /// </summary>
        /// <value>Set the maximum rotation interval for rotated secrets auto rotation settings</value>
        [DataMember(Name = "max-rotation-interval", EmitDefaultValue = false)]
        public int MaxRotationInterval { get; set; }

        /// <summary>
        /// Set a maximum rotation interval for rotated secrets auto rotation settings [true/false]
        /// </summary>
        /// <value>Set a maximum rotation interval for rotated secrets auto rotation settings [true/false]</value>
        [DataMember(Name = "max-rotation-interval-enable", EmitDefaultValue = false)]
        public string MaxRotationIntervalEnable { get; set; }

        /// <summary>
        /// Max versions
        /// </summary>
        /// <value>Max versions</value>
        [DataMember(Name = "max-versions", EmitDefaultValue = false)]
        public string MaxVersions { get; set; }

        /// <summary>
        /// Specifies the number of days that a password is valid before it must be changed. A default value of 90 days is used.
        /// </summary>
        /// <value>Specifies the number of days that a password is valid before it must be changed. A default value of 90 days is used.</value>
        [DataMember(Name = "password-expiration-days", EmitDefaultValue = false)]
        public string PasswordExpirationDays { get; set; }

        /// <summary>
        /// Specifies the number of days before a user receives notification that their password will expire. A default value of 14 days is used.
        /// </summary>
        /// <value>Specifies the number of days before a user receives notification that their password will expire. A default value of 14 days is used.</value>
        [DataMember(Name = "password-expiration-notification-days", EmitDefaultValue = false)]
        public string PasswordExpirationNotificationDays { get; set; }

        /// <summary>
        /// Password length between 5 - to 50 characters
        /// </summary>
        /// <value>Password length between 5 - to 50 characters</value>
        [DataMember(Name = "password-length", EmitDefaultValue = false)]
        public long PasswordLength { get; set; }

        /// <summary>
        /// Phone number
        /// </summary>
        /// <value>Phone number</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        /// <value>Postal code</value>
        [DataMember(Name = "postal-code", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Enable event for objects that have not been used or changed [true/false]
        /// </summary>
        /// <value>Enable event for objects that have not been used or changed [true/false]</value>
        [DataMember(Name = "usage-event-enable", EmitDefaultValue = false)]
        public string UsageEventEnable { get; set; }

        /// <summary>
        /// Interval by days for unused objects. Default and minimum interval is 90 days
        /// </summary>
        /// <value>Interval by days for unused objects. Default and minimum interval is 90 days</value>
        [DataMember(Name = "usage-event-interval", EmitDefaultValue = false)]
        public long UsageEventInterval { get; set; }

        /// <summary>
        /// Usage event is supported for auth method or secrets-and-keys [auth/item]
        /// </summary>
        /// <value>Usage event is supported for auth method or secrets-and-keys [auth/item]</value>
        [DataMember(Name = "usage-event-object-type", EmitDefaultValue = false)]
        public string UsageEventObjectType { get; set; }

        /// <summary>
        /// Password must contain lower case letters [true/false]
        /// </summary>
        /// <value>Password must contain lower case letters [true/false]</value>
        [DataMember(Name = "use-lower-letters", EmitDefaultValue = false)]
        public string UseLowerLetters { get; set; }

        /// <summary>
        /// Password must contain numbers [true/false]
        /// </summary>
        /// <value>Password must contain numbers [true/false]</value>
        [DataMember(Name = "use-numbers", EmitDefaultValue = false)]
        public string UseNumbers { get; set; }

        /// <summary>
        /// Password must contain special characters [true/false]
        /// </summary>
        /// <value>Password must contain special characters [true/false]</value>
        [DataMember(Name = "use-special-characters", EmitDefaultValue = false)]
        public string UseSpecialCharacters { get; set; }

        /// <summary>
        /// Password must contain capital letters [true/false]
        /// </summary>
        /// <value>Password must contain capital letters [true/false]</value>
        [DataMember(Name = "use_capital-letters", EmitDefaultValue = false)]
        public string UseCapitalLetters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateAccountSettings {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  BoundIps: ").Append(BoundIps).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  DefaultKeyName: ").Append(DefaultKeyName).Append("\n");
            sb.Append("  DefaultShareLinkTtlMinutes: ").Append(DefaultShareLinkTtlMinutes).Append("\n");
            sb.Append("  DefaultVersioning: ").Append(DefaultVersioning).Append("\n");
            sb.Append("  DpEnableClassicKeyProtection: ").Append(DpEnableClassicKeyProtection).Append("\n");
            sb.Append("  DynamicSecretMaxTtl: ").Append(DynamicSecretMaxTtl).Append("\n");
            sb.Append("  DynamicSecretMaxTtlEnable: ").Append(DynamicSecretMaxTtlEnable).Append("\n");
            sb.Append("  EnableItemSharing: ").Append(EnableItemSharing).Append("\n");
            sb.Append("  EnablePasswordExpiration: ").Append(EnablePasswordExpiration).Append("\n");
            sb.Append("  ForceNewVersions: ").Append(ForceNewVersions).Append("\n");
            sb.Append("  GwBoundIps: ").Append(GwBoundIps).Append("\n");
            sb.Append("  InvalidCharacters: ").Append(InvalidCharacters).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  ItemsDeletionProtection: ").Append(ItemsDeletionProtection).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  JwtTtlDefault: ").Append(JwtTtlDefault).Append("\n");
            sb.Append("  JwtTtlMax: ").Append(JwtTtlMax).Append("\n");
            sb.Append("  JwtTtlMin: ").Append(JwtTtlMin).Append("\n");
            sb.Append("  LockBoundIps: ").Append(LockBoundIps).Append("\n");
            sb.Append("  LockDefaultKey: ").Append(LockDefaultKey).Append("\n");
            sb.Append("  LockGwBoundIps: ").Append(LockGwBoundIps).Append("\n");
            sb.Append("  MaxRotationInterval: ").Append(MaxRotationInterval).Append("\n");
            sb.Append("  MaxRotationIntervalEnable: ").Append(MaxRotationIntervalEnable).Append("\n");
            sb.Append("  MaxVersions: ").Append(MaxVersions).Append("\n");
            sb.Append("  PasswordExpirationDays: ").Append(PasswordExpirationDays).Append("\n");
            sb.Append("  PasswordExpirationNotificationDays: ").Append(PasswordExpirationNotificationDays).Append("\n");
            sb.Append("  PasswordLength: ").Append(PasswordLength).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UsageEventEnable: ").Append(UsageEventEnable).Append("\n");
            sb.Append("  UsageEventInterval: ").Append(UsageEventInterval).Append("\n");
            sb.Append("  UsageEventObjectType: ").Append(UsageEventObjectType).Append("\n");
            sb.Append("  UseLowerLetters: ").Append(UseLowerLetters).Append("\n");
            sb.Append("  UseNumbers: ").Append(UseNumbers).Append("\n");
            sb.Append("  UseSpecialCharacters: ").Append(UseSpecialCharacters).Append("\n");
            sb.Append("  UseCapitalLetters: ").Append(UseCapitalLetters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateAccountSettings);
        }

        /// <summary>
        /// Returns true if UpdateAccountSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateAccountSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateAccountSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.BoundIps == input.BoundIps ||
                    this.BoundIps != null &&
                    input.BoundIps != null &&
                    this.BoundIps.SequenceEqual(input.BoundIps)
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.DefaultKeyName == input.DefaultKeyName ||
                    (this.DefaultKeyName != null &&
                    this.DefaultKeyName.Equals(input.DefaultKeyName))
                ) && 
                (
                    this.DefaultShareLinkTtlMinutes == input.DefaultShareLinkTtlMinutes ||
                    (this.DefaultShareLinkTtlMinutes != null &&
                    this.DefaultShareLinkTtlMinutes.Equals(input.DefaultShareLinkTtlMinutes))
                ) && 
                (
                    this.DefaultVersioning == input.DefaultVersioning ||
                    (this.DefaultVersioning != null &&
                    this.DefaultVersioning.Equals(input.DefaultVersioning))
                ) && 
                (
                    this.DpEnableClassicKeyProtection == input.DpEnableClassicKeyProtection ||
                    (this.DpEnableClassicKeyProtection != null &&
                    this.DpEnableClassicKeyProtection.Equals(input.DpEnableClassicKeyProtection))
                ) && 
                (
                    this.DynamicSecretMaxTtl == input.DynamicSecretMaxTtl ||
                    this.DynamicSecretMaxTtl.Equals(input.DynamicSecretMaxTtl)
                ) && 
                (
                    this.DynamicSecretMaxTtlEnable == input.DynamicSecretMaxTtlEnable ||
                    (this.DynamicSecretMaxTtlEnable != null &&
                    this.DynamicSecretMaxTtlEnable.Equals(input.DynamicSecretMaxTtlEnable))
                ) && 
                (
                    this.EnableItemSharing == input.EnableItemSharing ||
                    (this.EnableItemSharing != null &&
                    this.EnableItemSharing.Equals(input.EnableItemSharing))
                ) && 
                (
                    this.EnablePasswordExpiration == input.EnablePasswordExpiration ||
                    (this.EnablePasswordExpiration != null &&
                    this.EnablePasswordExpiration.Equals(input.EnablePasswordExpiration))
                ) && 
                (
                    this.ForceNewVersions == input.ForceNewVersions ||
                    (this.ForceNewVersions != null &&
                    this.ForceNewVersions.Equals(input.ForceNewVersions))
                ) && 
                (
                    this.GwBoundIps == input.GwBoundIps ||
                    this.GwBoundIps != null &&
                    input.GwBoundIps != null &&
                    this.GwBoundIps.SequenceEqual(input.GwBoundIps)
                ) && 
                (
                    this.InvalidCharacters == input.InvalidCharacters ||
                    (this.InvalidCharacters != null &&
                    this.InvalidCharacters.Equals(input.InvalidCharacters))
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    (this.ItemType != null &&
                    this.ItemType.Equals(input.ItemType))
                ) && 
                (
                    this.ItemsDeletionProtection == input.ItemsDeletionProtection ||
                    (this.ItemsDeletionProtection != null &&
                    this.ItemsDeletionProtection.Equals(input.ItemsDeletionProtection))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.JwtTtlDefault == input.JwtTtlDefault ||
                    this.JwtTtlDefault.Equals(input.JwtTtlDefault)
                ) && 
                (
                    this.JwtTtlMax == input.JwtTtlMax ||
                    this.JwtTtlMax.Equals(input.JwtTtlMax)
                ) && 
                (
                    this.JwtTtlMin == input.JwtTtlMin ||
                    this.JwtTtlMin.Equals(input.JwtTtlMin)
                ) && 
                (
                    this.LockBoundIps == input.LockBoundIps ||
                    (this.LockBoundIps != null &&
                    this.LockBoundIps.Equals(input.LockBoundIps))
                ) && 
                (
                    this.LockDefaultKey == input.LockDefaultKey ||
                    (this.LockDefaultKey != null &&
                    this.LockDefaultKey.Equals(input.LockDefaultKey))
                ) && 
                (
                    this.LockGwBoundIps == input.LockGwBoundIps ||
                    (this.LockGwBoundIps != null &&
                    this.LockGwBoundIps.Equals(input.LockGwBoundIps))
                ) && 
                (
                    this.MaxRotationInterval == input.MaxRotationInterval ||
                    this.MaxRotationInterval.Equals(input.MaxRotationInterval)
                ) && 
                (
                    this.MaxRotationIntervalEnable == input.MaxRotationIntervalEnable ||
                    (this.MaxRotationIntervalEnable != null &&
                    this.MaxRotationIntervalEnable.Equals(input.MaxRotationIntervalEnable))
                ) && 
                (
                    this.MaxVersions == input.MaxVersions ||
                    (this.MaxVersions != null &&
                    this.MaxVersions.Equals(input.MaxVersions))
                ) && 
                (
                    this.PasswordExpirationDays == input.PasswordExpirationDays ||
                    (this.PasswordExpirationDays != null &&
                    this.PasswordExpirationDays.Equals(input.PasswordExpirationDays))
                ) && 
                (
                    this.PasswordExpirationNotificationDays == input.PasswordExpirationNotificationDays ||
                    (this.PasswordExpirationNotificationDays != null &&
                    this.PasswordExpirationNotificationDays.Equals(input.PasswordExpirationNotificationDays))
                ) && 
                (
                    this.PasswordLength == input.PasswordLength ||
                    this.PasswordLength.Equals(input.PasswordLength)
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UsageEventEnable == input.UsageEventEnable ||
                    (this.UsageEventEnable != null &&
                    this.UsageEventEnable.Equals(input.UsageEventEnable))
                ) && 
                (
                    this.UsageEventInterval == input.UsageEventInterval ||
                    this.UsageEventInterval.Equals(input.UsageEventInterval)
                ) && 
                (
                    this.UsageEventObjectType == input.UsageEventObjectType ||
                    (this.UsageEventObjectType != null &&
                    this.UsageEventObjectType.Equals(input.UsageEventObjectType))
                ) && 
                (
                    this.UseLowerLetters == input.UseLowerLetters ||
                    (this.UseLowerLetters != null &&
                    this.UseLowerLetters.Equals(input.UseLowerLetters))
                ) && 
                (
                    this.UseNumbers == input.UseNumbers ||
                    (this.UseNumbers != null &&
                    this.UseNumbers.Equals(input.UseNumbers))
                ) && 
                (
                    this.UseSpecialCharacters == input.UseSpecialCharacters ||
                    (this.UseSpecialCharacters != null &&
                    this.UseSpecialCharacters.Equals(input.UseSpecialCharacters))
                ) && 
                (
                    this.UseCapitalLetters == input.UseCapitalLetters ||
                    (this.UseCapitalLetters != null &&
                    this.UseCapitalLetters.Equals(input.UseCapitalLetters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.BoundIps != null)
                {
                    hashCode = (hashCode * 59) + this.BoundIps.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.DefaultKeyName != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultKeyName.GetHashCode();
                }
                if (this.DefaultShareLinkTtlMinutes != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultShareLinkTtlMinutes.GetHashCode();
                }
                if (this.DefaultVersioning != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultVersioning.GetHashCode();
                }
                if (this.DpEnableClassicKeyProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DpEnableClassicKeyProtection.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DynamicSecretMaxTtl.GetHashCode();
                if (this.DynamicSecretMaxTtlEnable != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicSecretMaxTtlEnable.GetHashCode();
                }
                if (this.EnableItemSharing != null)
                {
                    hashCode = (hashCode * 59) + this.EnableItemSharing.GetHashCode();
                }
                if (this.EnablePasswordExpiration != null)
                {
                    hashCode = (hashCode * 59) + this.EnablePasswordExpiration.GetHashCode();
                }
                if (this.ForceNewVersions != null)
                {
                    hashCode = (hashCode * 59) + this.ForceNewVersions.GetHashCode();
                }
                if (this.GwBoundIps != null)
                {
                    hashCode = (hashCode * 59) + this.GwBoundIps.GetHashCode();
                }
                if (this.InvalidCharacters != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidCharacters.GetHashCode();
                }
                if (this.ItemType != null)
                {
                    hashCode = (hashCode * 59) + this.ItemType.GetHashCode();
                }
                if (this.ItemsDeletionProtection != null)
                {
                    hashCode = (hashCode * 59) + this.ItemsDeletionProtection.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                hashCode = (hashCode * 59) + this.JwtTtlDefault.GetHashCode();
                hashCode = (hashCode * 59) + this.JwtTtlMax.GetHashCode();
                hashCode = (hashCode * 59) + this.JwtTtlMin.GetHashCode();
                if (this.LockBoundIps != null)
                {
                    hashCode = (hashCode * 59) + this.LockBoundIps.GetHashCode();
                }
                if (this.LockDefaultKey != null)
                {
                    hashCode = (hashCode * 59) + this.LockDefaultKey.GetHashCode();
                }
                if (this.LockGwBoundIps != null)
                {
                    hashCode = (hashCode * 59) + this.LockGwBoundIps.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxRotationInterval.GetHashCode();
                if (this.MaxRotationIntervalEnable != null)
                {
                    hashCode = (hashCode * 59) + this.MaxRotationIntervalEnable.GetHashCode();
                }
                if (this.MaxVersions != null)
                {
                    hashCode = (hashCode * 59) + this.MaxVersions.GetHashCode();
                }
                if (this.PasswordExpirationDays != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordExpirationDays.GetHashCode();
                }
                if (this.PasswordExpirationNotificationDays != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordExpirationNotificationDays.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PasswordLength.GetHashCode();
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UsageEventEnable != null)
                {
                    hashCode = (hashCode * 59) + this.UsageEventEnable.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsageEventInterval.GetHashCode();
                if (this.UsageEventObjectType != null)
                {
                    hashCode = (hashCode * 59) + this.UsageEventObjectType.GetHashCode();
                }
                if (this.UseLowerLetters != null)
                {
                    hashCode = (hashCode * 59) + this.UseLowerLetters.GetHashCode();
                }
                if (this.UseNumbers != null)
                {
                    hashCode = (hashCode * 59) + this.UseNumbers.GetHashCode();
                }
                if (this.UseSpecialCharacters != null)
                {
                    hashCode = (hashCode * 59) + this.UseSpecialCharacters.GetHashCode();
                }
                if (this.UseCapitalLetters != null)
                {
                    hashCode = (hashCode * 59) + this.UseCapitalLetters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
