/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateProducerVenafi is a command that creates a Venafi dynamic secret producer to dynamically create certificates generated by Venafi or have Akeyless generated certificates using PKI be monitored by Venafi [Deprecated: Use dynamic-secret-create-venafi command]
    /// </summary>
    [DataContract(Name = "gatewayCreateProducerVenafi")]
    public partial class GatewayCreateProducerVenafi : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerVenafi" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerVenafi() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerVenafi" /> class.
        /// </summary>
        /// <param name="adminRotationIntervalDays">Admin credentials rotation interval (days) (default to 0).</param>
        /// <param name="allowSubdomains">Allow subdomains.</param>
        /// <param name="allowedDomains">Allowed domains.</param>
        /// <param name="autoGeneratedFolder">Auto generated folder.</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="enableAdminRotation">Automatic admin credentials rotation (default to false).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Dynamic secret name (required).</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="rootFirstInChain">Root first in chain.</param>
        /// <param name="signUsingAkeylessPki">Use Akeyless PKI issuer or Venafi issuer.</param>
        /// <param name="signerKeyName">Signer key name.</param>
        /// <param name="storePrivateKey">Store private key.</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL in time.Duration format (2160h / 129600m / etc...). When using sign-using-akeyless-pki certificates created will have this validity period, otherwise the user-ttl is taken from the Validity Period field of the Zone&#39;s&#39; Issuing Template. When using cert-manager it is advised to have a TTL of above 60 days (1440h). For more information - https://cert-manager.io/docs/usage/certificate/ (default to &quot;2160h&quot;).</param>
        /// <param name="venafiAccessToken">Venafi Access Token to use to access the TPP environment (Relevant when using TPP).</param>
        /// <param name="venafiApiKey">Venafi API key.</param>
        /// <param name="venafiBaseurl">Venafi Baseurl.</param>
        /// <param name="venafiClientId">Venafi Client ID that was used when the access token was generated (default to &quot;akeyless&quot;).</param>
        /// <param name="venafiRefreshToken">Venafi Refresh Token to use when the Access Token is expired (Relevant when using TPP).</param>
        /// <param name="venafiUseTpp">Venafi using TPP.</param>
        /// <param name="venafiZone">Venafi Zone.</param>
        public GatewayCreateProducerVenafi(long adminRotationIntervalDays = 0, bool allowSubdomains = default(bool), List<string> allowedDomains = default(List<string>), string autoGeneratedFolder = default(string), string deleteProtection = default(string), bool enableAdminRotation = false, bool json = false, string name = default(string), string producerEncryptionKeyName = default(string), bool rootFirstInChain = default(bool), bool signUsingAkeylessPki = default(bool), string signerKeyName = default(string), bool storePrivateKey = default(bool), List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userTtl = @"2160h", string venafiAccessToken = default(string), string venafiApiKey = default(string), string venafiBaseurl = default(string), string venafiClientId = @"akeyless", string venafiRefreshToken = default(string), bool venafiUseTpp = default(bool), string venafiZone = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayCreateProducerVenafi and cannot be null");
            }
            this.Name = name;
            this.AdminRotationIntervalDays = adminRotationIntervalDays;
            this.AllowSubdomains = allowSubdomains;
            this.AllowedDomains = allowedDomains;
            this.AutoGeneratedFolder = autoGeneratedFolder;
            this.DeleteProtection = deleteProtection;
            this.EnableAdminRotation = enableAdminRotation;
            this.Json = json;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.RootFirstInChain = rootFirstInChain;
            this.SignUsingAkeylessPki = signUsingAkeylessPki;
            this.SignerKeyName = signerKeyName;
            this.StorePrivateKey = storePrivateKey;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? @"2160h";
            this.VenafiAccessToken = venafiAccessToken;
            this.VenafiApiKey = venafiApiKey;
            this.VenafiBaseurl = venafiBaseurl;
            // use default value if no "venafiClientId" provided
            this.VenafiClientId = venafiClientId ?? @"akeyless";
            this.VenafiRefreshToken = venafiRefreshToken;
            this.VenafiUseTpp = venafiUseTpp;
            this.VenafiZone = venafiZone;
        }

        /// <summary>
        /// Admin credentials rotation interval (days)
        /// </summary>
        /// <value>Admin credentials rotation interval (days)</value>
        [DataMember(Name = "admin-rotation-interval-days", EmitDefaultValue = false)]
        public long AdminRotationIntervalDays { get; set; }

        /// <summary>
        /// Allow subdomains
        /// </summary>
        /// <value>Allow subdomains</value>
        [DataMember(Name = "allow-subdomains", EmitDefaultValue = true)]
        public bool AllowSubdomains { get; set; }

        /// <summary>
        /// Allowed domains
        /// </summary>
        /// <value>Allowed domains</value>
        [DataMember(Name = "allowed-domains", EmitDefaultValue = false)]
        public List<string> AllowedDomains { get; set; }

        /// <summary>
        /// Auto generated folder
        /// </summary>
        /// <value>Auto generated folder</value>
        [DataMember(Name = "auto-generated-folder", EmitDefaultValue = false)]
        public string AutoGeneratedFolder { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Automatic admin credentials rotation
        /// </summary>
        /// <value>Automatic admin credentials rotation</value>
        [DataMember(Name = "enable-admin-rotation", EmitDefaultValue = true)]
        public bool EnableAdminRotation { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Root first in chain
        /// </summary>
        /// <value>Root first in chain</value>
        [DataMember(Name = "root-first-in-chain", EmitDefaultValue = true)]
        public bool RootFirstInChain { get; set; }

        /// <summary>
        /// Use Akeyless PKI issuer or Venafi issuer
        /// </summary>
        /// <value>Use Akeyless PKI issuer or Venafi issuer</value>
        [DataMember(Name = "sign-using-akeyless-pki", EmitDefaultValue = true)]
        public bool SignUsingAkeylessPki { get; set; }

        /// <summary>
        /// Signer key name
        /// </summary>
        /// <value>Signer key name</value>
        [DataMember(Name = "signer-key-name", EmitDefaultValue = false)]
        public string SignerKeyName { get; set; }

        /// <summary>
        /// Store private key
        /// </summary>
        /// <value>Store private key</value>
        [DataMember(Name = "store-private-key", EmitDefaultValue = true)]
        public bool StorePrivateKey { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL in time.Duration format (2160h / 129600m / etc...). When using sign-using-akeyless-pki certificates created will have this validity period, otherwise the user-ttl is taken from the Validity Period field of the Zone&#39;s&#39; Issuing Template. When using cert-manager it is advised to have a TTL of above 60 days (1440h). For more information - https://cert-manager.io/docs/usage/certificate/
        /// </summary>
        /// <value>User TTL in time.Duration format (2160h / 129600m / etc...). When using sign-using-akeyless-pki certificates created will have this validity period, otherwise the user-ttl is taken from the Validity Period field of the Zone&#39;s&#39; Issuing Template. When using cert-manager it is advised to have a TTL of above 60 days (1440h). For more information - https://cert-manager.io/docs/usage/certificate/</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Venafi Access Token to use to access the TPP environment (Relevant when using TPP)
        /// </summary>
        /// <value>Venafi Access Token to use to access the TPP environment (Relevant when using TPP)</value>
        [DataMember(Name = "venafi-access-token", EmitDefaultValue = false)]
        public string VenafiAccessToken { get; set; }

        /// <summary>
        /// Venafi API key
        /// </summary>
        /// <value>Venafi API key</value>
        [DataMember(Name = "venafi-api-key", EmitDefaultValue = false)]
        public string VenafiApiKey { get; set; }

        /// <summary>
        /// Venafi Baseurl
        /// </summary>
        /// <value>Venafi Baseurl</value>
        [DataMember(Name = "venafi-baseurl", EmitDefaultValue = false)]
        public string VenafiBaseurl { get; set; }

        /// <summary>
        /// Venafi Client ID that was used when the access token was generated
        /// </summary>
        /// <value>Venafi Client ID that was used when the access token was generated</value>
        [DataMember(Name = "venafi-client-id", EmitDefaultValue = false)]
        public string VenafiClientId { get; set; }

        /// <summary>
        /// Venafi Refresh Token to use when the Access Token is expired (Relevant when using TPP)
        /// </summary>
        /// <value>Venafi Refresh Token to use when the Access Token is expired (Relevant when using TPP)</value>
        [DataMember(Name = "venafi-refresh-token", EmitDefaultValue = false)]
        public string VenafiRefreshToken { get; set; }

        /// <summary>
        /// Venafi using TPP
        /// </summary>
        /// <value>Venafi using TPP</value>
        [DataMember(Name = "venafi-use-tpp", EmitDefaultValue = true)]
        public bool VenafiUseTpp { get; set; }

        /// <summary>
        /// Venafi Zone
        /// </summary>
        /// <value>Venafi Zone</value>
        [DataMember(Name = "venafi-zone", EmitDefaultValue = false)]
        public string VenafiZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerVenafi {\n");
            sb.Append("  AdminRotationIntervalDays: ").Append(AdminRotationIntervalDays).Append("\n");
            sb.Append("  AllowSubdomains: ").Append(AllowSubdomains).Append("\n");
            sb.Append("  AllowedDomains: ").Append(AllowedDomains).Append("\n");
            sb.Append("  AutoGeneratedFolder: ").Append(AutoGeneratedFolder).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  EnableAdminRotation: ").Append(EnableAdminRotation).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  RootFirstInChain: ").Append(RootFirstInChain).Append("\n");
            sb.Append("  SignUsingAkeylessPki: ").Append(SignUsingAkeylessPki).Append("\n");
            sb.Append("  SignerKeyName: ").Append(SignerKeyName).Append("\n");
            sb.Append("  StorePrivateKey: ").Append(StorePrivateKey).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("  VenafiAccessToken: ").Append(VenafiAccessToken).Append("\n");
            sb.Append("  VenafiApiKey: ").Append(VenafiApiKey).Append("\n");
            sb.Append("  VenafiBaseurl: ").Append(VenafiBaseurl).Append("\n");
            sb.Append("  VenafiClientId: ").Append(VenafiClientId).Append("\n");
            sb.Append("  VenafiRefreshToken: ").Append(VenafiRefreshToken).Append("\n");
            sb.Append("  VenafiUseTpp: ").Append(VenafiUseTpp).Append("\n");
            sb.Append("  VenafiZone: ").Append(VenafiZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
