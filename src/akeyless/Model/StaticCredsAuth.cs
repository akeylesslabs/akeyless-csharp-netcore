/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// staticCredsAuth is a command that creates a temporary access profile using the provided static credentials.
    /// </summary>
    [DataContract(Name = "staticCredsAuth")]
    public partial class StaticCredsAuth : IEquatable<StaticCredsAuth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaticCredsAuth" /> class.
        /// </summary>
        /// <param name="accessId">Akeyless JWT token.</param>
        /// <param name="adminEmail">Akeyless JWT token.</param>
        /// <param name="creds">Akeyless JWT token.</param>
        public StaticCredsAuth(string accessId = default(string), string adminEmail = default(string), string creds = default(string))
        {
            this.AccessId = accessId;
            this.AdminEmail = adminEmail;
            this.Creds = creds;
        }

        /// <summary>
        /// Akeyless JWT token
        /// </summary>
        /// <value>Akeyless JWT token</value>
        [DataMember(Name = "access-id", EmitDefaultValue = false)]
        public string AccessId { get; set; }

        /// <summary>
        /// Akeyless JWT token
        /// </summary>
        /// <value>Akeyless JWT token</value>
        [DataMember(Name = "admin-email", EmitDefaultValue = false)]
        public string AdminEmail { get; set; }

        /// <summary>
        /// Akeyless JWT token
        /// </summary>
        /// <value>Akeyless JWT token</value>
        [DataMember(Name = "creds", EmitDefaultValue = false)]
        public string Creds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StaticCredsAuth {\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  AdminEmail: ").Append(AdminEmail).Append("\n");
            sb.Append("  Creds: ").Append(Creds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StaticCredsAuth);
        }

        /// <summary>
        /// Returns true if StaticCredsAuth instances are equal
        /// </summary>
        /// <param name="input">Instance of StaticCredsAuth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaticCredsAuth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessId == input.AccessId ||
                    (this.AccessId != null &&
                    this.AccessId.Equals(input.AccessId))
                ) && 
                (
                    this.AdminEmail == input.AdminEmail ||
                    (this.AdminEmail != null &&
                    this.AdminEmail.Equals(input.AdminEmail))
                ) && 
                (
                    this.Creds == input.Creds ||
                    (this.Creds != null &&
                    this.Creds.Equals(input.Creds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessId != null)
                    hashCode = hashCode * 59 + this.AccessId.GetHashCode();
                if (this.AdminEmail != null)
                    hashCode = hashCode * 59 + this.AdminEmail.GetHashCode();
                if (this.Creds != null)
                    hashCode = hashCode * 59 + this.Creds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
