/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// RotatedSecretUpdateAws
    /// </summary>
    [DataContract(Name = "rotatedSecretUpdateAws")]
    public partial class RotatedSecretUpdateAws : IEquatable<RotatedSecretUpdateAws>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RotatedSecretUpdateAws" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RotatedSecretUpdateAws() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RotatedSecretUpdateAws" /> class.
        /// </summary>
        /// <param name="addTag">List of the new tags that will be attached to this item.</param>
        /// <param name="apiId">API ID to rotate (relevant only for rotator-type&#x3D;api-key).</param>
        /// <param name="apiKey">API key to rotate (relevant only for rotator-type&#x3D;api-key).</param>
        /// <param name="authenticationCredentials">The credentials to connect with use-user-creds/use-target-creds (default to &quot;use-user-creds&quot;).</param>
        /// <param name="autoRotate">Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation [true/false].</param>
        /// <param name="awsRegion">Aws Region (default to &quot;us-east-2&quot;).</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this item [true/false].</param>
        /// <param name="description">Description of the object (default to &quot;default_metadata&quot;).</param>
        /// <param name="graceRotation">Create a new access key without deleting the old key from AWS for backup (relevant only for AWS) [true/false].</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="keepPrevVersion">Whether to keep previous version [true/false]. If not set, use default according to account settings.</param>
        /// <param name="key">The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="name">Rotated secret name (required).</param>
        /// <param name="newName">New item name.</param>
        /// <param name="passwordLength">The length of the password to be generated.</param>
        /// <param name="rmTag">List of the existent tags that will be removed from this item.</param>
        /// <param name="rotateAfterDisconnect">Rotate the value of the secret after SRA session ends [true/false] (default to &quot;false&quot;).</param>
        /// <param name="rotationHour">The Hour of the rotation in UTC.</param>
        /// <param name="rotationInterval">The number of days to wait between every automatic key rotation (1-365).</param>
        /// <param name="secureAccessAwsAccountId">The AWS account id.</param>
        /// <param name="secureAccessAwsNativeCli">The AWS native cli.</param>
        /// <param name="secureAccessBastionIssuer">Path to the SSH Certificate Issuer for your Akeyless Bastion.</param>
        /// <param name="secureAccessEnable">Enable/Disable secure remote access [true/false].</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public RotatedSecretUpdateAws(List<string> addTag = default(List<string>), string apiId = default(string), string apiKey = default(string), string authenticationCredentials = "use-user-creds", string autoRotate = default(string), string awsRegion = "us-east-2", string deleteProtection = default(string), string description = "default_metadata", string graceRotation = default(string), bool json = false, string keepPrevVersion = default(string), string key = default(string), string name = default(string), string newName = default(string), string passwordLength = default(string), List<string> rmTag = default(List<string>), string rotateAfterDisconnect = "false", int rotationHour = default(int), string rotationInterval = default(string), string secureAccessAwsAccountId = default(string), bool secureAccessAwsNativeCli = default(bool), string secureAccessBastionIssuer = default(string), string secureAccessEnable = default(string), string token = default(string), string uidToken = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RotatedSecretUpdateAws and cannot be null");
            }
            this.Name = name;
            this.AddTag = addTag;
            this.ApiId = apiId;
            this.ApiKey = apiKey;
            // use default value if no "authenticationCredentials" provided
            this.AuthenticationCredentials = authenticationCredentials ?? "use-user-creds";
            this.AutoRotate = autoRotate;
            // use default value if no "awsRegion" provided
            this.AwsRegion = awsRegion ?? "us-east-2";
            this.DeleteProtection = deleteProtection;
            // use default value if no "description" provided
            this.Description = description ?? "default_metadata";
            this.GraceRotation = graceRotation;
            this.Json = json;
            this.KeepPrevVersion = keepPrevVersion;
            this.Key = key;
            this.NewName = newName;
            this.PasswordLength = passwordLength;
            this.RmTag = rmTag;
            // use default value if no "rotateAfterDisconnect" provided
            this.RotateAfterDisconnect = rotateAfterDisconnect ?? "false";
            this.RotationHour = rotationHour;
            this.RotationInterval = rotationInterval;
            this.SecureAccessAwsAccountId = secureAccessAwsAccountId;
            this.SecureAccessAwsNativeCli = secureAccessAwsNativeCli;
            this.SecureAccessBastionIssuer = secureAccessBastionIssuer;
            this.SecureAccessEnable = secureAccessEnable;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// List of the new tags that will be attached to this item
        /// </summary>
        /// <value>List of the new tags that will be attached to this item</value>
        [DataMember(Name = "add-tag", EmitDefaultValue = false)]
        public List<string> AddTag { get; set; }

        /// <summary>
        /// API ID to rotate (relevant only for rotator-type&#x3D;api-key)
        /// </summary>
        /// <value>API ID to rotate (relevant only for rotator-type&#x3D;api-key)</value>
        [DataMember(Name = "api-id", EmitDefaultValue = false)]
        public string ApiId { get; set; }

        /// <summary>
        /// API key to rotate (relevant only for rotator-type&#x3D;api-key)
        /// </summary>
        /// <value>API key to rotate (relevant only for rotator-type&#x3D;api-key)</value>
        [DataMember(Name = "api-key", EmitDefaultValue = false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// The credentials to connect with use-user-creds/use-target-creds
        /// </summary>
        /// <value>The credentials to connect with use-user-creds/use-target-creds</value>
        [DataMember(Name = "authentication-credentials", EmitDefaultValue = false)]
        public string AuthenticationCredentials { get; set; }

        /// <summary>
        /// Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation [true/false]
        /// </summary>
        /// <value>Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation [true/false]</value>
        [DataMember(Name = "auto-rotate", EmitDefaultValue = false)]
        public string AutoRotate { get; set; }

        /// <summary>
        /// Aws Region
        /// </summary>
        /// <value>Aws Region</value>
        [DataMember(Name = "aws-region", EmitDefaultValue = false)]
        public string AwsRegion { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this item [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this item [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Create a new access key without deleting the old key from AWS for backup (relevant only for AWS) [true/false]
        /// </summary>
        /// <value>Create a new access key without deleting the old key from AWS for backup (relevant only for AWS) [true/false]</value>
        [DataMember(Name = "grace-rotation", EmitDefaultValue = false)]
        public string GraceRotation { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Whether to keep previous version [true/false]. If not set, use default according to account settings
        /// </summary>
        /// <value>Whether to keep previous version [true/false]. If not set, use default according to account settings</value>
        [DataMember(Name = "keep-prev-version", EmitDefaultValue = false)]
        public string KeepPrevVersion { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Rotated secret name
        /// </summary>
        /// <value>Rotated secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// New item name
        /// </summary>
        /// <value>New item name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// The length of the password to be generated
        /// </summary>
        /// <value>The length of the password to be generated</value>
        [DataMember(Name = "password-length", EmitDefaultValue = false)]
        public string PasswordLength { get; set; }

        /// <summary>
        /// List of the existent tags that will be removed from this item
        /// </summary>
        /// <value>List of the existent tags that will be removed from this item</value>
        [DataMember(Name = "rm-tag", EmitDefaultValue = false)]
        public List<string> RmTag { get; set; }

        /// <summary>
        /// Rotate the value of the secret after SRA session ends [true/false]
        /// </summary>
        /// <value>Rotate the value of the secret after SRA session ends [true/false]</value>
        [DataMember(Name = "rotate-after-disconnect", EmitDefaultValue = false)]
        public string RotateAfterDisconnect { get; set; }

        /// <summary>
        /// The Hour of the rotation in UTC
        /// </summary>
        /// <value>The Hour of the rotation in UTC</value>
        [DataMember(Name = "rotation-hour", EmitDefaultValue = false)]
        public int RotationHour { get; set; }

        /// <summary>
        /// The number of days to wait between every automatic key rotation (1-365)
        /// </summary>
        /// <value>The number of days to wait between every automatic key rotation (1-365)</value>
        [DataMember(Name = "rotation-interval", EmitDefaultValue = false)]
        public string RotationInterval { get; set; }

        /// <summary>
        /// The AWS account id
        /// </summary>
        /// <value>The AWS account id</value>
        [DataMember(Name = "secure-access-aws-account-id", EmitDefaultValue = false)]
        public string SecureAccessAwsAccountId { get; set; }

        /// <summary>
        /// The AWS native cli
        /// </summary>
        /// <value>The AWS native cli</value>
        [DataMember(Name = "secure-access-aws-native-cli", EmitDefaultValue = true)]
        public bool SecureAccessAwsNativeCli { get; set; }

        /// <summary>
        /// Path to the SSH Certificate Issuer for your Akeyless Bastion
        /// </summary>
        /// <value>Path to the SSH Certificate Issuer for your Akeyless Bastion</value>
        [DataMember(Name = "secure-access-bastion-issuer", EmitDefaultValue = false)]
        public string SecureAccessBastionIssuer { get; set; }

        /// <summary>
        /// Enable/Disable secure remote access [true/false]
        /// </summary>
        /// <value>Enable/Disable secure remote access [true/false]</value>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RotatedSecretUpdateAws {\n");
            sb.Append("  AddTag: ").Append(AddTag).Append("\n");
            sb.Append("  ApiId: ").Append(ApiId).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  AuthenticationCredentials: ").Append(AuthenticationCredentials).Append("\n");
            sb.Append("  AutoRotate: ").Append(AutoRotate).Append("\n");
            sb.Append("  AwsRegion: ").Append(AwsRegion).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GraceRotation: ").Append(GraceRotation).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeepPrevVersion: ").Append(KeepPrevVersion).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  PasswordLength: ").Append(PasswordLength).Append("\n");
            sb.Append("  RmTag: ").Append(RmTag).Append("\n");
            sb.Append("  RotateAfterDisconnect: ").Append(RotateAfterDisconnect).Append("\n");
            sb.Append("  RotationHour: ").Append(RotationHour).Append("\n");
            sb.Append("  RotationInterval: ").Append(RotationInterval).Append("\n");
            sb.Append("  SecureAccessAwsAccountId: ").Append(SecureAccessAwsAccountId).Append("\n");
            sb.Append("  SecureAccessAwsNativeCli: ").Append(SecureAccessAwsNativeCli).Append("\n");
            sb.Append("  SecureAccessBastionIssuer: ").Append(SecureAccessBastionIssuer).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RotatedSecretUpdateAws);
        }

        /// <summary>
        /// Returns true if RotatedSecretUpdateAws instances are equal
        /// </summary>
        /// <param name="input">Instance of RotatedSecretUpdateAws to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RotatedSecretUpdateAws input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AddTag == input.AddTag ||
                    this.AddTag != null &&
                    input.AddTag != null &&
                    this.AddTag.SequenceEqual(input.AddTag)
                ) && 
                (
                    this.ApiId == input.ApiId ||
                    (this.ApiId != null &&
                    this.ApiId.Equals(input.ApiId))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.AuthenticationCredentials == input.AuthenticationCredentials ||
                    (this.AuthenticationCredentials != null &&
                    this.AuthenticationCredentials.Equals(input.AuthenticationCredentials))
                ) && 
                (
                    this.AutoRotate == input.AutoRotate ||
                    (this.AutoRotate != null &&
                    this.AutoRotate.Equals(input.AutoRotate))
                ) && 
                (
                    this.AwsRegion == input.AwsRegion ||
                    (this.AwsRegion != null &&
                    this.AwsRegion.Equals(input.AwsRegion))
                ) && 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    (this.DeleteProtection != null &&
                    this.DeleteProtection.Equals(input.DeleteProtection))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.GraceRotation == input.GraceRotation ||
                    (this.GraceRotation != null &&
                    this.GraceRotation.Equals(input.GraceRotation))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.KeepPrevVersion == input.KeepPrevVersion ||
                    (this.KeepPrevVersion != null &&
                    this.KeepPrevVersion.Equals(input.KeepPrevVersion))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                ) && 
                (
                    this.PasswordLength == input.PasswordLength ||
                    (this.PasswordLength != null &&
                    this.PasswordLength.Equals(input.PasswordLength))
                ) && 
                (
                    this.RmTag == input.RmTag ||
                    this.RmTag != null &&
                    input.RmTag != null &&
                    this.RmTag.SequenceEqual(input.RmTag)
                ) && 
                (
                    this.RotateAfterDisconnect == input.RotateAfterDisconnect ||
                    (this.RotateAfterDisconnect != null &&
                    this.RotateAfterDisconnect.Equals(input.RotateAfterDisconnect))
                ) && 
                (
                    this.RotationHour == input.RotationHour ||
                    this.RotationHour.Equals(input.RotationHour)
                ) && 
                (
                    this.RotationInterval == input.RotationInterval ||
                    (this.RotationInterval != null &&
                    this.RotationInterval.Equals(input.RotationInterval))
                ) && 
                (
                    this.SecureAccessAwsAccountId == input.SecureAccessAwsAccountId ||
                    (this.SecureAccessAwsAccountId != null &&
                    this.SecureAccessAwsAccountId.Equals(input.SecureAccessAwsAccountId))
                ) && 
                (
                    this.SecureAccessAwsNativeCli == input.SecureAccessAwsNativeCli ||
                    this.SecureAccessAwsNativeCli.Equals(input.SecureAccessAwsNativeCli)
                ) && 
                (
                    this.SecureAccessBastionIssuer == input.SecureAccessBastionIssuer ||
                    (this.SecureAccessBastionIssuer != null &&
                    this.SecureAccessBastionIssuer.Equals(input.SecureAccessBastionIssuer))
                ) && 
                (
                    this.SecureAccessEnable == input.SecureAccessEnable ||
                    (this.SecureAccessEnable != null &&
                    this.SecureAccessEnable.Equals(input.SecureAccessEnable))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddTag != null)
                {
                    hashCode = (hashCode * 59) + this.AddTag.GetHashCode();
                }
                if (this.ApiId != null)
                {
                    hashCode = (hashCode * 59) + this.ApiId.GetHashCode();
                }
                if (this.ApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.ApiKey.GetHashCode();
                }
                if (this.AuthenticationCredentials != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationCredentials.GetHashCode();
                }
                if (this.AutoRotate != null)
                {
                    hashCode = (hashCode * 59) + this.AutoRotate.GetHashCode();
                }
                if (this.AwsRegion != null)
                {
                    hashCode = (hashCode * 59) + this.AwsRegion.GetHashCode();
                }
                if (this.DeleteProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteProtection.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.GraceRotation != null)
                {
                    hashCode = (hashCode * 59) + this.GraceRotation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.KeepPrevVersion != null)
                {
                    hashCode = (hashCode * 59) + this.KeepPrevVersion.GetHashCode();
                }
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NewName != null)
                {
                    hashCode = (hashCode * 59) + this.NewName.GetHashCode();
                }
                if (this.PasswordLength != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordLength.GetHashCode();
                }
                if (this.RmTag != null)
                {
                    hashCode = (hashCode * 59) + this.RmTag.GetHashCode();
                }
                if (this.RotateAfterDisconnect != null)
                {
                    hashCode = (hashCode * 59) + this.RotateAfterDisconnect.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RotationHour.GetHashCode();
                if (this.RotationInterval != null)
                {
                    hashCode = (hashCode * 59) + this.RotationInterval.GetHashCode();
                }
                if (this.SecureAccessAwsAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessAwsAccountId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SecureAccessAwsNativeCli.GetHashCode();
                if (this.SecureAccessBastionIssuer != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessBastionIssuer.GetHashCode();
                }
                if (this.SecureAccessEnable != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessEnable.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
