/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// TmpUserData
    /// </summary>
    [DataContract(Name = "TmpUserData")]
    public partial class TmpUserData : IEquatable<TmpUserData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TmpUserData" /> class.
        /// </summary>
        /// <param name="accessId">accessId.</param>
        /// <param name="creationDate">creationDate.</param>
        /// <param name="customTtl">customTtl.</param>
        /// <param name="dynamicSecretType">dynamicSecretType.</param>
        /// <param name="host">host.</param>
        /// <param name="id">id.</param>
        /// <param name="subClaims">subClaims.</param>
        public TmpUserData(string accessId = default(string), DateTime creationDate = default(DateTime), long customTtl = default(long), string dynamicSecretType = default(string), string host = default(string), string id = default(string), Dictionary<string, List<string>> subClaims = default(Dictionary<string, List<string>>))
        {
            this.AccessId = accessId;
            this.CreationDate = creationDate;
            this.CustomTtl = customTtl;
            this.DynamicSecretType = dynamicSecretType;
            this.Host = host;
            this.Id = id;
            this.SubClaims = subClaims;
        }

        /// <summary>
        /// Gets or Sets AccessId
        /// </summary>
        [DataMember(Name = "access_id", EmitDefaultValue = false)]
        public string AccessId { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name = "creation_date", EmitDefaultValue = false)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomTtl
        /// </summary>
        [DataMember(Name = "custom_ttl", EmitDefaultValue = false)]
        public long CustomTtl { get; set; }

        /// <summary>
        /// Gets or Sets DynamicSecretType
        /// </summary>
        [DataMember(Name = "dynamic_secret_type", EmitDefaultValue = false)]
        public string DynamicSecretType { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets SubClaims
        /// </summary>
        [DataMember(Name = "sub_claims", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> SubClaims { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TmpUserData {\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  CustomTtl: ").Append(CustomTtl).Append("\n");
            sb.Append("  DynamicSecretType: ").Append(DynamicSecretType).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SubClaims: ").Append(SubClaims).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TmpUserData);
        }

        /// <summary>
        /// Returns true if TmpUserData instances are equal
        /// </summary>
        /// <param name="input">Instance of TmpUserData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TmpUserData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessId == input.AccessId ||
                    (this.AccessId != null &&
                    this.AccessId.Equals(input.AccessId))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.CustomTtl == input.CustomTtl ||
                    this.CustomTtl.Equals(input.CustomTtl)
                ) && 
                (
                    this.DynamicSecretType == input.DynamicSecretType ||
                    (this.DynamicSecretType != null &&
                    this.DynamicSecretType.Equals(input.DynamicSecretType))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SubClaims == input.SubClaims ||
                    this.SubClaims != null &&
                    input.SubClaims != null &&
                    this.SubClaims.SequenceEqual(input.SubClaims)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessId != null)
                    hashCode = hashCode * 59 + this.AccessId.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                hashCode = hashCode * 59 + this.CustomTtl.GetHashCode();
                if (this.DynamicSecretType != null)
                    hashCode = hashCode * 59 + this.DynamicSecretType.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SubClaims != null)
                    hashCode = hashCode * 59 + this.SubClaims.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
