/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayUpdateProducerRedshift is a command that updates redshift producer [Deprecated: Use dynamic-secret-update-redshift command]
    /// </summary>
    [DataContract(Name = "gatewayUpdateProducerRedshift")]
    public partial class GatewayUpdateProducerRedshift : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateProducerRedshift" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayUpdateProducerRedshift() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateProducerRedshift" /> class.
        /// </summary>
        /// <param name="creationStatements">Redshift Creation statements.</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Dynamic secret name (required).</param>
        /// <param name="newName">Dynamic secret name.</param>
        /// <param name="passwordLength">The length of the password to be generated.</param>
        /// <param name="producerEncryptionKey">Dynamic producer encryption key.</param>
        /// <param name="redshiftDbName">Redshift DB Name.</param>
        /// <param name="redshiftHost">Redshift Host (default to &quot;127.0.0.1&quot;).</param>
        /// <param name="redshiftPassword">Redshift Password.</param>
        /// <param name="redshiftPort">Redshift Port (default to &quot;5439&quot;).</param>
        /// <param name="redshiftUsername">Redshift Username.</param>
        /// <param name="secureAccessEnable">Enable/Disable secure remote access [true/false].</param>
        /// <param name="secureAccessHost">Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts).</param>
        /// <param name="ssl">Enable/Disable SSL [true/false] (default to false).</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public GatewayUpdateProducerRedshift(string creationStatements = default(string), string deleteProtection = default(string), bool json = false, string name = default(string), string newName = default(string), string passwordLength = default(string), string producerEncryptionKey = default(string), string redshiftDbName = default(string), string redshiftHost = @"127.0.0.1", string redshiftPassword = default(string), string redshiftPort = @"5439", string redshiftUsername = default(string), string secureAccessEnable = default(string), List<string> secureAccessHost = default(List<string>), bool ssl = false, List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userTtl = @"60m")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayUpdateProducerRedshift and cannot be null");
            }
            this.Name = name;
            this.CreationStatements = creationStatements;
            this.DeleteProtection = deleteProtection;
            this.Json = json;
            this.NewName = newName;
            this.PasswordLength = passwordLength;
            this.ProducerEncryptionKey = producerEncryptionKey;
            this.RedshiftDbName = redshiftDbName;
            // use default value if no "redshiftHost" provided
            this.RedshiftHost = redshiftHost ?? @"127.0.0.1";
            this.RedshiftPassword = redshiftPassword;
            // use default value if no "redshiftPort" provided
            this.RedshiftPort = redshiftPort ?? @"5439";
            this.RedshiftUsername = redshiftUsername;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessHost = secureAccessHost;
            this.Ssl = ssl;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? @"60m";
        }

        /// <summary>
        /// Redshift Creation statements
        /// </summary>
        /// <value>Redshift Creation statements</value>
        [DataMember(Name = "creation-statements", EmitDefaultValue = false)]
        public string CreationStatements { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// The length of the password to be generated
        /// </summary>
        /// <value>The length of the password to be generated</value>
        [DataMember(Name = "password-length", EmitDefaultValue = false)]
        public string PasswordLength { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name = "producer-encryption-key", EmitDefaultValue = false)]
        public string ProducerEncryptionKey { get; set; }

        /// <summary>
        /// Redshift DB Name
        /// </summary>
        /// <value>Redshift DB Name</value>
        [DataMember(Name = "redshift-db-name", EmitDefaultValue = false)]
        public string RedshiftDbName { get; set; }

        /// <summary>
        /// Redshift Host
        /// </summary>
        /// <value>Redshift Host</value>
        [DataMember(Name = "redshift-host", EmitDefaultValue = false)]
        public string RedshiftHost { get; set; }

        /// <summary>
        /// Redshift Password
        /// </summary>
        /// <value>Redshift Password</value>
        [DataMember(Name = "redshift-password", EmitDefaultValue = false)]
        public string RedshiftPassword { get; set; }

        /// <summary>
        /// Redshift Port
        /// </summary>
        /// <value>Redshift Port</value>
        [DataMember(Name = "redshift-port", EmitDefaultValue = false)]
        public string RedshiftPort { get; set; }

        /// <summary>
        /// Redshift Username
        /// </summary>
        /// <value>Redshift Username</value>
        [DataMember(Name = "redshift-username", EmitDefaultValue = false)]
        public string RedshiftUsername { get; set; }

        /// <summary>
        /// Enable/Disable secure remote access [true/false]
        /// </summary>
        /// <value>Enable/Disable secure remote access [true/false]</value>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts)
        /// </summary>
        /// <value>Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts)</value>
        [DataMember(Name = "secure-access-host", EmitDefaultValue = false)]
        public List<string> SecureAccessHost { get; set; }

        /// <summary>
        /// Enable/Disable SSL [true/false]
        /// </summary>
        /// <value>Enable/Disable SSL [true/false]</value>
        [DataMember(Name = "ssl", EmitDefaultValue = true)]
        public bool Ssl { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayUpdateProducerRedshift {\n");
            sb.Append("  CreationStatements: ").Append(CreationStatements).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  PasswordLength: ").Append(PasswordLength).Append("\n");
            sb.Append("  ProducerEncryptionKey: ").Append(ProducerEncryptionKey).Append("\n");
            sb.Append("  RedshiftDbName: ").Append(RedshiftDbName).Append("\n");
            sb.Append("  RedshiftHost: ").Append(RedshiftHost).Append("\n");
            sb.Append("  RedshiftPassword: ").Append(RedshiftPassword).Append("\n");
            sb.Append("  RedshiftPort: ").Append(RedshiftPort).Append("\n");
            sb.Append("  RedshiftUsername: ").Append(RedshiftUsername).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessHost: ").Append(SecureAccessHost).Append("\n");
            sb.Append("  Ssl: ").Append(Ssl).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
