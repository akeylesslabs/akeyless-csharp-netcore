/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CreateClassicKey is a command that creates classic key
    /// </summary>
    [DataContract(Name = "CreateClassicKey")]
    public partial class CreateClassicKey : IEquatable<CreateClassicKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateClassicKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateClassicKey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateClassicKey" /> class.
        /// </summary>
        /// <param name="alg">Classic Key type; options: [AES128GCM, AES256GCM, AES128SIV, AES256SIV, RSA1024, RSA2048, RSA3072, RSA4096, EC256, EC384, GPG] (required).</param>
        /// <param name="certFileData">Certificate in a PEM format..</param>
        /// <param name="certificateCommonName">Common name for the generated certificate. Relevant only for generate-self-signed-certificate..</param>
        /// <param name="certificateCountry">Country name for the generated certificate. Relevant only for generate-self-signed-certificate..</param>
        /// <param name="certificateDigestAlgo">Digest algorithm to be used for the certificate key signing. Currently, we support only \&quot;sha256\&quot; so we hide this option for CLI..</param>
        /// <param name="certificateLocality">Locality for the generated certificate. Relevant only for generate-self-signed-certificate..</param>
        /// <param name="certificateOrganization">Organization name for the generated certificate. Relevant only for generate-self-signed-certificate..</param>
        /// <param name="certificateProvince">Province name for the generated certificate. Relevant only for generate-self-signed-certificate..</param>
        /// <param name="certificateTtl">TTL in days for the generated certificate. Required only for generate-self-signed-certificate..</param>
        /// <param name="confFileData">The csr config data in base64 encoding.</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this item [true/false].</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="generateSelfSignedCertificate">Whether to generate a self signed certificate with the key. If set, - -certificate-ttl must be provided..</param>
        /// <param name="gpgAlg">gpg alg: Relevant only if GPG key type selected; options: [RSA1024, RSA2048, RSA3072, RSA4096, Ed25519].</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="keyData">Base64-encoded classic key value.</param>
        /// <param name="metadata">Deprecated - use description.</param>
        /// <param name="name">ClassicKey name (required).</param>
        /// <param name="protectionKeyName">The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public CreateClassicKey(string alg = default(string), string certFileData = default(string), string certificateCommonName = default(string), string certificateCountry = default(string), string certificateDigestAlgo = default(string), string certificateLocality = default(string), string certificateOrganization = default(string), string certificateProvince = default(string), long certificateTtl = default(long), string confFileData = default(string), string deleteProtection = default(string), string description = default(string), bool generateSelfSignedCertificate = default(bool), string gpgAlg = default(string), bool json = false, string keyData = default(string), string metadata = default(string), string name = default(string), string protectionKeyName = default(string), List<string> tags = default(List<string>), string token = default(string), string uidToken = default(string))
        {
            // to ensure "alg" is required (not null)
            if (alg == null)
            {
                throw new ArgumentNullException("alg is a required property for CreateClassicKey and cannot be null");
            }
            this.Alg = alg;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateClassicKey and cannot be null");
            }
            this.Name = name;
            this.CertFileData = certFileData;
            this.CertificateCommonName = certificateCommonName;
            this.CertificateCountry = certificateCountry;
            this.CertificateDigestAlgo = certificateDigestAlgo;
            this.CertificateLocality = certificateLocality;
            this.CertificateOrganization = certificateOrganization;
            this.CertificateProvince = certificateProvince;
            this.CertificateTtl = certificateTtl;
            this.ConfFileData = confFileData;
            this.DeleteProtection = deleteProtection;
            this.Description = description;
            this.GenerateSelfSignedCertificate = generateSelfSignedCertificate;
            this.GpgAlg = gpgAlg;
            this.Json = json;
            this.KeyData = keyData;
            this.Metadata = metadata;
            this.ProtectionKeyName = protectionKeyName;
            this.Tags = tags;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Classic Key type; options: [AES128GCM, AES256GCM, AES128SIV, AES256SIV, RSA1024, RSA2048, RSA3072, RSA4096, EC256, EC384, GPG]
        /// </summary>
        /// <value>Classic Key type; options: [AES128GCM, AES256GCM, AES128SIV, AES256SIV, RSA1024, RSA2048, RSA3072, RSA4096, EC256, EC384, GPG]</value>
        [DataMember(Name = "alg", IsRequired = true, EmitDefaultValue = true)]
        public string Alg { get; set; }

        /// <summary>
        /// Certificate in a PEM format.
        /// </summary>
        /// <value>Certificate in a PEM format.</value>
        [DataMember(Name = "cert-file-data", EmitDefaultValue = false)]
        public string CertFileData { get; set; }

        /// <summary>
        /// Common name for the generated certificate. Relevant only for generate-self-signed-certificate.
        /// </summary>
        /// <value>Common name for the generated certificate. Relevant only for generate-self-signed-certificate.</value>
        [DataMember(Name = "certificate-common-name", EmitDefaultValue = false)]
        public string CertificateCommonName { get; set; }

        /// <summary>
        /// Country name for the generated certificate. Relevant only for generate-self-signed-certificate.
        /// </summary>
        /// <value>Country name for the generated certificate. Relevant only for generate-self-signed-certificate.</value>
        [DataMember(Name = "certificate-country", EmitDefaultValue = false)]
        public string CertificateCountry { get; set; }

        /// <summary>
        /// Digest algorithm to be used for the certificate key signing. Currently, we support only \&quot;sha256\&quot; so we hide this option for CLI.
        /// </summary>
        /// <value>Digest algorithm to be used for the certificate key signing. Currently, we support only \&quot;sha256\&quot; so we hide this option for CLI.</value>
        [DataMember(Name = "certificate-digest-algo", EmitDefaultValue = false)]
        public string CertificateDigestAlgo { get; set; }

        /// <summary>
        /// Locality for the generated certificate. Relevant only for generate-self-signed-certificate.
        /// </summary>
        /// <value>Locality for the generated certificate. Relevant only for generate-self-signed-certificate.</value>
        [DataMember(Name = "certificate-locality", EmitDefaultValue = false)]
        public string CertificateLocality { get; set; }

        /// <summary>
        /// Organization name for the generated certificate. Relevant only for generate-self-signed-certificate.
        /// </summary>
        /// <value>Organization name for the generated certificate. Relevant only for generate-self-signed-certificate.</value>
        [DataMember(Name = "certificate-organization", EmitDefaultValue = false)]
        public string CertificateOrganization { get; set; }

        /// <summary>
        /// Province name for the generated certificate. Relevant only for generate-self-signed-certificate.
        /// </summary>
        /// <value>Province name for the generated certificate. Relevant only for generate-self-signed-certificate.</value>
        [DataMember(Name = "certificate-province", EmitDefaultValue = false)]
        public string CertificateProvince { get; set; }

        /// <summary>
        /// TTL in days for the generated certificate. Required only for generate-self-signed-certificate.
        /// </summary>
        /// <value>TTL in days for the generated certificate. Required only for generate-self-signed-certificate.</value>
        [DataMember(Name = "certificate-ttl", EmitDefaultValue = false)]
        public long CertificateTtl { get; set; }

        /// <summary>
        /// The csr config data in base64 encoding
        /// </summary>
        /// <value>The csr config data in base64 encoding</value>
        [DataMember(Name = "conf-file-data", EmitDefaultValue = false)]
        public string ConfFileData { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this item [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this item [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Whether to generate a self signed certificate with the key. If set, - -certificate-ttl must be provided.
        /// </summary>
        /// <value>Whether to generate a self signed certificate with the key. If set, - -certificate-ttl must be provided.</value>
        [DataMember(Name = "generate-self-signed-certificate", EmitDefaultValue = true)]
        public bool GenerateSelfSignedCertificate { get; set; }

        /// <summary>
        /// gpg alg: Relevant only if GPG key type selected; options: [RSA1024, RSA2048, RSA3072, RSA4096, Ed25519]
        /// </summary>
        /// <value>gpg alg: Relevant only if GPG key type selected; options: [RSA1024, RSA2048, RSA3072, RSA4096, Ed25519]</value>
        [DataMember(Name = "gpg-alg", EmitDefaultValue = false)]
        public string GpgAlg { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Base64-encoded classic key value
        /// </summary>
        /// <value>Base64-encoded classic key value</value>
        [DataMember(Name = "key-data", EmitDefaultValue = false)]
        public string KeyData { get; set; }

        /// <summary>
        /// Deprecated - use description
        /// </summary>
        /// <value>Deprecated - use description</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// ClassicKey name
        /// </summary>
        /// <value>ClassicKey name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "protection-key-name", EmitDefaultValue = false)]
        public string ProtectionKeyName { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateClassicKey {\n");
            sb.Append("  Alg: ").Append(Alg).Append("\n");
            sb.Append("  CertFileData: ").Append(CertFileData).Append("\n");
            sb.Append("  CertificateCommonName: ").Append(CertificateCommonName).Append("\n");
            sb.Append("  CertificateCountry: ").Append(CertificateCountry).Append("\n");
            sb.Append("  CertificateDigestAlgo: ").Append(CertificateDigestAlgo).Append("\n");
            sb.Append("  CertificateLocality: ").Append(CertificateLocality).Append("\n");
            sb.Append("  CertificateOrganization: ").Append(CertificateOrganization).Append("\n");
            sb.Append("  CertificateProvince: ").Append(CertificateProvince).Append("\n");
            sb.Append("  CertificateTtl: ").Append(CertificateTtl).Append("\n");
            sb.Append("  ConfFileData: ").Append(ConfFileData).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GenerateSelfSignedCertificate: ").Append(GenerateSelfSignedCertificate).Append("\n");
            sb.Append("  GpgAlg: ").Append(GpgAlg).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeyData: ").Append(KeyData).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProtectionKeyName: ").Append(ProtectionKeyName).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateClassicKey);
        }

        /// <summary>
        /// Returns true if CreateClassicKey instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateClassicKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateClassicKey input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Alg == input.Alg ||
                    (this.Alg != null &&
                    this.Alg.Equals(input.Alg))
                ) && 
                (
                    this.CertFileData == input.CertFileData ||
                    (this.CertFileData != null &&
                    this.CertFileData.Equals(input.CertFileData))
                ) && 
                (
                    this.CertificateCommonName == input.CertificateCommonName ||
                    (this.CertificateCommonName != null &&
                    this.CertificateCommonName.Equals(input.CertificateCommonName))
                ) && 
                (
                    this.CertificateCountry == input.CertificateCountry ||
                    (this.CertificateCountry != null &&
                    this.CertificateCountry.Equals(input.CertificateCountry))
                ) && 
                (
                    this.CertificateDigestAlgo == input.CertificateDigestAlgo ||
                    (this.CertificateDigestAlgo != null &&
                    this.CertificateDigestAlgo.Equals(input.CertificateDigestAlgo))
                ) && 
                (
                    this.CertificateLocality == input.CertificateLocality ||
                    (this.CertificateLocality != null &&
                    this.CertificateLocality.Equals(input.CertificateLocality))
                ) && 
                (
                    this.CertificateOrganization == input.CertificateOrganization ||
                    (this.CertificateOrganization != null &&
                    this.CertificateOrganization.Equals(input.CertificateOrganization))
                ) && 
                (
                    this.CertificateProvince == input.CertificateProvince ||
                    (this.CertificateProvince != null &&
                    this.CertificateProvince.Equals(input.CertificateProvince))
                ) && 
                (
                    this.CertificateTtl == input.CertificateTtl ||
                    this.CertificateTtl.Equals(input.CertificateTtl)
                ) && 
                (
                    this.ConfFileData == input.ConfFileData ||
                    (this.ConfFileData != null &&
                    this.ConfFileData.Equals(input.ConfFileData))
                ) && 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    (this.DeleteProtection != null &&
                    this.DeleteProtection.Equals(input.DeleteProtection))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.GenerateSelfSignedCertificate == input.GenerateSelfSignedCertificate ||
                    this.GenerateSelfSignedCertificate.Equals(input.GenerateSelfSignedCertificate)
                ) && 
                (
                    this.GpgAlg == input.GpgAlg ||
                    (this.GpgAlg != null &&
                    this.GpgAlg.Equals(input.GpgAlg))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.KeyData == input.KeyData ||
                    (this.KeyData != null &&
                    this.KeyData.Equals(input.KeyData))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProtectionKeyName == input.ProtectionKeyName ||
                    (this.ProtectionKeyName != null &&
                    this.ProtectionKeyName.Equals(input.ProtectionKeyName))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alg != null)
                {
                    hashCode = (hashCode * 59) + this.Alg.GetHashCode();
                }
                if (this.CertFileData != null)
                {
                    hashCode = (hashCode * 59) + this.CertFileData.GetHashCode();
                }
                if (this.CertificateCommonName != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateCommonName.GetHashCode();
                }
                if (this.CertificateCountry != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateCountry.GetHashCode();
                }
                if (this.CertificateDigestAlgo != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateDigestAlgo.GetHashCode();
                }
                if (this.CertificateLocality != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateLocality.GetHashCode();
                }
                if (this.CertificateOrganization != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateOrganization.GetHashCode();
                }
                if (this.CertificateProvince != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateProvince.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CertificateTtl.GetHashCode();
                if (this.ConfFileData != null)
                {
                    hashCode = (hashCode * 59) + this.ConfFileData.GetHashCode();
                }
                if (this.DeleteProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteProtection.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GenerateSelfSignedCertificate.GetHashCode();
                if (this.GpgAlg != null)
                {
                    hashCode = (hashCode * 59) + this.GpgAlg.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.KeyData != null)
                {
                    hashCode = (hashCode * 59) + this.KeyData.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ProtectionKeyName != null)
                {
                    hashCode = (hashCode * 59) + this.ProtectionKeyName.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
