/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// AcmeAccount is copied without the jwk as it seems like it has issues with sdk
    /// </summary>
    [DataContract(Name = "AcmeAccount")]
    public partial class AcmeAccount : IEquatable<AcmeAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AcmeAccount" /> class.
        /// </summary>
        /// <param name="accountId">AccountId is the ACME account id, not Akeyless account id.</param>
        /// <param name="keyDigest">keyDigest.</param>
        /// <param name="status">status.</param>
        public AcmeAccount(string accountId = default(string), string keyDigest = default(string), string status = default(string))
        {
            this.AccountId = accountId;
            this.KeyDigest = keyDigest;
            this.Status = status;
        }

        /// <summary>
        /// AccountId is the ACME account id, not Akeyless account id
        /// </summary>
        /// <value>AccountId is the ACME account id, not Akeyless account id</value>
        [DataMember(Name = "account_id", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets KeyDigest
        /// </summary>
        [DataMember(Name = "key_digest", EmitDefaultValue = false)]
        public string KeyDigest { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AcmeAccount {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  KeyDigest: ").Append(KeyDigest).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AcmeAccount);
        }

        /// <summary>
        /// Returns true if AcmeAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of AcmeAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AcmeAccount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.KeyDigest == input.KeyDigest ||
                    (this.KeyDigest != null &&
                    this.KeyDigest.Equals(input.KeyDigest))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.KeyDigest != null)
                {
                    hashCode = (hashCode * 59) + this.KeyDigest.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
