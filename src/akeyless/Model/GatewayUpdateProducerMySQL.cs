/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayUpdateProducerMySQL is a command that updates mysql producer [Deprecated: Use dynamic-secret-update-mysql command]
    /// </summary>
    [DataContract(Name = "gatewayUpdateProducerMySQL")]
    public partial class GatewayUpdateProducerMySQL : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateProducerMySQL" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayUpdateProducerMySQL() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateProducerMySQL" /> class.
        /// </summary>
        /// <param name="customUsernameTemplate">Customize how temporary usernames are generated using go template.</param>
        /// <param name="dbServerCertificates">(Optional) DB server certificates.</param>
        /// <param name="dbServerName">(Optional) Server name for certificate verification.</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="mysqlDbname">MySQL DB Name.</param>
        /// <param name="mysqlHost">MySQL Host (default to &quot;127.0.0.1&quot;).</param>
        /// <param name="mysqlPassword">MySQL Password.</param>
        /// <param name="mysqlPort">MySQL Port (default to &quot;3306&quot;).</param>
        /// <param name="mysqlRevocationStatements">MySQL Revocation statements.</param>
        /// <param name="mysqlScreationStatements">MySQL Creation statements.</param>
        /// <param name="mysqlUsername">MySQL Username.</param>
        /// <param name="name">Dynamic secret name (required).</param>
        /// <param name="newName">Dynamic secret name.</param>
        /// <param name="passwordLength">The length of the password to be generated.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="secureAccessBastionIssuer">Deprecated. use secure-access-certificate-issuer.</param>
        /// <param name="secureAccessCertificateIssuer">Path to the SSH Certificate Issuer for your Akeyless Secure Access.</param>
        /// <param name="secureAccessDbName">The DB name (relevant only for DB Dynamic-Secret).</param>
        /// <param name="secureAccessDelay">The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds.</param>
        /// <param name="secureAccessEnable">Enable/Disable secure remote access [true/false].</param>
        /// <param name="secureAccessHost">Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts).</param>
        /// <param name="secureAccessWeb">Enable Web Secure Remote Access (default to false).</param>
        /// <param name="ssl">Enable/Disable SSL [true/false] (default to false).</param>
        /// <param name="sslCertificate">SSL connection certificate.</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public GatewayUpdateProducerMySQL(string customUsernameTemplate = default(string), string dbServerCertificates = default(string), string dbServerName = default(string), string deleteProtection = default(string), bool json = false, string mysqlDbname = default(string), string mysqlHost = @"127.0.0.1", string mysqlPassword = default(string), string mysqlPort = @"3306", string mysqlRevocationStatements = default(string), string mysqlScreationStatements = default(string), string mysqlUsername = default(string), string name = default(string), string newName = default(string), string passwordLength = default(string), string producerEncryptionKeyName = default(string), string secureAccessBastionIssuer = default(string), string secureAccessCertificateIssuer = default(string), string secureAccessDbName = default(string), long secureAccessDelay = default(long), string secureAccessEnable = default(string), List<string> secureAccessHost = default(List<string>), bool secureAccessWeb = false, bool ssl = false, string sslCertificate = default(string), List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userTtl = @"60m")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayUpdateProducerMySQL and cannot be null");
            }
            this.Name = name;
            this.CustomUsernameTemplate = customUsernameTemplate;
            this.DbServerCertificates = dbServerCertificates;
            this.DbServerName = dbServerName;
            this.DeleteProtection = deleteProtection;
            this.Json = json;
            this.MysqlDbname = mysqlDbname;
            // use default value if no "mysqlHost" provided
            this.MysqlHost = mysqlHost ?? @"127.0.0.1";
            this.MysqlPassword = mysqlPassword;
            // use default value if no "mysqlPort" provided
            this.MysqlPort = mysqlPort ?? @"3306";
            this.MysqlRevocationStatements = mysqlRevocationStatements;
            this.MysqlScreationStatements = mysqlScreationStatements;
            this.MysqlUsername = mysqlUsername;
            this.NewName = newName;
            this.PasswordLength = passwordLength;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.SecureAccessBastionIssuer = secureAccessBastionIssuer;
            this.SecureAccessCertificateIssuer = secureAccessCertificateIssuer;
            this.SecureAccessDbName = secureAccessDbName;
            this.SecureAccessDelay = secureAccessDelay;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessHost = secureAccessHost;
            this.SecureAccessWeb = secureAccessWeb;
            this.Ssl = ssl;
            this.SslCertificate = sslCertificate;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? @"60m";
        }

        /// <summary>
        /// Customize how temporary usernames are generated using go template
        /// </summary>
        /// <value>Customize how temporary usernames are generated using go template</value>
        [DataMember(Name = "custom-username-template", EmitDefaultValue = false)]
        public string CustomUsernameTemplate { get; set; }

        /// <summary>
        /// (Optional) DB server certificates
        /// </summary>
        /// <value>(Optional) DB server certificates</value>
        [DataMember(Name = "db-server-certificates", EmitDefaultValue = false)]
        public string DbServerCertificates { get; set; }

        /// <summary>
        /// (Optional) Server name for certificate verification
        /// </summary>
        /// <value>(Optional) Server name for certificate verification</value>
        [DataMember(Name = "db-server-name", EmitDefaultValue = false)]
        public string DbServerName { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// MySQL DB Name
        /// </summary>
        /// <value>MySQL DB Name</value>
        [DataMember(Name = "mysql-dbname", EmitDefaultValue = false)]
        public string MysqlDbname { get; set; }

        /// <summary>
        /// MySQL Host
        /// </summary>
        /// <value>MySQL Host</value>
        [DataMember(Name = "mysql-host", EmitDefaultValue = false)]
        public string MysqlHost { get; set; }

        /// <summary>
        /// MySQL Password
        /// </summary>
        /// <value>MySQL Password</value>
        [DataMember(Name = "mysql-password", EmitDefaultValue = false)]
        public string MysqlPassword { get; set; }

        /// <summary>
        /// MySQL Port
        /// </summary>
        /// <value>MySQL Port</value>
        [DataMember(Name = "mysql-port", EmitDefaultValue = false)]
        public string MysqlPort { get; set; }

        /// <summary>
        /// MySQL Revocation statements
        /// </summary>
        /// <value>MySQL Revocation statements</value>
        [DataMember(Name = "mysql-revocation-statements", EmitDefaultValue = false)]
        public string MysqlRevocationStatements { get; set; }

        /// <summary>
        /// MySQL Creation statements
        /// </summary>
        /// <value>MySQL Creation statements</value>
        [DataMember(Name = "mysql-screation-statements", EmitDefaultValue = false)]
        public string MysqlScreationStatements { get; set; }

        /// <summary>
        /// MySQL Username
        /// </summary>
        /// <value>MySQL Username</value>
        [DataMember(Name = "mysql-username", EmitDefaultValue = false)]
        public string MysqlUsername { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// The length of the password to be generated
        /// </summary>
        /// <value>The length of the password to be generated</value>
        [DataMember(Name = "password-length", EmitDefaultValue = false)]
        public string PasswordLength { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Deprecated. use secure-access-certificate-issuer
        /// </summary>
        /// <value>Deprecated. use secure-access-certificate-issuer</value>
        [DataMember(Name = "secure-access-bastion-issuer", EmitDefaultValue = false)]
        public string SecureAccessBastionIssuer { get; set; }

        /// <summary>
        /// Path to the SSH Certificate Issuer for your Akeyless Secure Access
        /// </summary>
        /// <value>Path to the SSH Certificate Issuer for your Akeyless Secure Access</value>
        [DataMember(Name = "secure-access-certificate-issuer", EmitDefaultValue = false)]
        public string SecureAccessCertificateIssuer { get; set; }

        /// <summary>
        /// The DB name (relevant only for DB Dynamic-Secret)
        /// </summary>
        /// <value>The DB name (relevant only for DB Dynamic-Secret)</value>
        [DataMember(Name = "secure-access-db-name", EmitDefaultValue = false)]
        public string SecureAccessDbName { get; set; }

        /// <summary>
        /// The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds
        /// </summary>
        /// <value>The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds</value>
        [DataMember(Name = "secure-access-delay", EmitDefaultValue = false)]
        public long SecureAccessDelay { get; set; }

        /// <summary>
        /// Enable/Disable secure remote access [true/false]
        /// </summary>
        /// <value>Enable/Disable secure remote access [true/false]</value>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts)
        /// </summary>
        /// <value>Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts)</value>
        [DataMember(Name = "secure-access-host", EmitDefaultValue = false)]
        public List<string> SecureAccessHost { get; set; }

        /// <summary>
        /// Enable Web Secure Remote Access
        /// </summary>
        /// <value>Enable Web Secure Remote Access</value>
        [DataMember(Name = "secure-access-web", EmitDefaultValue = true)]
        public bool SecureAccessWeb { get; set; }

        /// <summary>
        /// Enable/Disable SSL [true/false]
        /// </summary>
        /// <value>Enable/Disable SSL [true/false]</value>
        [DataMember(Name = "ssl", EmitDefaultValue = true)]
        public bool Ssl { get; set; }

        /// <summary>
        /// SSL connection certificate
        /// </summary>
        /// <value>SSL connection certificate</value>
        [DataMember(Name = "ssl-certificate", EmitDefaultValue = false)]
        public string SslCertificate { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayUpdateProducerMySQL {\n");
            sb.Append("  CustomUsernameTemplate: ").Append(CustomUsernameTemplate).Append("\n");
            sb.Append("  DbServerCertificates: ").Append(DbServerCertificates).Append("\n");
            sb.Append("  DbServerName: ").Append(DbServerName).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  MysqlDbname: ").Append(MysqlDbname).Append("\n");
            sb.Append("  MysqlHost: ").Append(MysqlHost).Append("\n");
            sb.Append("  MysqlPassword: ").Append(MysqlPassword).Append("\n");
            sb.Append("  MysqlPort: ").Append(MysqlPort).Append("\n");
            sb.Append("  MysqlRevocationStatements: ").Append(MysqlRevocationStatements).Append("\n");
            sb.Append("  MysqlScreationStatements: ").Append(MysqlScreationStatements).Append("\n");
            sb.Append("  MysqlUsername: ").Append(MysqlUsername).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  PasswordLength: ").Append(PasswordLength).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  SecureAccessBastionIssuer: ").Append(SecureAccessBastionIssuer).Append("\n");
            sb.Append("  SecureAccessCertificateIssuer: ").Append(SecureAccessCertificateIssuer).Append("\n");
            sb.Append("  SecureAccessDbName: ").Append(SecureAccessDbName).Append("\n");
            sb.Append("  SecureAccessDelay: ").Append(SecureAccessDelay).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessHost: ").Append(SecureAccessHost).Append("\n");
            sb.Append("  SecureAccessWeb: ").Append(SecureAccessWeb).Append("\n");
            sb.Append("  Ssl: ").Append(Ssl).Append("\n");
            sb.Append("  SslCertificate: ").Append(SslCertificate).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
