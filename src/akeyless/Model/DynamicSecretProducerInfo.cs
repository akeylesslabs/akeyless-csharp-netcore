/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// DynamicSecretProducerInfo The dynamic secret producer info This parameter relevant and required only in case of create update dynamic secret.
    /// </summary>
    [DataContract(Name = "DynamicSecretProducerInfo")]
    public partial class DynamicSecretProducerInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicSecretProducerInfo" /> class.
        /// </summary>
        /// <param name="failureMessage">failureMessage.</param>
        /// <param name="gwClusterId">gwClusterId.</param>
        /// <param name="k8sAllowedNamespaces">Relevant only for generic k8s producer.</param>
        /// <param name="k8sDynamicMode">Relevant only for generic k8s producer.</param>
        /// <param name="producerLastKeepAlive">producerLastKeepAlive.</param>
        /// <param name="producerMetadata">producerMetadata.</param>
        /// <param name="producerStatus">RotationStatus defines types of rotation Status.</param>
        /// <param name="producerType">producerType.</param>
        /// <param name="userTtl">userTtl.</param>
        public DynamicSecretProducerInfo(string failureMessage = default(string), long gwClusterId = default(long), string k8sAllowedNamespaces = default(string), bool k8sDynamicMode = default(bool), string producerLastKeepAlive = default(string), string producerMetadata = default(string), string producerStatus = default(string), string producerType = default(string), string userTtl = default(string))
        {
            this.FailureMessage = failureMessage;
            this.GwClusterId = gwClusterId;
            this.K8sAllowedNamespaces = k8sAllowedNamespaces;
            this.K8sDynamicMode = k8sDynamicMode;
            this.ProducerLastKeepAlive = producerLastKeepAlive;
            this.ProducerMetadata = producerMetadata;
            this.ProducerStatus = producerStatus;
            this.ProducerType = producerType;
            this.UserTtl = userTtl;
        }

        /// <summary>
        /// Gets or Sets FailureMessage
        /// </summary>
        [DataMember(Name = "failure_message", EmitDefaultValue = false)]
        public string FailureMessage { get; set; }

        /// <summary>
        /// Gets or Sets GwClusterId
        /// </summary>
        [DataMember(Name = "gw_cluster_id", EmitDefaultValue = false)]
        public long GwClusterId { get; set; }

        /// <summary>
        /// Relevant only for generic k8s producer
        /// </summary>
        /// <value>Relevant only for generic k8s producer</value>
        [DataMember(Name = "k8s_allowed_namespaces", EmitDefaultValue = false)]
        public string K8sAllowedNamespaces { get; set; }

        /// <summary>
        /// Relevant only for generic k8s producer
        /// </summary>
        /// <value>Relevant only for generic k8s producer</value>
        [DataMember(Name = "k8s_dynamic_mode", EmitDefaultValue = true)]
        public bool K8sDynamicMode { get; set; }

        /// <summary>
        /// Gets or Sets ProducerLastKeepAlive
        /// </summary>
        [DataMember(Name = "producer_last_keep_alive", EmitDefaultValue = false)]
        public string ProducerLastKeepAlive { get; set; }

        /// <summary>
        /// Gets or Sets ProducerMetadata
        /// </summary>
        [DataMember(Name = "producer_metadata", EmitDefaultValue = false)]
        public string ProducerMetadata { get; set; }

        /// <summary>
        /// RotationStatus defines types of rotation Status
        /// </summary>
        /// <value>RotationStatus defines types of rotation Status</value>
        [DataMember(Name = "producer_status", EmitDefaultValue = false)]
        public string ProducerStatus { get; set; }

        /// <summary>
        /// Gets or Sets ProducerType
        /// </summary>
        [DataMember(Name = "producer_type", EmitDefaultValue = false)]
        public string ProducerType { get; set; }

        /// <summary>
        /// Gets or Sets UserTtl
        /// </summary>
        [DataMember(Name = "user_ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DynamicSecretProducerInfo {\n");
            sb.Append("  FailureMessage: ").Append(FailureMessage).Append("\n");
            sb.Append("  GwClusterId: ").Append(GwClusterId).Append("\n");
            sb.Append("  K8sAllowedNamespaces: ").Append(K8sAllowedNamespaces).Append("\n");
            sb.Append("  K8sDynamicMode: ").Append(K8sDynamicMode).Append("\n");
            sb.Append("  ProducerLastKeepAlive: ").Append(ProducerLastKeepAlive).Append("\n");
            sb.Append("  ProducerMetadata: ").Append(ProducerMetadata).Append("\n");
            sb.Append("  ProducerStatus: ").Append(ProducerStatus).Append("\n");
            sb.Append("  ProducerType: ").Append(ProducerType).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
