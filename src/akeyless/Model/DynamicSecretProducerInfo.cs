/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// DynamicSecretProducerInfo The dynamic secret producer info This parameter relevant and required only in case of create update dynamic secret.
    /// </summary>
    [DataContract]
    public partial class DynamicSecretProducerInfo :  IEquatable<DynamicSecretProducerInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicSecretProducerInfo" /> class.
        /// </summary>
        /// <param name="gwClusterId">gwClusterId.</param>
        /// <param name="producerMetadata">producerMetadata.</param>
        /// <param name="producerStatus">RotationStatus defines types of rotation Status.</param>
        /// <param name="producerType">producerType.</param>
        public DynamicSecretProducerInfo(long gwClusterId = default(long), string producerMetadata = default(string), string producerStatus = default(string), string producerType = default(string))
        {
            this.GwClusterId = gwClusterId;
            this.ProducerMetadata = producerMetadata;
            this.ProducerStatus = producerStatus;
            this.ProducerType = producerType;
        }
        
        /// <summary>
        /// Gets or Sets GwClusterId
        /// </summary>
        [DataMember(Name="gw_cluster_id", EmitDefaultValue=false)]
        public long GwClusterId { get; set; }

        /// <summary>
        /// Gets or Sets ProducerMetadata
        /// </summary>
        [DataMember(Name="producer_metadata", EmitDefaultValue=false)]
        public string ProducerMetadata { get; set; }

        /// <summary>
        /// RotationStatus defines types of rotation Status
        /// </summary>
        /// <value>RotationStatus defines types of rotation Status</value>
        [DataMember(Name="producer_status", EmitDefaultValue=false)]
        public string ProducerStatus { get; set; }

        /// <summary>
        /// Gets or Sets ProducerType
        /// </summary>
        [DataMember(Name="producer_type", EmitDefaultValue=false)]
        public string ProducerType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DynamicSecretProducerInfo {\n");
            sb.Append("  GwClusterId: ").Append(GwClusterId).Append("\n");
            sb.Append("  ProducerMetadata: ").Append(ProducerMetadata).Append("\n");
            sb.Append("  ProducerStatus: ").Append(ProducerStatus).Append("\n");
            sb.Append("  ProducerType: ").Append(ProducerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DynamicSecretProducerInfo);
        }

        /// <summary>
        /// Returns true if DynamicSecretProducerInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DynamicSecretProducerInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DynamicSecretProducerInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GwClusterId == input.GwClusterId ||
                    this.GwClusterId.Equals(input.GwClusterId)
                ) && 
                (
                    this.ProducerMetadata == input.ProducerMetadata ||
                    (this.ProducerMetadata != null &&
                    this.ProducerMetadata.Equals(input.ProducerMetadata))
                ) && 
                (
                    this.ProducerStatus == input.ProducerStatus ||
                    (this.ProducerStatus != null &&
                    this.ProducerStatus.Equals(input.ProducerStatus))
                ) && 
                (
                    this.ProducerType == input.ProducerType ||
                    (this.ProducerType != null &&
                    this.ProducerType.Equals(input.ProducerType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.GwClusterId.GetHashCode();
                if (this.ProducerMetadata != null)
                    hashCode = hashCode * 59 + this.ProducerMetadata.GetHashCode();
                if (this.ProducerStatus != null)
                    hashCode = hashCode * 59 + this.ProducerStatus.GetHashCode();
                if (this.ProducerType != null)
                    hashCode = hashCode * 59 + this.ProducerType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
