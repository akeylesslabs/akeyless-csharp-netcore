/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// KerberosAuthMethodInfo
    /// </summary>
    [DataContract(Name = "KerberosAuthMethodInfo")]
    public partial class KerberosAuthMethodInfo : IEquatable<KerberosAuthMethodInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KerberosAuthMethodInfo" /> class.
        /// </summary>
        /// <param name="kerberosKeytab">kerberosKeytab.</param>
        /// <param name="kerberosKrb5Conf">kerberosKrb5Conf.</param>
        /// <param name="ldapAnonymousSearch">ldapAnonymousSearch.</param>
        /// <param name="ldapBindDn">ldapBindDn.</param>
        /// <param name="ldapBindPassword">ldapBindPassword.</param>
        /// <param name="ldapCertificate">ldapCertificate.</param>
        /// <param name="ldapGroupAttr">ldapGroupAttr.</param>
        /// <param name="ldapGroupDn">ldapGroupDn.</param>
        /// <param name="ldapGroupFilter">ldapGroupFilter.</param>
        /// <param name="ldapUrlAddress">ldapUrlAddress.</param>
        /// <param name="ldapUserAttr">ldapUserAttr.</param>
        /// <param name="ldapUserDn">ldapUserDn.</param>
        public KerberosAuthMethodInfo(string kerberosKeytab = default(string), string kerberosKrb5Conf = default(string), bool ldapAnonymousSearch = default(bool), string ldapBindDn = default(string), string ldapBindPassword = default(string), string ldapCertificate = default(string), string ldapGroupAttr = default(string), string ldapGroupDn = default(string), string ldapGroupFilter = default(string), string ldapUrlAddress = default(string), string ldapUserAttr = default(string), string ldapUserDn = default(string))
        {
            this.KerberosKeytab = kerberosKeytab;
            this.KerberosKrb5Conf = kerberosKrb5Conf;
            this.LdapAnonymousSearch = ldapAnonymousSearch;
            this.LdapBindDn = ldapBindDn;
            this.LdapBindPassword = ldapBindPassword;
            this.LdapCertificate = ldapCertificate;
            this.LdapGroupAttr = ldapGroupAttr;
            this.LdapGroupDn = ldapGroupDn;
            this.LdapGroupFilter = ldapGroupFilter;
            this.LdapUrlAddress = ldapUrlAddress;
            this.LdapUserAttr = ldapUserAttr;
            this.LdapUserDn = ldapUserDn;
        }

        /// <summary>
        /// Gets or Sets KerberosKeytab
        /// </summary>
        [DataMember(Name = "kerberos_keytab", EmitDefaultValue = false)]
        public string KerberosKeytab { get; set; }

        /// <summary>
        /// Gets or Sets KerberosKrb5Conf
        /// </summary>
        [DataMember(Name = "kerberos_krb5_conf", EmitDefaultValue = false)]
        public string KerberosKrb5Conf { get; set; }

        /// <summary>
        /// Gets or Sets LdapAnonymousSearch
        /// </summary>
        [DataMember(Name = "ldap_anonymous_search", EmitDefaultValue = true)]
        public bool LdapAnonymousSearch { get; set; }

        /// <summary>
        /// Gets or Sets LdapBindDn
        /// </summary>
        [DataMember(Name = "ldap_bind_dn", EmitDefaultValue = false)]
        public string LdapBindDn { get; set; }

        /// <summary>
        /// Gets or Sets LdapBindPassword
        /// </summary>
        [DataMember(Name = "ldap_bind_password", EmitDefaultValue = false)]
        public string LdapBindPassword { get; set; }

        /// <summary>
        /// Gets or Sets LdapCertificate
        /// </summary>
        [DataMember(Name = "ldap_certificate", EmitDefaultValue = false)]
        public string LdapCertificate { get; set; }

        /// <summary>
        /// Gets or Sets LdapGroupAttr
        /// </summary>
        [DataMember(Name = "ldap_group_attr", EmitDefaultValue = false)]
        public string LdapGroupAttr { get; set; }

        /// <summary>
        /// Gets or Sets LdapGroupDn
        /// </summary>
        [DataMember(Name = "ldap_group_dn", EmitDefaultValue = false)]
        public string LdapGroupDn { get; set; }

        /// <summary>
        /// Gets or Sets LdapGroupFilter
        /// </summary>
        [DataMember(Name = "ldap_group_filter", EmitDefaultValue = false)]
        public string LdapGroupFilter { get; set; }

        /// <summary>
        /// Gets or Sets LdapUrlAddress
        /// </summary>
        [DataMember(Name = "ldap_url_address", EmitDefaultValue = false)]
        public string LdapUrlAddress { get; set; }

        /// <summary>
        /// Gets or Sets LdapUserAttr
        /// </summary>
        [DataMember(Name = "ldap_user_attr", EmitDefaultValue = false)]
        public string LdapUserAttr { get; set; }

        /// <summary>
        /// Gets or Sets LdapUserDn
        /// </summary>
        [DataMember(Name = "ldap_user_dn", EmitDefaultValue = false)]
        public string LdapUserDn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KerberosAuthMethodInfo {\n");
            sb.Append("  KerberosKeytab: ").Append(KerberosKeytab).Append("\n");
            sb.Append("  KerberosKrb5Conf: ").Append(KerberosKrb5Conf).Append("\n");
            sb.Append("  LdapAnonymousSearch: ").Append(LdapAnonymousSearch).Append("\n");
            sb.Append("  LdapBindDn: ").Append(LdapBindDn).Append("\n");
            sb.Append("  LdapBindPassword: ").Append(LdapBindPassword).Append("\n");
            sb.Append("  LdapCertificate: ").Append(LdapCertificate).Append("\n");
            sb.Append("  LdapGroupAttr: ").Append(LdapGroupAttr).Append("\n");
            sb.Append("  LdapGroupDn: ").Append(LdapGroupDn).Append("\n");
            sb.Append("  LdapGroupFilter: ").Append(LdapGroupFilter).Append("\n");
            sb.Append("  LdapUrlAddress: ").Append(LdapUrlAddress).Append("\n");
            sb.Append("  LdapUserAttr: ").Append(LdapUserAttr).Append("\n");
            sb.Append("  LdapUserDn: ").Append(LdapUserDn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KerberosAuthMethodInfo);
        }

        /// <summary>
        /// Returns true if KerberosAuthMethodInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of KerberosAuthMethodInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KerberosAuthMethodInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.KerberosKeytab == input.KerberosKeytab ||
                    (this.KerberosKeytab != null &&
                    this.KerberosKeytab.Equals(input.KerberosKeytab))
                ) && 
                (
                    this.KerberosKrb5Conf == input.KerberosKrb5Conf ||
                    (this.KerberosKrb5Conf != null &&
                    this.KerberosKrb5Conf.Equals(input.KerberosKrb5Conf))
                ) && 
                (
                    this.LdapAnonymousSearch == input.LdapAnonymousSearch ||
                    this.LdapAnonymousSearch.Equals(input.LdapAnonymousSearch)
                ) && 
                (
                    this.LdapBindDn == input.LdapBindDn ||
                    (this.LdapBindDn != null &&
                    this.LdapBindDn.Equals(input.LdapBindDn))
                ) && 
                (
                    this.LdapBindPassword == input.LdapBindPassword ||
                    (this.LdapBindPassword != null &&
                    this.LdapBindPassword.Equals(input.LdapBindPassword))
                ) && 
                (
                    this.LdapCertificate == input.LdapCertificate ||
                    (this.LdapCertificate != null &&
                    this.LdapCertificate.Equals(input.LdapCertificate))
                ) && 
                (
                    this.LdapGroupAttr == input.LdapGroupAttr ||
                    (this.LdapGroupAttr != null &&
                    this.LdapGroupAttr.Equals(input.LdapGroupAttr))
                ) && 
                (
                    this.LdapGroupDn == input.LdapGroupDn ||
                    (this.LdapGroupDn != null &&
                    this.LdapGroupDn.Equals(input.LdapGroupDn))
                ) && 
                (
                    this.LdapGroupFilter == input.LdapGroupFilter ||
                    (this.LdapGroupFilter != null &&
                    this.LdapGroupFilter.Equals(input.LdapGroupFilter))
                ) && 
                (
                    this.LdapUrlAddress == input.LdapUrlAddress ||
                    (this.LdapUrlAddress != null &&
                    this.LdapUrlAddress.Equals(input.LdapUrlAddress))
                ) && 
                (
                    this.LdapUserAttr == input.LdapUserAttr ||
                    (this.LdapUserAttr != null &&
                    this.LdapUserAttr.Equals(input.LdapUserAttr))
                ) && 
                (
                    this.LdapUserDn == input.LdapUserDn ||
                    (this.LdapUserDn != null &&
                    this.LdapUserDn.Equals(input.LdapUserDn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KerberosKeytab != null)
                {
                    hashCode = (hashCode * 59) + this.KerberosKeytab.GetHashCode();
                }
                if (this.KerberosKrb5Conf != null)
                {
                    hashCode = (hashCode * 59) + this.KerberosKrb5Conf.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LdapAnonymousSearch.GetHashCode();
                if (this.LdapBindDn != null)
                {
                    hashCode = (hashCode * 59) + this.LdapBindDn.GetHashCode();
                }
                if (this.LdapBindPassword != null)
                {
                    hashCode = (hashCode * 59) + this.LdapBindPassword.GetHashCode();
                }
                if (this.LdapCertificate != null)
                {
                    hashCode = (hashCode * 59) + this.LdapCertificate.GetHashCode();
                }
                if (this.LdapGroupAttr != null)
                {
                    hashCode = (hashCode * 59) + this.LdapGroupAttr.GetHashCode();
                }
                if (this.LdapGroupDn != null)
                {
                    hashCode = (hashCode * 59) + this.LdapGroupDn.GetHashCode();
                }
                if (this.LdapGroupFilter != null)
                {
                    hashCode = (hashCode * 59) + this.LdapGroupFilter.GetHashCode();
                }
                if (this.LdapUrlAddress != null)
                {
                    hashCode = (hashCode * 59) + this.LdapUrlAddress.GetHashCode();
                }
                if (this.LdapUserAttr != null)
                {
                    hashCode = (hashCode * 59) + this.LdapUserAttr.GetHashCode();
                }
                if (this.LdapUserDn != null)
                {
                    hashCode = (hashCode * 59) + this.LdapUserDn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
