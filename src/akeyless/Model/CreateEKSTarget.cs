/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// createEKSTarget is a command that creates a new target. [Deprecated: Use target-create-eks command]
    /// </summary>
    [DataContract(Name = "createEKSTarget")]
    public partial class CreateEKSTarget : IEquatable<CreateEKSTarget>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEKSTarget" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateEKSTarget() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEKSTarget" /> class.
        /// </summary>
        /// <param name="comment">Deprecated - use description.</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="eksAccessKeyId">Access Key ID (required).</param>
        /// <param name="eksClusterCaCert">EKS cluster CA certificate (required).</param>
        /// <param name="eksClusterEndpoint">EKS cluster URL endpoint (required).</param>
        /// <param name="eksClusterName">EKS cluster name (required).</param>
        /// <param name="eksRegion">Region (default to &quot;us-east-2&quot;).</param>
        /// <param name="eksSecretAccessKey">Secret Access Key (required).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="key">The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="maxVersions">Set the maximum number of versions, limited by the account settings defaults..</param>
        /// <param name="name">Target name (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="useGwCloudIdentity">useGwCloudIdentity.</param>
        public CreateEKSTarget(string comment = default(string), string description = default(string), string eksAccessKeyId = default(string), string eksClusterCaCert = default(string), string eksClusterEndpoint = default(string), string eksClusterName = default(string), string eksRegion = "us-east-2", string eksSecretAccessKey = default(string), bool json = false, string key = default(string), string maxVersions = default(string), string name = default(string), string token = default(string), string uidToken = default(string), bool useGwCloudIdentity = default(bool))
        {
            // to ensure "eksAccessKeyId" is required (not null)
            if (eksAccessKeyId == null)
            {
                throw new ArgumentNullException("eksAccessKeyId is a required property for CreateEKSTarget and cannot be null");
            }
            this.EksAccessKeyId = eksAccessKeyId;
            // to ensure "eksClusterCaCert" is required (not null)
            if (eksClusterCaCert == null)
            {
                throw new ArgumentNullException("eksClusterCaCert is a required property for CreateEKSTarget and cannot be null");
            }
            this.EksClusterCaCert = eksClusterCaCert;
            // to ensure "eksClusterEndpoint" is required (not null)
            if (eksClusterEndpoint == null)
            {
                throw new ArgumentNullException("eksClusterEndpoint is a required property for CreateEKSTarget and cannot be null");
            }
            this.EksClusterEndpoint = eksClusterEndpoint;
            // to ensure "eksClusterName" is required (not null)
            if (eksClusterName == null)
            {
                throw new ArgumentNullException("eksClusterName is a required property for CreateEKSTarget and cannot be null");
            }
            this.EksClusterName = eksClusterName;
            // to ensure "eksSecretAccessKey" is required (not null)
            if (eksSecretAccessKey == null)
            {
                throw new ArgumentNullException("eksSecretAccessKey is a required property for CreateEKSTarget and cannot be null");
            }
            this.EksSecretAccessKey = eksSecretAccessKey;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateEKSTarget and cannot be null");
            }
            this.Name = name;
            this.Comment = comment;
            this.Description = description;
            // use default value if no "eksRegion" provided
            this.EksRegion = eksRegion ?? "us-east-2";
            this.Json = json;
            this.Key = key;
            this.MaxVersions = maxVersions;
            this.Token = token;
            this.UidToken = uidToken;
            this.UseGwCloudIdentity = useGwCloudIdentity;
        }

        /// <summary>
        /// Deprecated - use description
        /// </summary>
        /// <value>Deprecated - use description</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Access Key ID
        /// </summary>
        /// <value>Access Key ID</value>
        [DataMember(Name = "eks-access-key-id", IsRequired = true, EmitDefaultValue = true)]
        public string EksAccessKeyId { get; set; }

        /// <summary>
        /// EKS cluster CA certificate
        /// </summary>
        /// <value>EKS cluster CA certificate</value>
        [DataMember(Name = "eks-cluster-ca-cert", IsRequired = true, EmitDefaultValue = true)]
        public string EksClusterCaCert { get; set; }

        /// <summary>
        /// EKS cluster URL endpoint
        /// </summary>
        /// <value>EKS cluster URL endpoint</value>
        [DataMember(Name = "eks-cluster-endpoint", IsRequired = true, EmitDefaultValue = true)]
        public string EksClusterEndpoint { get; set; }

        /// <summary>
        /// EKS cluster name
        /// </summary>
        /// <value>EKS cluster name</value>
        [DataMember(Name = "eks-cluster-name", IsRequired = true, EmitDefaultValue = true)]
        public string EksClusterName { get; set; }

        /// <summary>
        /// Region
        /// </summary>
        /// <value>Region</value>
        [DataMember(Name = "eks-region", EmitDefaultValue = false)]
        public string EksRegion { get; set; }

        /// <summary>
        /// Secret Access Key
        /// </summary>
        /// <value>Secret Access Key</value>
        [DataMember(Name = "eks-secret-access-key", IsRequired = true, EmitDefaultValue = true)]
        public string EksSecretAccessKey { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Set the maximum number of versions, limited by the account settings defaults.
        /// </summary>
        /// <value>Set the maximum number of versions, limited by the account settings defaults.</value>
        [DataMember(Name = "max-versions", EmitDefaultValue = false)]
        public string MaxVersions { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Gets or Sets UseGwCloudIdentity
        /// </summary>
        [DataMember(Name = "use-gw-cloud-identity", EmitDefaultValue = true)]
        public bool UseGwCloudIdentity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateEKSTarget {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EksAccessKeyId: ").Append(EksAccessKeyId).Append("\n");
            sb.Append("  EksClusterCaCert: ").Append(EksClusterCaCert).Append("\n");
            sb.Append("  EksClusterEndpoint: ").Append(EksClusterEndpoint).Append("\n");
            sb.Append("  EksClusterName: ").Append(EksClusterName).Append("\n");
            sb.Append("  EksRegion: ").Append(EksRegion).Append("\n");
            sb.Append("  EksSecretAccessKey: ").Append(EksSecretAccessKey).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  MaxVersions: ").Append(MaxVersions).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UseGwCloudIdentity: ").Append(UseGwCloudIdentity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateEKSTarget);
        }

        /// <summary>
        /// Returns true if CreateEKSTarget instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateEKSTarget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateEKSTarget input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EksAccessKeyId == input.EksAccessKeyId ||
                    (this.EksAccessKeyId != null &&
                    this.EksAccessKeyId.Equals(input.EksAccessKeyId))
                ) && 
                (
                    this.EksClusterCaCert == input.EksClusterCaCert ||
                    (this.EksClusterCaCert != null &&
                    this.EksClusterCaCert.Equals(input.EksClusterCaCert))
                ) && 
                (
                    this.EksClusterEndpoint == input.EksClusterEndpoint ||
                    (this.EksClusterEndpoint != null &&
                    this.EksClusterEndpoint.Equals(input.EksClusterEndpoint))
                ) && 
                (
                    this.EksClusterName == input.EksClusterName ||
                    (this.EksClusterName != null &&
                    this.EksClusterName.Equals(input.EksClusterName))
                ) && 
                (
                    this.EksRegion == input.EksRegion ||
                    (this.EksRegion != null &&
                    this.EksRegion.Equals(input.EksRegion))
                ) && 
                (
                    this.EksSecretAccessKey == input.EksSecretAccessKey ||
                    (this.EksSecretAccessKey != null &&
                    this.EksSecretAccessKey.Equals(input.EksSecretAccessKey))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.MaxVersions == input.MaxVersions ||
                    (this.MaxVersions != null &&
                    this.MaxVersions.Equals(input.MaxVersions))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UseGwCloudIdentity == input.UseGwCloudIdentity ||
                    this.UseGwCloudIdentity.Equals(input.UseGwCloudIdentity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.EksAccessKeyId != null)
                {
                    hashCode = (hashCode * 59) + this.EksAccessKeyId.GetHashCode();
                }
                if (this.EksClusterCaCert != null)
                {
                    hashCode = (hashCode * 59) + this.EksClusterCaCert.GetHashCode();
                }
                if (this.EksClusterEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.EksClusterEndpoint.GetHashCode();
                }
                if (this.EksClusterName != null)
                {
                    hashCode = (hashCode * 59) + this.EksClusterName.GetHashCode();
                }
                if (this.EksRegion != null)
                {
                    hashCode = (hashCode * 59) + this.EksRegion.GetHashCode();
                }
                if (this.EksSecretAccessKey != null)
                {
                    hashCode = (hashCode * 59) + this.EksSecretAccessKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.MaxVersions != null)
                {
                    hashCode = (hashCode * 59) + this.MaxVersions.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseGwCloudIdentity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
