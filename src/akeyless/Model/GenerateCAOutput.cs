/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GenerateCAOutput
    /// </summary>
    [DataContract(Name = "GenerateCAOutput")]
    public partial class GenerateCAOutput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateCAOutput" /> class.
        /// </summary>
        /// <param name="intermediateCertificateName">intermediateCertificateName.</param>
        /// <param name="intermediateIssuerName">intermediateIssuerName.</param>
        /// <param name="intermediateKeyName">intermediateKeyName.</param>
        /// <param name="rootCertificateName">rootCertificateName.</param>
        /// <param name="rootIssuerName">rootIssuerName.</param>
        /// <param name="rootKeyName">rootKeyName.</param>
        public GenerateCAOutput(string intermediateCertificateName = default(string), string intermediateIssuerName = default(string), string intermediateKeyName = default(string), string rootCertificateName = default(string), string rootIssuerName = default(string), string rootKeyName = default(string))
        {
            this.IntermediateCertificateName = intermediateCertificateName;
            this.IntermediateIssuerName = intermediateIssuerName;
            this.IntermediateKeyName = intermediateKeyName;
            this.RootCertificateName = rootCertificateName;
            this.RootIssuerName = rootIssuerName;
            this.RootKeyName = rootKeyName;
        }

        /// <summary>
        /// Gets or Sets IntermediateCertificateName
        /// </summary>
        [DataMember(Name = "intermediate_certificate_name", EmitDefaultValue = false)]
        public string IntermediateCertificateName { get; set; }

        /// <summary>
        /// Gets or Sets IntermediateIssuerName
        /// </summary>
        [DataMember(Name = "intermediate_issuer_name", EmitDefaultValue = false)]
        public string IntermediateIssuerName { get; set; }

        /// <summary>
        /// Gets or Sets IntermediateKeyName
        /// </summary>
        [DataMember(Name = "intermediate_key_name", EmitDefaultValue = false)]
        public string IntermediateKeyName { get; set; }

        /// <summary>
        /// Gets or Sets RootCertificateName
        /// </summary>
        [DataMember(Name = "root_certificate_name", EmitDefaultValue = false)]
        public string RootCertificateName { get; set; }

        /// <summary>
        /// Gets or Sets RootIssuerName
        /// </summary>
        [DataMember(Name = "root_issuer_name", EmitDefaultValue = false)]
        public string RootIssuerName { get; set; }

        /// <summary>
        /// Gets or Sets RootKeyName
        /// </summary>
        [DataMember(Name = "root_key_name", EmitDefaultValue = false)]
        public string RootKeyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateCAOutput {\n");
            sb.Append("  IntermediateCertificateName: ").Append(IntermediateCertificateName).Append("\n");
            sb.Append("  IntermediateIssuerName: ").Append(IntermediateIssuerName).Append("\n");
            sb.Append("  IntermediateKeyName: ").Append(IntermediateKeyName).Append("\n");
            sb.Append("  RootCertificateName: ").Append(RootCertificateName).Append("\n");
            sb.Append("  RootIssuerName: ").Append(RootIssuerName).Append("\n");
            sb.Append("  RootKeyName: ").Append(RootKeyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
