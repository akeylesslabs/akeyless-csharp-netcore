/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// NotiForwarder
    /// </summary>
    [DataContract(Name = "NotiForwarder")]
    public partial class NotiForwarder : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotiForwarder" /> class.
        /// </summary>
        /// <param name="authType">authType.</param>
        /// <param name="clientId">Auth - JWT.</param>
        /// <param name="clientPermissions">clientPermissions.</param>
        /// <param name="comment">comment.</param>
        /// <param name="creationDate">creationDate.</param>
        /// <param name="endpoint">endpoint.</param>
        /// <param name="eventTypes">eventTypes.</param>
        /// <param name="gatewayClusterId">gatewayClusterId.</param>
        /// <param name="includeError">includeError.</param>
        /// <param name="isEnabled">isEnabled.</param>
        /// <param name="lastVersion">lastVersion.</param>
        /// <param name="modificationDate">modificationDate.</param>
        /// <param name="notiForwarderId">notiForwarderId.</param>
        /// <param name="notiForwarderName">notiForwarderName.</param>
        /// <param name="notiForwarderType">notiForwarderType.</param>
        /// <param name="notiForwarderVersions">notiForwarderVersions.</param>
        /// <param name="overrideUrl">overrideUrl.</param>
        /// <param name="paths">paths.</param>
        /// <param name="protectionKey">protectionKey.</param>
        /// <param name="runnerType">runnerType.</param>
        /// <param name="slackNotiForwarderPublicDetails">slackNotiForwarderPublicDetails.</param>
        /// <param name="teamsNotiForwarderPublicDetails">teamsNotiForwarderPublicDetails.</param>
        /// <param name="timespanInSeconds">timespanInSeconds.</param>
        /// <param name="toEmails">toEmails.</param>
        /// <param name="userEmail">userEmail.</param>
        /// <param name="username">Auth - User Password.</param>
        /// <param name="webhookNotiForwarderPublicDetails">webhookNotiForwarderPublicDetails.</param>
        /// <param name="withCustomerFragment">withCustomerFragment.</param>
        public NotiForwarder(string authType = default(string), string clientId = default(string), List<string> clientPermissions = default(List<string>), string comment = default(string), DateTime creationDate = default(DateTime), string endpoint = default(string), List<string> eventTypes = default(List<string>), long gatewayClusterId = default(long), bool includeError = default(bool), bool isEnabled = default(bool), int lastVersion = default(int), DateTime modificationDate = default(DateTime), long notiForwarderId = default(long), string notiForwarderName = default(string), string notiForwarderType = default(string), List<ItemVersion> notiForwarderVersions = default(List<ItemVersion>), string overrideUrl = default(string), List<string> paths = default(List<string>), string protectionKey = default(string), string runnerType = default(string), Object slackNotiForwarderPublicDetails = default(Object), Object teamsNotiForwarderPublicDetails = default(Object), long timespanInSeconds = default(long), List<EmailEntry> toEmails = default(List<EmailEntry>), string userEmail = default(string), string username = default(string), WebHookNotiForwarderPublicDetails webhookNotiForwarderPublicDetails = default(WebHookNotiForwarderPublicDetails), bool withCustomerFragment = default(bool))
        {
            this.AuthType = authType;
            this.ClientId = clientId;
            this.ClientPermissions = clientPermissions;
            this.Comment = comment;
            this.CreationDate = creationDate;
            this.Endpoint = endpoint;
            this.EventTypes = eventTypes;
            this.GatewayClusterId = gatewayClusterId;
            this.IncludeError = includeError;
            this.IsEnabled = isEnabled;
            this.LastVersion = lastVersion;
            this.ModificationDate = modificationDate;
            this.NotiForwarderId = notiForwarderId;
            this.NotiForwarderName = notiForwarderName;
            this.NotiForwarderType = notiForwarderType;
            this.NotiForwarderVersions = notiForwarderVersions;
            this.OverrideUrl = overrideUrl;
            this.Paths = paths;
            this.ProtectionKey = protectionKey;
            this.RunnerType = runnerType;
            this.SlackNotiForwarderPublicDetails = slackNotiForwarderPublicDetails;
            this.TeamsNotiForwarderPublicDetails = teamsNotiForwarderPublicDetails;
            this.TimespanInSeconds = timespanInSeconds;
            this.ToEmails = toEmails;
            this.UserEmail = userEmail;
            this.Username = username;
            this.WebhookNotiForwarderPublicDetails = webhookNotiForwarderPublicDetails;
            this.WithCustomerFragment = withCustomerFragment;
        }

        /// <summary>
        /// Gets or Sets AuthType
        /// </summary>
        [DataMember(Name = "auth_type", EmitDefaultValue = false)]
        public string AuthType { get; set; }

        /// <summary>
        /// Auth - JWT
        /// </summary>
        /// <value>Auth - JWT</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ClientPermissions
        /// </summary>
        [DataMember(Name = "client_permissions", EmitDefaultValue = false)]
        public List<string> ClientPermissions { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name = "creation_date", EmitDefaultValue = false)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name = "endpoint", EmitDefaultValue = false)]
        public string Endpoint { get; set; }

        /// <summary>
        /// Gets or Sets EventTypes
        /// </summary>
        [DataMember(Name = "event_types", EmitDefaultValue = false)]
        public List<string> EventTypes { get; set; }

        /// <summary>
        /// Gets or Sets GatewayClusterId
        /// </summary>
        [DataMember(Name = "gateway_cluster_id", EmitDefaultValue = false)]
        public long GatewayClusterId { get; set; }

        /// <summary>
        /// Gets or Sets IncludeError
        /// </summary>
        [DataMember(Name = "include_error", EmitDefaultValue = true)]
        public bool IncludeError { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name = "is_enabled", EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LastVersion
        /// </summary>
        [DataMember(Name = "last_version", EmitDefaultValue = false)]
        public int LastVersion { get; set; }

        /// <summary>
        /// Gets or Sets ModificationDate
        /// </summary>
        [DataMember(Name = "modification_date", EmitDefaultValue = false)]
        public DateTime ModificationDate { get; set; }

        /// <summary>
        /// Gets or Sets NotiForwarderId
        /// </summary>
        [DataMember(Name = "noti_forwarder_id", EmitDefaultValue = false)]
        public long NotiForwarderId { get; set; }

        /// <summary>
        /// Gets or Sets NotiForwarderName
        /// </summary>
        [DataMember(Name = "noti_forwarder_name", EmitDefaultValue = false)]
        public string NotiForwarderName { get; set; }

        /// <summary>
        /// Gets or Sets NotiForwarderType
        /// </summary>
        [DataMember(Name = "noti_forwarder_type", EmitDefaultValue = false)]
        public string NotiForwarderType { get; set; }

        /// <summary>
        /// Gets or Sets NotiForwarderVersions
        /// </summary>
        [DataMember(Name = "noti_forwarder_versions", EmitDefaultValue = false)]
        public List<ItemVersion> NotiForwarderVersions { get; set; }

        /// <summary>
        /// Gets or Sets OverrideUrl
        /// </summary>
        [DataMember(Name = "override_url", EmitDefaultValue = false)]
        public string OverrideUrl { get; set; }

        /// <summary>
        /// Gets or Sets Paths
        /// </summary>
        [DataMember(Name = "paths", EmitDefaultValue = false)]
        public List<string> Paths { get; set; }

        /// <summary>
        /// Gets or Sets ProtectionKey
        /// </summary>
        [DataMember(Name = "protection_key", EmitDefaultValue = false)]
        public string ProtectionKey { get; set; }

        /// <summary>
        /// Gets or Sets RunnerType
        /// </summary>
        [DataMember(Name = "runner_type", EmitDefaultValue = false)]
        public string RunnerType { get; set; }

        /// <summary>
        /// Gets or Sets SlackNotiForwarderPublicDetails
        /// </summary>
        [DataMember(Name = "slack_noti_forwarder_public_details", EmitDefaultValue = false)]
        public Object SlackNotiForwarderPublicDetails { get; set; }

        /// <summary>
        /// Gets or Sets TeamsNotiForwarderPublicDetails
        /// </summary>
        [DataMember(Name = "teams_noti_forwarder_public_details", EmitDefaultValue = false)]
        public Object TeamsNotiForwarderPublicDetails { get; set; }

        /// <summary>
        /// Gets or Sets TimespanInSeconds
        /// </summary>
        [DataMember(Name = "timespan_in_seconds", EmitDefaultValue = false)]
        public long TimespanInSeconds { get; set; }

        /// <summary>
        /// Gets or Sets ToEmails
        /// </summary>
        [DataMember(Name = "to_emails", EmitDefaultValue = false)]
        public List<EmailEntry> ToEmails { get; set; }

        /// <summary>
        /// Gets or Sets UserEmail
        /// </summary>
        [DataMember(Name = "user_email", EmitDefaultValue = false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// Auth - User Password
        /// </summary>
        /// <value>Auth - User Password</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets WebhookNotiForwarderPublicDetails
        /// </summary>
        [DataMember(Name = "webhook_noti_forwarder_public_details", EmitDefaultValue = false)]
        public WebHookNotiForwarderPublicDetails WebhookNotiForwarderPublicDetails { get; set; }

        /// <summary>
        /// Gets or Sets WithCustomerFragment
        /// </summary>
        [DataMember(Name = "with_customer_fragment", EmitDefaultValue = true)]
        public bool WithCustomerFragment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotiForwarder {\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientPermissions: ").Append(ClientPermissions).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("  GatewayClusterId: ").Append(GatewayClusterId).Append("\n");
            sb.Append("  IncludeError: ").Append(IncludeError).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  LastVersion: ").Append(LastVersion).Append("\n");
            sb.Append("  ModificationDate: ").Append(ModificationDate).Append("\n");
            sb.Append("  NotiForwarderId: ").Append(NotiForwarderId).Append("\n");
            sb.Append("  NotiForwarderName: ").Append(NotiForwarderName).Append("\n");
            sb.Append("  NotiForwarderType: ").Append(NotiForwarderType).Append("\n");
            sb.Append("  NotiForwarderVersions: ").Append(NotiForwarderVersions).Append("\n");
            sb.Append("  OverrideUrl: ").Append(OverrideUrl).Append("\n");
            sb.Append("  Paths: ").Append(Paths).Append("\n");
            sb.Append("  ProtectionKey: ").Append(ProtectionKey).Append("\n");
            sb.Append("  RunnerType: ").Append(RunnerType).Append("\n");
            sb.Append("  SlackNotiForwarderPublicDetails: ").Append(SlackNotiForwarderPublicDetails).Append("\n");
            sb.Append("  TeamsNotiForwarderPublicDetails: ").Append(TeamsNotiForwarderPublicDetails).Append("\n");
            sb.Append("  TimespanInSeconds: ").Append(TimespanInSeconds).Append("\n");
            sb.Append("  ToEmails: ").Append(ToEmails).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  WebhookNotiForwarderPublicDetails: ").Append(WebhookNotiForwarderPublicDetails).Append("\n");
            sb.Append("  WithCustomerFragment: ").Append(WithCustomerFragment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
