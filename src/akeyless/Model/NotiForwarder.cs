/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// NotiForwarder
    /// </summary>
    [DataContract(Name = "NotiForwarder")]
    public partial class NotiForwarder : IEquatable<NotiForwarder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotiForwarder" /> class.
        /// </summary>
        /// <param name="authType">authType.</param>
        /// <param name="clientId">Auth - JWT.</param>
        /// <param name="clientPermissions">clientPermissions.</param>
        /// <param name="comment">comment.</param>
        /// <param name="creationDate">creationDate.</param>
        /// <param name="endpoint">endpoint.</param>
        /// <param name="eventTypes">eventTypes.</param>
        /// <param name="gatewayClusterId">gatewayClusterId.</param>
        /// <param name="isEnabled">isEnabled.</param>
        /// <param name="lastVersion">lastVersion.</param>
        /// <param name="modificationDate">modificationDate.</param>
        /// <param name="notiForwarderId">notiForwarderId.</param>
        /// <param name="notiForwarderName">notiForwarderName.</param>
        /// <param name="notiForwarderType">notiForwarderType.</param>
        /// <param name="notiForwarderVersions">notiForwarderVersions.</param>
        /// <param name="paths">paths.</param>
        /// <param name="protectionKey">protectionKey.</param>
        /// <param name="runnerType">runnerType.</param>
        /// <param name="timespanInSeconds">timespanInSeconds.</param>
        /// <param name="toEmails">toEmails.</param>
        /// <param name="userEmail">userEmail.</param>
        /// <param name="username">Auth - User Password.</param>
        /// <param name="withCustomerFragment">withCustomerFragment.</param>
        public NotiForwarder(string authType = default(string), string clientId = default(string), List<string> clientPermissions = default(List<string>), string comment = default(string), DateTime creationDate = default(DateTime), string endpoint = default(string), List<string> eventTypes = default(List<string>), long gatewayClusterId = default(long), bool isEnabled = default(bool), int lastVersion = default(int), DateTime modificationDate = default(DateTime), long notiForwarderId = default(long), string notiForwarderName = default(string), string notiForwarderType = default(string), List<ItemVersion> notiForwarderVersions = default(List<ItemVersion>), List<string> paths = default(List<string>), string protectionKey = default(string), string runnerType = default(string), long timespanInSeconds = default(long), List<EmailEntry> toEmails = default(List<EmailEntry>), string userEmail = default(string), string username = default(string), bool withCustomerFragment = default(bool))
        {
            this.AuthType = authType;
            this.ClientId = clientId;
            this.ClientPermissions = clientPermissions;
            this.Comment = comment;
            this.CreationDate = creationDate;
            this.Endpoint = endpoint;
            this.EventTypes = eventTypes;
            this.GatewayClusterId = gatewayClusterId;
            this.IsEnabled = isEnabled;
            this.LastVersion = lastVersion;
            this.ModificationDate = modificationDate;
            this.NotiForwarderId = notiForwarderId;
            this.NotiForwarderName = notiForwarderName;
            this.NotiForwarderType = notiForwarderType;
            this.NotiForwarderVersions = notiForwarderVersions;
            this.Paths = paths;
            this.ProtectionKey = protectionKey;
            this.RunnerType = runnerType;
            this.TimespanInSeconds = timespanInSeconds;
            this.ToEmails = toEmails;
            this.UserEmail = userEmail;
            this.Username = username;
            this.WithCustomerFragment = withCustomerFragment;
        }

        /// <summary>
        /// Gets or Sets AuthType
        /// </summary>
        [DataMember(Name = "auth_type", EmitDefaultValue = false)]
        public string AuthType { get; set; }

        /// <summary>
        /// Auth - JWT
        /// </summary>
        /// <value>Auth - JWT</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ClientPermissions
        /// </summary>
        [DataMember(Name = "client_permissions", EmitDefaultValue = false)]
        public List<string> ClientPermissions { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name = "creation_date", EmitDefaultValue = false)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name = "endpoint", EmitDefaultValue = false)]
        public string Endpoint { get; set; }

        /// <summary>
        /// Gets or Sets EventTypes
        /// </summary>
        [DataMember(Name = "event_types", EmitDefaultValue = false)]
        public List<string> EventTypes { get; set; }

        /// <summary>
        /// Gets or Sets GatewayClusterId
        /// </summary>
        [DataMember(Name = "gateway_cluster_id", EmitDefaultValue = false)]
        public long GatewayClusterId { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name = "is_enabled", EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LastVersion
        /// </summary>
        [DataMember(Name = "last_version", EmitDefaultValue = false)]
        public int LastVersion { get; set; }

        /// <summary>
        /// Gets or Sets ModificationDate
        /// </summary>
        [DataMember(Name = "modification_date", EmitDefaultValue = false)]
        public DateTime ModificationDate { get; set; }

        /// <summary>
        /// Gets or Sets NotiForwarderId
        /// </summary>
        [DataMember(Name = "noti_forwarder_id", EmitDefaultValue = false)]
        public long NotiForwarderId { get; set; }

        /// <summary>
        /// Gets or Sets NotiForwarderName
        /// </summary>
        [DataMember(Name = "noti_forwarder_name", EmitDefaultValue = false)]
        public string NotiForwarderName { get; set; }

        /// <summary>
        /// Gets or Sets NotiForwarderType
        /// </summary>
        [DataMember(Name = "noti_forwarder_type", EmitDefaultValue = false)]
        public string NotiForwarderType { get; set; }

        /// <summary>
        /// Gets or Sets NotiForwarderVersions
        /// </summary>
        [DataMember(Name = "noti_forwarder_versions", EmitDefaultValue = false)]
        public List<ItemVersion> NotiForwarderVersions { get; set; }

        /// <summary>
        /// Gets or Sets Paths
        /// </summary>
        [DataMember(Name = "paths", EmitDefaultValue = false)]
        public List<string> Paths { get; set; }

        /// <summary>
        /// Gets or Sets ProtectionKey
        /// </summary>
        [DataMember(Name = "protection_key", EmitDefaultValue = false)]
        public string ProtectionKey { get; set; }

        /// <summary>
        /// Gets or Sets RunnerType
        /// </summary>
        [DataMember(Name = "runner_type", EmitDefaultValue = false)]
        public string RunnerType { get; set; }

        /// <summary>
        /// Gets or Sets TimespanInSeconds
        /// </summary>
        [DataMember(Name = "timespan_in_seconds", EmitDefaultValue = false)]
        public long TimespanInSeconds { get; set; }

        /// <summary>
        /// Gets or Sets ToEmails
        /// </summary>
        [DataMember(Name = "to_emails", EmitDefaultValue = false)]
        public List<EmailEntry> ToEmails { get; set; }

        /// <summary>
        /// Gets or Sets UserEmail
        /// </summary>
        [DataMember(Name = "user_email", EmitDefaultValue = false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// Auth - User Password
        /// </summary>
        /// <value>Auth - User Password</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets WithCustomerFragment
        /// </summary>
        [DataMember(Name = "with_customer_fragment", EmitDefaultValue = true)]
        public bool WithCustomerFragment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotiForwarder {\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientPermissions: ").Append(ClientPermissions).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("  GatewayClusterId: ").Append(GatewayClusterId).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  LastVersion: ").Append(LastVersion).Append("\n");
            sb.Append("  ModificationDate: ").Append(ModificationDate).Append("\n");
            sb.Append("  NotiForwarderId: ").Append(NotiForwarderId).Append("\n");
            sb.Append("  NotiForwarderName: ").Append(NotiForwarderName).Append("\n");
            sb.Append("  NotiForwarderType: ").Append(NotiForwarderType).Append("\n");
            sb.Append("  NotiForwarderVersions: ").Append(NotiForwarderVersions).Append("\n");
            sb.Append("  Paths: ").Append(Paths).Append("\n");
            sb.Append("  ProtectionKey: ").Append(ProtectionKey).Append("\n");
            sb.Append("  RunnerType: ").Append(RunnerType).Append("\n");
            sb.Append("  TimespanInSeconds: ").Append(TimespanInSeconds).Append("\n");
            sb.Append("  ToEmails: ").Append(ToEmails).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  WithCustomerFragment: ").Append(WithCustomerFragment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotiForwarder);
        }

        /// <summary>
        /// Returns true if NotiForwarder instances are equal
        /// </summary>
        /// <param name="input">Instance of NotiForwarder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotiForwarder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthType == input.AuthType ||
                    (this.AuthType != null &&
                    this.AuthType.Equals(input.AuthType))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientPermissions == input.ClientPermissions ||
                    this.ClientPermissions != null &&
                    input.ClientPermissions != null &&
                    this.ClientPermissions.SequenceEqual(input.ClientPermissions)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.Endpoint == input.Endpoint ||
                    (this.Endpoint != null &&
                    this.Endpoint.Equals(input.Endpoint))
                ) && 
                (
                    this.EventTypes == input.EventTypes ||
                    this.EventTypes != null &&
                    input.EventTypes != null &&
                    this.EventTypes.SequenceEqual(input.EventTypes)
                ) && 
                (
                    this.GatewayClusterId == input.GatewayClusterId ||
                    this.GatewayClusterId.Equals(input.GatewayClusterId)
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    this.IsEnabled.Equals(input.IsEnabled)
                ) && 
                (
                    this.LastVersion == input.LastVersion ||
                    this.LastVersion.Equals(input.LastVersion)
                ) && 
                (
                    this.ModificationDate == input.ModificationDate ||
                    (this.ModificationDate != null &&
                    this.ModificationDate.Equals(input.ModificationDate))
                ) && 
                (
                    this.NotiForwarderId == input.NotiForwarderId ||
                    this.NotiForwarderId.Equals(input.NotiForwarderId)
                ) && 
                (
                    this.NotiForwarderName == input.NotiForwarderName ||
                    (this.NotiForwarderName != null &&
                    this.NotiForwarderName.Equals(input.NotiForwarderName))
                ) && 
                (
                    this.NotiForwarderType == input.NotiForwarderType ||
                    (this.NotiForwarderType != null &&
                    this.NotiForwarderType.Equals(input.NotiForwarderType))
                ) && 
                (
                    this.NotiForwarderVersions == input.NotiForwarderVersions ||
                    this.NotiForwarderVersions != null &&
                    input.NotiForwarderVersions != null &&
                    this.NotiForwarderVersions.SequenceEqual(input.NotiForwarderVersions)
                ) && 
                (
                    this.Paths == input.Paths ||
                    this.Paths != null &&
                    input.Paths != null &&
                    this.Paths.SequenceEqual(input.Paths)
                ) && 
                (
                    this.ProtectionKey == input.ProtectionKey ||
                    (this.ProtectionKey != null &&
                    this.ProtectionKey.Equals(input.ProtectionKey))
                ) && 
                (
                    this.RunnerType == input.RunnerType ||
                    (this.RunnerType != null &&
                    this.RunnerType.Equals(input.RunnerType))
                ) && 
                (
                    this.TimespanInSeconds == input.TimespanInSeconds ||
                    this.TimespanInSeconds.Equals(input.TimespanInSeconds)
                ) && 
                (
                    this.ToEmails == input.ToEmails ||
                    this.ToEmails != null &&
                    input.ToEmails != null &&
                    this.ToEmails.SequenceEqual(input.ToEmails)
                ) && 
                (
                    this.UserEmail == input.UserEmail ||
                    (this.UserEmail != null &&
                    this.UserEmail.Equals(input.UserEmail))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.WithCustomerFragment == input.WithCustomerFragment ||
                    this.WithCustomerFragment.Equals(input.WithCustomerFragment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthType != null)
                {
                    hashCode = (hashCode * 59) + this.AuthType.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ClientPermissions != null)
                {
                    hashCode = (hashCode * 59) + this.ClientPermissions.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.CreationDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreationDate.GetHashCode();
                }
                if (this.Endpoint != null)
                {
                    hashCode = (hashCode * 59) + this.Endpoint.GetHashCode();
                }
                if (this.EventTypes != null)
                {
                    hashCode = (hashCode * 59) + this.EventTypes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GatewayClusterId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.LastVersion.GetHashCode();
                if (this.ModificationDate != null)
                {
                    hashCode = (hashCode * 59) + this.ModificationDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotiForwarderId.GetHashCode();
                if (this.NotiForwarderName != null)
                {
                    hashCode = (hashCode * 59) + this.NotiForwarderName.GetHashCode();
                }
                if (this.NotiForwarderType != null)
                {
                    hashCode = (hashCode * 59) + this.NotiForwarderType.GetHashCode();
                }
                if (this.NotiForwarderVersions != null)
                {
                    hashCode = (hashCode * 59) + this.NotiForwarderVersions.GetHashCode();
                }
                if (this.Paths != null)
                {
                    hashCode = (hashCode * 59) + this.Paths.GetHashCode();
                }
                if (this.ProtectionKey != null)
                {
                    hashCode = (hashCode * 59) + this.ProtectionKey.GetHashCode();
                }
                if (this.RunnerType != null)
                {
                    hashCode = (hashCode * 59) + this.RunnerType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TimespanInSeconds.GetHashCode();
                if (this.ToEmails != null)
                {
                    hashCode = (hashCode * 59) + this.ToEmails.GetHashCode();
                }
                if (this.UserEmail != null)
                {
                    hashCode = (hashCode * 59) + this.UserEmail.GetHashCode();
                }
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WithCustomerFragment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
