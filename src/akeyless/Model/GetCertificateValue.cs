/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GetCertificateValue
    /// </summary>
    [DataContract(Name = "getCertificateValue")]
    public partial class GetCertificateValue : IEquatable<GetCertificateValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCertificateValue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCertificateValue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCertificateValue" /> class.
        /// </summary>
        /// <param name="certIssuerName">The parent PKI Certificate Issuer&#39;s name of the certificate, required when used with display-id and token.</param>
        /// <param name="certificateFileOutput">File to write the certificates to..</param>
        /// <param name="displayId">Certificate display ID.</param>
        /// <param name="issuanceToken">Token for getting the issued certificate.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Certificate name (required) (default to &quot;dummy_certificate_name&quot;).</param>
        /// <param name="privateKeyFileOutput">File to write the private key to..</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="version">Certificate version.</param>
        public GetCertificateValue(string certIssuerName = default(string), string certificateFileOutput = default(string), string displayId = default(string), string issuanceToken = default(string), bool json = false, string name = "dummy_certificate_name", string privateKeyFileOutput = default(string), string token = default(string), string uidToken = default(string), int version = default(int))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GetCertificateValue and cannot be null");
            }
            this.Name = name;
            this.CertIssuerName = certIssuerName;
            this.CertificateFileOutput = certificateFileOutput;
            this.DisplayId = displayId;
            this.IssuanceToken = issuanceToken;
            this.Json = json;
            this.PrivateKeyFileOutput = privateKeyFileOutput;
            this.Token = token;
            this.UidToken = uidToken;
            this._Version = version;
        }

        /// <summary>
        /// The parent PKI Certificate Issuer&#39;s name of the certificate, required when used with display-id and token
        /// </summary>
        /// <value>The parent PKI Certificate Issuer&#39;s name of the certificate, required when used with display-id and token</value>
        [DataMember(Name = "cert-issuer-name", EmitDefaultValue = false)]
        public string CertIssuerName { get; set; }

        /// <summary>
        /// File to write the certificates to.
        /// </summary>
        /// <value>File to write the certificates to.</value>
        [DataMember(Name = "certificate-file-output", EmitDefaultValue = false)]
        public string CertificateFileOutput { get; set; }

        /// <summary>
        /// Certificate display ID
        /// </summary>
        /// <value>Certificate display ID</value>
        [DataMember(Name = "display-id", EmitDefaultValue = false)]
        public string DisplayId { get; set; }

        /// <summary>
        /// Token for getting the issued certificate
        /// </summary>
        /// <value>Token for getting the issued certificate</value>
        [DataMember(Name = "issuance-token", EmitDefaultValue = false)]
        public string IssuanceToken { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Certificate name
        /// </summary>
        /// <value>Certificate name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// File to write the private key to.
        /// </summary>
        /// <value>File to write the private key to.</value>
        [DataMember(Name = "private-key-file-output", EmitDefaultValue = false)]
        public string PrivateKeyFileOutput { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Certificate version
        /// </summary>
        /// <value>Certificate version</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int _Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetCertificateValue {\n");
            sb.Append("  CertIssuerName: ").Append(CertIssuerName).Append("\n");
            sb.Append("  CertificateFileOutput: ").Append(CertificateFileOutput).Append("\n");
            sb.Append("  DisplayId: ").Append(DisplayId).Append("\n");
            sb.Append("  IssuanceToken: ").Append(IssuanceToken).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PrivateKeyFileOutput: ").Append(PrivateKeyFileOutput).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCertificateValue);
        }

        /// <summary>
        /// Returns true if GetCertificateValue instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCertificateValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCertificateValue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CertIssuerName == input.CertIssuerName ||
                    (this.CertIssuerName != null &&
                    this.CertIssuerName.Equals(input.CertIssuerName))
                ) && 
                (
                    this.CertificateFileOutput == input.CertificateFileOutput ||
                    (this.CertificateFileOutput != null &&
                    this.CertificateFileOutput.Equals(input.CertificateFileOutput))
                ) && 
                (
                    this.DisplayId == input.DisplayId ||
                    (this.DisplayId != null &&
                    this.DisplayId.Equals(input.DisplayId))
                ) && 
                (
                    this.IssuanceToken == input.IssuanceToken ||
                    (this.IssuanceToken != null &&
                    this.IssuanceToken.Equals(input.IssuanceToken))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PrivateKeyFileOutput == input.PrivateKeyFileOutput ||
                    (this.PrivateKeyFileOutput != null &&
                    this.PrivateKeyFileOutput.Equals(input.PrivateKeyFileOutput))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this._Version == input._Version ||
                    this._Version.Equals(input._Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertIssuerName != null)
                {
                    hashCode = (hashCode * 59) + this.CertIssuerName.GetHashCode();
                }
                if (this.CertificateFileOutput != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateFileOutput.GetHashCode();
                }
                if (this.DisplayId != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayId.GetHashCode();
                }
                if (this.IssuanceToken != null)
                {
                    hashCode = (hashCode * 59) + this.IssuanceToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.PrivateKeyFileOutput != null)
                {
                    hashCode = (hashCode * 59) + this.PrivateKeyFileOutput.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this._Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
