/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayUpdateRemoteAccess is a command that update remote access config
    /// </summary>
    [DataContract(Name = "gatewayUpdateRemoteAccess")]
    public partial class GatewayUpdateRemoteAccess : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateRemoteAccess" /> class.
        /// </summary>
        /// <param name="allowedUrls">List of valid URLs to redirect from the Portal back to the remote access server (in a comma-delimited list) (default to &quot;use-existing&quot;).</param>
        /// <param name="hideSessionRecording">Specifies whether to show/hide if the session is currently recorded [true/false].</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="kexalgs">Decide which algorithm will be used as part of the SSH initial hand-shake process (default to &quot;use-existing&quot;).</param>
        /// <param name="keyboardLayout">Enable support for additional keyboard layouts (default to &quot;use-existing&quot;).</param>
        /// <param name="legacySshAlgorithm">Signs SSH certificates using legacy ssh-rsa-cert-01@openssh.com signing algorithm [true/false].</param>
        /// <param name="rdpTargetConfiguration">Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email (default to &quot;use-existing&quot;).</param>
        /// <param name="sshTargetConfiguration">Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email (default to &quot;use-existing&quot;).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GatewayUpdateRemoteAccess(string allowedUrls = @"use-existing", string hideSessionRecording = default(string), bool json = false, string kexalgs = @"use-existing", string keyboardLayout = @"use-existing", string legacySshAlgorithm = default(string), string rdpTargetConfiguration = @"use-existing", string sshTargetConfiguration = @"use-existing", string token = default(string), string uidToken = default(string))
        {
            // use default value if no "allowedUrls" provided
            this.AllowedUrls = allowedUrls ?? @"use-existing";
            this.HideSessionRecording = hideSessionRecording;
            this.Json = json;
            // use default value if no "kexalgs" provided
            this.Kexalgs = kexalgs ?? @"use-existing";
            // use default value if no "keyboardLayout" provided
            this.KeyboardLayout = keyboardLayout ?? @"use-existing";
            this.LegacySshAlgorithm = legacySshAlgorithm;
            // use default value if no "rdpTargetConfiguration" provided
            this.RdpTargetConfiguration = rdpTargetConfiguration ?? @"use-existing";
            // use default value if no "sshTargetConfiguration" provided
            this.SshTargetConfiguration = sshTargetConfiguration ?? @"use-existing";
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// List of valid URLs to redirect from the Portal back to the remote access server (in a comma-delimited list)
        /// </summary>
        /// <value>List of valid URLs to redirect from the Portal back to the remote access server (in a comma-delimited list)</value>
        [DataMember(Name = "allowed-urls", EmitDefaultValue = false)]
        public string AllowedUrls { get; set; }

        /// <summary>
        /// Specifies whether to show/hide if the session is currently recorded [true/false]
        /// </summary>
        /// <value>Specifies whether to show/hide if the session is currently recorded [true/false]</value>
        [DataMember(Name = "hide-session-recording", EmitDefaultValue = false)]
        public string HideSessionRecording { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Decide which algorithm will be used as part of the SSH initial hand-shake process
        /// </summary>
        /// <value>Decide which algorithm will be used as part of the SSH initial hand-shake process</value>
        [DataMember(Name = "kexalgs", EmitDefaultValue = false)]
        public string Kexalgs { get; set; }

        /// <summary>
        /// Enable support for additional keyboard layouts
        /// </summary>
        /// <value>Enable support for additional keyboard layouts</value>
        [DataMember(Name = "keyboard-layout", EmitDefaultValue = false)]
        public string KeyboardLayout { get; set; }

        /// <summary>
        /// Signs SSH certificates using legacy ssh-rsa-cert-01@openssh.com signing algorithm [true/false]
        /// </summary>
        /// <value>Signs SSH certificates using legacy ssh-rsa-cert-01@openssh.com signing algorithm [true/false]</value>
        [DataMember(Name = "legacy-ssh-algorithm", EmitDefaultValue = false)]
        public string LegacySshAlgorithm { get; set; }

        /// <summary>
        /// Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email
        /// </summary>
        /// <value>Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email</value>
        [DataMember(Name = "rdp-target-configuration", EmitDefaultValue = false)]
        public string RdpTargetConfiguration { get; set; }

        /// <summary>
        /// Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email
        /// </summary>
        /// <value>Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email</value>
        [DataMember(Name = "ssh-target-configuration", EmitDefaultValue = false)]
        public string SshTargetConfiguration { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayUpdateRemoteAccess {\n");
            sb.Append("  AllowedUrls: ").Append(AllowedUrls).Append("\n");
            sb.Append("  HideSessionRecording: ").Append(HideSessionRecording).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Kexalgs: ").Append(Kexalgs).Append("\n");
            sb.Append("  KeyboardLayout: ").Append(KeyboardLayout).Append("\n");
            sb.Append("  LegacySshAlgorithm: ").Append(LegacySshAlgorithm).Append("\n");
            sb.Append("  RdpTargetConfiguration: ").Append(RdpTargetConfiguration).Append("\n");
            sb.Append("  SshTargetConfiguration: ").Append(SshTargetConfiguration).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
