/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// NativeK8sTargetDetails
    /// </summary>
    [DataContract(Name = "NativeK8sTargetDetails")]
    public partial class NativeK8sTargetDetails : IEquatable<NativeK8sTargetDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NativeK8sTargetDetails" /> class.
        /// </summary>
        /// <param name="k8sAuthType">k8sAuthType.</param>
        /// <param name="k8sBearerToken">k8sBearerToken.</param>
        /// <param name="k8sClientCertData">For K8s Client certificates authentication.</param>
        /// <param name="k8sClientKeyData">k8sClientKeyData.</param>
        /// <param name="k8sClusterCaCertificate">k8sClusterCaCertificate.</param>
        /// <param name="k8sClusterEndpoint">k8sClusterEndpoint.</param>
        /// <param name="k8sClusterName">k8sClusterName.</param>
        /// <param name="useGwServiceAccount">useGwServiceAccount.</param>
        public NativeK8sTargetDetails(string k8sAuthType = default(string), string k8sBearerToken = default(string), string k8sClientCertData = default(string), string k8sClientKeyData = default(string), string k8sClusterCaCertificate = default(string), string k8sClusterEndpoint = default(string), string k8sClusterName = default(string), bool useGwServiceAccount = default(bool))
        {
            this.K8sAuthType = k8sAuthType;
            this.K8sBearerToken = k8sBearerToken;
            this.K8sClientCertData = k8sClientCertData;
            this.K8sClientKeyData = k8sClientKeyData;
            this.K8sClusterCaCertificate = k8sClusterCaCertificate;
            this.K8sClusterEndpoint = k8sClusterEndpoint;
            this.K8sClusterName = k8sClusterName;
            this.UseGwServiceAccount = useGwServiceAccount;
        }

        /// <summary>
        /// Gets or Sets K8sAuthType
        /// </summary>
        [DataMember(Name = "k8s_auth_type", EmitDefaultValue = false)]
        public string K8sAuthType { get; set; }

        /// <summary>
        /// Gets or Sets K8sBearerToken
        /// </summary>
        [DataMember(Name = "k8s_bearer_token", EmitDefaultValue = false)]
        public string K8sBearerToken { get; set; }

        /// <summary>
        /// For K8s Client certificates authentication
        /// </summary>
        /// <value>For K8s Client certificates authentication</value>
        [DataMember(Name = "k8s_client_cert_data", EmitDefaultValue = false)]
        public string K8sClientCertData { get; set; }

        /// <summary>
        /// Gets or Sets K8sClientKeyData
        /// </summary>
        [DataMember(Name = "k8s_client_key_data", EmitDefaultValue = false)]
        public string K8sClientKeyData { get; set; }

        /// <summary>
        /// Gets or Sets K8sClusterCaCertificate
        /// </summary>
        [DataMember(Name = "k8s_cluster_ca_certificate", EmitDefaultValue = false)]
        public string K8sClusterCaCertificate { get; set; }

        /// <summary>
        /// Gets or Sets K8sClusterEndpoint
        /// </summary>
        [DataMember(Name = "k8s_cluster_endpoint", EmitDefaultValue = false)]
        public string K8sClusterEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets K8sClusterName
        /// </summary>
        [DataMember(Name = "k8s_cluster_name", EmitDefaultValue = false)]
        public string K8sClusterName { get; set; }

        /// <summary>
        /// Gets or Sets UseGwServiceAccount
        /// </summary>
        [DataMember(Name = "use_gw_service_account", EmitDefaultValue = true)]
        public bool UseGwServiceAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NativeK8sTargetDetails {\n");
            sb.Append("  K8sAuthType: ").Append(K8sAuthType).Append("\n");
            sb.Append("  K8sBearerToken: ").Append(K8sBearerToken).Append("\n");
            sb.Append("  K8sClientCertData: ").Append(K8sClientCertData).Append("\n");
            sb.Append("  K8sClientKeyData: ").Append(K8sClientKeyData).Append("\n");
            sb.Append("  K8sClusterCaCertificate: ").Append(K8sClusterCaCertificate).Append("\n");
            sb.Append("  K8sClusterEndpoint: ").Append(K8sClusterEndpoint).Append("\n");
            sb.Append("  K8sClusterName: ").Append(K8sClusterName).Append("\n");
            sb.Append("  UseGwServiceAccount: ").Append(UseGwServiceAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NativeK8sTargetDetails);
        }

        /// <summary>
        /// Returns true if NativeK8sTargetDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of NativeK8sTargetDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NativeK8sTargetDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.K8sAuthType == input.K8sAuthType ||
                    (this.K8sAuthType != null &&
                    this.K8sAuthType.Equals(input.K8sAuthType))
                ) && 
                (
                    this.K8sBearerToken == input.K8sBearerToken ||
                    (this.K8sBearerToken != null &&
                    this.K8sBearerToken.Equals(input.K8sBearerToken))
                ) && 
                (
                    this.K8sClientCertData == input.K8sClientCertData ||
                    (this.K8sClientCertData != null &&
                    this.K8sClientCertData.Equals(input.K8sClientCertData))
                ) && 
                (
                    this.K8sClientKeyData == input.K8sClientKeyData ||
                    (this.K8sClientKeyData != null &&
                    this.K8sClientKeyData.Equals(input.K8sClientKeyData))
                ) && 
                (
                    this.K8sClusterCaCertificate == input.K8sClusterCaCertificate ||
                    (this.K8sClusterCaCertificate != null &&
                    this.K8sClusterCaCertificate.Equals(input.K8sClusterCaCertificate))
                ) && 
                (
                    this.K8sClusterEndpoint == input.K8sClusterEndpoint ||
                    (this.K8sClusterEndpoint != null &&
                    this.K8sClusterEndpoint.Equals(input.K8sClusterEndpoint))
                ) && 
                (
                    this.K8sClusterName == input.K8sClusterName ||
                    (this.K8sClusterName != null &&
                    this.K8sClusterName.Equals(input.K8sClusterName))
                ) && 
                (
                    this.UseGwServiceAccount == input.UseGwServiceAccount ||
                    this.UseGwServiceAccount.Equals(input.UseGwServiceAccount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.K8sAuthType != null)
                {
                    hashCode = (hashCode * 59) + this.K8sAuthType.GetHashCode();
                }
                if (this.K8sBearerToken != null)
                {
                    hashCode = (hashCode * 59) + this.K8sBearerToken.GetHashCode();
                }
                if (this.K8sClientCertData != null)
                {
                    hashCode = (hashCode * 59) + this.K8sClientCertData.GetHashCode();
                }
                if (this.K8sClientKeyData != null)
                {
                    hashCode = (hashCode * 59) + this.K8sClientKeyData.GetHashCode();
                }
                if (this.K8sClusterCaCertificate != null)
                {
                    hashCode = (hashCode * 59) + this.K8sClusterCaCertificate.GetHashCode();
                }
                if (this.K8sClusterEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.K8sClusterEndpoint.GetHashCode();
                }
                if (this.K8sClusterName != null)
                {
                    hashCode = (hashCode * 59) + this.K8sClusterName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseGwServiceAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
