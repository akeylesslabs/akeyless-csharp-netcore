/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CertificateAnalyticAggregation
    /// </summary>
    [DataContract(Name = "CertificateAnalyticAggregation")]
    public partial class CertificateAnalyticAggregation : IEquatable<CertificateAnalyticAggregation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateAnalyticAggregation" /> class.
        /// </summary>
        /// <param name="accountId">accountId.</param>
        /// <param name="caCounts">caCounts.</param>
        /// <param name="riskCounts">riskCounts.</param>
        public CertificateAnalyticAggregation(string accountId = default(string), Dictionary<string, int> caCounts = default(Dictionary<string, int>), Dictionary<string, int> riskCounts = default(Dictionary<string, int>))
        {
            this.AccountId = accountId;
            this.CaCounts = caCounts;
            this.RiskCounts = riskCounts;
        }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "account_id", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets CaCounts
        /// </summary>
        [DataMember(Name = "ca_counts", EmitDefaultValue = false)]
        public Dictionary<string, int> CaCounts { get; set; }

        /// <summary>
        /// Gets or Sets RiskCounts
        /// </summary>
        [DataMember(Name = "risk_counts", EmitDefaultValue = false)]
        public Dictionary<string, int> RiskCounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertificateAnalyticAggregation {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CaCounts: ").Append(CaCounts).Append("\n");
            sb.Append("  RiskCounts: ").Append(RiskCounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificateAnalyticAggregation);
        }

        /// <summary>
        /// Returns true if CertificateAnalyticAggregation instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificateAnalyticAggregation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateAnalyticAggregation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.CaCounts == input.CaCounts ||
                    this.CaCounts != null &&
                    input.CaCounts != null &&
                    this.CaCounts.SequenceEqual(input.CaCounts)
                ) && 
                (
                    this.RiskCounts == input.RiskCounts ||
                    this.RiskCounts != null &&
                    input.RiskCounts != null &&
                    this.RiskCounts.SequenceEqual(input.RiskCounts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.CaCounts != null)
                {
                    hashCode = (hashCode * 59) + this.CaCounts.GetHashCode();
                }
                if (this.RiskCounts != null)
                {
                    hashCode = (hashCode * 59) + this.RiskCounts.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
