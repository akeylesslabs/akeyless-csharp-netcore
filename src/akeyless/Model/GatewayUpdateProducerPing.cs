/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayUpdateProducerPing is a command that updates Ping producer
    /// </summary>
    [DataContract(Name = "gatewayUpdateProducerPing")]
    public partial class GatewayUpdateProducerPing : IEquatable<GatewayUpdateProducerPing>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateProducerPing" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayUpdateProducerPing() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateProducerPing" /> class.
        /// </summary>
        /// <param name="deleteProtection">Protection from accidental deletion of this item.</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="name">Producer name (required).</param>
        /// <param name="newName">Producer New name.</param>
        /// <param name="pingAdministrativePort">Ping Federate administrative port (default to &quot;9999&quot;).</param>
        /// <param name="pingAtmId">Set a specific Access Token Management (ATM) instance for the created OAuth Client by providing the ATM Id. If no explicit value is given, the default pingfederate server ATM will be set..</param>
        /// <param name="pingAuthorizationPort">Ping Federate authorization port (default to &quot;9031&quot;).</param>
        /// <param name="pingCertSubjectDn">The subject DN of the client certificate. If no explicit value is given, the producer will create CA certificate and matched client certificate and return it as value. Used in conjunction with ping-issuer-dn (relevant for CLIENT_TLS_CERTIFICATE authentication method).</param>
        /// <param name="pingClientAuthenticationType">OAuth Client Authentication Type [CLIENT_SECRET, PRIVATE_KEY_JWT, CLIENT_TLS_CERTIFICATE] (default to &quot;CLIENT_SECRET&quot;).</param>
        /// <param name="pingEnforceReplayPrevention">Determines whether PingFederate requires a unique signed JWT from the client for each action (relevant for PRIVATE_KEY_JWT authentication method).</param>
        /// <param name="pingGrantTypes">List of OAuth client grant types [IMPLICIT, AUTHORIZATION_CODE, CLIENT_CREDENTIALS, TOKEN_EXCHANGE, REFRESH_TOKEN, ASSERTION_GRANTS, PASSWORD, RESOURCE_OWNER_CREDENTIALS]. If no explicit value is given, AUTHORIZATION_CODE will be selected as default..</param>
        /// <param name="pingIssuerDn">Issuer DN of trusted CA certificate that imported into Ping Federate server. You may select \\\&quot;Trust Any\\\&quot; to trust all the existing issuers in Ping Federate server. Used in conjunction with ping-cert-subject-dn (relevant for CLIENT_TLS_CERTIFICATE authentication method).</param>
        /// <param name="pingJwks">Base64-encoded JSON Web Key Set (JWKS). If no explicit value is given, the producer will create JWKs and matched signed JWT (Sign Algo: RS256) and return it as value (relevant for PRIVATE_KEY_JWT authentication method).</param>
        /// <param name="pingJwksUrl">The URL of the JSON Web Key Set (JWKS). If no explicit value is given, the producer will create JWKs and matched signed JWT and return it as value (relevant for PRIVATE_KEY_JWT authentication method).</param>
        /// <param name="pingPassword">Ping Federate privileged user password.</param>
        /// <param name="pingPrivilegedUser">Ping Federate privileged user.</param>
        /// <param name="pingRedirectUris">List of URIs to which the OAuth authorization server may redirect the resource owner&#39;s user agent after authorization is obtained. At least one redirection URI is required for the AUTHORIZATION_CODE and IMPLICIT grant types..</param>
        /// <param name="pingRestrictedScopes">Limit the OAuth client to specific scopes list.</param>
        /// <param name="pingSigningAlgo">The signing algorithm that the client must use to sign its request objects [RS256,RS384,RS512,ES256,ES384,ES512,PS256,PS384,PS512] If no explicit value is given, the client can use any of the supported signing algorithms (relevant for PRIVATE_KEY_JWT authentication method).</param>
        /// <param name="pingUrl">Ping URL.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="tags">List of the tags attached to this secret.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">The time from dynamic secret creation to expiration. (default to &quot;60m&quot;).</param>
        public GatewayUpdateProducerPing(string deleteProtection = default(string), bool json = default(bool), string name = default(string), string newName = default(string), string pingAdministrativePort = "9999", string pingAtmId = default(string), string pingAuthorizationPort = "9031", string pingCertSubjectDn = default(string), string pingClientAuthenticationType = "CLIENT_SECRET", string pingEnforceReplayPrevention = default(string), List<string> pingGrantTypes = default(List<string>), string pingIssuerDn = default(string), string pingJwks = default(string), string pingJwksUrl = default(string), string pingPassword = default(string), string pingPrivilegedUser = default(string), List<string> pingRedirectUris = default(List<string>), List<string> pingRestrictedScopes = default(List<string>), string pingSigningAlgo = default(string), string pingUrl = default(string), string producerEncryptionKeyName = default(string), List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userTtl = "60m")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayUpdateProducerPing and cannot be null");
            }
            this.Name = name;
            this.DeleteProtection = deleteProtection;
            this.Json = json;
            this.NewName = newName;
            // use default value if no "pingAdministrativePort" provided
            this.PingAdministrativePort = pingAdministrativePort ?? "9999";
            this.PingAtmId = pingAtmId;
            // use default value if no "pingAuthorizationPort" provided
            this.PingAuthorizationPort = pingAuthorizationPort ?? "9031";
            this.PingCertSubjectDn = pingCertSubjectDn;
            // use default value if no "pingClientAuthenticationType" provided
            this.PingClientAuthenticationType = pingClientAuthenticationType ?? "CLIENT_SECRET";
            this.PingEnforceReplayPrevention = pingEnforceReplayPrevention;
            this.PingGrantTypes = pingGrantTypes;
            this.PingIssuerDn = pingIssuerDn;
            this.PingJwks = pingJwks;
            this.PingJwksUrl = pingJwksUrl;
            this.PingPassword = pingPassword;
            this.PingPrivilegedUser = pingPrivilegedUser;
            this.PingRedirectUris = pingRedirectUris;
            this.PingRestrictedScopes = pingRestrictedScopes;
            this.PingSigningAlgo = pingSigningAlgo;
            this.PingUrl = pingUrl;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "60m";
        }

        /// <summary>
        /// Protection from accidental deletion of this item
        /// </summary>
        /// <value>Protection from accidental deletion of this item</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Producer name
        /// </summary>
        /// <value>Producer name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Producer New name
        /// </summary>
        /// <value>Producer New name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Ping Federate administrative port
        /// </summary>
        /// <value>Ping Federate administrative port</value>
        [DataMember(Name = "ping-administrative-port", EmitDefaultValue = false)]
        public string PingAdministrativePort { get; set; }

        /// <summary>
        /// Set a specific Access Token Management (ATM) instance for the created OAuth Client by providing the ATM Id. If no explicit value is given, the default pingfederate server ATM will be set.
        /// </summary>
        /// <value>Set a specific Access Token Management (ATM) instance for the created OAuth Client by providing the ATM Id. If no explicit value is given, the default pingfederate server ATM will be set.</value>
        [DataMember(Name = "ping-atm-id", EmitDefaultValue = false)]
        public string PingAtmId { get; set; }

        /// <summary>
        /// Ping Federate authorization port
        /// </summary>
        /// <value>Ping Federate authorization port</value>
        [DataMember(Name = "ping-authorization-port", EmitDefaultValue = false)]
        public string PingAuthorizationPort { get; set; }

        /// <summary>
        /// The subject DN of the client certificate. If no explicit value is given, the producer will create CA certificate and matched client certificate and return it as value. Used in conjunction with ping-issuer-dn (relevant for CLIENT_TLS_CERTIFICATE authentication method)
        /// </summary>
        /// <value>The subject DN of the client certificate. If no explicit value is given, the producer will create CA certificate and matched client certificate and return it as value. Used in conjunction with ping-issuer-dn (relevant for CLIENT_TLS_CERTIFICATE authentication method)</value>
        [DataMember(Name = "ping-cert-subject-dn", EmitDefaultValue = false)]
        public string PingCertSubjectDn { get; set; }

        /// <summary>
        /// OAuth Client Authentication Type [CLIENT_SECRET, PRIVATE_KEY_JWT, CLIENT_TLS_CERTIFICATE]
        /// </summary>
        /// <value>OAuth Client Authentication Type [CLIENT_SECRET, PRIVATE_KEY_JWT, CLIENT_TLS_CERTIFICATE]</value>
        [DataMember(Name = "ping-client-authentication-type", EmitDefaultValue = false)]
        public string PingClientAuthenticationType { get; set; }

        /// <summary>
        /// Determines whether PingFederate requires a unique signed JWT from the client for each action (relevant for PRIVATE_KEY_JWT authentication method)
        /// </summary>
        /// <value>Determines whether PingFederate requires a unique signed JWT from the client for each action (relevant for PRIVATE_KEY_JWT authentication method)</value>
        [DataMember(Name = "ping-enforce-replay-prevention", EmitDefaultValue = false)]
        public string PingEnforceReplayPrevention { get; set; }

        /// <summary>
        /// List of OAuth client grant types [IMPLICIT, AUTHORIZATION_CODE, CLIENT_CREDENTIALS, TOKEN_EXCHANGE, REFRESH_TOKEN, ASSERTION_GRANTS, PASSWORD, RESOURCE_OWNER_CREDENTIALS]. If no explicit value is given, AUTHORIZATION_CODE will be selected as default.
        /// </summary>
        /// <value>List of OAuth client grant types [IMPLICIT, AUTHORIZATION_CODE, CLIENT_CREDENTIALS, TOKEN_EXCHANGE, REFRESH_TOKEN, ASSERTION_GRANTS, PASSWORD, RESOURCE_OWNER_CREDENTIALS]. If no explicit value is given, AUTHORIZATION_CODE will be selected as default.</value>
        [DataMember(Name = "ping-grant-types", EmitDefaultValue = false)]
        public List<string> PingGrantTypes { get; set; }

        /// <summary>
        /// Issuer DN of trusted CA certificate that imported into Ping Federate server. You may select \\\&quot;Trust Any\\\&quot; to trust all the existing issuers in Ping Federate server. Used in conjunction with ping-cert-subject-dn (relevant for CLIENT_TLS_CERTIFICATE authentication method)
        /// </summary>
        /// <value>Issuer DN of trusted CA certificate that imported into Ping Federate server. You may select \\\&quot;Trust Any\\\&quot; to trust all the existing issuers in Ping Federate server. Used in conjunction with ping-cert-subject-dn (relevant for CLIENT_TLS_CERTIFICATE authentication method)</value>
        [DataMember(Name = "ping-issuer-dn", EmitDefaultValue = false)]
        public string PingIssuerDn { get; set; }

        /// <summary>
        /// Base64-encoded JSON Web Key Set (JWKS). If no explicit value is given, the producer will create JWKs and matched signed JWT (Sign Algo: RS256) and return it as value (relevant for PRIVATE_KEY_JWT authentication method)
        /// </summary>
        /// <value>Base64-encoded JSON Web Key Set (JWKS). If no explicit value is given, the producer will create JWKs and matched signed JWT (Sign Algo: RS256) and return it as value (relevant for PRIVATE_KEY_JWT authentication method)</value>
        [DataMember(Name = "ping-jwks", EmitDefaultValue = false)]
        public string PingJwks { get; set; }

        /// <summary>
        /// The URL of the JSON Web Key Set (JWKS). If no explicit value is given, the producer will create JWKs and matched signed JWT and return it as value (relevant for PRIVATE_KEY_JWT authentication method)
        /// </summary>
        /// <value>The URL of the JSON Web Key Set (JWKS). If no explicit value is given, the producer will create JWKs and matched signed JWT and return it as value (relevant for PRIVATE_KEY_JWT authentication method)</value>
        [DataMember(Name = "ping-jwks-url", EmitDefaultValue = false)]
        public string PingJwksUrl { get; set; }

        /// <summary>
        /// Ping Federate privileged user password
        /// </summary>
        /// <value>Ping Federate privileged user password</value>
        [DataMember(Name = "ping-password", EmitDefaultValue = false)]
        public string PingPassword { get; set; }

        /// <summary>
        /// Ping Federate privileged user
        /// </summary>
        /// <value>Ping Federate privileged user</value>
        [DataMember(Name = "ping-privileged-user", EmitDefaultValue = false)]
        public string PingPrivilegedUser { get; set; }

        /// <summary>
        /// List of URIs to which the OAuth authorization server may redirect the resource owner&#39;s user agent after authorization is obtained. At least one redirection URI is required for the AUTHORIZATION_CODE and IMPLICIT grant types.
        /// </summary>
        /// <value>List of URIs to which the OAuth authorization server may redirect the resource owner&#39;s user agent after authorization is obtained. At least one redirection URI is required for the AUTHORIZATION_CODE and IMPLICIT grant types.</value>
        [DataMember(Name = "ping-redirect-uris", EmitDefaultValue = false)]
        public List<string> PingRedirectUris { get; set; }

        /// <summary>
        /// Limit the OAuth client to specific scopes list
        /// </summary>
        /// <value>Limit the OAuth client to specific scopes list</value>
        [DataMember(Name = "ping-restricted-scopes", EmitDefaultValue = false)]
        public List<string> PingRestrictedScopes { get; set; }

        /// <summary>
        /// The signing algorithm that the client must use to sign its request objects [RS256,RS384,RS512,ES256,ES384,ES512,PS256,PS384,PS512] If no explicit value is given, the client can use any of the supported signing algorithms (relevant for PRIVATE_KEY_JWT authentication method)
        /// </summary>
        /// <value>The signing algorithm that the client must use to sign its request objects [RS256,RS384,RS512,ES256,ES384,ES512,PS256,PS384,PS512] If no explicit value is given, the client can use any of the supported signing algorithms (relevant for PRIVATE_KEY_JWT authentication method)</value>
        [DataMember(Name = "ping-signing-algo", EmitDefaultValue = false)]
        public string PingSigningAlgo { get; set; }

        /// <summary>
        /// Ping URL
        /// </summary>
        /// <value>Ping URL</value>
        [DataMember(Name = "ping-url", EmitDefaultValue = false)]
        public string PingUrl { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// List of the tags attached to this secret
        /// </summary>
        /// <value>List of the tags attached to this secret</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// The time from dynamic secret creation to expiration.
        /// </summary>
        /// <value>The time from dynamic secret creation to expiration.</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayUpdateProducerPing {\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  PingAdministrativePort: ").Append(PingAdministrativePort).Append("\n");
            sb.Append("  PingAtmId: ").Append(PingAtmId).Append("\n");
            sb.Append("  PingAuthorizationPort: ").Append(PingAuthorizationPort).Append("\n");
            sb.Append("  PingCertSubjectDn: ").Append(PingCertSubjectDn).Append("\n");
            sb.Append("  PingClientAuthenticationType: ").Append(PingClientAuthenticationType).Append("\n");
            sb.Append("  PingEnforceReplayPrevention: ").Append(PingEnforceReplayPrevention).Append("\n");
            sb.Append("  PingGrantTypes: ").Append(PingGrantTypes).Append("\n");
            sb.Append("  PingIssuerDn: ").Append(PingIssuerDn).Append("\n");
            sb.Append("  PingJwks: ").Append(PingJwks).Append("\n");
            sb.Append("  PingJwksUrl: ").Append(PingJwksUrl).Append("\n");
            sb.Append("  PingPassword: ").Append(PingPassword).Append("\n");
            sb.Append("  PingPrivilegedUser: ").Append(PingPrivilegedUser).Append("\n");
            sb.Append("  PingRedirectUris: ").Append(PingRedirectUris).Append("\n");
            sb.Append("  PingRestrictedScopes: ").Append(PingRestrictedScopes).Append("\n");
            sb.Append("  PingSigningAlgo: ").Append(PingSigningAlgo).Append("\n");
            sb.Append("  PingUrl: ").Append(PingUrl).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayUpdateProducerPing);
        }

        /// <summary>
        /// Returns true if GatewayUpdateProducerPing instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayUpdateProducerPing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayUpdateProducerPing input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    (this.DeleteProtection != null &&
                    this.DeleteProtection.Equals(input.DeleteProtection))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                ) && 
                (
                    this.PingAdministrativePort == input.PingAdministrativePort ||
                    (this.PingAdministrativePort != null &&
                    this.PingAdministrativePort.Equals(input.PingAdministrativePort))
                ) && 
                (
                    this.PingAtmId == input.PingAtmId ||
                    (this.PingAtmId != null &&
                    this.PingAtmId.Equals(input.PingAtmId))
                ) && 
                (
                    this.PingAuthorizationPort == input.PingAuthorizationPort ||
                    (this.PingAuthorizationPort != null &&
                    this.PingAuthorizationPort.Equals(input.PingAuthorizationPort))
                ) && 
                (
                    this.PingCertSubjectDn == input.PingCertSubjectDn ||
                    (this.PingCertSubjectDn != null &&
                    this.PingCertSubjectDn.Equals(input.PingCertSubjectDn))
                ) && 
                (
                    this.PingClientAuthenticationType == input.PingClientAuthenticationType ||
                    (this.PingClientAuthenticationType != null &&
                    this.PingClientAuthenticationType.Equals(input.PingClientAuthenticationType))
                ) && 
                (
                    this.PingEnforceReplayPrevention == input.PingEnforceReplayPrevention ||
                    (this.PingEnforceReplayPrevention != null &&
                    this.PingEnforceReplayPrevention.Equals(input.PingEnforceReplayPrevention))
                ) && 
                (
                    this.PingGrantTypes == input.PingGrantTypes ||
                    this.PingGrantTypes != null &&
                    input.PingGrantTypes != null &&
                    this.PingGrantTypes.SequenceEqual(input.PingGrantTypes)
                ) && 
                (
                    this.PingIssuerDn == input.PingIssuerDn ||
                    (this.PingIssuerDn != null &&
                    this.PingIssuerDn.Equals(input.PingIssuerDn))
                ) && 
                (
                    this.PingJwks == input.PingJwks ||
                    (this.PingJwks != null &&
                    this.PingJwks.Equals(input.PingJwks))
                ) && 
                (
                    this.PingJwksUrl == input.PingJwksUrl ||
                    (this.PingJwksUrl != null &&
                    this.PingJwksUrl.Equals(input.PingJwksUrl))
                ) && 
                (
                    this.PingPassword == input.PingPassword ||
                    (this.PingPassword != null &&
                    this.PingPassword.Equals(input.PingPassword))
                ) && 
                (
                    this.PingPrivilegedUser == input.PingPrivilegedUser ||
                    (this.PingPrivilegedUser != null &&
                    this.PingPrivilegedUser.Equals(input.PingPrivilegedUser))
                ) && 
                (
                    this.PingRedirectUris == input.PingRedirectUris ||
                    this.PingRedirectUris != null &&
                    input.PingRedirectUris != null &&
                    this.PingRedirectUris.SequenceEqual(input.PingRedirectUris)
                ) && 
                (
                    this.PingRestrictedScopes == input.PingRestrictedScopes ||
                    this.PingRestrictedScopes != null &&
                    input.PingRestrictedScopes != null &&
                    this.PingRestrictedScopes.SequenceEqual(input.PingRestrictedScopes)
                ) && 
                (
                    this.PingSigningAlgo == input.PingSigningAlgo ||
                    (this.PingSigningAlgo != null &&
                    this.PingSigningAlgo.Equals(input.PingSigningAlgo))
                ) && 
                (
                    this.PingUrl == input.PingUrl ||
                    (this.PingUrl != null &&
                    this.PingUrl.Equals(input.PingUrl))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeleteProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteProtection.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NewName != null)
                {
                    hashCode = (hashCode * 59) + this.NewName.GetHashCode();
                }
                if (this.PingAdministrativePort != null)
                {
                    hashCode = (hashCode * 59) + this.PingAdministrativePort.GetHashCode();
                }
                if (this.PingAtmId != null)
                {
                    hashCode = (hashCode * 59) + this.PingAtmId.GetHashCode();
                }
                if (this.PingAuthorizationPort != null)
                {
                    hashCode = (hashCode * 59) + this.PingAuthorizationPort.GetHashCode();
                }
                if (this.PingCertSubjectDn != null)
                {
                    hashCode = (hashCode * 59) + this.PingCertSubjectDn.GetHashCode();
                }
                if (this.PingClientAuthenticationType != null)
                {
                    hashCode = (hashCode * 59) + this.PingClientAuthenticationType.GetHashCode();
                }
                if (this.PingEnforceReplayPrevention != null)
                {
                    hashCode = (hashCode * 59) + this.PingEnforceReplayPrevention.GetHashCode();
                }
                if (this.PingGrantTypes != null)
                {
                    hashCode = (hashCode * 59) + this.PingGrantTypes.GetHashCode();
                }
                if (this.PingIssuerDn != null)
                {
                    hashCode = (hashCode * 59) + this.PingIssuerDn.GetHashCode();
                }
                if (this.PingJwks != null)
                {
                    hashCode = (hashCode * 59) + this.PingJwks.GetHashCode();
                }
                if (this.PingJwksUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PingJwksUrl.GetHashCode();
                }
                if (this.PingPassword != null)
                {
                    hashCode = (hashCode * 59) + this.PingPassword.GetHashCode();
                }
                if (this.PingPrivilegedUser != null)
                {
                    hashCode = (hashCode * 59) + this.PingPrivilegedUser.GetHashCode();
                }
                if (this.PingRedirectUris != null)
                {
                    hashCode = (hashCode * 59) + this.PingRedirectUris.GetHashCode();
                }
                if (this.PingRestrictedScopes != null)
                {
                    hashCode = (hashCode * 59) + this.PingRestrictedScopes.GetHashCode();
                }
                if (this.PingSigningAlgo != null)
                {
                    hashCode = (hashCode * 59) + this.PingSigningAlgo.GetHashCode();
                }
                if (this.PingUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PingUrl.GetHashCode();
                }
                if (this.ProducerEncryptionKeyName != null)
                {
                    hashCode = (hashCode * 59) + this.ProducerEncryptionKeyName.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TargetName != null)
                {
                    hashCode = (hashCode * 59) + this.TargetName.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UserTtl != null)
                {
                    hashCode = (hashCode * 59) + this.UserTtl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
