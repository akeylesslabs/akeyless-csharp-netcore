/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CertificateTemplateInfo
    /// </summary>
    [DataContract(Name = "CertificateTemplateInfo")]
    public partial class CertificateTemplateInfo : IEquatable<CertificateTemplateInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateTemplateInfo" /> class.
        /// </summary>
        /// <param name="commonName">commonName.</param>
        /// <param name="country">country.</param>
        /// <param name="csrCnfBase64">csrCnfBase64.</param>
        /// <param name="digestAlgo">digestAlgo.</param>
        /// <param name="locality">locality.</param>
        /// <param name="organization">organization.</param>
        /// <param name="province">province.</param>
        /// <param name="selfSignedEnabled">selfSignedEnabled.</param>
        /// <param name="ttl">ttl.</param>
        public CertificateTemplateInfo(string commonName = default(string), string country = default(string), string csrCnfBase64 = default(string), string digestAlgo = default(string), string locality = default(string), string organization = default(string), string province = default(string), bool selfSignedEnabled = default(bool), long ttl = default(long))
        {
            this.CommonName = commonName;
            this.Country = country;
            this.CsrCnfBase64 = csrCnfBase64;
            this.DigestAlgo = digestAlgo;
            this.Locality = locality;
            this.Organization = organization;
            this.Province = province;
            this.SelfSignedEnabled = selfSignedEnabled;
            this.Ttl = ttl;
        }

        /// <summary>
        /// Gets or Sets CommonName
        /// </summary>
        [DataMember(Name = "common_name", EmitDefaultValue = false)]
        public string CommonName { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets CsrCnfBase64
        /// </summary>
        [DataMember(Name = "csr_cnf_base_64", EmitDefaultValue = false)]
        public string CsrCnfBase64 { get; set; }

        /// <summary>
        /// Gets or Sets DigestAlgo
        /// </summary>
        [DataMember(Name = "digest_algo", EmitDefaultValue = false)]
        public string DigestAlgo { get; set; }

        /// <summary>
        /// Gets or Sets Locality
        /// </summary>
        [DataMember(Name = "locality", EmitDefaultValue = false)]
        public string Locality { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [DataMember(Name = "organization", EmitDefaultValue = false)]
        public string Organization { get; set; }

        /// <summary>
        /// Gets or Sets Province
        /// </summary>
        [DataMember(Name = "province", EmitDefaultValue = false)]
        public string Province { get; set; }

        /// <summary>
        /// Gets or Sets SelfSignedEnabled
        /// </summary>
        [DataMember(Name = "self_signed_enabled", EmitDefaultValue = true)]
        public bool SelfSignedEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Ttl
        /// </summary>
        [DataMember(Name = "ttl", EmitDefaultValue = false)]
        public long Ttl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertificateTemplateInfo {\n");
            sb.Append("  CommonName: ").Append(CommonName).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CsrCnfBase64: ").Append(CsrCnfBase64).Append("\n");
            sb.Append("  DigestAlgo: ").Append(DigestAlgo).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  SelfSignedEnabled: ").Append(SelfSignedEnabled).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificateTemplateInfo);
        }

        /// <summary>
        /// Returns true if CertificateTemplateInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificateTemplateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateTemplateInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CommonName == input.CommonName ||
                    (this.CommonName != null &&
                    this.CommonName.Equals(input.CommonName))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CsrCnfBase64 == input.CsrCnfBase64 ||
                    (this.CsrCnfBase64 != null &&
                    this.CsrCnfBase64.Equals(input.CsrCnfBase64))
                ) && 
                (
                    this.DigestAlgo == input.DigestAlgo ||
                    (this.DigestAlgo != null &&
                    this.DigestAlgo.Equals(input.DigestAlgo))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                ) && 
                (
                    this.Province == input.Province ||
                    (this.Province != null &&
                    this.Province.Equals(input.Province))
                ) && 
                (
                    this.SelfSignedEnabled == input.SelfSignedEnabled ||
                    this.SelfSignedEnabled.Equals(input.SelfSignedEnabled)
                ) && 
                (
                    this.Ttl == input.Ttl ||
                    this.Ttl.Equals(input.Ttl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CommonName != null)
                {
                    hashCode = (hashCode * 59) + this.CommonName.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.CsrCnfBase64 != null)
                {
                    hashCode = (hashCode * 59) + this.CsrCnfBase64.GetHashCode();
                }
                if (this.DigestAlgo != null)
                {
                    hashCode = (hashCode * 59) + this.DigestAlgo.GetHashCode();
                }
                if (this.Locality != null)
                {
                    hashCode = (hashCode * 59) + this.Locality.GetHashCode();
                }
                if (this.Organization != null)
                {
                    hashCode = (hashCode * 59) + this.Organization.GetHashCode();
                }
                if (this.Province != null)
                {
                    hashCode = (hashCode * 59) + this.Province.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SelfSignedEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.Ttl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
