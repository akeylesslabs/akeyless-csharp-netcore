/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// StaticSecretDetailsInfo
    /// </summary>
    [DataContract(Name = "StaticSecretDetailsInfo")]
    public partial class StaticSecretDetailsInfo : IEquatable<StaticSecretDetailsInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaticSecretDetailsInfo" /> class.
        /// </summary>
        /// <param name="format">StaticSecretFormat defines the format of static secret (e.g. Text).</param>
        /// <param name="notifyOnChangeEvent">notifyOnChangeEvent.</param>
        /// <param name="username">username.</param>
        /// <param name="website">deprecated.</param>
        /// <param name="websites">websites.</param>
        public StaticSecretDetailsInfo(string format = default(string), bool notifyOnChangeEvent = default(bool), string username = default(string), string website = default(string), List<string> websites = default(List<string>))
        {
            this.Format = format;
            this.NotifyOnChangeEvent = notifyOnChangeEvent;
            this.Username = username;
            this.Website = website;
            this.Websites = websites;
        }

        /// <summary>
        /// StaticSecretFormat defines the format of static secret (e.g. Text)
        /// </summary>
        /// <value>StaticSecretFormat defines the format of static secret (e.g. Text)</value>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets NotifyOnChangeEvent
        /// </summary>
        [DataMember(Name = "notify_on_change_event", EmitDefaultValue = true)]
        public bool NotifyOnChangeEvent { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// deprecated
        /// </summary>
        /// <value>deprecated</value>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets Websites
        /// </summary>
        [DataMember(Name = "websites", EmitDefaultValue = false)]
        public List<string> Websites { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StaticSecretDetailsInfo {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  NotifyOnChangeEvent: ").Append(NotifyOnChangeEvent).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Websites: ").Append(Websites).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StaticSecretDetailsInfo);
        }

        /// <summary>
        /// Returns true if StaticSecretDetailsInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of StaticSecretDetailsInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaticSecretDetailsInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.NotifyOnChangeEvent == input.NotifyOnChangeEvent ||
                    this.NotifyOnChangeEvent.Equals(input.NotifyOnChangeEvent)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Websites == input.Websites ||
                    this.Websites != null &&
                    input.Websites != null &&
                    this.Websites.SequenceEqual(input.Websites)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Format != null)
                {
                    hashCode = (hashCode * 59) + this.Format.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotifyOnChangeEvent.GetHashCode();
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Website != null)
                {
                    hashCode = (hashCode * 59) + this.Website.GetHashCode();
                }
                if (this.Websites != null)
                {
                    hashCode = (hashCode * 59) + this.Websites.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
