/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// StaticSecretDetailsInfo
    /// </summary>
    [DataContract(Name = "StaticSecretDetailsInfo")]
    public partial class StaticSecretDetailsInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaticSecretDetailsInfo" /> class.
        /// </summary>
        /// <param name="format">StaticSecretFormat defines the format of static secret (e.g. Text).</param>
        /// <param name="maxVersions">maxVersions.</param>
        /// <param name="notifyOnChangeEvent">notifyOnChangeEvent.</param>
        /// <param name="passwordSecurityInfo">passwordSecurityInfo.</param>
        /// <param name="username">username.</param>
        /// <param name="website">deprecated.</param>
        /// <param name="websites">websites.</param>
        public StaticSecretDetailsInfo(string format = default(string), long maxVersions = default(long), bool notifyOnChangeEvent = default(bool), PasswordSecurityInfo passwordSecurityInfo = default(PasswordSecurityInfo), string username = default(string), string website = default(string), List<string> websites = default(List<string>))
        {
            this.Format = format;
            this.MaxVersions = maxVersions;
            this.NotifyOnChangeEvent = notifyOnChangeEvent;
            this.PasswordSecurityInfo = passwordSecurityInfo;
            this.Username = username;
            this.Website = website;
            this.Websites = websites;
        }

        /// <summary>
        /// StaticSecretFormat defines the format of static secret (e.g. Text)
        /// </summary>
        /// <value>StaticSecretFormat defines the format of static secret (e.g. Text)</value>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets MaxVersions
        /// </summary>
        [DataMember(Name = "max_versions", EmitDefaultValue = false)]
        public long MaxVersions { get; set; }

        /// <summary>
        /// Gets or Sets NotifyOnChangeEvent
        /// </summary>
        [DataMember(Name = "notify_on_change_event", EmitDefaultValue = true)]
        public bool NotifyOnChangeEvent { get; set; }

        /// <summary>
        /// Gets or Sets PasswordSecurityInfo
        /// </summary>
        [DataMember(Name = "password_security_info", EmitDefaultValue = false)]
        public PasswordSecurityInfo PasswordSecurityInfo { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// deprecated
        /// </summary>
        /// <value>deprecated</value>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets Websites
        /// </summary>
        [DataMember(Name = "websites", EmitDefaultValue = false)]
        public List<string> Websites { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StaticSecretDetailsInfo {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  MaxVersions: ").Append(MaxVersions).Append("\n");
            sb.Append("  NotifyOnChangeEvent: ").Append(NotifyOnChangeEvent).Append("\n");
            sb.Append("  PasswordSecurityInfo: ").Append(PasswordSecurityInfo).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Websites: ").Append(Websites).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
