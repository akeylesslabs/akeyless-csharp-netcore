/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateProducerNativeK8S is a command that creates k8s producer
    /// </summary>
    [DataContract]
    public partial class GatewayCreateProducerNativeK8S :  IEquatable<GatewayCreateProducerNativeK8S>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerNativeK8S" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerNativeK8S() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerNativeK8S" /> class.
        /// </summary>
        /// <param name="k8sClusterCaCert">K8S cluster CA certificate (required).</param>
        /// <param name="k8sClusterEndpoint">K8S cluster URL endpoint (required).</param>
        /// <param name="k8sClusterToken">K8S cluster Bearer token (required).</param>
        /// <param name="k8sNamespace">K8S namespace.</param>
        /// <param name="k8sServiceAccount">K8S service account (required).</param>
        /// <param name="name">Producer name (required).</param>
        /// <param name="password">Required only when the authentication process requires a username and password.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        /// <param name="username">Required only when the authentication process requires a username and password.</param>
        public GatewayCreateProducerNativeK8S(string k8sClusterCaCert = default(string), string k8sClusterEndpoint = default(string), string k8sClusterToken = default(string), string k8sNamespace = default(string), string k8sServiceAccount = default(string), string name = default(string), string password = default(string), string producerEncryptionKeyName = default(string), string token = default(string), string uidToken = default(string), string userTtl = "60m", string username = default(string))
        {
            // to ensure "k8sClusterCaCert" is required (not null)
            this.K8sClusterCaCert = k8sClusterCaCert ?? throw new ArgumentNullException("k8sClusterCaCert is a required property for GatewayCreateProducerNativeK8S and cannot be null");
            // to ensure "k8sClusterEndpoint" is required (not null)
            this.K8sClusterEndpoint = k8sClusterEndpoint ?? throw new ArgumentNullException("k8sClusterEndpoint is a required property for GatewayCreateProducerNativeK8S and cannot be null");
            // to ensure "k8sClusterToken" is required (not null)
            this.K8sClusterToken = k8sClusterToken ?? throw new ArgumentNullException("k8sClusterToken is a required property for GatewayCreateProducerNativeK8S and cannot be null");
            // to ensure "k8sServiceAccount" is required (not null)
            this.K8sServiceAccount = k8sServiceAccount ?? throw new ArgumentNullException("k8sServiceAccount is a required property for GatewayCreateProducerNativeK8S and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for GatewayCreateProducerNativeK8S and cannot be null");
            this.K8sNamespace = k8sNamespace;
            this.Password = password;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "60m";
            this.Username = username;
        }
        
        /// <summary>
        /// K8S cluster CA certificate
        /// </summary>
        /// <value>K8S cluster CA certificate</value>
        [DataMember(Name="k8s-cluster-ca-cert", EmitDefaultValue=false)]
        public string K8sClusterCaCert { get; set; }

        /// <summary>
        /// K8S cluster URL endpoint
        /// </summary>
        /// <value>K8S cluster URL endpoint</value>
        [DataMember(Name="k8s-cluster-endpoint", EmitDefaultValue=false)]
        public string K8sClusterEndpoint { get; set; }

        /// <summary>
        /// K8S cluster Bearer token
        /// </summary>
        /// <value>K8S cluster Bearer token</value>
        [DataMember(Name="k8s-cluster-token", EmitDefaultValue=false)]
        public string K8sClusterToken { get; set; }

        /// <summary>
        /// K8S namespace
        /// </summary>
        /// <value>K8S namespace</value>
        [DataMember(Name="k8s-namespace", EmitDefaultValue=false)]
        public string K8sNamespace { get; set; }

        /// <summary>
        /// K8S service account
        /// </summary>
        /// <value>K8S service account</value>
        [DataMember(Name="k8s-service-account", EmitDefaultValue=false)]
        public string K8sServiceAccount { get; set; }

        /// <summary>
        /// Producer name
        /// </summary>
        /// <value>Producer name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name="producer-encryption-key-name", EmitDefaultValue=false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name="user-ttl", EmitDefaultValue=false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerNativeK8S {\n");
            sb.Append("  K8sClusterCaCert: ").Append(K8sClusterCaCert).Append("\n");
            sb.Append("  K8sClusterEndpoint: ").Append(K8sClusterEndpoint).Append("\n");
            sb.Append("  K8sClusterToken: ").Append(K8sClusterToken).Append("\n");
            sb.Append("  K8sNamespace: ").Append(K8sNamespace).Append("\n");
            sb.Append("  K8sServiceAccount: ").Append(K8sServiceAccount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayCreateProducerNativeK8S);
        }

        /// <summary>
        /// Returns true if GatewayCreateProducerNativeK8S instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayCreateProducerNativeK8S to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayCreateProducerNativeK8S input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.K8sClusterCaCert == input.K8sClusterCaCert ||
                    (this.K8sClusterCaCert != null &&
                    this.K8sClusterCaCert.Equals(input.K8sClusterCaCert))
                ) && 
                (
                    this.K8sClusterEndpoint == input.K8sClusterEndpoint ||
                    (this.K8sClusterEndpoint != null &&
                    this.K8sClusterEndpoint.Equals(input.K8sClusterEndpoint))
                ) && 
                (
                    this.K8sClusterToken == input.K8sClusterToken ||
                    (this.K8sClusterToken != null &&
                    this.K8sClusterToken.Equals(input.K8sClusterToken))
                ) && 
                (
                    this.K8sNamespace == input.K8sNamespace ||
                    (this.K8sNamespace != null &&
                    this.K8sNamespace.Equals(input.K8sNamespace))
                ) && 
                (
                    this.K8sServiceAccount == input.K8sServiceAccount ||
                    (this.K8sServiceAccount != null &&
                    this.K8sServiceAccount.Equals(input.K8sServiceAccount))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.K8sClusterCaCert != null)
                    hashCode = hashCode * 59 + this.K8sClusterCaCert.GetHashCode();
                if (this.K8sClusterEndpoint != null)
                    hashCode = hashCode * 59 + this.K8sClusterEndpoint.GetHashCode();
                if (this.K8sClusterToken != null)
                    hashCode = hashCode * 59 + this.K8sClusterToken.GetHashCode();
                if (this.K8sNamespace != null)
                    hashCode = hashCode * 59 + this.K8sNamespace.GetHashCode();
                if (this.K8sServiceAccount != null)
                    hashCode = hashCode * 59 + this.K8sServiceAccount.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.ProducerEncryptionKeyName != null)
                    hashCode = hashCode * 59 + this.ProducerEncryptionKeyName.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.UserTtl != null)
                    hashCode = hashCode * 59 + this.UserTtl.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
