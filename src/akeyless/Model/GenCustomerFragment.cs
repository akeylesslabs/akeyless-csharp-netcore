/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GenCustomerFragment
    /// </summary>
    [DataContract(Name = "genCustomerFragment")]
    public partial class GenCustomerFragment : IEquatable<GenCustomerFragment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenCustomerFragment" /> class.
        /// </summary>
        /// <param name="description">Description of the object.</param>
        /// <param name="hsmKeyLabel">The label of the hsm key to use for customer fragment operations (relevant for hsm_wrapped/hsm_protected customer fragments).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="metadata">Deprecated - use description.</param>
        /// <param name="name">Customer fragment name.</param>
        /// <param name="type">Customer fragment type [standard/hsm_wrapped/hsm_secured] (default to &quot;standard&quot;).</param>
        public GenCustomerFragment(string description = default(string), string hsmKeyLabel = default(string), bool json = false, string metadata = default(string), string name = default(string), string type = "standard")
        {
            this.Description = description;
            this.HsmKeyLabel = hsmKeyLabel;
            this.Json = json;
            this.Metadata = metadata;
            this.Name = name;
            // use default value if no "type" provided
            this.Type = type ?? "standard";
        }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The label of the hsm key to use for customer fragment operations (relevant for hsm_wrapped/hsm_protected customer fragments)
        /// </summary>
        /// <value>The label of the hsm key to use for customer fragment operations (relevant for hsm_wrapped/hsm_protected customer fragments)</value>
        [DataMember(Name = "hsm-key-label", EmitDefaultValue = false)]
        public string HsmKeyLabel { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Deprecated - use description
        /// </summary>
        /// <value>Deprecated - use description</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Customer fragment name
        /// </summary>
        /// <value>Customer fragment name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Customer fragment type [standard/hsm_wrapped/hsm_secured]
        /// </summary>
        /// <value>Customer fragment type [standard/hsm_wrapped/hsm_secured]</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenCustomerFragment {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HsmKeyLabel: ").Append(HsmKeyLabel).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GenCustomerFragment);
        }

        /// <summary>
        /// Returns true if GenCustomerFragment instances are equal
        /// </summary>
        /// <param name="input">Instance of GenCustomerFragment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenCustomerFragment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.HsmKeyLabel == input.HsmKeyLabel ||
                    (this.HsmKeyLabel != null &&
                    this.HsmKeyLabel.Equals(input.HsmKeyLabel))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.HsmKeyLabel != null)
                {
                    hashCode = (hashCode * 59) + this.HsmKeyLabel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
