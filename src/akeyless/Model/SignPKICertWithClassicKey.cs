/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SignPKICertWithClassicKey
    /// </summary>
    [DataContract(Name = "signPKICertWithClassicKey")]
    public partial class SignPKICertWithClassicKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignPKICertWithClassicKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignPKICertWithClassicKey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignPKICertWithClassicKey" /> class.
        /// </summary>
        /// <param name="commonName">The common name to be included in the PKI certificate.</param>
        /// <param name="country">A comma-separated list of the country that will be set in the issued certificate.</param>
        /// <param name="displayId">The name of the key to use in the sign PKI Cert process (required).</param>
        /// <param name="dnsNames">DNS Names to be included in the PKI certificate (in a comma-delimited list).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="keyUsage">key-usage (default to &quot;DigitalSignature,KeyAgreement,KeyEncipherment&quot;).</param>
        /// <param name="locality">A comma-separated list of the locality that will be set in the issued certificate.</param>
        /// <param name="organizationalUnits">A comma-separated list of organizational units (OU) that will be set in the issued certificate.</param>
        /// <param name="organizations">A comma-separated list of organizations (O) that will be set in the issued certificate.</param>
        /// <param name="postalCode">A comma-separated list of the postal code that will be set in the issued certificate.</param>
        /// <param name="province">A comma-separated list of the province that will be set in the issued certificate.</param>
        /// <param name="publicKeyPemData">PublicKey using for signing in a PEM format..</param>
        /// <param name="signingMethod">SigningMethod (required).</param>
        /// <param name="streetAddress">A comma-separated list of the street address that will be set in the issued certificate.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="ttl">he requested Time To Live for the certificate, in seconds (required).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="uriSans">The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list).</param>
        /// <param name="varVersion">classic key version (required).</param>
        public SignPKICertWithClassicKey(string commonName = default(string), string country = default(string), string displayId = default(string), string dnsNames = default(string), bool json = false, string keyUsage = @"DigitalSignature,KeyAgreement,KeyEncipherment", string locality = default(string), string organizationalUnits = default(string), string organizations = default(string), string postalCode = default(string), string province = default(string), string publicKeyPemData = default(string), string signingMethod = default(string), string streetAddress = default(string), string token = default(string), long ttl = default(long), string uidToken = default(string), string uriSans = default(string), int varVersion = default(int))
        {
            // to ensure "displayId" is required (not null)
            if (displayId == null)
            {
                throw new ArgumentNullException("displayId is a required property for SignPKICertWithClassicKey and cannot be null");
            }
            this.DisplayId = displayId;
            // to ensure "signingMethod" is required (not null)
            if (signingMethod == null)
            {
                throw new ArgumentNullException("signingMethod is a required property for SignPKICertWithClassicKey and cannot be null");
            }
            this.SigningMethod = signingMethod;
            this.Ttl = ttl;
            this.VarVersion = varVersion;
            this.CommonName = commonName;
            this.Country = country;
            this.DnsNames = dnsNames;
            this.Json = json;
            // use default value if no "keyUsage" provided
            this.KeyUsage = keyUsage ?? @"DigitalSignature,KeyAgreement,KeyEncipherment";
            this.Locality = locality;
            this.OrganizationalUnits = organizationalUnits;
            this.Organizations = organizations;
            this.PostalCode = postalCode;
            this.Province = province;
            this.PublicKeyPemData = publicKeyPemData;
            this.StreetAddress = streetAddress;
            this.Token = token;
            this.UidToken = uidToken;
            this.UriSans = uriSans;
        }

        /// <summary>
        /// The common name to be included in the PKI certificate
        /// </summary>
        /// <value>The common name to be included in the PKI certificate</value>
        [DataMember(Name = "common-name", EmitDefaultValue = false)]
        public string CommonName { get; set; }

        /// <summary>
        /// A comma-separated list of the country that will be set in the issued certificate
        /// </summary>
        /// <value>A comma-separated list of the country that will be set in the issued certificate</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// The name of the key to use in the sign PKI Cert process
        /// </summary>
        /// <value>The name of the key to use in the sign PKI Cert process</value>
        [DataMember(Name = "display-id", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayId { get; set; }

        /// <summary>
        /// DNS Names to be included in the PKI certificate (in a comma-delimited list)
        /// </summary>
        /// <value>DNS Names to be included in the PKI certificate (in a comma-delimited list)</value>
        [DataMember(Name = "dns-names", EmitDefaultValue = false)]
        public string DnsNames { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// key-usage
        /// </summary>
        /// <value>key-usage</value>
        [DataMember(Name = "key-usage", EmitDefaultValue = false)]
        public string KeyUsage { get; set; }

        /// <summary>
        /// A comma-separated list of the locality that will be set in the issued certificate
        /// </summary>
        /// <value>A comma-separated list of the locality that will be set in the issued certificate</value>
        [DataMember(Name = "locality", EmitDefaultValue = false)]
        public string Locality { get; set; }

        /// <summary>
        /// A comma-separated list of organizational units (OU) that will be set in the issued certificate
        /// </summary>
        /// <value>A comma-separated list of organizational units (OU) that will be set in the issued certificate</value>
        [DataMember(Name = "organizational-units", EmitDefaultValue = false)]
        public string OrganizationalUnits { get; set; }

        /// <summary>
        /// A comma-separated list of organizations (O) that will be set in the issued certificate
        /// </summary>
        /// <value>A comma-separated list of organizations (O) that will be set in the issued certificate</value>
        [DataMember(Name = "organizations", EmitDefaultValue = false)]
        public string Organizations { get; set; }

        /// <summary>
        /// A comma-separated list of the postal code that will be set in the issued certificate
        /// </summary>
        /// <value>A comma-separated list of the postal code that will be set in the issued certificate</value>
        [DataMember(Name = "postal-code", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// A comma-separated list of the province that will be set in the issued certificate
        /// </summary>
        /// <value>A comma-separated list of the province that will be set in the issued certificate</value>
        [DataMember(Name = "province", EmitDefaultValue = false)]
        public string Province { get; set; }

        /// <summary>
        /// PublicKey using for signing in a PEM format.
        /// </summary>
        /// <value>PublicKey using for signing in a PEM format.</value>
        [DataMember(Name = "public-key-pem-data", EmitDefaultValue = false)]
        public string PublicKeyPemData { get; set; }

        /// <summary>
        /// SigningMethod
        /// </summary>
        /// <value>SigningMethod</value>
        [DataMember(Name = "signing-method", IsRequired = true, EmitDefaultValue = true)]
        public string SigningMethod { get; set; }

        /// <summary>
        /// A comma-separated list of the street address that will be set in the issued certificate
        /// </summary>
        /// <value>A comma-separated list of the street address that will be set in the issued certificate</value>
        [DataMember(Name = "street-address", EmitDefaultValue = false)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// he requested Time To Live for the certificate, in seconds
        /// </summary>
        /// <value>he requested Time To Live for the certificate, in seconds</value>
        [DataMember(Name = "ttl", IsRequired = true, EmitDefaultValue = true)]
        public long Ttl { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
        /// </summary>
        /// <value>The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)</value>
        [DataMember(Name = "uri-sans", EmitDefaultValue = false)]
        public string UriSans { get; set; }

        /// <summary>
        /// classic key version
        /// </summary>
        /// <value>classic key version</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignPKICertWithClassicKey {\n");
            sb.Append("  CommonName: ").Append(CommonName).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  DisplayId: ").Append(DisplayId).Append("\n");
            sb.Append("  DnsNames: ").Append(DnsNames).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeyUsage: ").Append(KeyUsage).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  OrganizationalUnits: ").Append(OrganizationalUnits).Append("\n");
            sb.Append("  Organizations: ").Append(Organizations).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  PublicKeyPemData: ").Append(PublicKeyPemData).Append("\n");
            sb.Append("  SigningMethod: ").Append(SigningMethod).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UriSans: ").Append(UriSans).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
