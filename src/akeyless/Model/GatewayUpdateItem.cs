/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayUpdateItem is a command that updates classic key
    /// </summary>
    [DataContract(Name = "gatewayUpdateItem")]
    public partial class GatewayUpdateItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayUpdateItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateItem" /> class.
        /// </summary>
        /// <param name="addTag">List of the new tags that will be attached to this item.</param>
        /// <param name="apiId">API ID to rotate (relevant only for rotator-type&#x3D;api-key).</param>
        /// <param name="apiKey">API key to rotate (relevant only for rotator-type&#x3D;api-key).</param>
        /// <param name="appId">ApplicationId (used in azure).</param>
        /// <param name="autoRotate">Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation [true/false].</param>
        /// <param name="customPayload">Secret payload to be sent with rotation request (relevant only for rotator-type&#x3D;custom).</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="description">Description of the object (default to &quot;default_metadata&quot;).</param>
        /// <param name="gcpKey">Base64-encoded service account private key text.</param>
        /// <param name="gcpServiceAccountEmail">The email of the gcp service account to rotate.</param>
        /// <param name="gcpServiceAccountKeyId">The key id of the gcp service account to rotate.</param>
        /// <param name="graceRotation">Create a new access key without deleting the old key from AWS for backup (relevant only for AWS) [true/false].</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="keepPrevVersion">Whether to keep previous version [true/false]. (relevant only for - -type&#x3D;rotated-secret). If not set, use default according to account settings.</param>
        /// <param name="key">The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="name">Item name (required).</param>
        /// <param name="newMetadata">Deprecated - use description (default to &quot;default_metadata&quot;).</param>
        /// <param name="newName">New item name.</param>
        /// <param name="newVersion">Deprecated.</param>
        /// <param name="passwordLength">The length of the password to be generated.</param>
        /// <param name="rmTag">List of the existent tags that will be removed from this item.</param>
        /// <param name="rotatedPassword">rotated-username password (relevant only for rotator-type&#x3D;password).</param>
        /// <param name="rotatedUsername">username to be rotated, if selected \\\&quot;use-self-creds\\\&quot; at rotator-creds-type, this username will try to rotate it&#39;s own password, if \\\&quot;use-target-creds\\\&quot; is selected, target credentials will be use to rotate the rotated-password (relevant only for rotator-type&#x3D;password).</param>
        /// <param name="rotationEventIn">How many days before the rotation of the item would you like to be notified.</param>
        /// <param name="rotationHour">The Rotation Hour (default to 0).</param>
        /// <param name="rotationInterval">The number of days to wait between every automatic key rotation (1-365).</param>
        /// <param name="rotatorCredsType">The rotation credentials type (default to &quot;use-self-creds&quot;).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="type">Item type (required).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GatewayUpdateItem(List<string> addTag = default(List<string>), string apiId = default(string), string apiKey = default(string), string appId = default(string), string autoRotate = default(string), string customPayload = default(string), string deleteProtection = default(string), string description = @"default_metadata", string gcpKey = default(string), string gcpServiceAccountEmail = default(string), string gcpServiceAccountKeyId = default(string), string graceRotation = default(string), bool json = false, string keepPrevVersion = default(string), string key = default(string), string name = default(string), string newMetadata = @"default_metadata", string newName = default(string), bool newVersion = default(bool), string passwordLength = default(string), List<string> rmTag = default(List<string>), string rotatedPassword = default(string), string rotatedUsername = default(string), List<string> rotationEventIn = default(List<string>), int rotationHour = 0, string rotationInterval = default(string), string rotatorCredsType = @"use-self-creds", string token = default(string), string type = default(string), string uidToken = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayUpdateItem and cannot be null");
            }
            this.Name = name;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for GatewayUpdateItem and cannot be null");
            }
            this.Type = type;
            this.AddTag = addTag;
            this.ApiId = apiId;
            this.ApiKey = apiKey;
            this.AppId = appId;
            this.AutoRotate = autoRotate;
            this.CustomPayload = customPayload;
            this.DeleteProtection = deleteProtection;
            // use default value if no "description" provided
            this.Description = description ?? @"default_metadata";
            this.GcpKey = gcpKey;
            this.GcpServiceAccountEmail = gcpServiceAccountEmail;
            this.GcpServiceAccountKeyId = gcpServiceAccountKeyId;
            this.GraceRotation = graceRotation;
            this.Json = json;
            this.KeepPrevVersion = keepPrevVersion;
            this.Key = key;
            // use default value if no "newMetadata" provided
            this.NewMetadata = newMetadata ?? @"default_metadata";
            this.NewName = newName;
            this.NewVersion = newVersion;
            this.PasswordLength = passwordLength;
            this.RmTag = rmTag;
            this.RotatedPassword = rotatedPassword;
            this.RotatedUsername = rotatedUsername;
            this.RotationEventIn = rotationEventIn;
            this.RotationHour = rotationHour;
            this.RotationInterval = rotationInterval;
            // use default value if no "rotatorCredsType" provided
            this.RotatorCredsType = rotatorCredsType ?? @"use-self-creds";
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// List of the new tags that will be attached to this item
        /// </summary>
        /// <value>List of the new tags that will be attached to this item</value>
        [DataMember(Name = "add-tag", EmitDefaultValue = false)]
        public List<string> AddTag { get; set; }

        /// <summary>
        /// API ID to rotate (relevant only for rotator-type&#x3D;api-key)
        /// </summary>
        /// <value>API ID to rotate (relevant only for rotator-type&#x3D;api-key)</value>
        [DataMember(Name = "api-id", EmitDefaultValue = false)]
        public string ApiId { get; set; }

        /// <summary>
        /// API key to rotate (relevant only for rotator-type&#x3D;api-key)
        /// </summary>
        /// <value>API key to rotate (relevant only for rotator-type&#x3D;api-key)</value>
        [DataMember(Name = "api-key", EmitDefaultValue = false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// ApplicationId (used in azure)
        /// </summary>
        /// <value>ApplicationId (used in azure)</value>
        [DataMember(Name = "app-id", EmitDefaultValue = false)]
        public string AppId { get; set; }

        /// <summary>
        /// Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation [true/false]
        /// </summary>
        /// <value>Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation [true/false]</value>
        [DataMember(Name = "auto-rotate", EmitDefaultValue = false)]
        public string AutoRotate { get; set; }

        /// <summary>
        /// Secret payload to be sent with rotation request (relevant only for rotator-type&#x3D;custom)
        /// </summary>
        /// <value>Secret payload to be sent with rotation request (relevant only for rotator-type&#x3D;custom)</value>
        [DataMember(Name = "custom-payload", EmitDefaultValue = false)]
        public string CustomPayload { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Base64-encoded service account private key text
        /// </summary>
        /// <value>Base64-encoded service account private key text</value>
        [DataMember(Name = "gcp-key", EmitDefaultValue = false)]
        public string GcpKey { get; set; }

        /// <summary>
        /// The email of the gcp service account to rotate
        /// </summary>
        /// <value>The email of the gcp service account to rotate</value>
        [DataMember(Name = "gcp-service-account-email", EmitDefaultValue = false)]
        public string GcpServiceAccountEmail { get; set; }

        /// <summary>
        /// The key id of the gcp service account to rotate
        /// </summary>
        /// <value>The key id of the gcp service account to rotate</value>
        [DataMember(Name = "gcp-service-account-key-id", EmitDefaultValue = false)]
        public string GcpServiceAccountKeyId { get; set; }

        /// <summary>
        /// Create a new access key without deleting the old key from AWS for backup (relevant only for AWS) [true/false]
        /// </summary>
        /// <value>Create a new access key without deleting the old key from AWS for backup (relevant only for AWS) [true/false]</value>
        [DataMember(Name = "grace-rotation", EmitDefaultValue = false)]
        public string GraceRotation { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Whether to keep previous version [true/false]. (relevant only for - -type&#x3D;rotated-secret). If not set, use default according to account settings
        /// </summary>
        /// <value>Whether to keep previous version [true/false]. (relevant only for - -type&#x3D;rotated-secret). If not set, use default according to account settings</value>
        [DataMember(Name = "keep-prev-version", EmitDefaultValue = false)]
        public string KeepPrevVersion { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Item name
        /// </summary>
        /// <value>Item name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Deprecated - use description
        /// </summary>
        /// <value>Deprecated - use description</value>
        [DataMember(Name = "new-metadata", EmitDefaultValue = false)]
        public string NewMetadata { get; set; }

        /// <summary>
        /// New item name
        /// </summary>
        /// <value>New item name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Deprecated
        /// </summary>
        /// <value>Deprecated</value>
        [DataMember(Name = "new-version", EmitDefaultValue = true)]
        public bool NewVersion { get; set; }

        /// <summary>
        /// The length of the password to be generated
        /// </summary>
        /// <value>The length of the password to be generated</value>
        [DataMember(Name = "password-length", EmitDefaultValue = false)]
        public string PasswordLength { get; set; }

        /// <summary>
        /// List of the existent tags that will be removed from this item
        /// </summary>
        /// <value>List of the existent tags that will be removed from this item</value>
        [DataMember(Name = "rm-tag", EmitDefaultValue = false)]
        public List<string> RmTag { get; set; }

        /// <summary>
        /// rotated-username password (relevant only for rotator-type&#x3D;password)
        /// </summary>
        /// <value>rotated-username password (relevant only for rotator-type&#x3D;password)</value>
        [DataMember(Name = "rotated-password", EmitDefaultValue = false)]
        public string RotatedPassword { get; set; }

        /// <summary>
        /// username to be rotated, if selected \\\&quot;use-self-creds\\\&quot; at rotator-creds-type, this username will try to rotate it&#39;s own password, if \\\&quot;use-target-creds\\\&quot; is selected, target credentials will be use to rotate the rotated-password (relevant only for rotator-type&#x3D;password)
        /// </summary>
        /// <value>username to be rotated, if selected \\\&quot;use-self-creds\\\&quot; at rotator-creds-type, this username will try to rotate it&#39;s own password, if \\\&quot;use-target-creds\\\&quot; is selected, target credentials will be use to rotate the rotated-password (relevant only for rotator-type&#x3D;password)</value>
        [DataMember(Name = "rotated-username", EmitDefaultValue = false)]
        public string RotatedUsername { get; set; }

        /// <summary>
        /// How many days before the rotation of the item would you like to be notified
        /// </summary>
        /// <value>How many days before the rotation of the item would you like to be notified</value>
        [DataMember(Name = "rotation-event-in", EmitDefaultValue = false)]
        public List<string> RotationEventIn { get; set; }

        /// <summary>
        /// The Rotation Hour
        /// </summary>
        /// <value>The Rotation Hour</value>
        [DataMember(Name = "rotation-hour", EmitDefaultValue = false)]
        public int RotationHour { get; set; }

        /// <summary>
        /// The number of days to wait between every automatic key rotation (1-365)
        /// </summary>
        /// <value>The number of days to wait between every automatic key rotation (1-365)</value>
        [DataMember(Name = "rotation-interval", EmitDefaultValue = false)]
        public string RotationInterval { get; set; }

        /// <summary>
        /// The rotation credentials type
        /// </summary>
        /// <value>The rotation credentials type</value>
        [DataMember(Name = "rotator-creds-type", EmitDefaultValue = false)]
        public string RotatorCredsType { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Item type
        /// </summary>
        /// <value>Item type</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayUpdateItem {\n");
            sb.Append("  AddTag: ").Append(AddTag).Append("\n");
            sb.Append("  ApiId: ").Append(ApiId).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  AutoRotate: ").Append(AutoRotate).Append("\n");
            sb.Append("  CustomPayload: ").Append(CustomPayload).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GcpKey: ").Append(GcpKey).Append("\n");
            sb.Append("  GcpServiceAccountEmail: ").Append(GcpServiceAccountEmail).Append("\n");
            sb.Append("  GcpServiceAccountKeyId: ").Append(GcpServiceAccountKeyId).Append("\n");
            sb.Append("  GraceRotation: ").Append(GraceRotation).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeepPrevVersion: ").Append(KeepPrevVersion).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewMetadata: ").Append(NewMetadata).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  NewVersion: ").Append(NewVersion).Append("\n");
            sb.Append("  PasswordLength: ").Append(PasswordLength).Append("\n");
            sb.Append("  RmTag: ").Append(RmTag).Append("\n");
            sb.Append("  RotatedPassword: ").Append(RotatedPassword).Append("\n");
            sb.Append("  RotatedUsername: ").Append(RotatedUsername).Append("\n");
            sb.Append("  RotationEventIn: ").Append(RotationEventIn).Append("\n");
            sb.Append("  RotationHour: ").Append(RotationHour).Append("\n");
            sb.Append("  RotationInterval: ").Append(RotationInterval).Append("\n");
            sb.Append("  RotatorCredsType: ").Append(RotatorCredsType).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
