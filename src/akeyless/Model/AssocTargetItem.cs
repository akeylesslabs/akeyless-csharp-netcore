/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// assocTargetItem is a command that creates an association between target and item.
    /// </summary>
    [DataContract(Name = "assocTargetItem")]
    public partial class AssocTargetItem : IEquatable<AssocTargetItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssocTargetItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssocTargetItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssocTargetItem" /> class.
        /// </summary>
        /// <param name="disablePreviousKeyVersion">Automatically disable previous key version (required for azure targets).</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="keyOperations">A list of allowed operations for the key (required for azure targets).</param>
        /// <param name="keyringName">Keyring name of the GCP KMS (required for gcp targets).</param>
        /// <param name="kmsAlgorithm">Algorithm of the key in GCP KMS (required for gcp targets).</param>
        /// <param name="locationId">Location id of the GCP KMS (required for gcp targets).</param>
        /// <param name="multiRegion">Set to &#39;true&#39; to create a multi region managed key (relevant for aws targets) (default to &quot;false&quot;).</param>
        /// <param name="name">The item to associate (required).</param>
        /// <param name="projectId">Project id of the GCP KMS (required for gcp targets).</param>
        /// <param name="purpose">Purpose of the key in GCP KMS (required for gcp targets).</param>
        /// <param name="regions">The list of regions to create a copy of the key in (relevant for aws targets).</param>
        /// <param name="targetName">The target to associate (required).</param>
        /// <param name="tenantSecretType">The tenant secret type [Data/SearchIndex/Analytics] (required for salesforce targets).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="vaultName">Name of the vault used (required for azure targets).</param>
        public AssocTargetItem(bool disablePreviousKeyVersion = default(bool), bool json = default(bool), List<string> keyOperations = default(List<string>), string keyringName = default(string), string kmsAlgorithm = default(string), string locationId = default(string), string multiRegion = "false", string name = default(string), string projectId = default(string), string purpose = default(string), List<string> regions = default(List<string>), string targetName = default(string), string tenantSecretType = default(string), string token = default(string), string uidToken = default(string), string vaultName = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AssocTargetItem and cannot be null");
            }
            this.Name = name;
            // to ensure "targetName" is required (not null)
            if (targetName == null)
            {
                throw new ArgumentNullException("targetName is a required property for AssocTargetItem and cannot be null");
            }
            this.TargetName = targetName;
            this.DisablePreviousKeyVersion = disablePreviousKeyVersion;
            this.Json = json;
            this.KeyOperations = keyOperations;
            this.KeyringName = keyringName;
            this.KmsAlgorithm = kmsAlgorithm;
            this.LocationId = locationId;
            // use default value if no "multiRegion" provided
            this.MultiRegion = multiRegion ?? "false";
            this.ProjectId = projectId;
            this.Purpose = purpose;
            this.Regions = regions;
            this.TenantSecretType = tenantSecretType;
            this.Token = token;
            this.UidToken = uidToken;
            this.VaultName = vaultName;
        }

        /// <summary>
        /// Automatically disable previous key version (required for azure targets)
        /// </summary>
        /// <value>Automatically disable previous key version (required for azure targets)</value>
        [DataMember(Name = "disable-previous-key-version", EmitDefaultValue = true)]
        public bool DisablePreviousKeyVersion { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// A list of allowed operations for the key (required for azure targets)
        /// </summary>
        /// <value>A list of allowed operations for the key (required for azure targets)</value>
        [DataMember(Name = "key-operations", EmitDefaultValue = false)]
        public List<string> KeyOperations { get; set; }

        /// <summary>
        /// Keyring name of the GCP KMS (required for gcp targets)
        /// </summary>
        /// <value>Keyring name of the GCP KMS (required for gcp targets)</value>
        [DataMember(Name = "keyring-name", EmitDefaultValue = false)]
        public string KeyringName { get; set; }

        /// <summary>
        /// Algorithm of the key in GCP KMS (required for gcp targets)
        /// </summary>
        /// <value>Algorithm of the key in GCP KMS (required for gcp targets)</value>
        [DataMember(Name = "kms-algorithm", EmitDefaultValue = false)]
        public string KmsAlgorithm { get; set; }

        /// <summary>
        /// Location id of the GCP KMS (required for gcp targets)
        /// </summary>
        /// <value>Location id of the GCP KMS (required for gcp targets)</value>
        [DataMember(Name = "location-id", EmitDefaultValue = false)]
        public string LocationId { get; set; }

        /// <summary>
        /// Set to &#39;true&#39; to create a multi region managed key (relevant for aws targets)
        /// </summary>
        /// <value>Set to &#39;true&#39; to create a multi region managed key (relevant for aws targets)</value>
        [DataMember(Name = "multi-region", EmitDefaultValue = false)]
        public string MultiRegion { get; set; }

        /// <summary>
        /// The item to associate
        /// </summary>
        /// <value>The item to associate</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Project id of the GCP KMS (required for gcp targets)
        /// </summary>
        /// <value>Project id of the GCP KMS (required for gcp targets)</value>
        [DataMember(Name = "project-id", EmitDefaultValue = false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Purpose of the key in GCP KMS (required for gcp targets)
        /// </summary>
        /// <value>Purpose of the key in GCP KMS (required for gcp targets)</value>
        [DataMember(Name = "purpose", EmitDefaultValue = false)]
        public string Purpose { get; set; }

        /// <summary>
        /// The list of regions to create a copy of the key in (relevant for aws targets)
        /// </summary>
        /// <value>The list of regions to create a copy of the key in (relevant for aws targets)</value>
        [DataMember(Name = "regions", EmitDefaultValue = false)]
        public List<string> Regions { get; set; }

        /// <summary>
        /// The target to associate
        /// </summary>
        /// <value>The target to associate</value>
        [DataMember(Name = "target-name", IsRequired = true, EmitDefaultValue = true)]
        public string TargetName { get; set; }

        /// <summary>
        /// The tenant secret type [Data/SearchIndex/Analytics] (required for salesforce targets)
        /// </summary>
        /// <value>The tenant secret type [Data/SearchIndex/Analytics] (required for salesforce targets)</value>
        [DataMember(Name = "tenant-secret-type", EmitDefaultValue = false)]
        public string TenantSecretType { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Name of the vault used (required for azure targets)
        /// </summary>
        /// <value>Name of the vault used (required for azure targets)</value>
        [DataMember(Name = "vault-name", EmitDefaultValue = false)]
        public string VaultName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssocTargetItem {\n");
            sb.Append("  DisablePreviousKeyVersion: ").Append(DisablePreviousKeyVersion).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeyOperations: ").Append(KeyOperations).Append("\n");
            sb.Append("  KeyringName: ").Append(KeyringName).Append("\n");
            sb.Append("  KmsAlgorithm: ").Append(KmsAlgorithm).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  MultiRegion: ").Append(MultiRegion).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Regions: ").Append(Regions).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  TenantSecretType: ").Append(TenantSecretType).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  VaultName: ").Append(VaultName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssocTargetItem);
        }

        /// <summary>
        /// Returns true if AssocTargetItem instances are equal
        /// </summary>
        /// <param name="input">Instance of AssocTargetItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssocTargetItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisablePreviousKeyVersion == input.DisablePreviousKeyVersion ||
                    this.DisablePreviousKeyVersion.Equals(input.DisablePreviousKeyVersion)
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.KeyOperations == input.KeyOperations ||
                    this.KeyOperations != null &&
                    input.KeyOperations != null &&
                    this.KeyOperations.SequenceEqual(input.KeyOperations)
                ) && 
                (
                    this.KeyringName == input.KeyringName ||
                    (this.KeyringName != null &&
                    this.KeyringName.Equals(input.KeyringName))
                ) && 
                (
                    this.KmsAlgorithm == input.KmsAlgorithm ||
                    (this.KmsAlgorithm != null &&
                    this.KmsAlgorithm.Equals(input.KmsAlgorithm))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.MultiRegion == input.MultiRegion ||
                    (this.MultiRegion != null &&
                    this.MultiRegion.Equals(input.MultiRegion))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    (this.Purpose != null &&
                    this.Purpose.Equals(input.Purpose))
                ) && 
                (
                    this.Regions == input.Regions ||
                    this.Regions != null &&
                    input.Regions != null &&
                    this.Regions.SequenceEqual(input.Regions)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.TenantSecretType == input.TenantSecretType ||
                    (this.TenantSecretType != null &&
                    this.TenantSecretType.Equals(input.TenantSecretType))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.VaultName == input.VaultName ||
                    (this.VaultName != null &&
                    this.VaultName.Equals(input.VaultName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DisablePreviousKeyVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.KeyOperations != null)
                {
                    hashCode = (hashCode * 59) + this.KeyOperations.GetHashCode();
                }
                if (this.KeyringName != null)
                {
                    hashCode = (hashCode * 59) + this.KeyringName.GetHashCode();
                }
                if (this.KmsAlgorithm != null)
                {
                    hashCode = (hashCode * 59) + this.KmsAlgorithm.GetHashCode();
                }
                if (this.LocationId != null)
                {
                    hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                }
                if (this.MultiRegion != null)
                {
                    hashCode = (hashCode * 59) + this.MultiRegion.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                if (this.Purpose != null)
                {
                    hashCode = (hashCode * 59) + this.Purpose.GetHashCode();
                }
                if (this.Regions != null)
                {
                    hashCode = (hashCode * 59) + this.Regions.GetHashCode();
                }
                if (this.TargetName != null)
                {
                    hashCode = (hashCode * 59) + this.TargetName.GetHashCode();
                }
                if (this.TenantSecretType != null)
                {
                    hashCode = (hashCode * 59) + this.TenantSecretType.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.VaultName != null)
                {
                    hashCode = (hashCode * 59) + this.VaultName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
