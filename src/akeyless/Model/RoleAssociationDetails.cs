/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// RoleAssociationDetails includes details of an association between a role and an auth method.
    /// </summary>
    [DataContract(Name = "RoleAssociationDetails")]
    public partial class RoleAssociationDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoleAssociationDetails" /> class.
        /// </summary>
        /// <param name="assocId">assocId.</param>
        /// <param name="authMethodName">authMethodName.</param>
        /// <param name="authMethodSubClaims">authMethodSubClaims.</param>
        /// <param name="isSubclaimsWithOperator">isSubclaimsWithOperator.</param>
        /// <param name="roleName">roleName.</param>
        /// <param name="subClaimsCaseSensitive">subClaimsCaseSensitive.</param>
        public RoleAssociationDetails(string assocId = default(string), string authMethodName = default(string), Dictionary<string, List<string>> authMethodSubClaims = default(Dictionary<string, List<string>>), bool isSubclaimsWithOperator = default(bool), string roleName = default(string), bool subClaimsCaseSensitive = default(bool))
        {
            this.AssocId = assocId;
            this.AuthMethodName = authMethodName;
            this.AuthMethodSubClaims = authMethodSubClaims;
            this.IsSubclaimsWithOperator = isSubclaimsWithOperator;
            this.RoleName = roleName;
            this.SubClaimsCaseSensitive = subClaimsCaseSensitive;
        }

        /// <summary>
        /// Gets or Sets AssocId
        /// </summary>
        [DataMember(Name = "assoc_id", EmitDefaultValue = false)]
        public string AssocId { get; set; }

        /// <summary>
        /// Gets or Sets AuthMethodName
        /// </summary>
        [DataMember(Name = "auth_method_name", EmitDefaultValue = false)]
        public string AuthMethodName { get; set; }

        /// <summary>
        /// Gets or Sets AuthMethodSubClaims
        /// </summary>
        [DataMember(Name = "auth_method_sub_claims", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> AuthMethodSubClaims { get; set; }

        /// <summary>
        /// Gets or Sets IsSubclaimsWithOperator
        /// </summary>
        [DataMember(Name = "is_subclaims_with_operator", EmitDefaultValue = true)]
        public bool IsSubclaimsWithOperator { get; set; }

        /// <summary>
        /// Gets or Sets RoleName
        /// </summary>
        [DataMember(Name = "role_name", EmitDefaultValue = false)]
        public string RoleName { get; set; }

        /// <summary>
        /// Gets or Sets SubClaimsCaseSensitive
        /// </summary>
        [DataMember(Name = "sub_claims_case_sensitive", EmitDefaultValue = true)]
        public bool SubClaimsCaseSensitive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RoleAssociationDetails {\n");
            sb.Append("  AssocId: ").Append(AssocId).Append("\n");
            sb.Append("  AuthMethodName: ").Append(AuthMethodName).Append("\n");
            sb.Append("  AuthMethodSubClaims: ").Append(AuthMethodSubClaims).Append("\n");
            sb.Append("  IsSubclaimsWithOperator: ").Append(IsSubclaimsWithOperator).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  SubClaimsCaseSensitive: ").Append(SubClaimsCaseSensitive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
