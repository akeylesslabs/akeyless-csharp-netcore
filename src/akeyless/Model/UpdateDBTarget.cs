/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UpdateDBTarget
    /// </summary>
    [DataContract(Name = "updateDBTarget")]
    public partial class UpdateDBTarget : IEquatable<UpdateDBTarget>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDBTarget" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateDBTarget() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDBTarget" /> class.
        /// </summary>
        /// <param name="comment">Comment about the target.</param>
        /// <param name="dbName">dbName.</param>
        /// <param name="dbServerCertificates">(Optional) DB server certificates.</param>
        /// <param name="dbServerName">(Optional) Server name for certificate verification.</param>
        /// <param name="dbType">dbType (required).</param>
        /// <param name="host">host.</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="keepPrevVersion">keepPrevVersion.</param>
        /// <param name="key">The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="mongodbAtlas">mongodbAtlas.</param>
        /// <param name="mongodbAtlasApiPrivateKey">MongoDB Atlas private key.</param>
        /// <param name="mongodbAtlasApiPublicKey">MongoDB Atlas public key.</param>
        /// <param name="mongodbAtlasProjectId">MongoDB Atlas project ID.</param>
        /// <param name="mongodbDefaultAuthDb">MongoDB server default authentication database.</param>
        /// <param name="mongodbUriOptions">MongoDB server URI options.</param>
        /// <param name="name">Target name (required).</param>
        /// <param name="newName">New target name.</param>
        /// <param name="oracleServiceName">oracleServiceName.</param>
        /// <param name="port">port.</param>
        /// <param name="pwd">pwd.</param>
        /// <param name="snowflakeAccount">snowflakeAccount.</param>
        /// <param name="snowflakeApiPrivateKey">RSA Private key (base64 encoded).</param>
        /// <param name="snowflakeApiPrivateKeyPassword">The Private key passphrase.</param>
        /// <param name="ssl">SSL connection mode.</param>
        /// <param name="sslCertificate">SSL connection certificate.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="updateVersion">Deprecated.</param>
        /// <param name="userName">userName.</param>
        public UpdateDBTarget(string comment = default(string), string dbName = default(string), string dbServerCertificates = default(string), string dbServerName = default(string), string dbType = default(string), string host = default(string), bool json = default(bool), string keepPrevVersion = default(string), string key = default(string), bool mongodbAtlas = default(bool), string mongodbAtlasApiPrivateKey = default(string), string mongodbAtlasApiPublicKey = default(string), string mongodbAtlasProjectId = default(string), string mongodbDefaultAuthDb = default(string), string mongodbUriOptions = default(string), string name = default(string), string newName = default(string), string oracleServiceName = default(string), string port = default(string), string pwd = default(string), string snowflakeAccount = default(string), string snowflakeApiPrivateKey = default(string), string snowflakeApiPrivateKeyPassword = default(string), bool ssl = default(bool), string sslCertificate = default(string), string token = default(string), string uidToken = default(string), bool updateVersion = default(bool), string userName = default(string))
        {
            // to ensure "dbType" is required (not null)
            if (dbType == null)
            {
                throw new ArgumentNullException("dbType is a required property for UpdateDBTarget and cannot be null");
            }
            this.DbType = dbType;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UpdateDBTarget and cannot be null");
            }
            this.Name = name;
            this.Comment = comment;
            this.DbName = dbName;
            this.DbServerCertificates = dbServerCertificates;
            this.DbServerName = dbServerName;
            this.Host = host;
            this.Json = json;
            this.KeepPrevVersion = keepPrevVersion;
            this.Key = key;
            this.MongodbAtlas = mongodbAtlas;
            this.MongodbAtlasApiPrivateKey = mongodbAtlasApiPrivateKey;
            this.MongodbAtlasApiPublicKey = mongodbAtlasApiPublicKey;
            this.MongodbAtlasProjectId = mongodbAtlasProjectId;
            this.MongodbDefaultAuthDb = mongodbDefaultAuthDb;
            this.MongodbUriOptions = mongodbUriOptions;
            this.NewName = newName;
            this.OracleServiceName = oracleServiceName;
            this.Port = port;
            this.Pwd = pwd;
            this.SnowflakeAccount = snowflakeAccount;
            this.SnowflakeApiPrivateKey = snowflakeApiPrivateKey;
            this.SnowflakeApiPrivateKeyPassword = snowflakeApiPrivateKeyPassword;
            this.Ssl = ssl;
            this.SslCertificate = sslCertificate;
            this.Token = token;
            this.UidToken = uidToken;
            this.UpdateVersion = updateVersion;
            this.UserName = userName;
        }

        /// <summary>
        /// Comment about the target
        /// </summary>
        /// <value>Comment about the target</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets DbName
        /// </summary>
        [DataMember(Name = "db-name", EmitDefaultValue = false)]
        public string DbName { get; set; }

        /// <summary>
        /// (Optional) DB server certificates
        /// </summary>
        /// <value>(Optional) DB server certificates</value>
        [DataMember(Name = "db-server-certificates", EmitDefaultValue = false)]
        public string DbServerCertificates { get; set; }

        /// <summary>
        /// (Optional) Server name for certificate verification
        /// </summary>
        /// <value>(Optional) Server name for certificate verification</value>
        [DataMember(Name = "db-server-name", EmitDefaultValue = false)]
        public string DbServerName { get; set; }

        /// <summary>
        /// Gets or Sets DbType
        /// </summary>
        [DataMember(Name = "db-type", IsRequired = true, EmitDefaultValue = true)]
        public string DbType { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Gets or Sets KeepPrevVersion
        /// </summary>
        [DataMember(Name = "keep-prev-version", EmitDefaultValue = false)]
        public string KeepPrevVersion { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets MongodbAtlas
        /// </summary>
        [DataMember(Name = "mongodb-atlas", EmitDefaultValue = true)]
        public bool MongodbAtlas { get; set; }

        /// <summary>
        /// MongoDB Atlas private key
        /// </summary>
        /// <value>MongoDB Atlas private key</value>
        [DataMember(Name = "mongodb-atlas-api-private-key", EmitDefaultValue = false)]
        public string MongodbAtlasApiPrivateKey { get; set; }

        /// <summary>
        /// MongoDB Atlas public key
        /// </summary>
        /// <value>MongoDB Atlas public key</value>
        [DataMember(Name = "mongodb-atlas-api-public-key", EmitDefaultValue = false)]
        public string MongodbAtlasApiPublicKey { get; set; }

        /// <summary>
        /// MongoDB Atlas project ID
        /// </summary>
        /// <value>MongoDB Atlas project ID</value>
        [DataMember(Name = "mongodb-atlas-project-id", EmitDefaultValue = false)]
        public string MongodbAtlasProjectId { get; set; }

        /// <summary>
        /// MongoDB server default authentication database
        /// </summary>
        /// <value>MongoDB server default authentication database</value>
        [DataMember(Name = "mongodb-default-auth-db", EmitDefaultValue = false)]
        public string MongodbDefaultAuthDb { get; set; }

        /// <summary>
        /// MongoDB server URI options
        /// </summary>
        /// <value>MongoDB server URI options</value>
        [DataMember(Name = "mongodb-uri-options", EmitDefaultValue = false)]
        public string MongodbUriOptions { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// New target name
        /// </summary>
        /// <value>New target name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Gets or Sets OracleServiceName
        /// </summary>
        [DataMember(Name = "oracle-service-name", EmitDefaultValue = false)]
        public string OracleServiceName { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public string Port { get; set; }

        /// <summary>
        /// Gets or Sets Pwd
        /// </summary>
        [DataMember(Name = "pwd", EmitDefaultValue = false)]
        public string Pwd { get; set; }

        /// <summary>
        /// Gets or Sets SnowflakeAccount
        /// </summary>
        [DataMember(Name = "snowflake-account", EmitDefaultValue = false)]
        public string SnowflakeAccount { get; set; }

        /// <summary>
        /// RSA Private key (base64 encoded)
        /// </summary>
        /// <value>RSA Private key (base64 encoded)</value>
        [DataMember(Name = "snowflake-api-private-key", EmitDefaultValue = false)]
        public string SnowflakeApiPrivateKey { get; set; }

        /// <summary>
        /// The Private key passphrase
        /// </summary>
        /// <value>The Private key passphrase</value>
        [DataMember(Name = "snowflake-api-private-key-password", EmitDefaultValue = false)]
        public string SnowflakeApiPrivateKeyPassword { get; set; }

        /// <summary>
        /// SSL connection mode
        /// </summary>
        /// <value>SSL connection mode</value>
        [DataMember(Name = "ssl", EmitDefaultValue = true)]
        public bool Ssl { get; set; }

        /// <summary>
        /// SSL connection certificate
        /// </summary>
        /// <value>SSL connection certificate</value>
        [DataMember(Name = "ssl-certificate", EmitDefaultValue = false)]
        public string SslCertificate { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Deprecated
        /// </summary>
        /// <value>Deprecated</value>
        [DataMember(Name = "update-version", EmitDefaultValue = true)]
        public bool UpdateVersion { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "user-name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateDBTarget {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  DbName: ").Append(DbName).Append("\n");
            sb.Append("  DbServerCertificates: ").Append(DbServerCertificates).Append("\n");
            sb.Append("  DbServerName: ").Append(DbServerName).Append("\n");
            sb.Append("  DbType: ").Append(DbType).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeepPrevVersion: ").Append(KeepPrevVersion).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  MongodbAtlas: ").Append(MongodbAtlas).Append("\n");
            sb.Append("  MongodbAtlasApiPrivateKey: ").Append(MongodbAtlasApiPrivateKey).Append("\n");
            sb.Append("  MongodbAtlasApiPublicKey: ").Append(MongodbAtlasApiPublicKey).Append("\n");
            sb.Append("  MongodbAtlasProjectId: ").Append(MongodbAtlasProjectId).Append("\n");
            sb.Append("  MongodbDefaultAuthDb: ").Append(MongodbDefaultAuthDb).Append("\n");
            sb.Append("  MongodbUriOptions: ").Append(MongodbUriOptions).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  OracleServiceName: ").Append(OracleServiceName).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Pwd: ").Append(Pwd).Append("\n");
            sb.Append("  SnowflakeAccount: ").Append(SnowflakeAccount).Append("\n");
            sb.Append("  SnowflakeApiPrivateKey: ").Append(SnowflakeApiPrivateKey).Append("\n");
            sb.Append("  SnowflakeApiPrivateKeyPassword: ").Append(SnowflakeApiPrivateKeyPassword).Append("\n");
            sb.Append("  Ssl: ").Append(Ssl).Append("\n");
            sb.Append("  SslCertificate: ").Append(SslCertificate).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UpdateVersion: ").Append(UpdateVersion).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateDBTarget);
        }

        /// <summary>
        /// Returns true if UpdateDBTarget instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateDBTarget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateDBTarget input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.DbName == input.DbName ||
                    (this.DbName != null &&
                    this.DbName.Equals(input.DbName))
                ) && 
                (
                    this.DbServerCertificates == input.DbServerCertificates ||
                    (this.DbServerCertificates != null &&
                    this.DbServerCertificates.Equals(input.DbServerCertificates))
                ) && 
                (
                    this.DbServerName == input.DbServerName ||
                    (this.DbServerName != null &&
                    this.DbServerName.Equals(input.DbServerName))
                ) && 
                (
                    this.DbType == input.DbType ||
                    (this.DbType != null &&
                    this.DbType.Equals(input.DbType))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.KeepPrevVersion == input.KeepPrevVersion ||
                    (this.KeepPrevVersion != null &&
                    this.KeepPrevVersion.Equals(input.KeepPrevVersion))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.MongodbAtlas == input.MongodbAtlas ||
                    this.MongodbAtlas.Equals(input.MongodbAtlas)
                ) && 
                (
                    this.MongodbAtlasApiPrivateKey == input.MongodbAtlasApiPrivateKey ||
                    (this.MongodbAtlasApiPrivateKey != null &&
                    this.MongodbAtlasApiPrivateKey.Equals(input.MongodbAtlasApiPrivateKey))
                ) && 
                (
                    this.MongodbAtlasApiPublicKey == input.MongodbAtlasApiPublicKey ||
                    (this.MongodbAtlasApiPublicKey != null &&
                    this.MongodbAtlasApiPublicKey.Equals(input.MongodbAtlasApiPublicKey))
                ) && 
                (
                    this.MongodbAtlasProjectId == input.MongodbAtlasProjectId ||
                    (this.MongodbAtlasProjectId != null &&
                    this.MongodbAtlasProjectId.Equals(input.MongodbAtlasProjectId))
                ) && 
                (
                    this.MongodbDefaultAuthDb == input.MongodbDefaultAuthDb ||
                    (this.MongodbDefaultAuthDb != null &&
                    this.MongodbDefaultAuthDb.Equals(input.MongodbDefaultAuthDb))
                ) && 
                (
                    this.MongodbUriOptions == input.MongodbUriOptions ||
                    (this.MongodbUriOptions != null &&
                    this.MongodbUriOptions.Equals(input.MongodbUriOptions))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                ) && 
                (
                    this.OracleServiceName == input.OracleServiceName ||
                    (this.OracleServiceName != null &&
                    this.OracleServiceName.Equals(input.OracleServiceName))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.Pwd == input.Pwd ||
                    (this.Pwd != null &&
                    this.Pwd.Equals(input.Pwd))
                ) && 
                (
                    this.SnowflakeAccount == input.SnowflakeAccount ||
                    (this.SnowflakeAccount != null &&
                    this.SnowflakeAccount.Equals(input.SnowflakeAccount))
                ) && 
                (
                    this.SnowflakeApiPrivateKey == input.SnowflakeApiPrivateKey ||
                    (this.SnowflakeApiPrivateKey != null &&
                    this.SnowflakeApiPrivateKey.Equals(input.SnowflakeApiPrivateKey))
                ) && 
                (
                    this.SnowflakeApiPrivateKeyPassword == input.SnowflakeApiPrivateKeyPassword ||
                    (this.SnowflakeApiPrivateKeyPassword != null &&
                    this.SnowflakeApiPrivateKeyPassword.Equals(input.SnowflakeApiPrivateKeyPassword))
                ) && 
                (
                    this.Ssl == input.Ssl ||
                    this.Ssl.Equals(input.Ssl)
                ) && 
                (
                    this.SslCertificate == input.SslCertificate ||
                    (this.SslCertificate != null &&
                    this.SslCertificate.Equals(input.SslCertificate))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UpdateVersion == input.UpdateVersion ||
                    this.UpdateVersion.Equals(input.UpdateVersion)
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.DbName != null)
                {
                    hashCode = (hashCode * 59) + this.DbName.GetHashCode();
                }
                if (this.DbServerCertificates != null)
                {
                    hashCode = (hashCode * 59) + this.DbServerCertificates.GetHashCode();
                }
                if (this.DbServerName != null)
                {
                    hashCode = (hashCode * 59) + this.DbServerName.GetHashCode();
                }
                if (this.DbType != null)
                {
                    hashCode = (hashCode * 59) + this.DbType.GetHashCode();
                }
                if (this.Host != null)
                {
                    hashCode = (hashCode * 59) + this.Host.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.KeepPrevVersion != null)
                {
                    hashCode = (hashCode * 59) + this.KeepPrevVersion.GetHashCode();
                }
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MongodbAtlas.GetHashCode();
                if (this.MongodbAtlasApiPrivateKey != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbAtlasApiPrivateKey.GetHashCode();
                }
                if (this.MongodbAtlasApiPublicKey != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbAtlasApiPublicKey.GetHashCode();
                }
                if (this.MongodbAtlasProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbAtlasProjectId.GetHashCode();
                }
                if (this.MongodbDefaultAuthDb != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbDefaultAuthDb.GetHashCode();
                }
                if (this.MongodbUriOptions != null)
                {
                    hashCode = (hashCode * 59) + this.MongodbUriOptions.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NewName != null)
                {
                    hashCode = (hashCode * 59) + this.NewName.GetHashCode();
                }
                if (this.OracleServiceName != null)
                {
                    hashCode = (hashCode * 59) + this.OracleServiceName.GetHashCode();
                }
                if (this.Port != null)
                {
                    hashCode = (hashCode * 59) + this.Port.GetHashCode();
                }
                if (this.Pwd != null)
                {
                    hashCode = (hashCode * 59) + this.Pwd.GetHashCode();
                }
                if (this.SnowflakeAccount != null)
                {
                    hashCode = (hashCode * 59) + this.SnowflakeAccount.GetHashCode();
                }
                if (this.SnowflakeApiPrivateKey != null)
                {
                    hashCode = (hashCode * 59) + this.SnowflakeApiPrivateKey.GetHashCode();
                }
                if (this.SnowflakeApiPrivateKeyPassword != null)
                {
                    hashCode = (hashCode * 59) + this.SnowflakeApiPrivateKeyPassword.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Ssl.GetHashCode();
                if (this.SslCertificate != null)
                {
                    hashCode = (hashCode * 59) + this.SslCertificate.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdateVersion.GetHashCode();
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
