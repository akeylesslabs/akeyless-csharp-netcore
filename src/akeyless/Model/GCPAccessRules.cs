/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GCPAccessRules
    /// </summary>
    [DataContract(Name = "GCPAccessRules")]
    public partial class GCPAccessRules : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GCPAccessRules" /> class.
        /// </summary>
        /// <param name="audience">The audience in the JWT (default to &quot;akeyless.io&quot;).</param>
        /// <param name="boundLabels">A map of GCP labels formatted as \&quot;key:value\&quot; strings that must be set on authorized GCE instances. TODO: Because GCP labels are not currently ACL&#39;d .....</param>
        /// <param name="boundProjects">Human and Machine authentication section Array of GCP project IDs. Only entities belonging to any of the provided projects can authenticate..</param>
        /// <param name="boundRegions">List of regions that a GCE instance must belong to in order to be authenticated. TODO: If bound_instance_groups is provided, it is assumed to be a regional group and the group must belong to this region. If bound_zones are provided, this attribute is ignored..</param>
        /// <param name="boundServiceAccounts">List of service accounts the service account must be part of in order to be authenticated.</param>
        /// <param name="boundZones">&#x3D;&#x3D;&#x3D; Machine authentication section &#x3D;&#x3D;&#x3D; List of zones that a GCE instance must belong to in order to be authenticated. TODO: If bound_instance_groups is provided, it is assumed to be a zonal group and the group must belong to this zone..</param>
        /// <param name="serviceAccount">ServiceAccount holds the credentials file contents to be used by Akeyless to validate IAM (Human) and GCE (Machine) logins against GCP base64 encoded string.</param>
        /// <param name="type">type.</param>
        /// <param name="uniqueIdentifier">A unique identifier to distinguish different users.</param>
        public GCPAccessRules(string audience = @"akeyless.io", Dictionary<string, string> boundLabels = default(Dictionary<string, string>), List<string> boundProjects = default(List<string>), List<string> boundRegions = default(List<string>), List<string> boundServiceAccounts = default(List<string>), List<string> boundZones = default(List<string>), string serviceAccount = default(string), string type = default(string), string uniqueIdentifier = default(string))
        {
            // use default value if no "audience" provided
            this.Audience = audience ?? @"akeyless.io";
            this.BoundLabels = boundLabels;
            this.BoundProjects = boundProjects;
            this.BoundRegions = boundRegions;
            this.BoundServiceAccounts = boundServiceAccounts;
            this.BoundZones = boundZones;
            this.ServiceAccount = serviceAccount;
            this.Type = type;
            this.UniqueIdentifier = uniqueIdentifier;
        }

        /// <summary>
        /// The audience in the JWT
        /// </summary>
        /// <value>The audience in the JWT</value>
        [DataMember(Name = "audience", EmitDefaultValue = false)]
        public string Audience { get; set; }

        /// <summary>
        /// A map of GCP labels formatted as \&quot;key:value\&quot; strings that must be set on authorized GCE instances. TODO: Because GCP labels are not currently ACL&#39;d ....
        /// </summary>
        /// <value>A map of GCP labels formatted as \&quot;key:value\&quot; strings that must be set on authorized GCE instances. TODO: Because GCP labels are not currently ACL&#39;d ....</value>
        [DataMember(Name = "bound_labels", EmitDefaultValue = false)]
        public Dictionary<string, string> BoundLabels { get; set; }

        /// <summary>
        /// Human and Machine authentication section Array of GCP project IDs. Only entities belonging to any of the provided projects can authenticate.
        /// </summary>
        /// <value>Human and Machine authentication section Array of GCP project IDs. Only entities belonging to any of the provided projects can authenticate.</value>
        [DataMember(Name = "bound_projects", EmitDefaultValue = false)]
        public List<string> BoundProjects { get; set; }

        /// <summary>
        /// List of regions that a GCE instance must belong to in order to be authenticated. TODO: If bound_instance_groups is provided, it is assumed to be a regional group and the group must belong to this region. If bound_zones are provided, this attribute is ignored.
        /// </summary>
        /// <value>List of regions that a GCE instance must belong to in order to be authenticated. TODO: If bound_instance_groups is provided, it is assumed to be a regional group and the group must belong to this region. If bound_zones are provided, this attribute is ignored.</value>
        [DataMember(Name = "bound_regions", EmitDefaultValue = false)]
        public List<string> BoundRegions { get; set; }

        /// <summary>
        /// List of service accounts the service account must be part of in order to be authenticated
        /// </summary>
        /// <value>List of service accounts the service account must be part of in order to be authenticated</value>
        [DataMember(Name = "bound_service_accounts", EmitDefaultValue = false)]
        public List<string> BoundServiceAccounts { get; set; }

        /// <summary>
        /// &#x3D;&#x3D;&#x3D; Machine authentication section &#x3D;&#x3D;&#x3D; List of zones that a GCE instance must belong to in order to be authenticated. TODO: If bound_instance_groups is provided, it is assumed to be a zonal group and the group must belong to this zone.
        /// </summary>
        /// <value>&#x3D;&#x3D;&#x3D; Machine authentication section &#x3D;&#x3D;&#x3D; List of zones that a GCE instance must belong to in order to be authenticated. TODO: If bound_instance_groups is provided, it is assumed to be a zonal group and the group must belong to this zone.</value>
        [DataMember(Name = "bound_zones", EmitDefaultValue = false)]
        public List<string> BoundZones { get; set; }

        /// <summary>
        /// ServiceAccount holds the credentials file contents to be used by Akeyless to validate IAM (Human) and GCE (Machine) logins against GCP base64 encoded string
        /// </summary>
        /// <value>ServiceAccount holds the credentials file contents to be used by Akeyless to validate IAM (Human) and GCE (Machine) logins against GCP base64 encoded string</value>
        [DataMember(Name = "service_account", EmitDefaultValue = false)]
        public string ServiceAccount { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// A unique identifier to distinguish different users
        /// </summary>
        /// <value>A unique identifier to distinguish different users</value>
        [DataMember(Name = "unique_identifier", EmitDefaultValue = false)]
        public string UniqueIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GCPAccessRules {\n");
            sb.Append("  Audience: ").Append(Audience).Append("\n");
            sb.Append("  BoundLabels: ").Append(BoundLabels).Append("\n");
            sb.Append("  BoundProjects: ").Append(BoundProjects).Append("\n");
            sb.Append("  BoundRegions: ").Append(BoundRegions).Append("\n");
            sb.Append("  BoundServiceAccounts: ").Append(BoundServiceAccounts).Append("\n");
            sb.Append("  BoundZones: ").Append(BoundZones).Append("\n");
            sb.Append("  ServiceAccount: ").Append(ServiceAccount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UniqueIdentifier: ").Append(UniqueIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
