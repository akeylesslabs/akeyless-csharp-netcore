/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GenerateCsr
    /// </summary>
    [DataContract(Name = "generateCsr")]
    public partial class GenerateCsr : IEquatable<GenerateCsr>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateCsr" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerateCsr() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateCsr" /> class.
        /// </summary>
        /// <param name="alg">alg.</param>
        /// <param name="altNames">A comma-separated list of dns alternative names.</param>
        /// <param name="certificateType">The certificate type to be included in the CSR certificate (ssl-client/ssl-server/certificate-signing).</param>
        /// <param name="city">The city to be included in the CSR certificate.</param>
        /// <param name="commonName">The common name to be included in the CSR certificate (required).</param>
        /// <param name="country">The country to be included in the CSR certificate.</param>
        /// <param name="critical">Add critical to the key usage extension (will be false if not added).</param>
        /// <param name="dep">The department to be included in the CSR certificate.</param>
        /// <param name="emailAddresses">A comma-separated list of email addresses alternative names.</param>
        /// <param name="generateKey">Generate a new classic key for the csr.</param>
        /// <param name="ipAddresses">A comma-separated list of ip addresses alternative names.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="keyType">The type of the key to generate (classic-key/dfc) (required) (default to &quot;classic-key&quot;).</param>
        /// <param name="name">The key name (required).</param>
        /// <param name="org">The organization to be included in the CSR certificate.</param>
        /// <param name="splitLevel">The number of fragments that the item will be split into (not includes customer fragment) (default to 3).</param>
        /// <param name="state">The state to be included in the CSR certificate.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="uriSans">A comma-separated list of uri alternative names.</param>
        public GenerateCsr(string alg = default(string), string altNames = default(string), string certificateType = default(string), string city = default(string), string commonName = default(string), string country = default(string), bool critical = default(bool), string dep = default(string), string emailAddresses = default(string), bool generateKey = default(bool), string ipAddresses = default(string), bool json = false, string keyType = "classic-key", string name = default(string), string org = default(string), long splitLevel = 3, string state = default(string), string token = default(string), string uidToken = default(string), string uriSans = default(string))
        {
            // to ensure "commonName" is required (not null)
            if (commonName == null)
            {
                throw new ArgumentNullException("commonName is a required property for GenerateCsr and cannot be null");
            }
            this.CommonName = commonName;
            // to ensure "keyType" is required (not null)
            if (keyType == null)
            {
                throw new ArgumentNullException("keyType is a required property for GenerateCsr and cannot be null");
            }
            this.KeyType = keyType;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GenerateCsr and cannot be null");
            }
            this.Name = name;
            this.Alg = alg;
            this.AltNames = altNames;
            this.CertificateType = certificateType;
            this.City = city;
            this.Country = country;
            this.Critical = critical;
            this.Dep = dep;
            this.EmailAddresses = emailAddresses;
            this.GenerateKey = generateKey;
            this.IpAddresses = ipAddresses;
            this.Json = json;
            this.Org = org;
            this.SplitLevel = splitLevel;
            this.State = state;
            this.Token = token;
            this.UidToken = uidToken;
            this.UriSans = uriSans;
        }

        /// <summary>
        /// Gets or Sets Alg
        /// </summary>
        [DataMember(Name = "alg", EmitDefaultValue = false)]
        public string Alg { get; set; }

        /// <summary>
        /// A comma-separated list of dns alternative names
        /// </summary>
        /// <value>A comma-separated list of dns alternative names</value>
        [DataMember(Name = "alt-names", EmitDefaultValue = false)]
        public string AltNames { get; set; }

        /// <summary>
        /// The certificate type to be included in the CSR certificate (ssl-client/ssl-server/certificate-signing)
        /// </summary>
        /// <value>The certificate type to be included in the CSR certificate (ssl-client/ssl-server/certificate-signing)</value>
        [DataMember(Name = "certificate-type", EmitDefaultValue = false)]
        public string CertificateType { get; set; }

        /// <summary>
        /// The city to be included in the CSR certificate
        /// </summary>
        /// <value>The city to be included in the CSR certificate</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// The common name to be included in the CSR certificate
        /// </summary>
        /// <value>The common name to be included in the CSR certificate</value>
        [DataMember(Name = "common-name", IsRequired = true, EmitDefaultValue = true)]
        public string CommonName { get; set; }

        /// <summary>
        /// The country to be included in the CSR certificate
        /// </summary>
        /// <value>The country to be included in the CSR certificate</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Add critical to the key usage extension (will be false if not added)
        /// </summary>
        /// <value>Add critical to the key usage extension (will be false if not added)</value>
        [DataMember(Name = "critical", EmitDefaultValue = true)]
        public bool Critical { get; set; }

        /// <summary>
        /// The department to be included in the CSR certificate
        /// </summary>
        /// <value>The department to be included in the CSR certificate</value>
        [DataMember(Name = "dep", EmitDefaultValue = false)]
        public string Dep { get; set; }

        /// <summary>
        /// A comma-separated list of email addresses alternative names
        /// </summary>
        /// <value>A comma-separated list of email addresses alternative names</value>
        [DataMember(Name = "email-addresses", EmitDefaultValue = false)]
        public string EmailAddresses { get; set; }

        /// <summary>
        /// Generate a new classic key for the csr
        /// </summary>
        /// <value>Generate a new classic key for the csr</value>
        [DataMember(Name = "generate-key", EmitDefaultValue = true)]
        public bool GenerateKey { get; set; }

        /// <summary>
        /// A comma-separated list of ip addresses alternative names
        /// </summary>
        /// <value>A comma-separated list of ip addresses alternative names</value>
        [DataMember(Name = "ip-addresses", EmitDefaultValue = false)]
        public string IpAddresses { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The type of the key to generate (classic-key/dfc)
        /// </summary>
        /// <value>The type of the key to generate (classic-key/dfc)</value>
        [DataMember(Name = "key-type", IsRequired = true, EmitDefaultValue = true)]
        public string KeyType { get; set; }

        /// <summary>
        /// The key name
        /// </summary>
        /// <value>The key name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The organization to be included in the CSR certificate
        /// </summary>
        /// <value>The organization to be included in the CSR certificate</value>
        [DataMember(Name = "org", EmitDefaultValue = false)]
        public string Org { get; set; }

        /// <summary>
        /// The number of fragments that the item will be split into (not includes customer fragment)
        /// </summary>
        /// <value>The number of fragments that the item will be split into (not includes customer fragment)</value>
        [DataMember(Name = "split-level", EmitDefaultValue = false)]
        public long SplitLevel { get; set; }

        /// <summary>
        /// The state to be included in the CSR certificate
        /// </summary>
        /// <value>The state to be included in the CSR certificate</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// A comma-separated list of uri alternative names
        /// </summary>
        /// <value>A comma-separated list of uri alternative names</value>
        [DataMember(Name = "uri-sans", EmitDefaultValue = false)]
        public string UriSans { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateCsr {\n");
            sb.Append("  Alg: ").Append(Alg).Append("\n");
            sb.Append("  AltNames: ").Append(AltNames).Append("\n");
            sb.Append("  CertificateType: ").Append(CertificateType).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CommonName: ").Append(CommonName).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Critical: ").Append(Critical).Append("\n");
            sb.Append("  Dep: ").Append(Dep).Append("\n");
            sb.Append("  EmailAddresses: ").Append(EmailAddresses).Append("\n");
            sb.Append("  GenerateKey: ").Append(GenerateKey).Append("\n");
            sb.Append("  IpAddresses: ").Append(IpAddresses).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeyType: ").Append(KeyType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Org: ").Append(Org).Append("\n");
            sb.Append("  SplitLevel: ").Append(SplitLevel).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UriSans: ").Append(UriSans).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GenerateCsr);
        }

        /// <summary>
        /// Returns true if GenerateCsr instances are equal
        /// </summary>
        /// <param name="input">Instance of GenerateCsr to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenerateCsr input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Alg == input.Alg ||
                    (this.Alg != null &&
                    this.Alg.Equals(input.Alg))
                ) && 
                (
                    this.AltNames == input.AltNames ||
                    (this.AltNames != null &&
                    this.AltNames.Equals(input.AltNames))
                ) && 
                (
                    this.CertificateType == input.CertificateType ||
                    (this.CertificateType != null &&
                    this.CertificateType.Equals(input.CertificateType))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.CommonName == input.CommonName ||
                    (this.CommonName != null &&
                    this.CommonName.Equals(input.CommonName))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Critical == input.Critical ||
                    this.Critical.Equals(input.Critical)
                ) && 
                (
                    this.Dep == input.Dep ||
                    (this.Dep != null &&
                    this.Dep.Equals(input.Dep))
                ) && 
                (
                    this.EmailAddresses == input.EmailAddresses ||
                    (this.EmailAddresses != null &&
                    this.EmailAddresses.Equals(input.EmailAddresses))
                ) && 
                (
                    this.GenerateKey == input.GenerateKey ||
                    this.GenerateKey.Equals(input.GenerateKey)
                ) && 
                (
                    this.IpAddresses == input.IpAddresses ||
                    (this.IpAddresses != null &&
                    this.IpAddresses.Equals(input.IpAddresses))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.KeyType == input.KeyType ||
                    (this.KeyType != null &&
                    this.KeyType.Equals(input.KeyType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Org == input.Org ||
                    (this.Org != null &&
                    this.Org.Equals(input.Org))
                ) && 
                (
                    this.SplitLevel == input.SplitLevel ||
                    this.SplitLevel.Equals(input.SplitLevel)
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UriSans == input.UriSans ||
                    (this.UriSans != null &&
                    this.UriSans.Equals(input.UriSans))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alg != null)
                {
                    hashCode = (hashCode * 59) + this.Alg.GetHashCode();
                }
                if (this.AltNames != null)
                {
                    hashCode = (hashCode * 59) + this.AltNames.GetHashCode();
                }
                if (this.CertificateType != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateType.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.CommonName != null)
                {
                    hashCode = (hashCode * 59) + this.CommonName.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Critical.GetHashCode();
                if (this.Dep != null)
                {
                    hashCode = (hashCode * 59) + this.Dep.GetHashCode();
                }
                if (this.EmailAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddresses.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GenerateKey.GetHashCode();
                if (this.IpAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddresses.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.KeyType != null)
                {
                    hashCode = (hashCode * 59) + this.KeyType.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Org != null)
                {
                    hashCode = (hashCode * 59) + this.Org.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SplitLevel.GetHashCode();
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UriSans != null)
                {
                    hashCode = (hashCode * 59) + this.UriSans.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
