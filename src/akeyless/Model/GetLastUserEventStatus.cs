/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GetLastUserEventStatus
    /// </summary>
    [DataContract(Name = "getLastUserEventStatus")]
    public partial class GetLastUserEventStatus : IEquatable<GetLastUserEventStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetLastUserEventStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetLastUserEventStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetLastUserEventStatus" /> class.
        /// </summary>
        /// <param name="eventSource">eventSource.</param>
        /// <param name="eventType">eventType (required).</param>
        /// <param name="itemName">Event item name (required).</param>
        /// <param name="itemType">Event item type can be either \&quot;target\&quot; or type of item eg \&quot;static_secret\&quot;/\&quot;dynamic_secret\&quot; To get type of some item run &#x60;akeyless describe-item -n {ITEM_NAME} - -jq-expression .item_type&#x60; (required).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="timeBack">The time back to search the event, can be passed as string representation. For example if the value is \&quot;5m\&quot; we will return the last user event issued in the last 5 minutes By default we will search without any time boundary.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GetLastUserEventStatus(string eventSource = default(string), string eventType = default(string), string itemName = default(string), string itemType = default(string), bool json = false, string timeBack = default(string), string token = default(string), string uidToken = default(string))
        {
            // to ensure "eventType" is required (not null)
            if (eventType == null)
            {
                throw new ArgumentNullException("eventType is a required property for GetLastUserEventStatus and cannot be null");
            }
            this.EventType = eventType;
            // to ensure "itemName" is required (not null)
            if (itemName == null)
            {
                throw new ArgumentNullException("itemName is a required property for GetLastUserEventStatus and cannot be null");
            }
            this.ItemName = itemName;
            // to ensure "itemType" is required (not null)
            if (itemType == null)
            {
                throw new ArgumentNullException("itemType is a required property for GetLastUserEventStatus and cannot be null");
            }
            this.ItemType = itemType;
            this.EventSource = eventSource;
            this.Json = json;
            this.TimeBack = timeBack;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Gets or Sets EventSource
        /// </summary>
        [DataMember(Name = "event-source", EmitDefaultValue = false)]
        public string EventSource { get; set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name = "event-type", IsRequired = true, EmitDefaultValue = true)]
        public string EventType { get; set; }

        /// <summary>
        /// Event item name
        /// </summary>
        /// <value>Event item name</value>
        [DataMember(Name = "item-name", IsRequired = true, EmitDefaultValue = true)]
        public string ItemName { get; set; }

        /// <summary>
        /// Event item type can be either \&quot;target\&quot; or type of item eg \&quot;static_secret\&quot;/\&quot;dynamic_secret\&quot; To get type of some item run &#x60;akeyless describe-item -n {ITEM_NAME} - -jq-expression .item_type&#x60;
        /// </summary>
        /// <value>Event item type can be either \&quot;target\&quot; or type of item eg \&quot;static_secret\&quot;/\&quot;dynamic_secret\&quot; To get type of some item run &#x60;akeyless describe-item -n {ITEM_NAME} - -jq-expression .item_type&#x60;</value>
        [DataMember(Name = "item-type", IsRequired = true, EmitDefaultValue = true)]
        public string ItemType { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The time back to search the event, can be passed as string representation. For example if the value is \&quot;5m\&quot; we will return the last user event issued in the last 5 minutes By default we will search without any time boundary
        /// </summary>
        /// <value>The time back to search the event, can be passed as string representation. For example if the value is \&quot;5m\&quot; we will return the last user event issued in the last 5 minutes By default we will search without any time boundary</value>
        [DataMember(Name = "time-back", EmitDefaultValue = false)]
        public string TimeBack { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetLastUserEventStatus {\n");
            sb.Append("  EventSource: ").Append(EventSource).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  TimeBack: ").Append(TimeBack).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetLastUserEventStatus);
        }

        /// <summary>
        /// Returns true if GetLastUserEventStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of GetLastUserEventStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetLastUserEventStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventSource == input.EventSource ||
                    (this.EventSource != null &&
                    this.EventSource.Equals(input.EventSource))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.ItemName == input.ItemName ||
                    (this.ItemName != null &&
                    this.ItemName.Equals(input.ItemName))
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    (this.ItemType != null &&
                    this.ItemType.Equals(input.ItemType))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.TimeBack == input.TimeBack ||
                    (this.TimeBack != null &&
                    this.TimeBack.Equals(input.TimeBack))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventSource != null)
                {
                    hashCode = (hashCode * 59) + this.EventSource.GetHashCode();
                }
                if (this.EventType != null)
                {
                    hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                }
                if (this.ItemName != null)
                {
                    hashCode = (hashCode * 59) + this.ItemName.GetHashCode();
                }
                if (this.ItemType != null)
                {
                    hashCode = (hashCode * 59) + this.ItemType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.TimeBack != null)
                {
                    hashCode = (hashCode * 59) + this.TimeBack.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
