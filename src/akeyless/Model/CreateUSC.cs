/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CreateUSC is a command that creates a Universal Secrets Connector
    /// </summary>
    [DataContract(Name = "CreateUSC")]
    public partial class CreateUSC : IEquatable<CreateUSC>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUSC" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateUSC() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUSC" /> class.
        /// </summary>
        /// <param name="azureKvName">Azure Key Vault name (Relevant only for Azure targets).</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this item [true/false].</param>
        /// <param name="description">Description of the Universal Secrets Connector.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="k8sNamespace">K8s namespace (Relevant to Kubernetes targets).</param>
        /// <param name="name">Universal Secrets Connector name (required).</param>
        /// <param name="tags">List of the tags attached to this Universal Secrets Connector.</param>
        /// <param name="targetToAssociate">Target Universal Secrets Connector to connect (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public CreateUSC(string azureKvName = default(string), string deleteProtection = default(string), string description = default(string), bool json = false, string k8sNamespace = default(string), string name = default(string), List<string> tags = default(List<string>), string targetToAssociate = default(string), string token = default(string), string uidToken = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateUSC and cannot be null");
            }
            this.Name = name;
            // to ensure "targetToAssociate" is required (not null)
            if (targetToAssociate == null)
            {
                throw new ArgumentNullException("targetToAssociate is a required property for CreateUSC and cannot be null");
            }
            this.TargetToAssociate = targetToAssociate;
            this.AzureKvName = azureKvName;
            this.DeleteProtection = deleteProtection;
            this.Description = description;
            this.Json = json;
            this.K8sNamespace = k8sNamespace;
            this.Tags = tags;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Azure Key Vault name (Relevant only for Azure targets)
        /// </summary>
        /// <value>Azure Key Vault name (Relevant only for Azure targets)</value>
        [DataMember(Name = "azure-kv-name", EmitDefaultValue = false)]
        public string AzureKvName { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this item [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this item [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the Universal Secrets Connector
        /// </summary>
        /// <value>Description of the Universal Secrets Connector</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// K8s namespace (Relevant to Kubernetes targets)
        /// </summary>
        /// <value>K8s namespace (Relevant to Kubernetes targets)</value>
        [DataMember(Name = "k8s-namespace", EmitDefaultValue = false)]
        public string K8sNamespace { get; set; }

        /// <summary>
        /// Universal Secrets Connector name
        /// </summary>
        /// <value>Universal Secrets Connector name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// List of the tags attached to this Universal Secrets Connector
        /// </summary>
        /// <value>List of the tags attached to this Universal Secrets Connector</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target Universal Secrets Connector to connect
        /// </summary>
        /// <value>Target Universal Secrets Connector to connect</value>
        [DataMember(Name = "target-to-associate", IsRequired = true, EmitDefaultValue = true)]
        public string TargetToAssociate { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateUSC {\n");
            sb.Append("  AzureKvName: ").Append(AzureKvName).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  K8sNamespace: ").Append(K8sNamespace).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetToAssociate: ").Append(TargetToAssociate).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateUSC);
        }

        /// <summary>
        /// Returns true if CreateUSC instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateUSC to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateUSC input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AzureKvName == input.AzureKvName ||
                    (this.AzureKvName != null &&
                    this.AzureKvName.Equals(input.AzureKvName))
                ) && 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    (this.DeleteProtection != null &&
                    this.DeleteProtection.Equals(input.DeleteProtection))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.K8sNamespace == input.K8sNamespace ||
                    (this.K8sNamespace != null &&
                    this.K8sNamespace.Equals(input.K8sNamespace))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TargetToAssociate == input.TargetToAssociate ||
                    (this.TargetToAssociate != null &&
                    this.TargetToAssociate.Equals(input.TargetToAssociate))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AzureKvName != null)
                {
                    hashCode = (hashCode * 59) + this.AzureKvName.GetHashCode();
                }
                if (this.DeleteProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteProtection.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.K8sNamespace != null)
                {
                    hashCode = (hashCode * 59) + this.K8sNamespace.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TargetToAssociate != null)
                {
                    hashCode = (hashCode * 59) + this.TargetToAssociate.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
