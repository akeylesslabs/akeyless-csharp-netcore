/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CacheConfigPart
    /// </summary>
    [DataContract(Name = "CacheConfigPart")]
    public partial class CacheConfigPart : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CacheConfigPart" /> class.
        /// </summary>
        /// <param name="cacheEnable">cacheEnable.</param>
        /// <param name="cacheEncryptionKey">cacheEncryptionKey.</param>
        /// <param name="cacheTtl">cacheTtl.</param>
        /// <param name="newProactiveCacheEnable">newProactiveCacheEnable.</param>
        /// <param name="proactiveCacheDumpInterval">proactiveCacheDumpInterval.</param>
        /// <param name="proactiveCacheEnable">proactiveCacheEnable.</param>
        /// <param name="proactiveCacheMinimumFetchingTime">proactiveCacheMinimumFetchingTime.</param>
        public CacheConfigPart(bool cacheEnable = default(bool), string cacheEncryptionKey = default(string), string cacheTtl = default(string), bool newProactiveCacheEnable = default(bool), string proactiveCacheDumpInterval = default(string), bool proactiveCacheEnable = default(bool), string proactiveCacheMinimumFetchingTime = default(string))
        {
            this.CacheEnable = cacheEnable;
            this.CacheEncryptionKey = cacheEncryptionKey;
            this.CacheTtl = cacheTtl;
            this.NewProactiveCacheEnable = newProactiveCacheEnable;
            this.ProactiveCacheDumpInterval = proactiveCacheDumpInterval;
            this.ProactiveCacheEnable = proactiveCacheEnable;
            this.ProactiveCacheMinimumFetchingTime = proactiveCacheMinimumFetchingTime;
        }

        /// <summary>
        /// Gets or Sets CacheEnable
        /// </summary>
        [DataMember(Name = "cache_enable", EmitDefaultValue = true)]
        public bool CacheEnable { get; set; }

        /// <summary>
        /// Gets or Sets CacheEncryptionKey
        /// </summary>
        [DataMember(Name = "cache_encryption_key", EmitDefaultValue = false)]
        public string CacheEncryptionKey { get; set; }

        /// <summary>
        /// Gets or Sets CacheTtl
        /// </summary>
        [DataMember(Name = "cache_ttl", EmitDefaultValue = false)]
        public string CacheTtl { get; set; }

        /// <summary>
        /// Gets or Sets NewProactiveCacheEnable
        /// </summary>
        [DataMember(Name = "new_proactive_cache_enable", EmitDefaultValue = true)]
        public bool NewProactiveCacheEnable { get; set; }

        /// <summary>
        /// Gets or Sets ProactiveCacheDumpInterval
        /// </summary>
        [DataMember(Name = "proactive_cache_dump_interval", EmitDefaultValue = false)]
        public string ProactiveCacheDumpInterval { get; set; }

        /// <summary>
        /// Gets or Sets ProactiveCacheEnable
        /// </summary>
        [DataMember(Name = "proactive_cache_enable", EmitDefaultValue = true)]
        public bool ProactiveCacheEnable { get; set; }

        /// <summary>
        /// Gets or Sets ProactiveCacheMinimumFetchingTime
        /// </summary>
        [DataMember(Name = "proactive_cache_minimum_fetching_time", EmitDefaultValue = false)]
        public string ProactiveCacheMinimumFetchingTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CacheConfigPart {\n");
            sb.Append("  CacheEnable: ").Append(CacheEnable).Append("\n");
            sb.Append("  CacheEncryptionKey: ").Append(CacheEncryptionKey).Append("\n");
            sb.Append("  CacheTtl: ").Append(CacheTtl).Append("\n");
            sb.Append("  NewProactiveCacheEnable: ").Append(NewProactiveCacheEnable).Append("\n");
            sb.Append("  ProactiveCacheDumpInterval: ").Append(ProactiveCacheDumpInterval).Append("\n");
            sb.Append("  ProactiveCacheEnable: ").Append(ProactiveCacheEnable).Append("\n");
            sb.Append("  ProactiveCacheMinimumFetchingTime: ").Append(ProactiveCacheMinimumFetchingTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
