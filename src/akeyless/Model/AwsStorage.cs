/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// AwsStorage
    /// </summary>
    [DataContract(Name = "AwsStorage")]
    public partial class AwsStorage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AwsStorage" /> class.
        /// </summary>
        /// <param name="accessKeyId">creds.</param>
        /// <param name="accessKeySecret">accessKeySecret.</param>
        /// <param name="authType">authType.</param>
        /// <param name="bucket">bucket.</param>
        /// <param name="prefix">prefix.</param>
        /// <param name="region">region.</param>
        public AwsStorage(string accessKeyId = default(string), string accessKeySecret = default(string), string authType = default(string), string bucket = default(string), string prefix = default(string), string region = default(string))
        {
            this.AccessKeyId = accessKeyId;
            this.AccessKeySecret = accessKeySecret;
            this.AuthType = authType;
            this.Bucket = bucket;
            this.Prefix = prefix;
            this.Region = region;
        }

        /// <summary>
        /// creds
        /// </summary>
        /// <value>creds</value>
        [DataMember(Name = "access_key_id", EmitDefaultValue = false)]
        public string AccessKeyId { get; set; }

        /// <summary>
        /// Gets or Sets AccessKeySecret
        /// </summary>
        [DataMember(Name = "access_key_secret", EmitDefaultValue = false)]
        public string AccessKeySecret { get; set; }

        /// <summary>
        /// Gets or Sets AuthType
        /// </summary>
        [DataMember(Name = "auth_type", EmitDefaultValue = false)]
        public string AuthType { get; set; }

        /// <summary>
        /// Gets or Sets Bucket
        /// </summary>
        [DataMember(Name = "bucket", EmitDefaultValue = false)]
        public string Bucket { get; set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name = "prefix", EmitDefaultValue = false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AwsStorage {\n");
            sb.Append("  AccessKeyId: ").Append(AccessKeyId).Append("\n");
            sb.Append("  AccessKeySecret: ").Append(AccessKeySecret).Append("\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  Bucket: ").Append(Bucket).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
