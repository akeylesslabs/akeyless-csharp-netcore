/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// LogstashLogForwardingConfig
    /// </summary>
    [DataContract(Name = "LogstashLogForwardingConfig")]
    public partial class LogstashLogForwardingConfig : IEquatable<LogstashLogForwardingConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogstashLogForwardingConfig" /> class.
        /// </summary>
        /// <param name="logstashDns">logstashDns.</param>
        /// <param name="logstashEnableTls">logstashEnableTls.</param>
        /// <param name="logstashProtocol">logstashProtocol.</param>
        /// <param name="logstashTlsCertificate">logstashTlsCertificate.</param>
        public LogstashLogForwardingConfig(string logstashDns = default(string), bool logstashEnableTls = default(bool), string logstashProtocol = default(string), string logstashTlsCertificate = default(string))
        {
            this.LogstashDns = logstashDns;
            this.LogstashEnableTls = logstashEnableTls;
            this.LogstashProtocol = logstashProtocol;
            this.LogstashTlsCertificate = logstashTlsCertificate;
        }

        /// <summary>
        /// Gets or Sets LogstashDns
        /// </summary>
        [DataMember(Name = "logstash_dns", EmitDefaultValue = false)]
        public string LogstashDns { get; set; }

        /// <summary>
        /// Gets or Sets LogstashEnableTls
        /// </summary>
        [DataMember(Name = "logstash_enable_tls", EmitDefaultValue = true)]
        public bool LogstashEnableTls { get; set; }

        /// <summary>
        /// Gets or Sets LogstashProtocol
        /// </summary>
        [DataMember(Name = "logstash_protocol", EmitDefaultValue = false)]
        public string LogstashProtocol { get; set; }

        /// <summary>
        /// Gets or Sets LogstashTlsCertificate
        /// </summary>
        [DataMember(Name = "logstash_tls_certificate", EmitDefaultValue = false)]
        public string LogstashTlsCertificate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogstashLogForwardingConfig {\n");
            sb.Append("  LogstashDns: ").Append(LogstashDns).Append("\n");
            sb.Append("  LogstashEnableTls: ").Append(LogstashEnableTls).Append("\n");
            sb.Append("  LogstashProtocol: ").Append(LogstashProtocol).Append("\n");
            sb.Append("  LogstashTlsCertificate: ").Append(LogstashTlsCertificate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogstashLogForwardingConfig);
        }

        /// <summary>
        /// Returns true if LogstashLogForwardingConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of LogstashLogForwardingConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogstashLogForwardingConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LogstashDns == input.LogstashDns ||
                    (this.LogstashDns != null &&
                    this.LogstashDns.Equals(input.LogstashDns))
                ) && 
                (
                    this.LogstashEnableTls == input.LogstashEnableTls ||
                    this.LogstashEnableTls.Equals(input.LogstashEnableTls)
                ) && 
                (
                    this.LogstashProtocol == input.LogstashProtocol ||
                    (this.LogstashProtocol != null &&
                    this.LogstashProtocol.Equals(input.LogstashProtocol))
                ) && 
                (
                    this.LogstashTlsCertificate == input.LogstashTlsCertificate ||
                    (this.LogstashTlsCertificate != null &&
                    this.LogstashTlsCertificate.Equals(input.LogstashTlsCertificate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogstashDns != null)
                {
                    hashCode = (hashCode * 59) + this.LogstashDns.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LogstashEnableTls.GetHashCode();
                if (this.LogstashProtocol != null)
                {
                    hashCode = (hashCode * 59) + this.LogstashProtocol.GetHashCode();
                }
                if (this.LogstashTlsCertificate != null)
                {
                    hashCode = (hashCode * 59) + this.LogstashTlsCertificate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
