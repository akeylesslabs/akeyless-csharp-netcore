/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateProducerRabbitMQ is a command that creates rabbitmq producer [Deprecated: Use dynamic-secret-create-rabbitmq command]
    /// </summary>
    [DataContract(Name = "gatewayCreateProducerRabbitMQ")]
    public partial class GatewayCreateProducerRabbitMQ : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerRabbitMQ" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerRabbitMQ() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerRabbitMQ" /> class.
        /// </summary>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="itemCustomFields">Additional custom fields to associate with the item.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Dynamic secret name (required).</param>
        /// <param name="passwordLength">The length of the password to be generated.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="rabbitmqAdminPwd">RabbitMQ Admin password.</param>
        /// <param name="rabbitmqAdminUser">RabbitMQ Admin User.</param>
        /// <param name="rabbitmqServerUri">Server URI.</param>
        /// <param name="rabbitmqUserConfPermission">User configuration permission.</param>
        /// <param name="rabbitmqUserReadPermission">User read permission.</param>
        /// <param name="rabbitmqUserTags">User Tags.</param>
        /// <param name="rabbitmqUserVhost">User Virtual Host.</param>
        /// <param name="rabbitmqUserWritePermission">User write permission.</param>
        /// <param name="secureAccessEnable">Enable/Disable secure remote access [true/false].</param>
        /// <param name="secureAccessUrl">Destination URL to inject secrets.</param>
        /// <param name="secureAccessWeb">Enable Web Secure Remote Access (default to true).</param>
        /// <param name="secureAccessWebBrowsing">Secure browser via Akeyless&#39;s Secure Remote Access (SRA) (default to false).</param>
        /// <param name="secureAccessWebProxy">Web-Proxy via Akeyless&#39;s Secure Remote Access (SRA) (default to false).</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public GatewayCreateProducerRabbitMQ(string deleteProtection = default(string), Dictionary<string, string> itemCustomFields = default(Dictionary<string, string>), bool json = false, string name = default(string), string passwordLength = default(string), string producerEncryptionKeyName = default(string), string rabbitmqAdminPwd = default(string), string rabbitmqAdminUser = default(string), string rabbitmqServerUri = default(string), string rabbitmqUserConfPermission = default(string), string rabbitmqUserReadPermission = default(string), string rabbitmqUserTags = default(string), string rabbitmqUserVhost = default(string), string rabbitmqUserWritePermission = default(string), string secureAccessEnable = default(string), string secureAccessUrl = default(string), bool secureAccessWeb = true, bool secureAccessWebBrowsing = false, bool secureAccessWebProxy = false, List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userTtl = @"60m")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayCreateProducerRabbitMQ and cannot be null");
            }
            this.Name = name;
            this.DeleteProtection = deleteProtection;
            this.ItemCustomFields = itemCustomFields;
            this.Json = json;
            this.PasswordLength = passwordLength;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.RabbitmqAdminPwd = rabbitmqAdminPwd;
            this.RabbitmqAdminUser = rabbitmqAdminUser;
            this.RabbitmqServerUri = rabbitmqServerUri;
            this.RabbitmqUserConfPermission = rabbitmqUserConfPermission;
            this.RabbitmqUserReadPermission = rabbitmqUserReadPermission;
            this.RabbitmqUserTags = rabbitmqUserTags;
            this.RabbitmqUserVhost = rabbitmqUserVhost;
            this.RabbitmqUserWritePermission = rabbitmqUserWritePermission;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessUrl = secureAccessUrl;
            this.SecureAccessWeb = secureAccessWeb;
            this.SecureAccessWebBrowsing = secureAccessWebBrowsing;
            this.SecureAccessWebProxy = secureAccessWebProxy;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? @"60m";
        }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Additional custom fields to associate with the item
        /// </summary>
        /// <value>Additional custom fields to associate with the item</value>
        [DataMember(Name = "item-custom-fields", EmitDefaultValue = false)]
        public Dictionary<string, string> ItemCustomFields { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The length of the password to be generated
        /// </summary>
        /// <value>The length of the password to be generated</value>
        [DataMember(Name = "password-length", EmitDefaultValue = false)]
        public string PasswordLength { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// RabbitMQ Admin password
        /// </summary>
        /// <value>RabbitMQ Admin password</value>
        [DataMember(Name = "rabbitmq-admin-pwd", EmitDefaultValue = false)]
        public string RabbitmqAdminPwd { get; set; }

        /// <summary>
        /// RabbitMQ Admin User
        /// </summary>
        /// <value>RabbitMQ Admin User</value>
        [DataMember(Name = "rabbitmq-admin-user", EmitDefaultValue = false)]
        public string RabbitmqAdminUser { get; set; }

        /// <summary>
        /// Server URI
        /// </summary>
        /// <value>Server URI</value>
        [DataMember(Name = "rabbitmq-server-uri", EmitDefaultValue = false)]
        public string RabbitmqServerUri { get; set; }

        /// <summary>
        /// User configuration permission
        /// </summary>
        /// <value>User configuration permission</value>
        [DataMember(Name = "rabbitmq-user-conf-permission", EmitDefaultValue = false)]
        public string RabbitmqUserConfPermission { get; set; }

        /// <summary>
        /// User read permission
        /// </summary>
        /// <value>User read permission</value>
        [DataMember(Name = "rabbitmq-user-read-permission", EmitDefaultValue = false)]
        public string RabbitmqUserReadPermission { get; set; }

        /// <summary>
        /// User Tags
        /// </summary>
        /// <value>User Tags</value>
        [DataMember(Name = "rabbitmq-user-tags", EmitDefaultValue = false)]
        public string RabbitmqUserTags { get; set; }

        /// <summary>
        /// User Virtual Host
        /// </summary>
        /// <value>User Virtual Host</value>
        [DataMember(Name = "rabbitmq-user-vhost", EmitDefaultValue = false)]
        public string RabbitmqUserVhost { get; set; }

        /// <summary>
        /// User write permission
        /// </summary>
        /// <value>User write permission</value>
        [DataMember(Name = "rabbitmq-user-write-permission", EmitDefaultValue = false)]
        public string RabbitmqUserWritePermission { get; set; }

        /// <summary>
        /// Enable/Disable secure remote access [true/false]
        /// </summary>
        /// <value>Enable/Disable secure remote access [true/false]</value>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Destination URL to inject secrets
        /// </summary>
        /// <value>Destination URL to inject secrets</value>
        [DataMember(Name = "secure-access-url", EmitDefaultValue = false)]
        public string SecureAccessUrl { get; set; }

        /// <summary>
        /// Enable Web Secure Remote Access
        /// </summary>
        /// <value>Enable Web Secure Remote Access</value>
        [DataMember(Name = "secure-access-web", EmitDefaultValue = true)]
        public bool SecureAccessWeb { get; set; }

        /// <summary>
        /// Secure browser via Akeyless&#39;s Secure Remote Access (SRA)
        /// </summary>
        /// <value>Secure browser via Akeyless&#39;s Secure Remote Access (SRA)</value>
        [DataMember(Name = "secure-access-web-browsing", EmitDefaultValue = true)]
        public bool SecureAccessWebBrowsing { get; set; }

        /// <summary>
        /// Web-Proxy via Akeyless&#39;s Secure Remote Access (SRA)
        /// </summary>
        /// <value>Web-Proxy via Akeyless&#39;s Secure Remote Access (SRA)</value>
        [DataMember(Name = "secure-access-web-proxy", EmitDefaultValue = true)]
        public bool SecureAccessWebProxy { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerRabbitMQ {\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  ItemCustomFields: ").Append(ItemCustomFields).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PasswordLength: ").Append(PasswordLength).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  RabbitmqAdminPwd: ").Append(RabbitmqAdminPwd).Append("\n");
            sb.Append("  RabbitmqAdminUser: ").Append(RabbitmqAdminUser).Append("\n");
            sb.Append("  RabbitmqServerUri: ").Append(RabbitmqServerUri).Append("\n");
            sb.Append("  RabbitmqUserConfPermission: ").Append(RabbitmqUserConfPermission).Append("\n");
            sb.Append("  RabbitmqUserReadPermission: ").Append(RabbitmqUserReadPermission).Append("\n");
            sb.Append("  RabbitmqUserTags: ").Append(RabbitmqUserTags).Append("\n");
            sb.Append("  RabbitmqUserVhost: ").Append(RabbitmqUserVhost).Append("\n");
            sb.Append("  RabbitmqUserWritePermission: ").Append(RabbitmqUserWritePermission).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessUrl: ").Append(SecureAccessUrl).Append("\n");
            sb.Append("  SecureAccessWeb: ").Append(SecureAccessWeb).Append("\n");
            sb.Append("  SecureAccessWebBrowsing: ").Append(SecureAccessWebBrowsing).Append("\n");
            sb.Append("  SecureAccessWebProxy: ").Append(SecureAccessWebProxy).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
