/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// TargetTypeDetailsInput
    /// </summary>
    [DataContract]
    public partial class TargetTypeDetailsInput :  IEquatable<TargetTypeDetailsInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetTypeDetailsInput" /> class.
        /// </summary>
        /// <param name="artifactoryAdminApikey">artifactoryAdminApikey.</param>
        /// <param name="artifactoryAdminUsername">artifactoryAdminUsername.</param>
        /// <param name="artifactoryBaseUrl">artifactoryBaseUrl.</param>
        /// <param name="awsAccessKeyId">awsAccessKeyId.</param>
        /// <param name="awsRegion">awsRegion.</param>
        /// <param name="awsSecretAccessKey">awsSecretAccessKey.</param>
        /// <param name="awsSessionToken">awsSessionToken.</param>
        /// <param name="azureClientId">azureClientId.</param>
        /// <param name="azureClientSecret">azureClientSecret.</param>
        /// <param name="azureTenantId">azureTenantId.</param>
        /// <param name="chefServerHostName">chefServerHostName.</param>
        /// <param name="chefServerKey">chefServerKey.</param>
        /// <param name="chefServerPort">chefServerPort.</param>
        /// <param name="chefServerUrl">chefServerUrl.</param>
        /// <param name="chefServerUsername">chefServerUsername.</param>
        /// <param name="chefSkipSsl">chefSkipSsl.</param>
        /// <param name="dbHostName">dbHostName.</param>
        /// <param name="dbName">dbName.</param>
        /// <param name="dbPort">dbPort.</param>
        /// <param name="dbPwd">dbPwd.</param>
        /// <param name="dbServerCertificates">(Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host&#39;s root CA set..</param>
        /// <param name="dbServerName">(Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client&#39;s handshake to support virtual hosting unless it is an IP address..</param>
        /// <param name="dbUserName">dbUserName.</param>
        /// <param name="eksAccessKeyId">eksAccessKeyId.</param>
        /// <param name="eksAssumeRole">eksAssumeRole.</param>
        /// <param name="eksClusterCaCertificate">eksClusterCaCertificate.</param>
        /// <param name="eksClusterEndpoint">eksClusterEndpoint.</param>
        /// <param name="eksClusterName">eksClusterName.</param>
        /// <param name="eksRegion">eksRegion.</param>
        /// <param name="eksSecretAccessKey">eksSecretAccessKey.</param>
        /// <param name="gcpServiceAccountEmail">gcpServiceAccountEmail.</param>
        /// <param name="gcpServiceAccountKey">gcpServiceAccountKey.</param>
        /// <param name="gkeClusterCaCertificate">gkeClusterCaCertificate.</param>
        /// <param name="gkeClusterEndpoint">gkeClusterEndpoint.</param>
        /// <param name="gkeClusterName">GKEProjectID            string &#x60;json:\&quot;gke_project_id\&quot;&#x60;.</param>
        /// <param name="gkeServiceAccountKey">gkeServiceAccountKey.</param>
        /// <param name="gkeServiceAccountName">GKEClusterComputeZone   string &#x60;json:\&quot;gke_cluster_compute_zone\&quot;&#x60;.</param>
        /// <param name="host">host.</param>
        /// <param name="mongodbAtlas">mongodbAtlas.</param>
        /// <param name="mongodbAtlasApiPrivateKey">mongodbAtlasApiPrivateKey.</param>
        /// <param name="mongodbAtlasApiPublicKey">mongodbAtlasApiPublicKey.</param>
        /// <param name="mongodbAtlasProjectId">mongodb atlas fields.</param>
        /// <param name="mongodbDbName">common fields.</param>
        /// <param name="mongodbDefaultAuthDb">mongodbDefaultAuthDb.</param>
        /// <param name="mongodbHostPort">mongodbHostPort.</param>
        /// <param name="mongodbPassword">mongodbPassword.</param>
        /// <param name="mongodbUriConnection">mongodb fields.</param>
        /// <param name="mongodbUriOptions">mongodbUriOptions.</param>
        /// <param name="mongodbUsername">mongodbUsername.</param>
        /// <param name="password">password.</param>
        /// <param name="port">port.</param>
        /// <param name="privateKey">privateKey.</param>
        /// <param name="privateKeyPassword">privateKeyPassword.</param>
        /// <param name="rabbitmqServerPassword">rabbitmqServerPassword.</param>
        /// <param name="rabbitmqServerUri">rabbitmqServerUri.</param>
        /// <param name="rabbitmqServerUser">rabbitmqServerUser.</param>
        /// <param name="sfAccount">sfAccount.</param>
        /// <param name="url">url.</param>
        /// <param name="username">username.</param>
        /// <param name="venafiApiKey">venafiApiKey.</param>
        /// <param name="venafiBaseUrl">venafiBaseUrl.</param>
        /// <param name="venafiTppPassword">venafiTppPassword.</param>
        /// <param name="venafiTppUsername">venafiTppUsername.</param>
        /// <param name="venafiUseTpp">venafiUseTpp.</param>
        /// <param name="venafiZone">venafiZone.</param>
        public TargetTypeDetailsInput(string artifactoryAdminApikey = default(string), string artifactoryAdminUsername = default(string), string artifactoryBaseUrl = default(string), string awsAccessKeyId = default(string), string awsRegion = default(string), string awsSecretAccessKey = default(string), string awsSessionToken = default(string), string azureClientId = default(string), string azureClientSecret = default(string), string azureTenantId = default(string), string chefServerHostName = default(string), string chefServerKey = default(string), string chefServerPort = default(string), string chefServerUrl = default(string), string chefServerUsername = default(string), bool chefSkipSsl = default(bool), string dbHostName = default(string), string dbName = default(string), string dbPort = default(string), string dbPwd = default(string), string dbServerCertificates = default(string), string dbServerName = default(string), string dbUserName = default(string), string eksAccessKeyId = default(string), string eksAssumeRole = default(string), string eksClusterCaCertificate = default(string), string eksClusterEndpoint = default(string), string eksClusterName = default(string), string eksRegion = default(string), string eksSecretAccessKey = default(string), string gcpServiceAccountEmail = default(string), List<int> gcpServiceAccountKey = default(List<int>), string gkeClusterCaCertificate = default(string), string gkeClusterEndpoint = default(string), string gkeClusterName = default(string), string gkeServiceAccountKey = default(string), string gkeServiceAccountName = default(string), string host = default(string), bool mongodbAtlas = default(bool), string mongodbAtlasApiPrivateKey = default(string), string mongodbAtlasApiPublicKey = default(string), string mongodbAtlasProjectId = default(string), string mongodbDbName = default(string), string mongodbDefaultAuthDb = default(string), string mongodbHostPort = default(string), string mongodbPassword = default(string), string mongodbUriConnection = default(string), string mongodbUriOptions = default(string), string mongodbUsername = default(string), string password = default(string), string port = default(string), string privateKey = default(string), string privateKeyPassword = default(string), string rabbitmqServerPassword = default(string), string rabbitmqServerUri = default(string), string rabbitmqServerUser = default(string), string sfAccount = default(string), string url = default(string), string username = default(string), string venafiApiKey = default(string), string venafiBaseUrl = default(string), string venafiTppPassword = default(string), string venafiTppUsername = default(string), bool venafiUseTpp = default(bool), string venafiZone = default(string))
        {
            this.ArtifactoryAdminApikey = artifactoryAdminApikey;
            this.ArtifactoryAdminUsername = artifactoryAdminUsername;
            this.ArtifactoryBaseUrl = artifactoryBaseUrl;
            this.AwsAccessKeyId = awsAccessKeyId;
            this.AwsRegion = awsRegion;
            this.AwsSecretAccessKey = awsSecretAccessKey;
            this.AwsSessionToken = awsSessionToken;
            this.AzureClientId = azureClientId;
            this.AzureClientSecret = azureClientSecret;
            this.AzureTenantId = azureTenantId;
            this.ChefServerHostName = chefServerHostName;
            this.ChefServerKey = chefServerKey;
            this.ChefServerPort = chefServerPort;
            this.ChefServerUrl = chefServerUrl;
            this.ChefServerUsername = chefServerUsername;
            this.ChefSkipSsl = chefSkipSsl;
            this.DbHostName = dbHostName;
            this.DbName = dbName;
            this.DbPort = dbPort;
            this.DbPwd = dbPwd;
            this.DbServerCertificates = dbServerCertificates;
            this.DbServerName = dbServerName;
            this.DbUserName = dbUserName;
            this.EksAccessKeyId = eksAccessKeyId;
            this.EksAssumeRole = eksAssumeRole;
            this.EksClusterCaCertificate = eksClusterCaCertificate;
            this.EksClusterEndpoint = eksClusterEndpoint;
            this.EksClusterName = eksClusterName;
            this.EksRegion = eksRegion;
            this.EksSecretAccessKey = eksSecretAccessKey;
            this.GcpServiceAccountEmail = gcpServiceAccountEmail;
            this.GcpServiceAccountKey = gcpServiceAccountKey;
            this.GkeClusterCaCertificate = gkeClusterCaCertificate;
            this.GkeClusterEndpoint = gkeClusterEndpoint;
            this.GkeClusterName = gkeClusterName;
            this.GkeServiceAccountKey = gkeServiceAccountKey;
            this.GkeServiceAccountName = gkeServiceAccountName;
            this.Host = host;
            this.MongodbAtlas = mongodbAtlas;
            this.MongodbAtlasApiPrivateKey = mongodbAtlasApiPrivateKey;
            this.MongodbAtlasApiPublicKey = mongodbAtlasApiPublicKey;
            this.MongodbAtlasProjectId = mongodbAtlasProjectId;
            this.MongodbDbName = mongodbDbName;
            this.MongodbDefaultAuthDb = mongodbDefaultAuthDb;
            this.MongodbHostPort = mongodbHostPort;
            this.MongodbPassword = mongodbPassword;
            this.MongodbUriConnection = mongodbUriConnection;
            this.MongodbUriOptions = mongodbUriOptions;
            this.MongodbUsername = mongodbUsername;
            this.Password = password;
            this.Port = port;
            this.PrivateKey = privateKey;
            this.PrivateKeyPassword = privateKeyPassword;
            this.RabbitmqServerPassword = rabbitmqServerPassword;
            this.RabbitmqServerUri = rabbitmqServerUri;
            this.RabbitmqServerUser = rabbitmqServerUser;
            this.SfAccount = sfAccount;
            this.Url = url;
            this.Username = username;
            this.VenafiApiKey = venafiApiKey;
            this.VenafiBaseUrl = venafiBaseUrl;
            this.VenafiTppPassword = venafiTppPassword;
            this.VenafiTppUsername = venafiTppUsername;
            this.VenafiUseTpp = venafiUseTpp;
            this.VenafiZone = venafiZone;
        }
        
        /// <summary>
        /// Gets or Sets ArtifactoryAdminApikey
        /// </summary>
        [DataMember(Name="artifactory_admin_apikey", EmitDefaultValue=false)]
        public string ArtifactoryAdminApikey { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactoryAdminUsername
        /// </summary>
        [DataMember(Name="artifactory_admin_username", EmitDefaultValue=false)]
        public string ArtifactoryAdminUsername { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactoryBaseUrl
        /// </summary>
        [DataMember(Name="artifactory_base_url", EmitDefaultValue=false)]
        public string ArtifactoryBaseUrl { get; set; }

        /// <summary>
        /// Gets or Sets AwsAccessKeyId
        /// </summary>
        [DataMember(Name="aws_access_key_id", EmitDefaultValue=false)]
        public string AwsAccessKeyId { get; set; }

        /// <summary>
        /// Gets or Sets AwsRegion
        /// </summary>
        [DataMember(Name="aws_region", EmitDefaultValue=false)]
        public string AwsRegion { get; set; }

        /// <summary>
        /// Gets or Sets AwsSecretAccessKey
        /// </summary>
        [DataMember(Name="aws_secret_access_key", EmitDefaultValue=false)]
        public string AwsSecretAccessKey { get; set; }

        /// <summary>
        /// Gets or Sets AwsSessionToken
        /// </summary>
        [DataMember(Name="aws_session_token", EmitDefaultValue=false)]
        public string AwsSessionToken { get; set; }

        /// <summary>
        /// Gets or Sets AzureClientId
        /// </summary>
        [DataMember(Name="azure_client_id", EmitDefaultValue=false)]
        public string AzureClientId { get; set; }

        /// <summary>
        /// Gets or Sets AzureClientSecret
        /// </summary>
        [DataMember(Name="azure_client_secret", EmitDefaultValue=false)]
        public string AzureClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets AzureTenantId
        /// </summary>
        [DataMember(Name="azure_tenant_id", EmitDefaultValue=false)]
        public string AzureTenantId { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerHostName
        /// </summary>
        [DataMember(Name="chef_server_host_name", EmitDefaultValue=false)]
        public string ChefServerHostName { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerKey
        /// </summary>
        [DataMember(Name="chef_server_key", EmitDefaultValue=false)]
        public string ChefServerKey { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerPort
        /// </summary>
        [DataMember(Name="chef_server_port", EmitDefaultValue=false)]
        public string ChefServerPort { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerUrl
        /// </summary>
        [DataMember(Name="chef_server_url", EmitDefaultValue=false)]
        public string ChefServerUrl { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerUsername
        /// </summary>
        [DataMember(Name="chef_server_username", EmitDefaultValue=false)]
        public string ChefServerUsername { get; set; }

        /// <summary>
        /// Gets or Sets ChefSkipSsl
        /// </summary>
        [DataMember(Name="chef_skip_ssl", EmitDefaultValue=false)]
        public bool ChefSkipSsl { get; set; }

        /// <summary>
        /// Gets or Sets DbHostName
        /// </summary>
        [DataMember(Name="db_host_name", EmitDefaultValue=false)]
        public string DbHostName { get; set; }

        /// <summary>
        /// Gets or Sets DbName
        /// </summary>
        [DataMember(Name="db_name", EmitDefaultValue=false)]
        public string DbName { get; set; }

        /// <summary>
        /// Gets or Sets DbPort
        /// </summary>
        [DataMember(Name="db_port", EmitDefaultValue=false)]
        public string DbPort { get; set; }

        /// <summary>
        /// Gets or Sets DbPwd
        /// </summary>
        [DataMember(Name="db_pwd", EmitDefaultValue=false)]
        public string DbPwd { get; set; }

        /// <summary>
        /// (Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host&#39;s root CA set.
        /// </summary>
        /// <value>(Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host&#39;s root CA set.</value>
        [DataMember(Name="db_server_certificates", EmitDefaultValue=false)]
        public string DbServerCertificates { get; set; }

        /// <summary>
        /// (Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client&#39;s handshake to support virtual hosting unless it is an IP address.
        /// </summary>
        /// <value>(Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client&#39;s handshake to support virtual hosting unless it is an IP address.</value>
        [DataMember(Name="db_server_name", EmitDefaultValue=false)]
        public string DbServerName { get; set; }

        /// <summary>
        /// Gets or Sets DbUserName
        /// </summary>
        [DataMember(Name="db_user_name", EmitDefaultValue=false)]
        public string DbUserName { get; set; }

        /// <summary>
        /// Gets or Sets EksAccessKeyId
        /// </summary>
        [DataMember(Name="eks_access_key_id", EmitDefaultValue=false)]
        public string EksAccessKeyId { get; set; }

        /// <summary>
        /// Gets or Sets EksAssumeRole
        /// </summary>
        [DataMember(Name="eks_assume_role", EmitDefaultValue=false)]
        public string EksAssumeRole { get; set; }

        /// <summary>
        /// Gets or Sets EksClusterCaCertificate
        /// </summary>
        [DataMember(Name="eks_cluster_ca_certificate", EmitDefaultValue=false)]
        public string EksClusterCaCertificate { get; set; }

        /// <summary>
        /// Gets or Sets EksClusterEndpoint
        /// </summary>
        [DataMember(Name="eks_cluster_endpoint", EmitDefaultValue=false)]
        public string EksClusterEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets EksClusterName
        /// </summary>
        [DataMember(Name="eks_cluster_name", EmitDefaultValue=false)]
        public string EksClusterName { get; set; }

        /// <summary>
        /// Gets or Sets EksRegion
        /// </summary>
        [DataMember(Name="eks_region", EmitDefaultValue=false)]
        public string EksRegion { get; set; }

        /// <summary>
        /// Gets or Sets EksSecretAccessKey
        /// </summary>
        [DataMember(Name="eks_secret_access_key", EmitDefaultValue=false)]
        public string EksSecretAccessKey { get; set; }

        /// <summary>
        /// Gets or Sets GcpServiceAccountEmail
        /// </summary>
        [DataMember(Name="gcp_service_account_email", EmitDefaultValue=false)]
        public string GcpServiceAccountEmail { get; set; }

        /// <summary>
        /// Gets or Sets GcpServiceAccountKey
        /// </summary>
        [DataMember(Name="gcp_service_account_key", EmitDefaultValue=false)]
        public List<int> GcpServiceAccountKey { get; set; }

        /// <summary>
        /// Gets or Sets GkeClusterCaCertificate
        /// </summary>
        [DataMember(Name="gke_cluster_ca_certificate", EmitDefaultValue=false)]
        public string GkeClusterCaCertificate { get; set; }

        /// <summary>
        /// Gets or Sets GkeClusterEndpoint
        /// </summary>
        [DataMember(Name="gke_cluster_endpoint", EmitDefaultValue=false)]
        public string GkeClusterEndpoint { get; set; }

        /// <summary>
        /// GKEProjectID            string &#x60;json:\&quot;gke_project_id\&quot;&#x60;
        /// </summary>
        /// <value>GKEProjectID            string &#x60;json:\&quot;gke_project_id\&quot;&#x60;</value>
        [DataMember(Name="gke_cluster_name", EmitDefaultValue=false)]
        public string GkeClusterName { get; set; }

        /// <summary>
        /// Gets or Sets GkeServiceAccountKey
        /// </summary>
        [DataMember(Name="gke_service_account_key", EmitDefaultValue=false)]
        public string GkeServiceAccountKey { get; set; }

        /// <summary>
        /// GKEClusterComputeZone   string &#x60;json:\&quot;gke_cluster_compute_zone\&quot;&#x60;
        /// </summary>
        /// <value>GKEClusterComputeZone   string &#x60;json:\&quot;gke_cluster_compute_zone\&quot;&#x60;</value>
        [DataMember(Name="gke_service_account_name", EmitDefaultValue=false)]
        public string GkeServiceAccountName { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets MongodbAtlas
        /// </summary>
        [DataMember(Name="mongodb_atlas", EmitDefaultValue=false)]
        public bool MongodbAtlas { get; set; }

        /// <summary>
        /// Gets or Sets MongodbAtlasApiPrivateKey
        /// </summary>
        [DataMember(Name="mongodb_atlas_api_private_key", EmitDefaultValue=false)]
        public string MongodbAtlasApiPrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets MongodbAtlasApiPublicKey
        /// </summary>
        [DataMember(Name="mongodb_atlas_api_public_key", EmitDefaultValue=false)]
        public string MongodbAtlasApiPublicKey { get; set; }

        /// <summary>
        /// mongodb atlas fields
        /// </summary>
        /// <value>mongodb atlas fields</value>
        [DataMember(Name="mongodb_atlas_project_id", EmitDefaultValue=false)]
        public string MongodbAtlasProjectId { get; set; }

        /// <summary>
        /// common fields
        /// </summary>
        /// <value>common fields</value>
        [DataMember(Name="mongodb_db_name", EmitDefaultValue=false)]
        public string MongodbDbName { get; set; }

        /// <summary>
        /// Gets or Sets MongodbDefaultAuthDb
        /// </summary>
        [DataMember(Name="mongodb_default_auth_db", EmitDefaultValue=false)]
        public string MongodbDefaultAuthDb { get; set; }

        /// <summary>
        /// Gets or Sets MongodbHostPort
        /// </summary>
        [DataMember(Name="mongodb_host_port", EmitDefaultValue=false)]
        public string MongodbHostPort { get; set; }

        /// <summary>
        /// Gets or Sets MongodbPassword
        /// </summary>
        [DataMember(Name="mongodb_password", EmitDefaultValue=false)]
        public string MongodbPassword { get; set; }

        /// <summary>
        /// mongodb fields
        /// </summary>
        /// <value>mongodb fields</value>
        [DataMember(Name="mongodb_uri_connection", EmitDefaultValue=false)]
        public string MongodbUriConnection { get; set; }

        /// <summary>
        /// Gets or Sets MongodbUriOptions
        /// </summary>
        [DataMember(Name="mongodb_uri_options", EmitDefaultValue=false)]
        public string MongodbUriOptions { get; set; }

        /// <summary>
        /// Gets or Sets MongodbUsername
        /// </summary>
        [DataMember(Name="mongodb_username", EmitDefaultValue=false)]
        public string MongodbUsername { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public string Port { get; set; }

        /// <summary>
        /// Gets or Sets PrivateKey
        /// </summary>
        [DataMember(Name="private_key", EmitDefaultValue=false)]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets PrivateKeyPassword
        /// </summary>
        [DataMember(Name="private_key_password", EmitDefaultValue=false)]
        public string PrivateKeyPassword { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqServerPassword
        /// </summary>
        [DataMember(Name="rabbitmq_server_password", EmitDefaultValue=false)]
        public string RabbitmqServerPassword { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqServerUri
        /// </summary>
        [DataMember(Name="rabbitmq_server_uri", EmitDefaultValue=false)]
        public string RabbitmqServerUri { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqServerUser
        /// </summary>
        [DataMember(Name="rabbitmq_server_user", EmitDefaultValue=false)]
        public string RabbitmqServerUser { get; set; }

        /// <summary>
        /// Gets or Sets SfAccount
        /// </summary>
        [DataMember(Name="sf_account", EmitDefaultValue=false)]
        public string SfAccount { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets VenafiApiKey
        /// </summary>
        [DataMember(Name="venafi_api_key", EmitDefaultValue=false)]
        public string VenafiApiKey { get; set; }

        /// <summary>
        /// Gets or Sets VenafiBaseUrl
        /// </summary>
        [DataMember(Name="venafi_base_url", EmitDefaultValue=false)]
        public string VenafiBaseUrl { get; set; }

        /// <summary>
        /// Gets or Sets VenafiTppPassword
        /// </summary>
        [DataMember(Name="venafi_tpp_password", EmitDefaultValue=false)]
        public string VenafiTppPassword { get; set; }

        /// <summary>
        /// Gets or Sets VenafiTppUsername
        /// </summary>
        [DataMember(Name="venafi_tpp_username", EmitDefaultValue=false)]
        public string VenafiTppUsername { get; set; }

        /// <summary>
        /// Gets or Sets VenafiUseTpp
        /// </summary>
        [DataMember(Name="venafi_use_tpp", EmitDefaultValue=false)]
        public bool VenafiUseTpp { get; set; }

        /// <summary>
        /// Gets or Sets VenafiZone
        /// </summary>
        [DataMember(Name="venafi_zone", EmitDefaultValue=false)]
        public string VenafiZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TargetTypeDetailsInput {\n");
            sb.Append("  ArtifactoryAdminApikey: ").Append(ArtifactoryAdminApikey).Append("\n");
            sb.Append("  ArtifactoryAdminUsername: ").Append(ArtifactoryAdminUsername).Append("\n");
            sb.Append("  ArtifactoryBaseUrl: ").Append(ArtifactoryBaseUrl).Append("\n");
            sb.Append("  AwsAccessKeyId: ").Append(AwsAccessKeyId).Append("\n");
            sb.Append("  AwsRegion: ").Append(AwsRegion).Append("\n");
            sb.Append("  AwsSecretAccessKey: ").Append(AwsSecretAccessKey).Append("\n");
            sb.Append("  AwsSessionToken: ").Append(AwsSessionToken).Append("\n");
            sb.Append("  AzureClientId: ").Append(AzureClientId).Append("\n");
            sb.Append("  AzureClientSecret: ").Append(AzureClientSecret).Append("\n");
            sb.Append("  AzureTenantId: ").Append(AzureTenantId).Append("\n");
            sb.Append("  ChefServerHostName: ").Append(ChefServerHostName).Append("\n");
            sb.Append("  ChefServerKey: ").Append(ChefServerKey).Append("\n");
            sb.Append("  ChefServerPort: ").Append(ChefServerPort).Append("\n");
            sb.Append("  ChefServerUrl: ").Append(ChefServerUrl).Append("\n");
            sb.Append("  ChefServerUsername: ").Append(ChefServerUsername).Append("\n");
            sb.Append("  ChefSkipSsl: ").Append(ChefSkipSsl).Append("\n");
            sb.Append("  DbHostName: ").Append(DbHostName).Append("\n");
            sb.Append("  DbName: ").Append(DbName).Append("\n");
            sb.Append("  DbPort: ").Append(DbPort).Append("\n");
            sb.Append("  DbPwd: ").Append(DbPwd).Append("\n");
            sb.Append("  DbServerCertificates: ").Append(DbServerCertificates).Append("\n");
            sb.Append("  DbServerName: ").Append(DbServerName).Append("\n");
            sb.Append("  DbUserName: ").Append(DbUserName).Append("\n");
            sb.Append("  EksAccessKeyId: ").Append(EksAccessKeyId).Append("\n");
            sb.Append("  EksAssumeRole: ").Append(EksAssumeRole).Append("\n");
            sb.Append("  EksClusterCaCertificate: ").Append(EksClusterCaCertificate).Append("\n");
            sb.Append("  EksClusterEndpoint: ").Append(EksClusterEndpoint).Append("\n");
            sb.Append("  EksClusterName: ").Append(EksClusterName).Append("\n");
            sb.Append("  EksRegion: ").Append(EksRegion).Append("\n");
            sb.Append("  EksSecretAccessKey: ").Append(EksSecretAccessKey).Append("\n");
            sb.Append("  GcpServiceAccountEmail: ").Append(GcpServiceAccountEmail).Append("\n");
            sb.Append("  GcpServiceAccountKey: ").Append(GcpServiceAccountKey).Append("\n");
            sb.Append("  GkeClusterCaCertificate: ").Append(GkeClusterCaCertificate).Append("\n");
            sb.Append("  GkeClusterEndpoint: ").Append(GkeClusterEndpoint).Append("\n");
            sb.Append("  GkeClusterName: ").Append(GkeClusterName).Append("\n");
            sb.Append("  GkeServiceAccountKey: ").Append(GkeServiceAccountKey).Append("\n");
            sb.Append("  GkeServiceAccountName: ").Append(GkeServiceAccountName).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  MongodbAtlas: ").Append(MongodbAtlas).Append("\n");
            sb.Append("  MongodbAtlasApiPrivateKey: ").Append(MongodbAtlasApiPrivateKey).Append("\n");
            sb.Append("  MongodbAtlasApiPublicKey: ").Append(MongodbAtlasApiPublicKey).Append("\n");
            sb.Append("  MongodbAtlasProjectId: ").Append(MongodbAtlasProjectId).Append("\n");
            sb.Append("  MongodbDbName: ").Append(MongodbDbName).Append("\n");
            sb.Append("  MongodbDefaultAuthDb: ").Append(MongodbDefaultAuthDb).Append("\n");
            sb.Append("  MongodbHostPort: ").Append(MongodbHostPort).Append("\n");
            sb.Append("  MongodbPassword: ").Append(MongodbPassword).Append("\n");
            sb.Append("  MongodbUriConnection: ").Append(MongodbUriConnection).Append("\n");
            sb.Append("  MongodbUriOptions: ").Append(MongodbUriOptions).Append("\n");
            sb.Append("  MongodbUsername: ").Append(MongodbUsername).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("  PrivateKeyPassword: ").Append(PrivateKeyPassword).Append("\n");
            sb.Append("  RabbitmqServerPassword: ").Append(RabbitmqServerPassword).Append("\n");
            sb.Append("  RabbitmqServerUri: ").Append(RabbitmqServerUri).Append("\n");
            sb.Append("  RabbitmqServerUser: ").Append(RabbitmqServerUser).Append("\n");
            sb.Append("  SfAccount: ").Append(SfAccount).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  VenafiApiKey: ").Append(VenafiApiKey).Append("\n");
            sb.Append("  VenafiBaseUrl: ").Append(VenafiBaseUrl).Append("\n");
            sb.Append("  VenafiTppPassword: ").Append(VenafiTppPassword).Append("\n");
            sb.Append("  VenafiTppUsername: ").Append(VenafiTppUsername).Append("\n");
            sb.Append("  VenafiUseTpp: ").Append(VenafiUseTpp).Append("\n");
            sb.Append("  VenafiZone: ").Append(VenafiZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TargetTypeDetailsInput);
        }

        /// <summary>
        /// Returns true if TargetTypeDetailsInput instances are equal
        /// </summary>
        /// <param name="input">Instance of TargetTypeDetailsInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TargetTypeDetailsInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArtifactoryAdminApikey == input.ArtifactoryAdminApikey ||
                    (this.ArtifactoryAdminApikey != null &&
                    this.ArtifactoryAdminApikey.Equals(input.ArtifactoryAdminApikey))
                ) && 
                (
                    this.ArtifactoryAdminUsername == input.ArtifactoryAdminUsername ||
                    (this.ArtifactoryAdminUsername != null &&
                    this.ArtifactoryAdminUsername.Equals(input.ArtifactoryAdminUsername))
                ) && 
                (
                    this.ArtifactoryBaseUrl == input.ArtifactoryBaseUrl ||
                    (this.ArtifactoryBaseUrl != null &&
                    this.ArtifactoryBaseUrl.Equals(input.ArtifactoryBaseUrl))
                ) && 
                (
                    this.AwsAccessKeyId == input.AwsAccessKeyId ||
                    (this.AwsAccessKeyId != null &&
                    this.AwsAccessKeyId.Equals(input.AwsAccessKeyId))
                ) && 
                (
                    this.AwsRegion == input.AwsRegion ||
                    (this.AwsRegion != null &&
                    this.AwsRegion.Equals(input.AwsRegion))
                ) && 
                (
                    this.AwsSecretAccessKey == input.AwsSecretAccessKey ||
                    (this.AwsSecretAccessKey != null &&
                    this.AwsSecretAccessKey.Equals(input.AwsSecretAccessKey))
                ) && 
                (
                    this.AwsSessionToken == input.AwsSessionToken ||
                    (this.AwsSessionToken != null &&
                    this.AwsSessionToken.Equals(input.AwsSessionToken))
                ) && 
                (
                    this.AzureClientId == input.AzureClientId ||
                    (this.AzureClientId != null &&
                    this.AzureClientId.Equals(input.AzureClientId))
                ) && 
                (
                    this.AzureClientSecret == input.AzureClientSecret ||
                    (this.AzureClientSecret != null &&
                    this.AzureClientSecret.Equals(input.AzureClientSecret))
                ) && 
                (
                    this.AzureTenantId == input.AzureTenantId ||
                    (this.AzureTenantId != null &&
                    this.AzureTenantId.Equals(input.AzureTenantId))
                ) && 
                (
                    this.ChefServerHostName == input.ChefServerHostName ||
                    (this.ChefServerHostName != null &&
                    this.ChefServerHostName.Equals(input.ChefServerHostName))
                ) && 
                (
                    this.ChefServerKey == input.ChefServerKey ||
                    (this.ChefServerKey != null &&
                    this.ChefServerKey.Equals(input.ChefServerKey))
                ) && 
                (
                    this.ChefServerPort == input.ChefServerPort ||
                    (this.ChefServerPort != null &&
                    this.ChefServerPort.Equals(input.ChefServerPort))
                ) && 
                (
                    this.ChefServerUrl == input.ChefServerUrl ||
                    (this.ChefServerUrl != null &&
                    this.ChefServerUrl.Equals(input.ChefServerUrl))
                ) && 
                (
                    this.ChefServerUsername == input.ChefServerUsername ||
                    (this.ChefServerUsername != null &&
                    this.ChefServerUsername.Equals(input.ChefServerUsername))
                ) && 
                (
                    this.ChefSkipSsl == input.ChefSkipSsl ||
                    this.ChefSkipSsl.Equals(input.ChefSkipSsl)
                ) && 
                (
                    this.DbHostName == input.DbHostName ||
                    (this.DbHostName != null &&
                    this.DbHostName.Equals(input.DbHostName))
                ) && 
                (
                    this.DbName == input.DbName ||
                    (this.DbName != null &&
                    this.DbName.Equals(input.DbName))
                ) && 
                (
                    this.DbPort == input.DbPort ||
                    (this.DbPort != null &&
                    this.DbPort.Equals(input.DbPort))
                ) && 
                (
                    this.DbPwd == input.DbPwd ||
                    (this.DbPwd != null &&
                    this.DbPwd.Equals(input.DbPwd))
                ) && 
                (
                    this.DbServerCertificates == input.DbServerCertificates ||
                    (this.DbServerCertificates != null &&
                    this.DbServerCertificates.Equals(input.DbServerCertificates))
                ) && 
                (
                    this.DbServerName == input.DbServerName ||
                    (this.DbServerName != null &&
                    this.DbServerName.Equals(input.DbServerName))
                ) && 
                (
                    this.DbUserName == input.DbUserName ||
                    (this.DbUserName != null &&
                    this.DbUserName.Equals(input.DbUserName))
                ) && 
                (
                    this.EksAccessKeyId == input.EksAccessKeyId ||
                    (this.EksAccessKeyId != null &&
                    this.EksAccessKeyId.Equals(input.EksAccessKeyId))
                ) && 
                (
                    this.EksAssumeRole == input.EksAssumeRole ||
                    (this.EksAssumeRole != null &&
                    this.EksAssumeRole.Equals(input.EksAssumeRole))
                ) && 
                (
                    this.EksClusterCaCertificate == input.EksClusterCaCertificate ||
                    (this.EksClusterCaCertificate != null &&
                    this.EksClusterCaCertificate.Equals(input.EksClusterCaCertificate))
                ) && 
                (
                    this.EksClusterEndpoint == input.EksClusterEndpoint ||
                    (this.EksClusterEndpoint != null &&
                    this.EksClusterEndpoint.Equals(input.EksClusterEndpoint))
                ) && 
                (
                    this.EksClusterName == input.EksClusterName ||
                    (this.EksClusterName != null &&
                    this.EksClusterName.Equals(input.EksClusterName))
                ) && 
                (
                    this.EksRegion == input.EksRegion ||
                    (this.EksRegion != null &&
                    this.EksRegion.Equals(input.EksRegion))
                ) && 
                (
                    this.EksSecretAccessKey == input.EksSecretAccessKey ||
                    (this.EksSecretAccessKey != null &&
                    this.EksSecretAccessKey.Equals(input.EksSecretAccessKey))
                ) && 
                (
                    this.GcpServiceAccountEmail == input.GcpServiceAccountEmail ||
                    (this.GcpServiceAccountEmail != null &&
                    this.GcpServiceAccountEmail.Equals(input.GcpServiceAccountEmail))
                ) && 
                (
                    this.GcpServiceAccountKey == input.GcpServiceAccountKey ||
                    this.GcpServiceAccountKey != null &&
                    input.GcpServiceAccountKey != null &&
                    this.GcpServiceAccountKey.SequenceEqual(input.GcpServiceAccountKey)
                ) && 
                (
                    this.GkeClusterCaCertificate == input.GkeClusterCaCertificate ||
                    (this.GkeClusterCaCertificate != null &&
                    this.GkeClusterCaCertificate.Equals(input.GkeClusterCaCertificate))
                ) && 
                (
                    this.GkeClusterEndpoint == input.GkeClusterEndpoint ||
                    (this.GkeClusterEndpoint != null &&
                    this.GkeClusterEndpoint.Equals(input.GkeClusterEndpoint))
                ) && 
                (
                    this.GkeClusterName == input.GkeClusterName ||
                    (this.GkeClusterName != null &&
                    this.GkeClusterName.Equals(input.GkeClusterName))
                ) && 
                (
                    this.GkeServiceAccountKey == input.GkeServiceAccountKey ||
                    (this.GkeServiceAccountKey != null &&
                    this.GkeServiceAccountKey.Equals(input.GkeServiceAccountKey))
                ) && 
                (
                    this.GkeServiceAccountName == input.GkeServiceAccountName ||
                    (this.GkeServiceAccountName != null &&
                    this.GkeServiceAccountName.Equals(input.GkeServiceAccountName))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.MongodbAtlas == input.MongodbAtlas ||
                    this.MongodbAtlas.Equals(input.MongodbAtlas)
                ) && 
                (
                    this.MongodbAtlasApiPrivateKey == input.MongodbAtlasApiPrivateKey ||
                    (this.MongodbAtlasApiPrivateKey != null &&
                    this.MongodbAtlasApiPrivateKey.Equals(input.MongodbAtlasApiPrivateKey))
                ) && 
                (
                    this.MongodbAtlasApiPublicKey == input.MongodbAtlasApiPublicKey ||
                    (this.MongodbAtlasApiPublicKey != null &&
                    this.MongodbAtlasApiPublicKey.Equals(input.MongodbAtlasApiPublicKey))
                ) && 
                (
                    this.MongodbAtlasProjectId == input.MongodbAtlasProjectId ||
                    (this.MongodbAtlasProjectId != null &&
                    this.MongodbAtlasProjectId.Equals(input.MongodbAtlasProjectId))
                ) && 
                (
                    this.MongodbDbName == input.MongodbDbName ||
                    (this.MongodbDbName != null &&
                    this.MongodbDbName.Equals(input.MongodbDbName))
                ) && 
                (
                    this.MongodbDefaultAuthDb == input.MongodbDefaultAuthDb ||
                    (this.MongodbDefaultAuthDb != null &&
                    this.MongodbDefaultAuthDb.Equals(input.MongodbDefaultAuthDb))
                ) && 
                (
                    this.MongodbHostPort == input.MongodbHostPort ||
                    (this.MongodbHostPort != null &&
                    this.MongodbHostPort.Equals(input.MongodbHostPort))
                ) && 
                (
                    this.MongodbPassword == input.MongodbPassword ||
                    (this.MongodbPassword != null &&
                    this.MongodbPassword.Equals(input.MongodbPassword))
                ) && 
                (
                    this.MongodbUriConnection == input.MongodbUriConnection ||
                    (this.MongodbUriConnection != null &&
                    this.MongodbUriConnection.Equals(input.MongodbUriConnection))
                ) && 
                (
                    this.MongodbUriOptions == input.MongodbUriOptions ||
                    (this.MongodbUriOptions != null &&
                    this.MongodbUriOptions.Equals(input.MongodbUriOptions))
                ) && 
                (
                    this.MongodbUsername == input.MongodbUsername ||
                    (this.MongodbUsername != null &&
                    this.MongodbUsername.Equals(input.MongodbUsername))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.PrivateKey == input.PrivateKey ||
                    (this.PrivateKey != null &&
                    this.PrivateKey.Equals(input.PrivateKey))
                ) && 
                (
                    this.PrivateKeyPassword == input.PrivateKeyPassword ||
                    (this.PrivateKeyPassword != null &&
                    this.PrivateKeyPassword.Equals(input.PrivateKeyPassword))
                ) && 
                (
                    this.RabbitmqServerPassword == input.RabbitmqServerPassword ||
                    (this.RabbitmqServerPassword != null &&
                    this.RabbitmqServerPassword.Equals(input.RabbitmqServerPassword))
                ) && 
                (
                    this.RabbitmqServerUri == input.RabbitmqServerUri ||
                    (this.RabbitmqServerUri != null &&
                    this.RabbitmqServerUri.Equals(input.RabbitmqServerUri))
                ) && 
                (
                    this.RabbitmqServerUser == input.RabbitmqServerUser ||
                    (this.RabbitmqServerUser != null &&
                    this.RabbitmqServerUser.Equals(input.RabbitmqServerUser))
                ) && 
                (
                    this.SfAccount == input.SfAccount ||
                    (this.SfAccount != null &&
                    this.SfAccount.Equals(input.SfAccount))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.VenafiApiKey == input.VenafiApiKey ||
                    (this.VenafiApiKey != null &&
                    this.VenafiApiKey.Equals(input.VenafiApiKey))
                ) && 
                (
                    this.VenafiBaseUrl == input.VenafiBaseUrl ||
                    (this.VenafiBaseUrl != null &&
                    this.VenafiBaseUrl.Equals(input.VenafiBaseUrl))
                ) && 
                (
                    this.VenafiTppPassword == input.VenafiTppPassword ||
                    (this.VenafiTppPassword != null &&
                    this.VenafiTppPassword.Equals(input.VenafiTppPassword))
                ) && 
                (
                    this.VenafiTppUsername == input.VenafiTppUsername ||
                    (this.VenafiTppUsername != null &&
                    this.VenafiTppUsername.Equals(input.VenafiTppUsername))
                ) && 
                (
                    this.VenafiUseTpp == input.VenafiUseTpp ||
                    this.VenafiUseTpp.Equals(input.VenafiUseTpp)
                ) && 
                (
                    this.VenafiZone == input.VenafiZone ||
                    (this.VenafiZone != null &&
                    this.VenafiZone.Equals(input.VenafiZone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArtifactoryAdminApikey != null)
                    hashCode = hashCode * 59 + this.ArtifactoryAdminApikey.GetHashCode();
                if (this.ArtifactoryAdminUsername != null)
                    hashCode = hashCode * 59 + this.ArtifactoryAdminUsername.GetHashCode();
                if (this.ArtifactoryBaseUrl != null)
                    hashCode = hashCode * 59 + this.ArtifactoryBaseUrl.GetHashCode();
                if (this.AwsAccessKeyId != null)
                    hashCode = hashCode * 59 + this.AwsAccessKeyId.GetHashCode();
                if (this.AwsRegion != null)
                    hashCode = hashCode * 59 + this.AwsRegion.GetHashCode();
                if (this.AwsSecretAccessKey != null)
                    hashCode = hashCode * 59 + this.AwsSecretAccessKey.GetHashCode();
                if (this.AwsSessionToken != null)
                    hashCode = hashCode * 59 + this.AwsSessionToken.GetHashCode();
                if (this.AzureClientId != null)
                    hashCode = hashCode * 59 + this.AzureClientId.GetHashCode();
                if (this.AzureClientSecret != null)
                    hashCode = hashCode * 59 + this.AzureClientSecret.GetHashCode();
                if (this.AzureTenantId != null)
                    hashCode = hashCode * 59 + this.AzureTenantId.GetHashCode();
                if (this.ChefServerHostName != null)
                    hashCode = hashCode * 59 + this.ChefServerHostName.GetHashCode();
                if (this.ChefServerKey != null)
                    hashCode = hashCode * 59 + this.ChefServerKey.GetHashCode();
                if (this.ChefServerPort != null)
                    hashCode = hashCode * 59 + this.ChefServerPort.GetHashCode();
                if (this.ChefServerUrl != null)
                    hashCode = hashCode * 59 + this.ChefServerUrl.GetHashCode();
                if (this.ChefServerUsername != null)
                    hashCode = hashCode * 59 + this.ChefServerUsername.GetHashCode();
                hashCode = hashCode * 59 + this.ChefSkipSsl.GetHashCode();
                if (this.DbHostName != null)
                    hashCode = hashCode * 59 + this.DbHostName.GetHashCode();
                if (this.DbName != null)
                    hashCode = hashCode * 59 + this.DbName.GetHashCode();
                if (this.DbPort != null)
                    hashCode = hashCode * 59 + this.DbPort.GetHashCode();
                if (this.DbPwd != null)
                    hashCode = hashCode * 59 + this.DbPwd.GetHashCode();
                if (this.DbServerCertificates != null)
                    hashCode = hashCode * 59 + this.DbServerCertificates.GetHashCode();
                if (this.DbServerName != null)
                    hashCode = hashCode * 59 + this.DbServerName.GetHashCode();
                if (this.DbUserName != null)
                    hashCode = hashCode * 59 + this.DbUserName.GetHashCode();
                if (this.EksAccessKeyId != null)
                    hashCode = hashCode * 59 + this.EksAccessKeyId.GetHashCode();
                if (this.EksAssumeRole != null)
                    hashCode = hashCode * 59 + this.EksAssumeRole.GetHashCode();
                if (this.EksClusterCaCertificate != null)
                    hashCode = hashCode * 59 + this.EksClusterCaCertificate.GetHashCode();
                if (this.EksClusterEndpoint != null)
                    hashCode = hashCode * 59 + this.EksClusterEndpoint.GetHashCode();
                if (this.EksClusterName != null)
                    hashCode = hashCode * 59 + this.EksClusterName.GetHashCode();
                if (this.EksRegion != null)
                    hashCode = hashCode * 59 + this.EksRegion.GetHashCode();
                if (this.EksSecretAccessKey != null)
                    hashCode = hashCode * 59 + this.EksSecretAccessKey.GetHashCode();
                if (this.GcpServiceAccountEmail != null)
                    hashCode = hashCode * 59 + this.GcpServiceAccountEmail.GetHashCode();
                if (this.GcpServiceAccountKey != null)
                    hashCode = hashCode * 59 + this.GcpServiceAccountKey.GetHashCode();
                if (this.GkeClusterCaCertificate != null)
                    hashCode = hashCode * 59 + this.GkeClusterCaCertificate.GetHashCode();
                if (this.GkeClusterEndpoint != null)
                    hashCode = hashCode * 59 + this.GkeClusterEndpoint.GetHashCode();
                if (this.GkeClusterName != null)
                    hashCode = hashCode * 59 + this.GkeClusterName.GetHashCode();
                if (this.GkeServiceAccountKey != null)
                    hashCode = hashCode * 59 + this.GkeServiceAccountKey.GetHashCode();
                if (this.GkeServiceAccountName != null)
                    hashCode = hashCode * 59 + this.GkeServiceAccountName.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                hashCode = hashCode * 59 + this.MongodbAtlas.GetHashCode();
                if (this.MongodbAtlasApiPrivateKey != null)
                    hashCode = hashCode * 59 + this.MongodbAtlasApiPrivateKey.GetHashCode();
                if (this.MongodbAtlasApiPublicKey != null)
                    hashCode = hashCode * 59 + this.MongodbAtlasApiPublicKey.GetHashCode();
                if (this.MongodbAtlasProjectId != null)
                    hashCode = hashCode * 59 + this.MongodbAtlasProjectId.GetHashCode();
                if (this.MongodbDbName != null)
                    hashCode = hashCode * 59 + this.MongodbDbName.GetHashCode();
                if (this.MongodbDefaultAuthDb != null)
                    hashCode = hashCode * 59 + this.MongodbDefaultAuthDb.GetHashCode();
                if (this.MongodbHostPort != null)
                    hashCode = hashCode * 59 + this.MongodbHostPort.GetHashCode();
                if (this.MongodbPassword != null)
                    hashCode = hashCode * 59 + this.MongodbPassword.GetHashCode();
                if (this.MongodbUriConnection != null)
                    hashCode = hashCode * 59 + this.MongodbUriConnection.GetHashCode();
                if (this.MongodbUriOptions != null)
                    hashCode = hashCode * 59 + this.MongodbUriOptions.GetHashCode();
                if (this.MongodbUsername != null)
                    hashCode = hashCode * 59 + this.MongodbUsername.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.PrivateKey != null)
                    hashCode = hashCode * 59 + this.PrivateKey.GetHashCode();
                if (this.PrivateKeyPassword != null)
                    hashCode = hashCode * 59 + this.PrivateKeyPassword.GetHashCode();
                if (this.RabbitmqServerPassword != null)
                    hashCode = hashCode * 59 + this.RabbitmqServerPassword.GetHashCode();
                if (this.RabbitmqServerUri != null)
                    hashCode = hashCode * 59 + this.RabbitmqServerUri.GetHashCode();
                if (this.RabbitmqServerUser != null)
                    hashCode = hashCode * 59 + this.RabbitmqServerUser.GetHashCode();
                if (this.SfAccount != null)
                    hashCode = hashCode * 59 + this.SfAccount.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.VenafiApiKey != null)
                    hashCode = hashCode * 59 + this.VenafiApiKey.GetHashCode();
                if (this.VenafiBaseUrl != null)
                    hashCode = hashCode * 59 + this.VenafiBaseUrl.GetHashCode();
                if (this.VenafiTppPassword != null)
                    hashCode = hashCode * 59 + this.VenafiTppPassword.GetHashCode();
                if (this.VenafiTppUsername != null)
                    hashCode = hashCode * 59 + this.VenafiTppUsername.GetHashCode();
                hashCode = hashCode * 59 + this.VenafiUseTpp.GetHashCode();
                if (this.VenafiZone != null)
                    hashCode = hashCode * 59 + this.VenafiZone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
