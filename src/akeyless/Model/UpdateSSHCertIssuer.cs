/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UpdateSSHCertIssuer
    /// </summary>
    [DataContract(Name = "updateSSHCertIssuer")]
    public partial class UpdateSSHCertIssuer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSSHCertIssuer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateSSHCertIssuer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSSHCertIssuer" /> class.
        /// </summary>
        /// <param name="providerType">providerType.</param>
        /// <param name="addTag">List of the new tags that will be attached to this item.</param>
        /// <param name="allowedUsers">Users allowed to fetch the certificate, e.g root,ubuntu (required) (default to &quot;-&quot;).</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="extensions">Signed certificates with extensions, e.g permit-port-forwarding&#x3D;\\\&quot;\\\&quot;.</param>
        /// <param name="externalUsername">Externally provided username [true/false] (default to &quot;false&quot;).</param>
        /// <param name="fixedUserClaimKeyname">For externally provided users, denotes the key-name of IdP claim to extract the username from (relevant only for external-username&#x3D;true).</param>
        /// <param name="hostProvider">Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="metadata">Deprecated - use description.</param>
        /// <param name="name">SSH certificate issuer name (required).</param>
        /// <param name="newName">New item name.</param>
        /// <param name="principals">Signed certificates with principal, e.g example_role1,example_role2.</param>
        /// <param name="rmTag">List of the existent tags that will be removed from this item.</param>
        /// <param name="secureAccessApi">Secure Access SSH control API endpoint. E.g. https://my.sra-server:9900.</param>
        /// <param name="secureAccessBastionApi">Deprecated. use secure-access-api.</param>
        /// <param name="secureAccessBastionSsh">Deprecated. use secure-access-ssh.</param>
        /// <param name="secureAccessEnable">Enable/Disable secure remote access [true/false].</param>
        /// <param name="secureAccessEnforceHostsRestriction">Enable this flag to enforce connections only to the hosts listed in - -secure-access-host.</param>
        /// <param name="secureAccessGateway">secureAccessGateway.</param>
        /// <param name="secureAccessHost">Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers).</param>
        /// <param name="secureAccessSsh">Bastion&#39;s SSH server. E.g. my.sra-server:22.</param>
        /// <param name="secureAccessSshCredsUser">SSH username to connect to target server, must be in &#39;Allowed Users&#39; list.</param>
        /// <param name="secureAccessUseInternalBastion">Deprecated. Use secure-access-use-internal-ssh-access.</param>
        /// <param name="secureAccessUseInternalSshAccess">Use internal SSH Access.</param>
        /// <param name="signerKeyName">A key to sign the certificate with (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="ttl">The requested Time To Live for the certificate, in seconds (required).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public UpdateSSHCertIssuer(string providerType = default(string), List<string> addTag = default(List<string>), string allowedUsers = @"-", string deleteProtection = default(string), string description = default(string), Dictionary<string, string> extensions = default(Dictionary<string, string>), string externalUsername = @"false", string fixedUserClaimKeyname = default(string), string hostProvider = default(string), bool json = false, string metadata = default(string), string name = default(string), string newName = default(string), string principals = default(string), List<string> rmTag = default(List<string>), string secureAccessApi = default(string), string secureAccessBastionApi = default(string), string secureAccessBastionSsh = default(string), string secureAccessEnable = default(string), bool secureAccessEnforceHostsRestriction = default(bool), string secureAccessGateway = default(string), List<string> secureAccessHost = default(List<string>), string secureAccessSsh = default(string), string secureAccessSshCredsUser = default(string), bool secureAccessUseInternalBastion = default(bool), bool secureAccessUseInternalSshAccess = default(bool), string signerKeyName = default(string), string token = default(string), long ttl = default(long), string uidToken = default(string))
        {
            // to ensure "allowedUsers" is required (not null)
            if (allowedUsers == null)
            {
                throw new ArgumentNullException("allowedUsers is a required property for UpdateSSHCertIssuer and cannot be null");
            }
            this.AllowedUsers = allowedUsers;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UpdateSSHCertIssuer and cannot be null");
            }
            this.Name = name;
            // to ensure "signerKeyName" is required (not null)
            if (signerKeyName == null)
            {
                throw new ArgumentNullException("signerKeyName is a required property for UpdateSSHCertIssuer and cannot be null");
            }
            this.SignerKeyName = signerKeyName;
            this.Ttl = ttl;
            this.ProviderType = providerType;
            this.AddTag = addTag;
            this.DeleteProtection = deleteProtection;
            this.Description = description;
            this.Extensions = extensions;
            // use default value if no "externalUsername" provided
            this.ExternalUsername = externalUsername ?? @"false";
            this.FixedUserClaimKeyname = fixedUserClaimKeyname;
            this.HostProvider = hostProvider;
            this.Json = json;
            this.Metadata = metadata;
            this.NewName = newName;
            this.Principals = principals;
            this.RmTag = rmTag;
            this.SecureAccessApi = secureAccessApi;
            this.SecureAccessBastionApi = secureAccessBastionApi;
            this.SecureAccessBastionSsh = secureAccessBastionSsh;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessEnforceHostsRestriction = secureAccessEnforceHostsRestriction;
            this.SecureAccessGateway = secureAccessGateway;
            this.SecureAccessHost = secureAccessHost;
            this.SecureAccessSsh = secureAccessSsh;
            this.SecureAccessSshCredsUser = secureAccessSshCredsUser;
            this.SecureAccessUseInternalBastion = secureAccessUseInternalBastion;
            this.SecureAccessUseInternalSshAccess = secureAccessUseInternalSshAccess;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Gets or Sets ProviderType
        /// </summary>
        [DataMember(Name = "ProviderType", EmitDefaultValue = false)]
        public string ProviderType { get; set; }

        /// <summary>
        /// List of the new tags that will be attached to this item
        /// </summary>
        /// <value>List of the new tags that will be attached to this item</value>
        [DataMember(Name = "add-tag", EmitDefaultValue = false)]
        public List<string> AddTag { get; set; }

        /// <summary>
        /// Users allowed to fetch the certificate, e.g root,ubuntu
        /// </summary>
        /// <value>Users allowed to fetch the certificate, e.g root,ubuntu</value>
        [DataMember(Name = "allowed-users", IsRequired = true, EmitDefaultValue = true)]
        public string AllowedUsers { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Signed certificates with extensions, e.g permit-port-forwarding&#x3D;\\\&quot;\\\&quot;
        /// </summary>
        /// <value>Signed certificates with extensions, e.g permit-port-forwarding&#x3D;\\\&quot;\\\&quot;</value>
        [DataMember(Name = "extensions", EmitDefaultValue = false)]
        public Dictionary<string, string> Extensions { get; set; }

        /// <summary>
        /// Externally provided username [true/false]
        /// </summary>
        /// <value>Externally provided username [true/false]</value>
        [DataMember(Name = "external-username", EmitDefaultValue = false)]
        public string ExternalUsername { get; set; }

        /// <summary>
        /// For externally provided users, denotes the key-name of IdP claim to extract the username from (relevant only for external-username&#x3D;true)
        /// </summary>
        /// <value>For externally provided users, denotes the key-name of IdP claim to extract the username from (relevant only for external-username&#x3D;true)</value>
        [DataMember(Name = "fixed-user-claim-keyname", EmitDefaultValue = false)]
        public string FixedUserClaimKeyname { get; set; }

        /// <summary>
        /// Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret
        /// </summary>
        /// <value>Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret</value>
        [DataMember(Name = "host-provider", EmitDefaultValue = false)]
        public string HostProvider { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Deprecated - use description
        /// </summary>
        /// <value>Deprecated - use description</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// SSH certificate issuer name
        /// </summary>
        /// <value>SSH certificate issuer name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// New item name
        /// </summary>
        /// <value>New item name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Signed certificates with principal, e.g example_role1,example_role2
        /// </summary>
        /// <value>Signed certificates with principal, e.g example_role1,example_role2</value>
        [DataMember(Name = "principals", EmitDefaultValue = false)]
        public string Principals { get; set; }

        /// <summary>
        /// List of the existent tags that will be removed from this item
        /// </summary>
        /// <value>List of the existent tags that will be removed from this item</value>
        [DataMember(Name = "rm-tag", EmitDefaultValue = false)]
        public List<string> RmTag { get; set; }

        /// <summary>
        /// Secure Access SSH control API endpoint. E.g. https://my.sra-server:9900
        /// </summary>
        /// <value>Secure Access SSH control API endpoint. E.g. https://my.sra-server:9900</value>
        [DataMember(Name = "secure-access-api", EmitDefaultValue = false)]
        public string SecureAccessApi { get; set; }

        /// <summary>
        /// Deprecated. use secure-access-api
        /// </summary>
        /// <value>Deprecated. use secure-access-api</value>
        [DataMember(Name = "secure-access-bastion-api", EmitDefaultValue = false)]
        public string SecureAccessBastionApi { get; set; }

        /// <summary>
        /// Deprecated. use secure-access-ssh
        /// </summary>
        /// <value>Deprecated. use secure-access-ssh</value>
        [DataMember(Name = "secure-access-bastion-ssh", EmitDefaultValue = false)]
        public string SecureAccessBastionSsh { get; set; }

        /// <summary>
        /// Enable/Disable secure remote access [true/false]
        /// </summary>
        /// <value>Enable/Disable secure remote access [true/false]</value>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Enable this flag to enforce connections only to the hosts listed in - -secure-access-host
        /// </summary>
        /// <value>Enable this flag to enforce connections only to the hosts listed in - -secure-access-host</value>
        [DataMember(Name = "secure-access-enforce-hosts-restriction", EmitDefaultValue = true)]
        public bool SecureAccessEnforceHostsRestriction { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessGateway
        /// </summary>
        [DataMember(Name = "secure-access-gateway", EmitDefaultValue = false)]
        public string SecureAccessGateway { get; set; }

        /// <summary>
        /// Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)
        /// </summary>
        /// <value>Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)</value>
        [DataMember(Name = "secure-access-host", EmitDefaultValue = false)]
        public List<string> SecureAccessHost { get; set; }

        /// <summary>
        /// Bastion&#39;s SSH server. E.g. my.sra-server:22
        /// </summary>
        /// <value>Bastion&#39;s SSH server. E.g. my.sra-server:22</value>
        [DataMember(Name = "secure-access-ssh", EmitDefaultValue = false)]
        public string SecureAccessSsh { get; set; }

        /// <summary>
        /// SSH username to connect to target server, must be in &#39;Allowed Users&#39; list
        /// </summary>
        /// <value>SSH username to connect to target server, must be in &#39;Allowed Users&#39; list</value>
        [DataMember(Name = "secure-access-ssh-creds-user", EmitDefaultValue = false)]
        public string SecureAccessSshCredsUser { get; set; }

        /// <summary>
        /// Deprecated. Use secure-access-use-internal-ssh-access
        /// </summary>
        /// <value>Deprecated. Use secure-access-use-internal-ssh-access</value>
        [DataMember(Name = "secure-access-use-internal-bastion", EmitDefaultValue = true)]
        public bool SecureAccessUseInternalBastion { get; set; }

        /// <summary>
        /// Use internal SSH Access
        /// </summary>
        /// <value>Use internal SSH Access</value>
        [DataMember(Name = "secure-access-use-internal-ssh-access", EmitDefaultValue = true)]
        public bool SecureAccessUseInternalSshAccess { get; set; }

        /// <summary>
        /// A key to sign the certificate with
        /// </summary>
        /// <value>A key to sign the certificate with</value>
        [DataMember(Name = "signer-key-name", IsRequired = true, EmitDefaultValue = true)]
        public string SignerKeyName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The requested Time To Live for the certificate, in seconds
        /// </summary>
        /// <value>The requested Time To Live for the certificate, in seconds</value>
        [DataMember(Name = "ttl", IsRequired = true, EmitDefaultValue = true)]
        public long Ttl { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateSSHCertIssuer {\n");
            sb.Append("  ProviderType: ").Append(ProviderType).Append("\n");
            sb.Append("  AddTag: ").Append(AddTag).Append("\n");
            sb.Append("  AllowedUsers: ").Append(AllowedUsers).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  ExternalUsername: ").Append(ExternalUsername).Append("\n");
            sb.Append("  FixedUserClaimKeyname: ").Append(FixedUserClaimKeyname).Append("\n");
            sb.Append("  HostProvider: ").Append(HostProvider).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  Principals: ").Append(Principals).Append("\n");
            sb.Append("  RmTag: ").Append(RmTag).Append("\n");
            sb.Append("  SecureAccessApi: ").Append(SecureAccessApi).Append("\n");
            sb.Append("  SecureAccessBastionApi: ").Append(SecureAccessBastionApi).Append("\n");
            sb.Append("  SecureAccessBastionSsh: ").Append(SecureAccessBastionSsh).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessEnforceHostsRestriction: ").Append(SecureAccessEnforceHostsRestriction).Append("\n");
            sb.Append("  SecureAccessGateway: ").Append(SecureAccessGateway).Append("\n");
            sb.Append("  SecureAccessHost: ").Append(SecureAccessHost).Append("\n");
            sb.Append("  SecureAccessSsh: ").Append(SecureAccessSsh).Append("\n");
            sb.Append("  SecureAccessSshCredsUser: ").Append(SecureAccessSshCredsUser).Append("\n");
            sb.Append("  SecureAccessUseInternalBastion: ").Append(SecureAccessUseInternalBastion).Append("\n");
            sb.Append("  SecureAccessUseInternalSshAccess: ").Append(SecureAccessUseInternalSshAccess).Append("\n");
            sb.Append("  SignerKeyName: ").Append(SignerKeyName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
