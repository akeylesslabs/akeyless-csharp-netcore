/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UpdateSSHCertIssuer
    /// </summary>
    [DataContract(Name = "updateSSHCertIssuer")]
    public partial class UpdateSSHCertIssuer : IEquatable<UpdateSSHCertIssuer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSSHCertIssuer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateSSHCertIssuer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSSHCertIssuer" /> class.
        /// </summary>
        /// <param name="addTag">List of the new tags that will be attached to this item.</param>
        /// <param name="allowedUsers">Users allowed to fetch the certificate, e.g root,ubuntu (required).</param>
        /// <param name="extensions">Signed certificates with extensions, e.g permit-port-forwarding&#x3D;\\\&quot;\\\&quot;.</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="metadata">A metadata about the issuer.</param>
        /// <param name="name">SSH certificate issuer name (required).</param>
        /// <param name="newName">New item name.</param>
        /// <param name="principals">Signed certificates with principal, e.g example_role1,example_role2.</param>
        /// <param name="rmTag">List of the existent tags that will be removed from this item.</param>
        /// <param name="secureAccessBastionApi">secureAccessBastionApi.</param>
        /// <param name="secureAccessBastionSsh">secureAccessBastionSsh.</param>
        /// <param name="secureAccessEnable">secureAccessEnable.</param>
        /// <param name="secureAccessHost">secureAccessHost.</param>
        /// <param name="secureAccessSshCredsUser">secureAccessSshCredsUser.</param>
        /// <param name="secureAccessUseInternalBastion">secureAccessUseInternalBastion.</param>
        /// <param name="signerKeyName">A key to sign the certificate with (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="ttl">he requested Time To Live for the certificate, in seconds (required).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public UpdateSSHCertIssuer(List<string> addTag = default(List<string>), string allowedUsers = default(string), Dictionary<string, string> extensions = default(Dictionary<string, string>), bool json = default(bool), string metadata = default(string), string name = default(string), string newName = default(string), string principals = default(string), List<string> rmTag = default(List<string>), string secureAccessBastionApi = default(string), string secureAccessBastionSsh = default(string), string secureAccessEnable = default(string), List<string> secureAccessHost = default(List<string>), string secureAccessSshCredsUser = default(string), bool secureAccessUseInternalBastion = default(bool), string signerKeyName = default(string), string token = default(string), long ttl = default(long), string uidToken = default(string))
        {
            // to ensure "allowedUsers" is required (not null)
            if (allowedUsers == null) {
                throw new ArgumentNullException("allowedUsers is a required property for UpdateSSHCertIssuer and cannot be null");
            }
            this.AllowedUsers = allowedUsers;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for UpdateSSHCertIssuer and cannot be null");
            }
            this.Name = name;
            // to ensure "signerKeyName" is required (not null)
            if (signerKeyName == null) {
                throw new ArgumentNullException("signerKeyName is a required property for UpdateSSHCertIssuer and cannot be null");
            }
            this.SignerKeyName = signerKeyName;
            this.Ttl = ttl;
            this.AddTag = addTag;
            this.Extensions = extensions;
            this.Json = json;
            this.Metadata = metadata;
            this.NewName = newName;
            this.Principals = principals;
            this.RmTag = rmTag;
            this.SecureAccessBastionApi = secureAccessBastionApi;
            this.SecureAccessBastionSsh = secureAccessBastionSsh;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessHost = secureAccessHost;
            this.SecureAccessSshCredsUser = secureAccessSshCredsUser;
            this.SecureAccessUseInternalBastion = secureAccessUseInternalBastion;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// List of the new tags that will be attached to this item
        /// </summary>
        /// <value>List of the new tags that will be attached to this item</value>
        [DataMember(Name = "add-tag", EmitDefaultValue = false)]
        public List<string> AddTag { get; set; }

        /// <summary>
        /// Users allowed to fetch the certificate, e.g root,ubuntu
        /// </summary>
        /// <value>Users allowed to fetch the certificate, e.g root,ubuntu</value>
        [DataMember(Name = "allowed-users", IsRequired = true, EmitDefaultValue = false)]
        public string AllowedUsers { get; set; }

        /// <summary>
        /// Signed certificates with extensions, e.g permit-port-forwarding&#x3D;\\\&quot;\\\&quot;
        /// </summary>
        /// <value>Signed certificates with extensions, e.g permit-port-forwarding&#x3D;\\\&quot;\\\&quot;</value>
        [DataMember(Name = "extensions", EmitDefaultValue = false)]
        public Dictionary<string, string> Extensions { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// A metadata about the issuer
        /// </summary>
        /// <value>A metadata about the issuer</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// SSH certificate issuer name
        /// </summary>
        /// <value>SSH certificate issuer name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// New item name
        /// </summary>
        /// <value>New item name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Signed certificates with principal, e.g example_role1,example_role2
        /// </summary>
        /// <value>Signed certificates with principal, e.g example_role1,example_role2</value>
        [DataMember(Name = "principals", EmitDefaultValue = false)]
        public string Principals { get; set; }

        /// <summary>
        /// List of the existent tags that will be removed from this item
        /// </summary>
        /// <value>List of the existent tags that will be removed from this item</value>
        [DataMember(Name = "rm-tag", EmitDefaultValue = false)]
        public List<string> RmTag { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessBastionApi
        /// </summary>
        [DataMember(Name = "secure-access-bastion-api", EmitDefaultValue = false)]
        public string SecureAccessBastionApi { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessBastionSsh
        /// </summary>
        [DataMember(Name = "secure-access-bastion-ssh", EmitDefaultValue = false)]
        public string SecureAccessBastionSsh { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessEnable
        /// </summary>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessHost
        /// </summary>
        [DataMember(Name = "secure-access-host", EmitDefaultValue = false)]
        public List<string> SecureAccessHost { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessSshCredsUser
        /// </summary>
        [DataMember(Name = "secure-access-ssh-creds-user", EmitDefaultValue = false)]
        public string SecureAccessSshCredsUser { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessUseInternalBastion
        /// </summary>
        [DataMember(Name = "secure-access-use-internal-bastion", EmitDefaultValue = true)]
        public bool SecureAccessUseInternalBastion { get; set; }

        /// <summary>
        /// A key to sign the certificate with
        /// </summary>
        /// <value>A key to sign the certificate with</value>
        [DataMember(Name = "signer-key-name", IsRequired = true, EmitDefaultValue = false)]
        public string SignerKeyName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// he requested Time To Live for the certificate, in seconds
        /// </summary>
        /// <value>he requested Time To Live for the certificate, in seconds</value>
        [DataMember(Name = "ttl", IsRequired = true, EmitDefaultValue = false)]
        public long Ttl { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateSSHCertIssuer {\n");
            sb.Append("  AddTag: ").Append(AddTag).Append("\n");
            sb.Append("  AllowedUsers: ").Append(AllowedUsers).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  Principals: ").Append(Principals).Append("\n");
            sb.Append("  RmTag: ").Append(RmTag).Append("\n");
            sb.Append("  SecureAccessBastionApi: ").Append(SecureAccessBastionApi).Append("\n");
            sb.Append("  SecureAccessBastionSsh: ").Append(SecureAccessBastionSsh).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessHost: ").Append(SecureAccessHost).Append("\n");
            sb.Append("  SecureAccessSshCredsUser: ").Append(SecureAccessSshCredsUser).Append("\n");
            sb.Append("  SecureAccessUseInternalBastion: ").Append(SecureAccessUseInternalBastion).Append("\n");
            sb.Append("  SignerKeyName: ").Append(SignerKeyName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateSSHCertIssuer);
        }

        /// <summary>
        /// Returns true if UpdateSSHCertIssuer instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateSSHCertIssuer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateSSHCertIssuer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddTag == input.AddTag ||
                    this.AddTag != null &&
                    input.AddTag != null &&
                    this.AddTag.SequenceEqual(input.AddTag)
                ) && 
                (
                    this.AllowedUsers == input.AllowedUsers ||
                    (this.AllowedUsers != null &&
                    this.AllowedUsers.Equals(input.AllowedUsers))
                ) && 
                (
                    this.Extensions == input.Extensions ||
                    this.Extensions != null &&
                    input.Extensions != null &&
                    this.Extensions.SequenceEqual(input.Extensions)
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                ) && 
                (
                    this.Principals == input.Principals ||
                    (this.Principals != null &&
                    this.Principals.Equals(input.Principals))
                ) && 
                (
                    this.RmTag == input.RmTag ||
                    this.RmTag != null &&
                    input.RmTag != null &&
                    this.RmTag.SequenceEqual(input.RmTag)
                ) && 
                (
                    this.SecureAccessBastionApi == input.SecureAccessBastionApi ||
                    (this.SecureAccessBastionApi != null &&
                    this.SecureAccessBastionApi.Equals(input.SecureAccessBastionApi))
                ) && 
                (
                    this.SecureAccessBastionSsh == input.SecureAccessBastionSsh ||
                    (this.SecureAccessBastionSsh != null &&
                    this.SecureAccessBastionSsh.Equals(input.SecureAccessBastionSsh))
                ) && 
                (
                    this.SecureAccessEnable == input.SecureAccessEnable ||
                    (this.SecureAccessEnable != null &&
                    this.SecureAccessEnable.Equals(input.SecureAccessEnable))
                ) && 
                (
                    this.SecureAccessHost == input.SecureAccessHost ||
                    this.SecureAccessHost != null &&
                    input.SecureAccessHost != null &&
                    this.SecureAccessHost.SequenceEqual(input.SecureAccessHost)
                ) && 
                (
                    this.SecureAccessSshCredsUser == input.SecureAccessSshCredsUser ||
                    (this.SecureAccessSshCredsUser != null &&
                    this.SecureAccessSshCredsUser.Equals(input.SecureAccessSshCredsUser))
                ) && 
                (
                    this.SecureAccessUseInternalBastion == input.SecureAccessUseInternalBastion ||
                    this.SecureAccessUseInternalBastion.Equals(input.SecureAccessUseInternalBastion)
                ) && 
                (
                    this.SignerKeyName == input.SignerKeyName ||
                    (this.SignerKeyName != null &&
                    this.SignerKeyName.Equals(input.SignerKeyName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Ttl == input.Ttl ||
                    this.Ttl.Equals(input.Ttl)
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddTag != null)
                    hashCode = hashCode * 59 + this.AddTag.GetHashCode();
                if (this.AllowedUsers != null)
                    hashCode = hashCode * 59 + this.AllowedUsers.GetHashCode();
                if (this.Extensions != null)
                    hashCode = hashCode * 59 + this.Extensions.GetHashCode();
                hashCode = hashCode * 59 + this.Json.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NewName != null)
                    hashCode = hashCode * 59 + this.NewName.GetHashCode();
                if (this.Principals != null)
                    hashCode = hashCode * 59 + this.Principals.GetHashCode();
                if (this.RmTag != null)
                    hashCode = hashCode * 59 + this.RmTag.GetHashCode();
                if (this.SecureAccessBastionApi != null)
                    hashCode = hashCode * 59 + this.SecureAccessBastionApi.GetHashCode();
                if (this.SecureAccessBastionSsh != null)
                    hashCode = hashCode * 59 + this.SecureAccessBastionSsh.GetHashCode();
                if (this.SecureAccessEnable != null)
                    hashCode = hashCode * 59 + this.SecureAccessEnable.GetHashCode();
                if (this.SecureAccessHost != null)
                    hashCode = hashCode * 59 + this.SecureAccessHost.GetHashCode();
                if (this.SecureAccessSshCredsUser != null)
                    hashCode = hashCode * 59 + this.SecureAccessSshCredsUser.GetHashCode();
                hashCode = hashCode * 59 + this.SecureAccessUseInternalBastion.GetHashCode();
                if (this.SignerKeyName != null)
                    hashCode = hashCode * 59 + this.SignerKeyName.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                hashCode = hashCode * 59 + this.Ttl.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
