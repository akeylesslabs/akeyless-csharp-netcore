/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// StaticSecretSync
    /// </summary>
    [DataContract(Name = "staticSecretSync")]
    public partial class StaticSecretSync : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaticSecretSync" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StaticSecretSync() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StaticSecretSync" /> class.
        /// </summary>
        /// <param name="filterSecretValue">JQ expression to filter or transform the secret value.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Static secret name (required).</param>
        /// <param name="varNamespace">Vault namespace, releavnt only for Hashicorp Vault Target.</param>
        /// <param name="remoteSecretName">Remote Secret Name that will be synced on the remote endpoint.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="uscName">Universal Secret Connector name, If not provided all attached USC&#39;s will be synced.</param>
        public StaticSecretSync(string filterSecretValue = default(string), bool json = false, string name = default(string), string varNamespace = default(string), string remoteSecretName = default(string), string token = default(string), string uidToken = default(string), string uscName = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for StaticSecretSync and cannot be null");
            }
            this.Name = name;
            this.FilterSecretValue = filterSecretValue;
            this.Json = json;
            this.Namespace = varNamespace;
            this.RemoteSecretName = remoteSecretName;
            this.Token = token;
            this.UidToken = uidToken;
            this.UscName = uscName;
        }

        /// <summary>
        /// JQ expression to filter or transform the secret value
        /// </summary>
        /// <value>JQ expression to filter or transform the secret value</value>
        [DataMember(Name = "filter-secret-value", EmitDefaultValue = false)]
        public string FilterSecretValue { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Static secret name
        /// </summary>
        /// <value>Static secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Vault namespace, releavnt only for Hashicorp Vault Target
        /// </summary>
        /// <value>Vault namespace, releavnt only for Hashicorp Vault Target</value>
        [DataMember(Name = "namespace", EmitDefaultValue = false)]
        public string Namespace { get; set; }

        /// <summary>
        /// Remote Secret Name that will be synced on the remote endpoint
        /// </summary>
        /// <value>Remote Secret Name that will be synced on the remote endpoint</value>
        [DataMember(Name = "remote-secret-name", EmitDefaultValue = false)]
        public string RemoteSecretName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Universal Secret Connector name, If not provided all attached USC&#39;s will be synced
        /// </summary>
        /// <value>Universal Secret Connector name, If not provided all attached USC&#39;s will be synced</value>
        [DataMember(Name = "usc-name", EmitDefaultValue = false)]
        public string UscName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StaticSecretSync {\n");
            sb.Append("  FilterSecretValue: ").Append(FilterSecretValue).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  RemoteSecretName: ").Append(RemoteSecretName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UscName: ").Append(UscName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
