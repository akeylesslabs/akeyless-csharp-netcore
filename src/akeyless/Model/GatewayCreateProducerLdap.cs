/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateProducerLdap is a command that creates ldap producer [Deprecated: Use dynamic-secret-create-ldap command]
    /// </summary>
    [DataContract(Name = "gatewayCreateProducerLdap")]
    public partial class GatewayCreateProducerLdap : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerLdap" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerLdap() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerLdap" /> class.
        /// </summary>
        /// <param name="providerType">providerType.</param>
        /// <param name="bindDn">Bind DN.</param>
        /// <param name="bindDnPassword">Bind DN Password.</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="externalUsername">Externally provided username [true/false] (default to &quot;false&quot;).</param>
        /// <param name="fixedUserClaimKeyname">For externally provided users, denotes the key-name of IdP claim to extract the username from (relevant only for external-username&#x3D;true) (default to &quot;ext_username&quot;).</param>
        /// <param name="groupDn">Group DN which the temporary user should be added.</param>
        /// <param name="hostProvider">Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="ldapCaCert">CA Certificate File Content.</param>
        /// <param name="ldapUrl">LDAP Server URL.</param>
        /// <param name="name">Dynamic secret name (required).</param>
        /// <param name="passwordLength">The length of the password to be generated.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="secureAccessDelay">The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds.</param>
        /// <param name="secureAccessEnable">Enable/Disable secure remote access [true/false].</param>
        /// <param name="secureAccessHost">Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers).</param>
        /// <param name="secureAccessRdGatewayServer">RD Gateway server.</param>
        /// <param name="secureAccessRdpDomain">Required when the Dynamic Secret is used for a domain user.</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="target">A list of linked targets to be associated, Relevant only for Secure Remote Access for ssh cert issuer, ldap rotated secret and ldap dynamic secret, To specify multiple targets use argument multiple times.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="tokenExpiration">Token expiration.</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userAttribute">User Attribute.</param>
        /// <param name="userDn">User DN.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public GatewayCreateProducerLdap(string providerType = default(string), string bindDn = default(string), string bindDnPassword = default(string), string deleteProtection = default(string), string externalUsername = @"false", string fixedUserClaimKeyname = @"ext_username", string groupDn = default(string), string hostProvider = default(string), bool json = false, string ldapCaCert = default(string), string ldapUrl = default(string), string name = default(string), string passwordLength = default(string), string producerEncryptionKeyName = default(string), long secureAccessDelay = default(long), string secureAccessEnable = default(string), List<string> secureAccessHost = default(List<string>), string secureAccessRdGatewayServer = default(string), string secureAccessRdpDomain = default(string), List<string> tags = default(List<string>), List<string> target = default(List<string>), string targetName = default(string), string token = default(string), string tokenExpiration = default(string), string uidToken = default(string), string userAttribute = default(string), string userDn = default(string), string userTtl = @"60m")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayCreateProducerLdap and cannot be null");
            }
            this.Name = name;
            this.ProviderType = providerType;
            this.BindDn = bindDn;
            this.BindDnPassword = bindDnPassword;
            this.DeleteProtection = deleteProtection;
            // use default value if no "externalUsername" provided
            this.ExternalUsername = externalUsername ?? @"false";
            // use default value if no "fixedUserClaimKeyname" provided
            this.FixedUserClaimKeyname = fixedUserClaimKeyname ?? @"ext_username";
            this.GroupDn = groupDn;
            this.HostProvider = hostProvider;
            this.Json = json;
            this.LdapCaCert = ldapCaCert;
            this.LdapUrl = ldapUrl;
            this.PasswordLength = passwordLength;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.SecureAccessDelay = secureAccessDelay;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessHost = secureAccessHost;
            this.SecureAccessRdGatewayServer = secureAccessRdGatewayServer;
            this.SecureAccessRdpDomain = secureAccessRdpDomain;
            this.Tags = tags;
            this.Target = target;
            this.TargetName = targetName;
            this.Token = token;
            this.TokenExpiration = tokenExpiration;
            this.UidToken = uidToken;
            this.UserAttribute = userAttribute;
            this.UserDn = userDn;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? @"60m";
        }

        /// <summary>
        /// Gets or Sets ProviderType
        /// </summary>
        [DataMember(Name = "ProviderType", EmitDefaultValue = false)]
        public string ProviderType { get; set; }

        /// <summary>
        /// Bind DN
        /// </summary>
        /// <value>Bind DN</value>
        [DataMember(Name = "bind-dn", EmitDefaultValue = false)]
        public string BindDn { get; set; }

        /// <summary>
        /// Bind DN Password
        /// </summary>
        /// <value>Bind DN Password</value>
        [DataMember(Name = "bind-dn-password", EmitDefaultValue = false)]
        public string BindDnPassword { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Externally provided username [true/false]
        /// </summary>
        /// <value>Externally provided username [true/false]</value>
        [DataMember(Name = "external-username", EmitDefaultValue = false)]
        public string ExternalUsername { get; set; }

        /// <summary>
        /// For externally provided users, denotes the key-name of IdP claim to extract the username from (relevant only for external-username&#x3D;true)
        /// </summary>
        /// <value>For externally provided users, denotes the key-name of IdP claim to extract the username from (relevant only for external-username&#x3D;true)</value>
        [DataMember(Name = "fixed-user-claim-keyname", EmitDefaultValue = false)]
        public string FixedUserClaimKeyname { get; set; }

        /// <summary>
        /// Group DN which the temporary user should be added
        /// </summary>
        /// <value>Group DN which the temporary user should be added</value>
        [DataMember(Name = "group-dn", EmitDefaultValue = false)]
        public string GroupDn { get; set; }

        /// <summary>
        /// Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret
        /// </summary>
        /// <value>Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret</value>
        [DataMember(Name = "host-provider", EmitDefaultValue = false)]
        public string HostProvider { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// CA Certificate File Content
        /// </summary>
        /// <value>CA Certificate File Content</value>
        [DataMember(Name = "ldap-ca-cert", EmitDefaultValue = false)]
        public string LdapCaCert { get; set; }

        /// <summary>
        /// LDAP Server URL
        /// </summary>
        /// <value>LDAP Server URL</value>
        [DataMember(Name = "ldap-url", EmitDefaultValue = false)]
        public string LdapUrl { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The length of the password to be generated
        /// </summary>
        /// <value>The length of the password to be generated</value>
        [DataMember(Name = "password-length", EmitDefaultValue = false)]
        public string PasswordLength { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds
        /// </summary>
        /// <value>The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds</value>
        [DataMember(Name = "secure-access-delay", EmitDefaultValue = false)]
        public long SecureAccessDelay { get; set; }

        /// <summary>
        /// Enable/Disable secure remote access [true/false]
        /// </summary>
        /// <value>Enable/Disable secure remote access [true/false]</value>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)
        /// </summary>
        /// <value>Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)</value>
        [DataMember(Name = "secure-access-host", EmitDefaultValue = false)]
        public List<string> SecureAccessHost { get; set; }

        /// <summary>
        /// RD Gateway server
        /// </summary>
        /// <value>RD Gateway server</value>
        [DataMember(Name = "secure-access-rd-gateway-server", EmitDefaultValue = false)]
        public string SecureAccessRdGatewayServer { get; set; }

        /// <summary>
        /// Required when the Dynamic Secret is used for a domain user
        /// </summary>
        /// <value>Required when the Dynamic Secret is used for a domain user</value>
        [DataMember(Name = "secure-access-rdp-domain", EmitDefaultValue = false)]
        public string SecureAccessRdpDomain { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// A list of linked targets to be associated, Relevant only for Secure Remote Access for ssh cert issuer, ldap rotated secret and ldap dynamic secret, To specify multiple targets use argument multiple times
        /// </summary>
        /// <value>A list of linked targets to be associated, Relevant only for Secure Remote Access for ssh cert issuer, ldap rotated secret and ldap dynamic secret, To specify multiple targets use argument multiple times</value>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public List<string> Target { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Token expiration
        /// </summary>
        /// <value>Token expiration</value>
        [DataMember(Name = "token-expiration", EmitDefaultValue = false)]
        public string TokenExpiration { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User Attribute
        /// </summary>
        /// <value>User Attribute</value>
        [DataMember(Name = "user-attribute", EmitDefaultValue = false)]
        public string UserAttribute { get; set; }

        /// <summary>
        /// User DN
        /// </summary>
        /// <value>User DN</value>
        [DataMember(Name = "user-dn", EmitDefaultValue = false)]
        public string UserDn { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerLdap {\n");
            sb.Append("  ProviderType: ").Append(ProviderType).Append("\n");
            sb.Append("  BindDn: ").Append(BindDn).Append("\n");
            sb.Append("  BindDnPassword: ").Append(BindDnPassword).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  ExternalUsername: ").Append(ExternalUsername).Append("\n");
            sb.Append("  FixedUserClaimKeyname: ").Append(FixedUserClaimKeyname).Append("\n");
            sb.Append("  GroupDn: ").Append(GroupDn).Append("\n");
            sb.Append("  HostProvider: ").Append(HostProvider).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  LdapCaCert: ").Append(LdapCaCert).Append("\n");
            sb.Append("  LdapUrl: ").Append(LdapUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PasswordLength: ").Append(PasswordLength).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  SecureAccessDelay: ").Append(SecureAccessDelay).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessHost: ").Append(SecureAccessHost).Append("\n");
            sb.Append("  SecureAccessRdGatewayServer: ").Append(SecureAccessRdGatewayServer).Append("\n");
            sb.Append("  SecureAccessRdpDomain: ").Append(SecureAccessRdpDomain).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  TokenExpiration: ").Append(TokenExpiration).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserAttribute: ").Append(UserAttribute).Append("\n");
            sb.Append("  UserDn: ").Append(UserDn).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
