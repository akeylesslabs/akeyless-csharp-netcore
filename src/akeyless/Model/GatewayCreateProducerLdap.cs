/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateProducerLdap is a command that creates ldap producer
    /// </summary>
    [DataContract(Name = "gatewayCreateProducerLdap")]
    public partial class GatewayCreateProducerLdap : IEquatable<GatewayCreateProducerLdap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerLdap" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerLdap() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerLdap" /> class.
        /// </summary>
        /// <param name="bindDn">Bind DN.</param>
        /// <param name="bindDnPassword">Bind DN Password.</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this item.</param>
        /// <param name="externalUsername">Fixed user (default to &quot;false&quot;).</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="ldapCaCert">CA Certificate File Content.</param>
        /// <param name="ldapUrl">LDAP Server URL.</param>
        /// <param name="name">Producer name (required).</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="tags">List of the tags attached to this secret.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="tokenExpiration">Token expiration.</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userAttribute">User Attribute.</param>
        /// <param name="userDn">User DN.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public GatewayCreateProducerLdap(string bindDn = default(string), string bindDnPassword = default(string), string deleteProtection = default(string), string externalUsername = "false", bool json = default(bool), string ldapCaCert = default(string), string ldapUrl = default(string), string name = default(string), string producerEncryptionKeyName = default(string), List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string tokenExpiration = default(string), string uidToken = default(string), string userAttribute = default(string), string userDn = default(string), string userTtl = "60m")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayCreateProducerLdap and cannot be null");
            }
            this.Name = name;
            this.BindDn = bindDn;
            this.BindDnPassword = bindDnPassword;
            this.DeleteProtection = deleteProtection;
            // use default value if no "externalUsername" provided
            this.ExternalUsername = externalUsername ?? "false";
            this.Json = json;
            this.LdapCaCert = ldapCaCert;
            this.LdapUrl = ldapUrl;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.TokenExpiration = tokenExpiration;
            this.UidToken = uidToken;
            this.UserAttribute = userAttribute;
            this.UserDn = userDn;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "60m";
        }

        /// <summary>
        /// Bind DN
        /// </summary>
        /// <value>Bind DN</value>
        [DataMember(Name = "bind-dn", EmitDefaultValue = false)]
        public string BindDn { get; set; }

        /// <summary>
        /// Bind DN Password
        /// </summary>
        /// <value>Bind DN Password</value>
        [DataMember(Name = "bind-dn-password", EmitDefaultValue = false)]
        public string BindDnPassword { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this item
        /// </summary>
        /// <value>Protection from accidental deletion of this item</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Fixed user
        /// </summary>
        /// <value>Fixed user</value>
        [DataMember(Name = "external-username", EmitDefaultValue = false)]
        public string ExternalUsername { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// CA Certificate File Content
        /// </summary>
        /// <value>CA Certificate File Content</value>
        [DataMember(Name = "ldap-ca-cert", EmitDefaultValue = false)]
        public string LdapCaCert { get; set; }

        /// <summary>
        /// LDAP Server URL
        /// </summary>
        /// <value>LDAP Server URL</value>
        [DataMember(Name = "ldap-url", EmitDefaultValue = false)]
        public string LdapUrl { get; set; }

        /// <summary>
        /// Producer name
        /// </summary>
        /// <value>Producer name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// List of the tags attached to this secret
        /// </summary>
        /// <value>List of the tags attached to this secret</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Token expiration
        /// </summary>
        /// <value>Token expiration</value>
        [DataMember(Name = "token-expiration", EmitDefaultValue = false)]
        public string TokenExpiration { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User Attribute
        /// </summary>
        /// <value>User Attribute</value>
        [DataMember(Name = "user-attribute", EmitDefaultValue = false)]
        public string UserAttribute { get; set; }

        /// <summary>
        /// User DN
        /// </summary>
        /// <value>User DN</value>
        [DataMember(Name = "user-dn", EmitDefaultValue = false)]
        public string UserDn { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerLdap {\n");
            sb.Append("  BindDn: ").Append(BindDn).Append("\n");
            sb.Append("  BindDnPassword: ").Append(BindDnPassword).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  ExternalUsername: ").Append(ExternalUsername).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  LdapCaCert: ").Append(LdapCaCert).Append("\n");
            sb.Append("  LdapUrl: ").Append(LdapUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  TokenExpiration: ").Append(TokenExpiration).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserAttribute: ").Append(UserAttribute).Append("\n");
            sb.Append("  UserDn: ").Append(UserDn).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayCreateProducerLdap);
        }

        /// <summary>
        /// Returns true if GatewayCreateProducerLdap instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayCreateProducerLdap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayCreateProducerLdap input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BindDn == input.BindDn ||
                    (this.BindDn != null &&
                    this.BindDn.Equals(input.BindDn))
                ) && 
                (
                    this.BindDnPassword == input.BindDnPassword ||
                    (this.BindDnPassword != null &&
                    this.BindDnPassword.Equals(input.BindDnPassword))
                ) && 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    (this.DeleteProtection != null &&
                    this.DeleteProtection.Equals(input.DeleteProtection))
                ) && 
                (
                    this.ExternalUsername == input.ExternalUsername ||
                    (this.ExternalUsername != null &&
                    this.ExternalUsername.Equals(input.ExternalUsername))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.LdapCaCert == input.LdapCaCert ||
                    (this.LdapCaCert != null &&
                    this.LdapCaCert.Equals(input.LdapCaCert))
                ) && 
                (
                    this.LdapUrl == input.LdapUrl ||
                    (this.LdapUrl != null &&
                    this.LdapUrl.Equals(input.LdapUrl))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.TokenExpiration == input.TokenExpiration ||
                    (this.TokenExpiration != null &&
                    this.TokenExpiration.Equals(input.TokenExpiration))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserAttribute == input.UserAttribute ||
                    (this.UserAttribute != null &&
                    this.UserAttribute.Equals(input.UserAttribute))
                ) && 
                (
                    this.UserDn == input.UserDn ||
                    (this.UserDn != null &&
                    this.UserDn.Equals(input.UserDn))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BindDn != null)
                {
                    hashCode = (hashCode * 59) + this.BindDn.GetHashCode();
                }
                if (this.BindDnPassword != null)
                {
                    hashCode = (hashCode * 59) + this.BindDnPassword.GetHashCode();
                }
                if (this.DeleteProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteProtection.GetHashCode();
                }
                if (this.ExternalUsername != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalUsername.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.LdapCaCert != null)
                {
                    hashCode = (hashCode * 59) + this.LdapCaCert.GetHashCode();
                }
                if (this.LdapUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LdapUrl.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ProducerEncryptionKeyName != null)
                {
                    hashCode = (hashCode * 59) + this.ProducerEncryptionKeyName.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TargetName != null)
                {
                    hashCode = (hashCode * 59) + this.TargetName.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.TokenExpiration != null)
                {
                    hashCode = (hashCode * 59) + this.TokenExpiration.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UserAttribute != null)
                {
                    hashCode = (hashCode * 59) + this.UserAttribute.GetHashCode();
                }
                if (this.UserDn != null)
                {
                    hashCode = (hashCode * 59) + this.UserDn.GetHashCode();
                }
                if (this.UserTtl != null)
                {
                    hashCode = (hashCode * 59) + this.UserTtl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
