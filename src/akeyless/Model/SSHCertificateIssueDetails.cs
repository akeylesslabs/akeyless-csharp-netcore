/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SSHCertificateIssueDetails
    /// </summary>
    [DataContract]
    public partial class SSHCertificateIssueDetails :  IEquatable<SSHCertificateIssueDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SSHCertificateIssueDetails" /> class.
        /// </summary>
        /// <param name="allowedDomains">Relevant for host certificate.</param>
        /// <param name="allowedUserKeyLengths">allowedUserKeyLengths.</param>
        /// <param name="allowedUsers">Relevant for user certificate.</param>
        /// <param name="certType">certType.</param>
        /// <param name="criticalOptions">criticalOptions.</param>
        /// <param name="extensions">extensions.</param>
        /// <param name="principals">principals.</param>
        /// <param name="staticKeyId">In case it is empty, the key ID will be combination of user identifiers and a random string.</param>
        public SSHCertificateIssueDetails(List<string> allowedDomains = default(List<string>), Dictionary<string, long> allowedUserKeyLengths = default(Dictionary<string, long>), List<string> allowedUsers = default(List<string>), int certType = default(int), Dictionary<string, string> criticalOptions = default(Dictionary<string, string>), Dictionary<string, string> extensions = default(Dictionary<string, string>), List<string> principals = default(List<string>), string staticKeyId = default(string))
        {
            this.AllowedDomains = allowedDomains;
            this.AllowedUserKeyLengths = allowedUserKeyLengths;
            this.AllowedUsers = allowedUsers;
            this.CertType = certType;
            this.CriticalOptions = criticalOptions;
            this.Extensions = extensions;
            this.Principals = principals;
            this.StaticKeyId = staticKeyId;
        }
        
        /// <summary>
        /// Relevant for host certificate
        /// </summary>
        /// <value>Relevant for host certificate</value>
        [DataMember(Name="allowed_domains", EmitDefaultValue=false)]
        public List<string> AllowedDomains { get; set; }

        /// <summary>
        /// Gets or Sets AllowedUserKeyLengths
        /// </summary>
        [DataMember(Name="allowed_user_key_lengths", EmitDefaultValue=false)]
        public Dictionary<string, long> AllowedUserKeyLengths { get; set; }

        /// <summary>
        /// Relevant for user certificate
        /// </summary>
        /// <value>Relevant for user certificate</value>
        [DataMember(Name="allowed_users", EmitDefaultValue=false)]
        public List<string> AllowedUsers { get; set; }

        /// <summary>
        /// Gets or Sets CertType
        /// </summary>
        [DataMember(Name="cert_type", EmitDefaultValue=false)]
        public int CertType { get; set; }

        /// <summary>
        /// Gets or Sets CriticalOptions
        /// </summary>
        [DataMember(Name="critical_options", EmitDefaultValue=false)]
        public Dictionary<string, string> CriticalOptions { get; set; }

        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [DataMember(Name="extensions", EmitDefaultValue=false)]
        public Dictionary<string, string> Extensions { get; set; }

        /// <summary>
        /// Gets or Sets Principals
        /// </summary>
        [DataMember(Name="principals", EmitDefaultValue=false)]
        public List<string> Principals { get; set; }

        /// <summary>
        /// In case it is empty, the key ID will be combination of user identifiers and a random string
        /// </summary>
        /// <value>In case it is empty, the key ID will be combination of user identifiers and a random string</value>
        [DataMember(Name="static_key_id", EmitDefaultValue=false)]
        public string StaticKeyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SSHCertificateIssueDetails {\n");
            sb.Append("  AllowedDomains: ").Append(AllowedDomains).Append("\n");
            sb.Append("  AllowedUserKeyLengths: ").Append(AllowedUserKeyLengths).Append("\n");
            sb.Append("  AllowedUsers: ").Append(AllowedUsers).Append("\n");
            sb.Append("  CertType: ").Append(CertType).Append("\n");
            sb.Append("  CriticalOptions: ").Append(CriticalOptions).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  Principals: ").Append(Principals).Append("\n");
            sb.Append("  StaticKeyId: ").Append(StaticKeyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SSHCertificateIssueDetails);
        }

        /// <summary>
        /// Returns true if SSHCertificateIssueDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SSHCertificateIssueDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SSHCertificateIssueDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowedDomains == input.AllowedDomains ||
                    this.AllowedDomains != null &&
                    input.AllowedDomains != null &&
                    this.AllowedDomains.SequenceEqual(input.AllowedDomains)
                ) && 
                (
                    this.AllowedUserKeyLengths == input.AllowedUserKeyLengths ||
                    this.AllowedUserKeyLengths != null &&
                    input.AllowedUserKeyLengths != null &&
                    this.AllowedUserKeyLengths.SequenceEqual(input.AllowedUserKeyLengths)
                ) && 
                (
                    this.AllowedUsers == input.AllowedUsers ||
                    this.AllowedUsers != null &&
                    input.AllowedUsers != null &&
                    this.AllowedUsers.SequenceEqual(input.AllowedUsers)
                ) && 
                (
                    this.CertType == input.CertType ||
                    this.CertType.Equals(input.CertType)
                ) && 
                (
                    this.CriticalOptions == input.CriticalOptions ||
                    this.CriticalOptions != null &&
                    input.CriticalOptions != null &&
                    this.CriticalOptions.SequenceEqual(input.CriticalOptions)
                ) && 
                (
                    this.Extensions == input.Extensions ||
                    this.Extensions != null &&
                    input.Extensions != null &&
                    this.Extensions.SequenceEqual(input.Extensions)
                ) && 
                (
                    this.Principals == input.Principals ||
                    this.Principals != null &&
                    input.Principals != null &&
                    this.Principals.SequenceEqual(input.Principals)
                ) && 
                (
                    this.StaticKeyId == input.StaticKeyId ||
                    (this.StaticKeyId != null &&
                    this.StaticKeyId.Equals(input.StaticKeyId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowedDomains != null)
                    hashCode = hashCode * 59 + this.AllowedDomains.GetHashCode();
                if (this.AllowedUserKeyLengths != null)
                    hashCode = hashCode * 59 + this.AllowedUserKeyLengths.GetHashCode();
                if (this.AllowedUsers != null)
                    hashCode = hashCode * 59 + this.AllowedUsers.GetHashCode();
                hashCode = hashCode * 59 + this.CertType.GetHashCode();
                if (this.CriticalOptions != null)
                    hashCode = hashCode * 59 + this.CriticalOptions.GetHashCode();
                if (this.Extensions != null)
                    hashCode = hashCode * 59 + this.Extensions.GetHashCode();
                if (this.Principals != null)
                    hashCode = hashCode * 59 + this.Principals.GetHashCode();
                if (this.StaticKeyId != null)
                    hashCode = hashCode * 59 + this.StaticKeyId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
