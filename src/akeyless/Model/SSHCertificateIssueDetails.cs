/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SSHCertificateIssueDetails
    /// </summary>
    [DataContract(Name = "SSHCertificateIssueDetails")]
    public partial class SSHCertificateIssueDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SSHCertificateIssueDetails" /> class.
        /// </summary>
        /// <param name="allowedDomains">Relevant for host certificate.</param>
        /// <param name="allowedUserKeyLengths">allowedUserKeyLengths.</param>
        /// <param name="allowedUsers">Relevant for user certificate.</param>
        /// <param name="certType">certType.</param>
        /// <param name="criticalOptions">criticalOptions.</param>
        /// <param name="extensions">extensions.</param>
        /// <param name="externallyProvidedUserSubClaimKey">ExternallyProvidedUserSubClaimKey is the claim key name where the user name should be taken from.</param>
        /// <param name="isExternallyProvidedUser">IsExternallyProvidedUser is true if allow users should be taken from claims and not from AllowedUsers.</param>
        /// <param name="principals">principals.</param>
        /// <param name="staticKeyId">In case it is empty, the key ID will be combination of user identifiers and a random string.</param>
        public SSHCertificateIssueDetails(List<string> allowedDomains = default(List<string>), Dictionary<string, long> allowedUserKeyLengths = default(Dictionary<string, long>), List<string> allowedUsers = default(List<string>), int certType = default(int), Dictionary<string, string> criticalOptions = default(Dictionary<string, string>), Dictionary<string, string> extensions = default(Dictionary<string, string>), string externallyProvidedUserSubClaimKey = default(string), bool isExternallyProvidedUser = default(bool), List<string> principals = default(List<string>), string staticKeyId = default(string))
        {
            this.AllowedDomains = allowedDomains;
            this.AllowedUserKeyLengths = allowedUserKeyLengths;
            this.AllowedUsers = allowedUsers;
            this.CertType = certType;
            this.CriticalOptions = criticalOptions;
            this.Extensions = extensions;
            this.ExternallyProvidedUserSubClaimKey = externallyProvidedUserSubClaimKey;
            this.IsExternallyProvidedUser = isExternallyProvidedUser;
            this.Principals = principals;
            this.StaticKeyId = staticKeyId;
        }

        /// <summary>
        /// Relevant for host certificate
        /// </summary>
        /// <value>Relevant for host certificate</value>
        [DataMember(Name = "allowed_domains", EmitDefaultValue = false)]
        public List<string> AllowedDomains { get; set; }

        /// <summary>
        /// Gets or Sets AllowedUserKeyLengths
        /// </summary>
        [DataMember(Name = "allowed_user_key_lengths", EmitDefaultValue = false)]
        public Dictionary<string, long> AllowedUserKeyLengths { get; set; }

        /// <summary>
        /// Relevant for user certificate
        /// </summary>
        /// <value>Relevant for user certificate</value>
        [DataMember(Name = "allowed_users", EmitDefaultValue = false)]
        public List<string> AllowedUsers { get; set; }

        /// <summary>
        /// Gets or Sets CertType
        /// </summary>
        [DataMember(Name = "cert_type", EmitDefaultValue = false)]
        public int CertType { get; set; }

        /// <summary>
        /// Gets or Sets CriticalOptions
        /// </summary>
        [DataMember(Name = "critical_options", EmitDefaultValue = false)]
        public Dictionary<string, string> CriticalOptions { get; set; }

        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [DataMember(Name = "extensions", EmitDefaultValue = false)]
        public Dictionary<string, string> Extensions { get; set; }

        /// <summary>
        /// ExternallyProvidedUserSubClaimKey is the claim key name where the user name should be taken from
        /// </summary>
        /// <value>ExternallyProvidedUserSubClaimKey is the claim key name where the user name should be taken from</value>
        [DataMember(Name = "externally_provided_user_sub_claim_key", EmitDefaultValue = false)]
        public string ExternallyProvidedUserSubClaimKey { get; set; }

        /// <summary>
        /// IsExternallyProvidedUser is true if allow users should be taken from claims and not from AllowedUsers
        /// </summary>
        /// <value>IsExternallyProvidedUser is true if allow users should be taken from claims and not from AllowedUsers</value>
        [DataMember(Name = "is_externally_provided_user", EmitDefaultValue = true)]
        public bool IsExternallyProvidedUser { get; set; }

        /// <summary>
        /// Gets or Sets Principals
        /// </summary>
        [DataMember(Name = "principals", EmitDefaultValue = false)]
        public List<string> Principals { get; set; }

        /// <summary>
        /// In case it is empty, the key ID will be combination of user identifiers and a random string
        /// </summary>
        /// <value>In case it is empty, the key ID will be combination of user identifiers and a random string</value>
        [DataMember(Name = "static_key_id", EmitDefaultValue = false)]
        public string StaticKeyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SSHCertificateIssueDetails {\n");
            sb.Append("  AllowedDomains: ").Append(AllowedDomains).Append("\n");
            sb.Append("  AllowedUserKeyLengths: ").Append(AllowedUserKeyLengths).Append("\n");
            sb.Append("  AllowedUsers: ").Append(AllowedUsers).Append("\n");
            sb.Append("  CertType: ").Append(CertType).Append("\n");
            sb.Append("  CriticalOptions: ").Append(CriticalOptions).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  ExternallyProvidedUserSubClaimKey: ").Append(ExternallyProvidedUserSubClaimKey).Append("\n");
            sb.Append("  IsExternallyProvidedUser: ").Append(IsExternallyProvidedUser).Append("\n");
            sb.Append("  Principals: ").Append(Principals).Append("\n");
            sb.Append("  StaticKeyId: ").Append(StaticKeyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
