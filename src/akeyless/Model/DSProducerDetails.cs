/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// DSProducerDetails
    /// </summary>
    [DataContract(Name = "DSProducerDetails")]
    public partial class DSProducerDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DSProducerDetails" /> class.
        /// </summary>
        /// <param name="accessTokenManagerId">accessTokenManagerId.</param>
        /// <param name="aclRules">aclRules.</param>
        /// <param name="active">active.</param>
        /// <param name="adminName">adminName.</param>
        /// <param name="adminPwd">adminPwd.</param>
        /// <param name="adminRotationIntervalDays">adminRotationIntervalDays.</param>
        /// <param name="administrativePort">administrativePort.</param>
        /// <param name="artifactoryAdminApikey">artifactoryAdminApikey.</param>
        /// <param name="artifactoryAdminUsername">artifactoryAdminUsername.</param>
        /// <param name="artifactoryBaseUrl">artifactoryBaseUrl.</param>
        /// <param name="artifactoryTokenAudience">artifactoryTokenAudience.</param>
        /// <param name="artifactoryTokenScope">artifactoryTokenScope.</param>
        /// <param name="authorizationPort">authorizationPort.</param>
        /// <param name="awsAccessKeyId">awsAccessKeyId.</param>
        /// <param name="awsAccessMode">awsAccessMode.</param>
        /// <param name="awsRegion">awsRegion.</param>
        /// <param name="awsRoleArns">awsRoleArns.</param>
        /// <param name="awsSecretAccessKey">awsSecretAccessKey.</param>
        /// <param name="awsSessionTags">awsSessionTags.</param>
        /// <param name="awsSessionToken">awsSessionToken.</param>
        /// <param name="awsTransitiveTagKeys">awsTransitiveTagKeys.</param>
        /// <param name="awsUserConsoleAccess">awsUserConsoleAccess.</param>
        /// <param name="awsUserGroups">awsUserGroups.</param>
        /// <param name="awsUserPolicies">awsUserPolicies.</param>
        /// <param name="awsUserProgrammaticAccess">awsUserProgrammaticAccess.</param>
        /// <param name="azureAppObjectId">azureAppObjectId.</param>
        /// <param name="azureClientId">azureClientId.</param>
        /// <param name="azureClientSecret">azureClientSecret.</param>
        /// <param name="azureFixedUserNameSubClaimKey">azureFixedUserNameSubClaimKey.</param>
        /// <param name="azureFixedUserOnly">azureFixedUserOnly.</param>
        /// <param name="azureResourceGroupName">azureResourceGroupName.</param>
        /// <param name="azureResourceName">azureResourceName.</param>
        /// <param name="azureSubscriptionId">azureSubscriptionId.</param>
        /// <param name="azureTenantId">azureTenantId.</param>
        /// <param name="azureUserGroupsObjId">azureUserGroupsObjId.</param>
        /// <param name="azureUserPortalAccess">azureUserPortalAccess.</param>
        /// <param name="azureUserProgrammaticAccess">azureUserProgrammaticAccess.</param>
        /// <param name="azureUserRolesTemplateId">azureUserRolesTemplateId.</param>
        /// <param name="azureUsername">azureUsername.</param>
        /// <param name="cassandraCreationStatements">cassandraCreationStatements.</param>
        /// <param name="chefOrganizations">chefOrganizations.</param>
        /// <param name="chefServerAccessMode">chefServerAccessMode.</param>
        /// <param name="chefServerHostName">chefServerHostName.</param>
        /// <param name="chefServerKey">chefServerKey.</param>
        /// <param name="chefServerPort">chefServerPort.</param>
        /// <param name="chefServerUrl">chefServerUrl.</param>
        /// <param name="chefServerUsername">chefServerUsername.</param>
        /// <param name="chefSkipSsl">chefSkipSsl.</param>
        /// <param name="clientAuthenticationType">clientAuthenticationType.</param>
        /// <param name="cloudServiceProvider">cloudServiceProvider.</param>
        /// <param name="clusterMode">clusterMode.</param>
        /// <param name="connectionType">connectionType.</param>
        /// <param name="createSyncUrl">createSyncUrl.</param>
        /// <param name="dbClientId">dbClientId.</param>
        /// <param name="dbClientSecret">dbClientSecret.</param>
        /// <param name="dbHostName">dbHostName.</param>
        /// <param name="dbIsolationLevel">dbIsolationLevel.</param>
        /// <param name="dbMaxIdleConns">dbMaxIdleConns.</param>
        /// <param name="dbMaxOpenConns">dbMaxOpenConns.</param>
        /// <param name="dbName">dbName.</param>
        /// <param name="dbPort">dbPort.</param>
        /// <param name="dbPrivateKey">(Optional) Private Key in PEM format.</param>
        /// <param name="dbPrivateKeyPassphrase">dbPrivateKeyPassphrase.</param>
        /// <param name="dbPwd">dbPwd.</param>
        /// <param name="dbServerCertificates">(Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host&#39;s root CA set..</param>
        /// <param name="dbServerName">(Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client&#39;s handshake to support virtual hosting unless it is an IP address..</param>
        /// <param name="dbTenantId">dbTenantId.</param>
        /// <param name="dbUserName">dbUserName.</param>
        /// <param name="deleteProtection">deleteProtection.</param>
        /// <param name="dynamicSecretId">dynamicSecretId.</param>
        /// <param name="dynamicSecretKey">dynamicSecretKey.</param>
        /// <param name="dynamicSecretName">dynamicSecretName.</param>
        /// <param name="dynamicSecretType">dynamicSecretType.</param>
        /// <param name="eksAccessKeyId">eksAccessKeyId.</param>
        /// <param name="eksAssumeRole">eksAssumeRole.</param>
        /// <param name="eksClusterCaCertificate">eksClusterCaCertificate.</param>
        /// <param name="eksClusterEndpoint">eksClusterEndpoint.</param>
        /// <param name="eksClusterName">eksClusterName.</param>
        /// <param name="eksRegion">eksRegion.</param>
        /// <param name="eksSecretAccessKey">eksSecretAccessKey.</param>
        /// <param name="enableAdminRotation">enableAdminRotation.</param>
        /// <param name="enforceReplayPrevention">relevant for PRIVATE_KEY_JWT client authentication type.</param>
        /// <param name="expirationDate">expirationDate.</param>
        /// <param name="externallyProvidedUser">externallyProvidedUser.</param>
        /// <param name="failureMessage">failureMessage.</param>
        /// <param name="fixedUserOnly">fixedUserOnly.</param>
        /// <param name="gcpKeyAlgo">gcpKeyAlgo.</param>
        /// <param name="gcpRoleBindings">gcpRoleBindings.</param>
        /// <param name="gcpServiceAccountEmail">GCPServiceAccountEmail overrides the deprecated field from the target.</param>
        /// <param name="gcpServiceAccountKey">gcpServiceAccountKey.</param>
        /// <param name="gcpServiceAccountKeyBase64">gcpServiceAccountKeyBase64.</param>
        /// <param name="gcpServiceAccountKeyId">gcpServiceAccountKeyId.</param>
        /// <param name="gcpServiceAccountType">gcpServiceAccountType.</param>
        /// <param name="gcpTmpServiceAccountName">gcpTmpServiceAccountName.</param>
        /// <param name="gcpTokenLifetime">gcpTokenLifetime.</param>
        /// <param name="gcpTokenScope">gcpTokenScope.</param>
        /// <param name="gcpTokenType">gcpTokenType.</param>
        /// <param name="githubAppId">githubAppId.</param>
        /// <param name="githubAppPrivateKey">githubAppPrivateKey.</param>
        /// <param name="githubBaseUrl">githubBaseUrl.</param>
        /// <param name="githubInstallationId">githubInstallationId.</param>
        /// <param name="githubInstallationTokenPermissions">githubInstallationTokenPermissions.</param>
        /// <param name="githubInstallationTokenRepositories">githubInstallationTokenRepositories.</param>
        /// <param name="githubInstallationTokenRepositoriesIds">githubInstallationTokenRepositoriesIds.</param>
        /// <param name="githubOrganizationName">githubOrganizationName.</param>
        /// <param name="githubRepositoryPath">githubRepositoryPath.</param>
        /// <param name="gitlabAccessToken">gitlabAccessToken.</param>
        /// <param name="gitlabAccessType">gitlabAccessType.</param>
        /// <param name="gitlabCertificate">gitlabCertificate.</param>
        /// <param name="gitlabGroupName">gitlabGroupName.</param>
        /// <param name="gitlabProjectName">gitlabProjectName.</param>
        /// <param name="gitlabRole">gitlabRole.</param>
        /// <param name="gitlabTokenScope">gitlabTokenScope.</param>
        /// <param name="gitlabUrl">gitlabUrl.</param>
        /// <param name="gkeClusterCaCertificate">gkeClusterCaCertificate.</param>
        /// <param name="gkeClusterEndpoint">gkeClusterEndpoint.</param>
        /// <param name="gkeClusterName">gkeClusterName.</param>
        /// <param name="gkeServiceAccountKey">gkeServiceAccountKey.</param>
        /// <param name="gkeServiceAccountName">gkeServiceAccountName.</param>
        /// <param name="googleWorkspaceAccessMode">googleWorkspaceAccessMode.</param>
        /// <param name="googleWorkspaceAdminName">googleWorkspaceAdminName.</param>
        /// <param name="googleWorkspaceFixedUserNameSubClaimKey">googleWorkspaceFixedUserNameSubClaimKey.</param>
        /// <param name="googleWorkspaceGroupName">googleWorkspaceGroupName.</param>
        /// <param name="googleWorkspaceGroupRole">googleWorkspaceGroupRole.</param>
        /// <param name="googleWorkspaceRoleName">googleWorkspaceRoleName.</param>
        /// <param name="googleWorkspaceRoleScope">googleWorkspaceRoleScope.</param>
        /// <param name="grantTypes">grantTypes.</param>
        /// <param name="groups">groups.</param>
        /// <param name="hanadbCreationStatements">hanadbCreationStatements.</param>
        /// <param name="hanadbRevocationStatements">hanadbRevocationStatements.</param>
        /// <param name="hostName">hostName.</param>
        /// <param name="hostPort">hostPort.</param>
        /// <param name="implementationType">implementationType.</param>
        /// <param name="isFixedUser">isFixedUser.</param>
        /// <param name="issuer">relevant for CLIENT_TLS_CERTIFICATE client authentication type.</param>
        /// <param name="itemTargetsAssoc">itemTargetsAssoc.</param>
        /// <param name="jwks">jwks.</param>
        /// <param name="jwksUrl">jwksUrl.</param>
        /// <param name="k8sAllowedNamespaces">comma-separated list of allowed namespaces. Can hold just * which signifies that any namespace is allowed.</param>
        /// <param name="k8sAuthType">k8sAuthType.</param>
        /// <param name="k8sBearerToken">k8sBearerToken.</param>
        /// <param name="k8sClientCertData">For K8s Client certificates authentication.</param>
        /// <param name="k8sClientKeyData">k8sClientKeyData.</param>
        /// <param name="k8sClusterCaCertificate">k8sClusterCaCertificate.</param>
        /// <param name="k8sClusterEndpoint">k8sClusterEndpoint.</param>
        /// <param name="k8sClusterName">k8sClusterName.</param>
        /// <param name="k8sDynamicMode">when native k8s is in dynamic mode, user can define allowed namespaces, K8sServiceAccount doesn&#39;t exist from the start and will only be created at time of getting dynamic secret value By default dynamic mode is false and producer behaves like it did before.</param>
        /// <param name="k8sMultipleDocYamlTempDefinition">Yaml definition for creation of temporary objects. Field that can hold multiple docs from which following will be extracted: ServiceAccount, Role/ClusterRole and RoleBinding/ClusterRoleBinding. If ServiceAccount not specified - it will be generated automatically.</param>
        /// <param name="k8sNamespace">k8sNamespace.</param>
        /// <param name="k8sRoleName">Name of the pre-existing Role or ClusterRole to bind a generated service account to..</param>
        /// <param name="k8sRoleType">k8sRoleType.</param>
        /// <param name="k8sServiceAccount">k8sServiceAccount.</param>
        /// <param name="lastAdminRotation">lastAdminRotation.</param>
        /// <param name="ldapAudience">ldapAudience.</param>
        /// <param name="ldapBindDn">ldapBindDn.</param>
        /// <param name="ldapBindPassword">ldapBindPassword.</param>
        /// <param name="ldapCertificate">ldapCertificate.</param>
        /// <param name="ldapFixedUserNameSubClaimKey">ldapFixedUserNameSubClaimKey.</param>
        /// <param name="ldapFixedUserType">ldapFixedUserType.</param>
        /// <param name="ldapGroupDn">ldapGroupDn.</param>
        /// <param name="ldapTokenExpiration">ldapTokenExpiration.</param>
        /// <param name="ldapUrl">ldapUrl.</param>
        /// <param name="ldapUserAttr">ldapUserAttr.</param>
        /// <param name="ldapUserDn">ldapUserDn.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="mongodbAtlasApiPrivateKey">mongodbAtlasApiPrivateKey.</param>
        /// <param name="mongodbAtlasApiPublicKey">mongodbAtlasApiPublicKey.</param>
        /// <param name="mongodbAtlasProjectId">mongodb atlas fields.</param>
        /// <param name="mongodbCustomData">mongodbCustomData.</param>
        /// <param name="mongodbDbName">common fields.</param>
        /// <param name="mongodbDefaultAuthDb">mongodbDefaultAuthDb.</param>
        /// <param name="mongodbHostPort">mongodbHostPort.</param>
        /// <param name="mongodbIsAtlas">mongodbIsAtlas.</param>
        /// <param name="mongodbPassword">mongodbPassword.</param>
        /// <param name="mongodbRoles">common fields.</param>
        /// <param name="mongodbUriConnection">mongodb fields.</param>
        /// <param name="mongodbUriOptions">mongodbUriOptions.</param>
        /// <param name="mongodbUsername">mongodbUsername.</param>
        /// <param name="mssqlCreationStatements">mssqlCreationStatements.</param>
        /// <param name="mssqlRevocationStatements">mssqlRevocationStatements.</param>
        /// <param name="mysqlCreationStatements">mysqlCreationStatements.</param>
        /// <param name="mysqlRevocationStatements">mysqlRevocationStatements.</param>
        /// <param name="oracleCreationStatements">oracleCreationStatements.</param>
        /// <param name="oracleRevocationStatements">oracleRevocationStatements.</param>
        /// <param name="oracleWalletDetails">oracleWalletDetails.</param>
        /// <param name="password">password.</param>
        /// <param name="passwordLength">passwordLength.</param>
        /// <param name="passwordPolicy">passwordPolicy.</param>
        /// <param name="payload">payload.</param>
        /// <param name="pingUrl">pingUrl.</param>
        /// <param name="postgresCreationStatements">postgresCreationStatements.</param>
        /// <param name="postgresRevocationStatements">postgresRevocationStatements.</param>
        /// <param name="privilegedUser">privilegedUser.</param>
        /// <param name="rabbitmqServerPassword">rabbitmqServerPassword.</param>
        /// <param name="rabbitmqServerUri">rabbitmqServerUri.</param>
        /// <param name="rabbitmqServerUser">rabbitmqServerUser.</param>
        /// <param name="rabbitmqUserConfPermission">rabbitmqUserConfPermission.</param>
        /// <param name="rabbitmqUserReadPermission">rabbitmqUserReadPermission.</param>
        /// <param name="rabbitmqUserTags">rabbitmqUserTags.</param>
        /// <param name="rabbitmqUserVhost">rabbitmqUserVhost.</param>
        /// <param name="rabbitmqUserWritePermission">rabbitmqUserWritePermission.</param>
        /// <param name="rdpFixedUserNameSubClaimKey">rdpFixedUserNameSubClaimKey.</param>
        /// <param name="redirectUris">redirectUris.</param>
        /// <param name="redshiftCreationStatements">redshiftCreationStatements.</param>
        /// <param name="restrictedScopes">restrictedScopes.</param>
        /// <param name="revokeSyncUrl">revokeSyncUrl.</param>
        /// <param name="rotateSyncUrl">rotateSyncUrl.</param>
        /// <param name="scopes">scopes.</param>
        /// <param name="secureRemoteAccessDetails">secureRemoteAccessDetails.</param>
        /// <param name="sessionExtensionWarnIntervalMin">sessionExtensionWarnIntervalMin.</param>
        /// <param name="sfAccount">sfAccount.</param>
        /// <param name="sfUserRole">generated  users info.</param>
        /// <param name="sfWarehouseName">sfWarehouseName.</param>
        /// <param name="shouldStop">TODO delete this after migration.</param>
        /// <param name="signingAlgorithm">signingAlgorithm.</param>
        /// <param name="sslConnectionCertificate">(Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field.</param>
        /// <param name="sslConnectionMode">(Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB.</param>
        /// <param name="subjectDn">subjectDn.</param>
        /// <param name="tags">tags.</param>
        /// <param name="timeoutSeconds">timeoutSeconds.</param>
        /// <param name="useGwCloudIdentity">useGwCloudIdentity.</param>
        /// <param name="useGwServiceAccount">useGwServiceAccount.</param>
        /// <param name="userName">userName.</param>
        /// <param name="userPassword">userPassword.</param>
        /// <param name="userPrincipalName">userPrincipalName.</param>
        /// <param name="userTtl">userTtl.</param>
        /// <param name="usernameLength">usernameLength.</param>
        /// <param name="usernamePolicy">usernamePolicy.</param>
        /// <param name="venafiAllowSubdomains">venafiAllowSubdomains.</param>
        /// <param name="venafiAllowedDomains">venafiAllowedDomains.</param>
        /// <param name="venafiApiKey">venafiApiKey.</param>
        /// <param name="venafiAutoGeneratedFolder">venafiAutoGeneratedFolder.</param>
        /// <param name="venafiBaseUrl">venafiBaseUrl.</param>
        /// <param name="venafiRootFirstInChain">venafiRootFirstInChain.</param>
        /// <param name="venafiSignUsingAkeylessPki">venafiSignUsingAkeylessPki.</param>
        /// <param name="venafiSignerKeyName">venafiSignerKeyName.</param>
        /// <param name="venafiStorePrivateKey">venafiStorePrivateKey.</param>
        /// <param name="venafiTppAccessToken">venafiTppAccessToken.</param>
        /// <param name="venafiTppClientId">venafiTppClientId.</param>
        /// <param name="venafiTppPassword">Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead.</param>
        /// <param name="venafiTppRefreshToken">venafiTppRefreshToken.</param>
        /// <param name="venafiTppUsername">Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead.</param>
        /// <param name="venafiUseTpp">venafiUseTpp.</param>
        /// <param name="venafiZone">venafiZone.</param>
        /// <param name="warnBeforeUserExpirationMin">warnBeforeUserExpirationMin.</param>
        public DSProducerDetails(string accessTokenManagerId = default(string), List<string> aclRules = default(List<string>), bool active = default(bool), string adminName = default(string), string adminPwd = default(string), long adminRotationIntervalDays = default(long), string administrativePort = default(string), string artifactoryAdminApikey = default(string), string artifactoryAdminUsername = default(string), string artifactoryBaseUrl = default(string), string artifactoryTokenAudience = default(string), string artifactoryTokenScope = default(string), string authorizationPort = default(string), string awsAccessKeyId = default(string), string awsAccessMode = default(string), string awsRegion = default(string), string awsRoleArns = default(string), string awsSecretAccessKey = default(string), string awsSessionTags = default(string), string awsSessionToken = default(string), string awsTransitiveTagKeys = default(string), bool awsUserConsoleAccess = default(bool), string awsUserGroups = default(string), string awsUserPolicies = default(string), bool awsUserProgrammaticAccess = default(bool), string azureAppObjectId = default(string), string azureClientId = default(string), string azureClientSecret = default(string), string azureFixedUserNameSubClaimKey = default(string), bool azureFixedUserOnly = default(bool), string azureResourceGroupName = default(string), string azureResourceName = default(string), string azureSubscriptionId = default(string), string azureTenantId = default(string), string azureUserGroupsObjId = default(string), bool azureUserPortalAccess = default(bool), bool azureUserProgrammaticAccess = default(bool), string azureUserRolesTemplateId = default(string), string azureUsername = default(string), string cassandraCreationStatements = default(string), string chefOrganizations = default(string), string chefServerAccessMode = default(string), string chefServerHostName = default(string), string chefServerKey = default(string), string chefServerPort = default(string), string chefServerUrl = default(string), string chefServerUsername = default(string), bool chefSkipSsl = default(bool), string clientAuthenticationType = default(string), string cloudServiceProvider = default(string), bool clusterMode = default(bool), string connectionType = default(string), string createSyncUrl = default(string), string dbClientId = default(string), string dbClientSecret = default(string), string dbHostName = default(string), string dbIsolationLevel = default(string), string dbMaxIdleConns = default(string), string dbMaxOpenConns = default(string), string dbName = default(string), string dbPort = default(string), string dbPrivateKey = default(string), string dbPrivateKeyPassphrase = default(string), string dbPwd = default(string), string dbServerCertificates = default(string), string dbServerName = default(string), string dbTenantId = default(string), string dbUserName = default(string), bool deleteProtection = default(bool), long dynamicSecretId = default(long), string dynamicSecretKey = default(string), string dynamicSecretName = default(string), string dynamicSecretType = default(string), string eksAccessKeyId = default(string), string eksAssumeRole = default(string), string eksClusterCaCertificate = default(string), string eksClusterEndpoint = default(string), string eksClusterName = default(string), string eksRegion = default(string), string eksSecretAccessKey = default(string), bool enableAdminRotation = default(bool), bool enforceReplayPrevention = default(bool), DateTime expirationDate = default(DateTime), string externallyProvidedUser = default(string), string failureMessage = default(string), string fixedUserOnly = default(string), string gcpKeyAlgo = default(string), Dictionary<string, List<string>> gcpRoleBindings = default(Dictionary<string, List<string>>), string gcpServiceAccountEmail = default(string), string gcpServiceAccountKey = default(string), string gcpServiceAccountKeyBase64 = default(string), string gcpServiceAccountKeyId = default(string), string gcpServiceAccountType = default(string), string gcpTmpServiceAccountName = default(string), string gcpTokenLifetime = default(string), string gcpTokenScope = default(string), string gcpTokenType = default(string), long githubAppId = default(long), string githubAppPrivateKey = default(string), string githubBaseUrl = default(string), long githubInstallationId = default(long), Dictionary<string, string> githubInstallationTokenPermissions = default(Dictionary<string, string>), List<string> githubInstallationTokenRepositories = default(List<string>), List<long> githubInstallationTokenRepositoriesIds = default(List<long>), string githubOrganizationName = default(string), string githubRepositoryPath = default(string), string gitlabAccessToken = default(string), string gitlabAccessType = default(string), string gitlabCertificate = default(string), string gitlabGroupName = default(string), string gitlabProjectName = default(string), string gitlabRole = default(string), List<string> gitlabTokenScope = default(List<string>), string gitlabUrl = default(string), string gkeClusterCaCertificate = default(string), string gkeClusterEndpoint = default(string), string gkeClusterName = default(string), string gkeServiceAccountKey = default(string), string gkeServiceAccountName = default(string), string googleWorkspaceAccessMode = default(string), string googleWorkspaceAdminName = default(string), string googleWorkspaceFixedUserNameSubClaimKey = default(string), string googleWorkspaceGroupName = default(string), string googleWorkspaceGroupRole = default(string), string googleWorkspaceRoleName = default(string), string googleWorkspaceRoleScope = default(string), List<string> grantTypes = default(List<string>), string groups = default(string), string hanadbCreationStatements = default(string), string hanadbRevocationStatements = default(string), string hostName = default(string), string hostPort = default(string), string implementationType = default(string), string isFixedUser = default(string), string issuer = default(string), List<ItemTargetAssociation> itemTargetsAssoc = default(List<ItemTargetAssociation>), string jwks = default(string), string jwksUrl = default(string), string k8sAllowedNamespaces = default(string), string k8sAuthType = default(string), string k8sBearerToken = default(string), string k8sClientCertData = default(string), string k8sClientKeyData = default(string), string k8sClusterCaCertificate = default(string), string k8sClusterEndpoint = default(string), string k8sClusterName = default(string), bool k8sDynamicMode = default(bool), List<int> k8sMultipleDocYamlTempDefinition = default(List<int>), string k8sNamespace = default(string), string k8sRoleName = default(string), string k8sRoleType = default(string), string k8sServiceAccount = default(string), long lastAdminRotation = default(long), string ldapAudience = default(string), string ldapBindDn = default(string), string ldapBindPassword = default(string), string ldapCertificate = default(string), string ldapFixedUserNameSubClaimKey = default(string), string ldapFixedUserType = default(string), string ldapGroupDn = default(string), string ldapTokenExpiration = default(string), string ldapUrl = default(string), string ldapUserAttr = default(string), string ldapUserDn = default(string), string metadata = default(string), string mongodbAtlasApiPrivateKey = default(string), string mongodbAtlasApiPublicKey = default(string), string mongodbAtlasProjectId = default(string), string mongodbCustomData = default(string), string mongodbDbName = default(string), string mongodbDefaultAuthDb = default(string), string mongodbHostPort = default(string), bool mongodbIsAtlas = default(bool), string mongodbPassword = default(string), string mongodbRoles = default(string), string mongodbUriConnection = default(string), string mongodbUriOptions = default(string), string mongodbUsername = default(string), string mssqlCreationStatements = default(string), string mssqlRevocationStatements = default(string), string mysqlCreationStatements = default(string), string mysqlRevocationStatements = default(string), string oracleCreationStatements = default(string), string oracleRevocationStatements = default(string), WalletDetails oracleWalletDetails = default(WalletDetails), string password = default(string), long passwordLength = default(long), string passwordPolicy = default(string), string payload = default(string), string pingUrl = default(string), string postgresCreationStatements = default(string), string postgresRevocationStatements = default(string), string privilegedUser = default(string), string rabbitmqServerPassword = default(string), string rabbitmqServerUri = default(string), string rabbitmqServerUser = default(string), string rabbitmqUserConfPermission = default(string), string rabbitmqUserReadPermission = default(string), string rabbitmqUserTags = default(string), string rabbitmqUserVhost = default(string), string rabbitmqUserWritePermission = default(string), string rdpFixedUserNameSubClaimKey = default(string), List<string> redirectUris = default(List<string>), string redshiftCreationStatements = default(string), List<string> restrictedScopes = default(List<string>), string revokeSyncUrl = default(string), string rotateSyncUrl = default(string), List<string> scopes = default(List<string>), SecureRemoteAccess secureRemoteAccessDetails = default(SecureRemoteAccess), long sessionExtensionWarnIntervalMin = default(long), string sfAccount = default(string), string sfUserRole = default(string), string sfWarehouseName = default(string), string shouldStop = default(string), string signingAlgorithm = default(string), string sslConnectionCertificate = default(string), bool sslConnectionMode = default(bool), string subjectDn = default(string), List<string> tags = default(List<string>), long timeoutSeconds = default(long), bool useGwCloudIdentity = default(bool), bool useGwServiceAccount = default(bool), string userName = default(string), string userPassword = default(string), string userPrincipalName = default(string), string userTtl = default(string), long usernameLength = default(long), string usernamePolicy = default(string), bool venafiAllowSubdomains = default(bool), List<string> venafiAllowedDomains = default(List<string>), string venafiApiKey = default(string), string venafiAutoGeneratedFolder = default(string), string venafiBaseUrl = default(string), bool venafiRootFirstInChain = default(bool), bool venafiSignUsingAkeylessPki = default(bool), string venafiSignerKeyName = default(string), bool venafiStorePrivateKey = default(bool), string venafiTppAccessToken = default(string), string venafiTppClientId = default(string), string venafiTppPassword = default(string), string venafiTppRefreshToken = default(string), string venafiTppUsername = default(string), bool venafiUseTpp = default(bool), string venafiZone = default(string), long warnBeforeUserExpirationMin = default(long))
        {
            this.AccessTokenManagerId = accessTokenManagerId;
            this.AclRules = aclRules;
            this.Active = active;
            this.AdminName = adminName;
            this.AdminPwd = adminPwd;
            this.AdminRotationIntervalDays = adminRotationIntervalDays;
            this.AdministrativePort = administrativePort;
            this.ArtifactoryAdminApikey = artifactoryAdminApikey;
            this.ArtifactoryAdminUsername = artifactoryAdminUsername;
            this.ArtifactoryBaseUrl = artifactoryBaseUrl;
            this.ArtifactoryTokenAudience = artifactoryTokenAudience;
            this.ArtifactoryTokenScope = artifactoryTokenScope;
            this.AuthorizationPort = authorizationPort;
            this.AwsAccessKeyId = awsAccessKeyId;
            this.AwsAccessMode = awsAccessMode;
            this.AwsRegion = awsRegion;
            this.AwsRoleArns = awsRoleArns;
            this.AwsSecretAccessKey = awsSecretAccessKey;
            this.AwsSessionTags = awsSessionTags;
            this.AwsSessionToken = awsSessionToken;
            this.AwsTransitiveTagKeys = awsTransitiveTagKeys;
            this.AwsUserConsoleAccess = awsUserConsoleAccess;
            this.AwsUserGroups = awsUserGroups;
            this.AwsUserPolicies = awsUserPolicies;
            this.AwsUserProgrammaticAccess = awsUserProgrammaticAccess;
            this.AzureAppObjectId = azureAppObjectId;
            this.AzureClientId = azureClientId;
            this.AzureClientSecret = azureClientSecret;
            this.AzureFixedUserNameSubClaimKey = azureFixedUserNameSubClaimKey;
            this.AzureFixedUserOnly = azureFixedUserOnly;
            this.AzureResourceGroupName = azureResourceGroupName;
            this.AzureResourceName = azureResourceName;
            this.AzureSubscriptionId = azureSubscriptionId;
            this.AzureTenantId = azureTenantId;
            this.AzureUserGroupsObjId = azureUserGroupsObjId;
            this.AzureUserPortalAccess = azureUserPortalAccess;
            this.AzureUserProgrammaticAccess = azureUserProgrammaticAccess;
            this.AzureUserRolesTemplateId = azureUserRolesTemplateId;
            this.AzureUsername = azureUsername;
            this.CassandraCreationStatements = cassandraCreationStatements;
            this.ChefOrganizations = chefOrganizations;
            this.ChefServerAccessMode = chefServerAccessMode;
            this.ChefServerHostName = chefServerHostName;
            this.ChefServerKey = chefServerKey;
            this.ChefServerPort = chefServerPort;
            this.ChefServerUrl = chefServerUrl;
            this.ChefServerUsername = chefServerUsername;
            this.ChefSkipSsl = chefSkipSsl;
            this.ClientAuthenticationType = clientAuthenticationType;
            this.CloudServiceProvider = cloudServiceProvider;
            this.ClusterMode = clusterMode;
            this.ConnectionType = connectionType;
            this.CreateSyncUrl = createSyncUrl;
            this.DbClientId = dbClientId;
            this.DbClientSecret = dbClientSecret;
            this.DbHostName = dbHostName;
            this.DbIsolationLevel = dbIsolationLevel;
            this.DbMaxIdleConns = dbMaxIdleConns;
            this.DbMaxOpenConns = dbMaxOpenConns;
            this.DbName = dbName;
            this.DbPort = dbPort;
            this.DbPrivateKey = dbPrivateKey;
            this.DbPrivateKeyPassphrase = dbPrivateKeyPassphrase;
            this.DbPwd = dbPwd;
            this.DbServerCertificates = dbServerCertificates;
            this.DbServerName = dbServerName;
            this.DbTenantId = dbTenantId;
            this.DbUserName = dbUserName;
            this.DeleteProtection = deleteProtection;
            this.DynamicSecretId = dynamicSecretId;
            this.DynamicSecretKey = dynamicSecretKey;
            this.DynamicSecretName = dynamicSecretName;
            this.DynamicSecretType = dynamicSecretType;
            this.EksAccessKeyId = eksAccessKeyId;
            this.EksAssumeRole = eksAssumeRole;
            this.EksClusterCaCertificate = eksClusterCaCertificate;
            this.EksClusterEndpoint = eksClusterEndpoint;
            this.EksClusterName = eksClusterName;
            this.EksRegion = eksRegion;
            this.EksSecretAccessKey = eksSecretAccessKey;
            this.EnableAdminRotation = enableAdminRotation;
            this.EnforceReplayPrevention = enforceReplayPrevention;
            this.ExpirationDate = expirationDate;
            this.ExternallyProvidedUser = externallyProvidedUser;
            this.FailureMessage = failureMessage;
            this.FixedUserOnly = fixedUserOnly;
            this.GcpKeyAlgo = gcpKeyAlgo;
            this.GcpRoleBindings = gcpRoleBindings;
            this.GcpServiceAccountEmail = gcpServiceAccountEmail;
            this.GcpServiceAccountKey = gcpServiceAccountKey;
            this.GcpServiceAccountKeyBase64 = gcpServiceAccountKeyBase64;
            this.GcpServiceAccountKeyId = gcpServiceAccountKeyId;
            this.GcpServiceAccountType = gcpServiceAccountType;
            this.GcpTmpServiceAccountName = gcpTmpServiceAccountName;
            this.GcpTokenLifetime = gcpTokenLifetime;
            this.GcpTokenScope = gcpTokenScope;
            this.GcpTokenType = gcpTokenType;
            this.GithubAppId = githubAppId;
            this.GithubAppPrivateKey = githubAppPrivateKey;
            this.GithubBaseUrl = githubBaseUrl;
            this.GithubInstallationId = githubInstallationId;
            this.GithubInstallationTokenPermissions = githubInstallationTokenPermissions;
            this.GithubInstallationTokenRepositories = githubInstallationTokenRepositories;
            this.GithubInstallationTokenRepositoriesIds = githubInstallationTokenRepositoriesIds;
            this.GithubOrganizationName = githubOrganizationName;
            this.GithubRepositoryPath = githubRepositoryPath;
            this.GitlabAccessToken = gitlabAccessToken;
            this.GitlabAccessType = gitlabAccessType;
            this.GitlabCertificate = gitlabCertificate;
            this.GitlabGroupName = gitlabGroupName;
            this.GitlabProjectName = gitlabProjectName;
            this.GitlabRole = gitlabRole;
            this.GitlabTokenScope = gitlabTokenScope;
            this.GitlabUrl = gitlabUrl;
            this.GkeClusterCaCertificate = gkeClusterCaCertificate;
            this.GkeClusterEndpoint = gkeClusterEndpoint;
            this.GkeClusterName = gkeClusterName;
            this.GkeServiceAccountKey = gkeServiceAccountKey;
            this.GkeServiceAccountName = gkeServiceAccountName;
            this.GoogleWorkspaceAccessMode = googleWorkspaceAccessMode;
            this.GoogleWorkspaceAdminName = googleWorkspaceAdminName;
            this.GoogleWorkspaceFixedUserNameSubClaimKey = googleWorkspaceFixedUserNameSubClaimKey;
            this.GoogleWorkspaceGroupName = googleWorkspaceGroupName;
            this.GoogleWorkspaceGroupRole = googleWorkspaceGroupRole;
            this.GoogleWorkspaceRoleName = googleWorkspaceRoleName;
            this.GoogleWorkspaceRoleScope = googleWorkspaceRoleScope;
            this.GrantTypes = grantTypes;
            this.Groups = groups;
            this.HanadbCreationStatements = hanadbCreationStatements;
            this.HanadbRevocationStatements = hanadbRevocationStatements;
            this.HostName = hostName;
            this.HostPort = hostPort;
            this.ImplementationType = implementationType;
            this.IsFixedUser = isFixedUser;
            this.Issuer = issuer;
            this.ItemTargetsAssoc = itemTargetsAssoc;
            this.Jwks = jwks;
            this.JwksUrl = jwksUrl;
            this.K8sAllowedNamespaces = k8sAllowedNamespaces;
            this.K8sAuthType = k8sAuthType;
            this.K8sBearerToken = k8sBearerToken;
            this.K8sClientCertData = k8sClientCertData;
            this.K8sClientKeyData = k8sClientKeyData;
            this.K8sClusterCaCertificate = k8sClusterCaCertificate;
            this.K8sClusterEndpoint = k8sClusterEndpoint;
            this.K8sClusterName = k8sClusterName;
            this.K8sDynamicMode = k8sDynamicMode;
            this.K8sMultipleDocYamlTempDefinition = k8sMultipleDocYamlTempDefinition;
            this.K8sNamespace = k8sNamespace;
            this.K8sRoleName = k8sRoleName;
            this.K8sRoleType = k8sRoleType;
            this.K8sServiceAccount = k8sServiceAccount;
            this.LastAdminRotation = lastAdminRotation;
            this.LdapAudience = ldapAudience;
            this.LdapBindDn = ldapBindDn;
            this.LdapBindPassword = ldapBindPassword;
            this.LdapCertificate = ldapCertificate;
            this.LdapFixedUserNameSubClaimKey = ldapFixedUserNameSubClaimKey;
            this.LdapFixedUserType = ldapFixedUserType;
            this.LdapGroupDn = ldapGroupDn;
            this.LdapTokenExpiration = ldapTokenExpiration;
            this.LdapUrl = ldapUrl;
            this.LdapUserAttr = ldapUserAttr;
            this.LdapUserDn = ldapUserDn;
            this.Metadata = metadata;
            this.MongodbAtlasApiPrivateKey = mongodbAtlasApiPrivateKey;
            this.MongodbAtlasApiPublicKey = mongodbAtlasApiPublicKey;
            this.MongodbAtlasProjectId = mongodbAtlasProjectId;
            this.MongodbCustomData = mongodbCustomData;
            this.MongodbDbName = mongodbDbName;
            this.MongodbDefaultAuthDb = mongodbDefaultAuthDb;
            this.MongodbHostPort = mongodbHostPort;
            this.MongodbIsAtlas = mongodbIsAtlas;
            this.MongodbPassword = mongodbPassword;
            this.MongodbRoles = mongodbRoles;
            this.MongodbUriConnection = mongodbUriConnection;
            this.MongodbUriOptions = mongodbUriOptions;
            this.MongodbUsername = mongodbUsername;
            this.MssqlCreationStatements = mssqlCreationStatements;
            this.MssqlRevocationStatements = mssqlRevocationStatements;
            this.MysqlCreationStatements = mysqlCreationStatements;
            this.MysqlRevocationStatements = mysqlRevocationStatements;
            this.OracleCreationStatements = oracleCreationStatements;
            this.OracleRevocationStatements = oracleRevocationStatements;
            this.OracleWalletDetails = oracleWalletDetails;
            this.Password = password;
            this.PasswordLength = passwordLength;
            this.PasswordPolicy = passwordPolicy;
            this.Payload = payload;
            this.PingUrl = pingUrl;
            this.PostgresCreationStatements = postgresCreationStatements;
            this.PostgresRevocationStatements = postgresRevocationStatements;
            this.PrivilegedUser = privilegedUser;
            this.RabbitmqServerPassword = rabbitmqServerPassword;
            this.RabbitmqServerUri = rabbitmqServerUri;
            this.RabbitmqServerUser = rabbitmqServerUser;
            this.RabbitmqUserConfPermission = rabbitmqUserConfPermission;
            this.RabbitmqUserReadPermission = rabbitmqUserReadPermission;
            this.RabbitmqUserTags = rabbitmqUserTags;
            this.RabbitmqUserVhost = rabbitmqUserVhost;
            this.RabbitmqUserWritePermission = rabbitmqUserWritePermission;
            this.RdpFixedUserNameSubClaimKey = rdpFixedUserNameSubClaimKey;
            this.RedirectUris = redirectUris;
            this.RedshiftCreationStatements = redshiftCreationStatements;
            this.RestrictedScopes = restrictedScopes;
            this.RevokeSyncUrl = revokeSyncUrl;
            this.RotateSyncUrl = rotateSyncUrl;
            this.Scopes = scopes;
            this.SecureRemoteAccessDetails = secureRemoteAccessDetails;
            this.SessionExtensionWarnIntervalMin = sessionExtensionWarnIntervalMin;
            this.SfAccount = sfAccount;
            this.SfUserRole = sfUserRole;
            this.SfWarehouseName = sfWarehouseName;
            this.ShouldStop = shouldStop;
            this.SigningAlgorithm = signingAlgorithm;
            this.SslConnectionCertificate = sslConnectionCertificate;
            this.SslConnectionMode = sslConnectionMode;
            this.SubjectDn = subjectDn;
            this.Tags = tags;
            this.TimeoutSeconds = timeoutSeconds;
            this.UseGwCloudIdentity = useGwCloudIdentity;
            this.UseGwServiceAccount = useGwServiceAccount;
            this.UserName = userName;
            this.UserPassword = userPassword;
            this.UserPrincipalName = userPrincipalName;
            this.UserTtl = userTtl;
            this.UsernameLength = usernameLength;
            this.UsernamePolicy = usernamePolicy;
            this.VenafiAllowSubdomains = venafiAllowSubdomains;
            this.VenafiAllowedDomains = venafiAllowedDomains;
            this.VenafiApiKey = venafiApiKey;
            this.VenafiAutoGeneratedFolder = venafiAutoGeneratedFolder;
            this.VenafiBaseUrl = venafiBaseUrl;
            this.VenafiRootFirstInChain = venafiRootFirstInChain;
            this.VenafiSignUsingAkeylessPki = venafiSignUsingAkeylessPki;
            this.VenafiSignerKeyName = venafiSignerKeyName;
            this.VenafiStorePrivateKey = venafiStorePrivateKey;
            this.VenafiTppAccessToken = venafiTppAccessToken;
            this.VenafiTppClientId = venafiTppClientId;
            this.VenafiTppPassword = venafiTppPassword;
            this.VenafiTppRefreshToken = venafiTppRefreshToken;
            this.VenafiTppUsername = venafiTppUsername;
            this.VenafiUseTpp = venafiUseTpp;
            this.VenafiZone = venafiZone;
            this.WarnBeforeUserExpirationMin = warnBeforeUserExpirationMin;
        }

        /// <summary>
        /// Gets or Sets AccessTokenManagerId
        /// </summary>
        [DataMember(Name = "access_token_manager_id", EmitDefaultValue = false)]
        public string AccessTokenManagerId { get; set; }

        /// <summary>
        /// Gets or Sets AclRules
        /// </summary>
        [DataMember(Name = "acl_rules", EmitDefaultValue = false)]
        public List<string> AclRules { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets AdminName
        /// </summary>
        [DataMember(Name = "admin_name", EmitDefaultValue = false)]
        public string AdminName { get; set; }

        /// <summary>
        /// Gets or Sets AdminPwd
        /// </summary>
        [DataMember(Name = "admin_pwd", EmitDefaultValue = false)]
        public string AdminPwd { get; set; }

        /// <summary>
        /// Gets or Sets AdminRotationIntervalDays
        /// </summary>
        [DataMember(Name = "admin_rotation_interval_days", EmitDefaultValue = false)]
        public long AdminRotationIntervalDays { get; set; }

        /// <summary>
        /// Gets or Sets AdministrativePort
        /// </summary>
        [DataMember(Name = "administrative_port", EmitDefaultValue = false)]
        public string AdministrativePort { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactoryAdminApikey
        /// </summary>
        [DataMember(Name = "artifactory_admin_apikey", EmitDefaultValue = false)]
        public string ArtifactoryAdminApikey { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactoryAdminUsername
        /// </summary>
        [DataMember(Name = "artifactory_admin_username", EmitDefaultValue = false)]
        public string ArtifactoryAdminUsername { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactoryBaseUrl
        /// </summary>
        [DataMember(Name = "artifactory_base_url", EmitDefaultValue = false)]
        public string ArtifactoryBaseUrl { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactoryTokenAudience
        /// </summary>
        [DataMember(Name = "artifactory_token_audience", EmitDefaultValue = false)]
        public string ArtifactoryTokenAudience { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactoryTokenScope
        /// </summary>
        [DataMember(Name = "artifactory_token_scope", EmitDefaultValue = false)]
        public string ArtifactoryTokenScope { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationPort
        /// </summary>
        [DataMember(Name = "authorization_port", EmitDefaultValue = false)]
        public string AuthorizationPort { get; set; }

        /// <summary>
        /// Gets or Sets AwsAccessKeyId
        /// </summary>
        [DataMember(Name = "aws_access_key_id", EmitDefaultValue = false)]
        public string AwsAccessKeyId { get; set; }

        /// <summary>
        /// Gets or Sets AwsAccessMode
        /// </summary>
        [DataMember(Name = "aws_access_mode", EmitDefaultValue = false)]
        public string AwsAccessMode { get; set; }

        /// <summary>
        /// Gets or Sets AwsRegion
        /// </summary>
        [DataMember(Name = "aws_region", EmitDefaultValue = false)]
        public string AwsRegion { get; set; }

        /// <summary>
        /// Gets or Sets AwsRoleArns
        /// </summary>
        [DataMember(Name = "aws_role_arns", EmitDefaultValue = false)]
        public string AwsRoleArns { get; set; }

        /// <summary>
        /// Gets or Sets AwsSecretAccessKey
        /// </summary>
        [DataMember(Name = "aws_secret_access_key", EmitDefaultValue = false)]
        public string AwsSecretAccessKey { get; set; }

        /// <summary>
        /// Gets or Sets AwsSessionTags
        /// </summary>
        [DataMember(Name = "aws_session_tags", EmitDefaultValue = false)]
        public string AwsSessionTags { get; set; }

        /// <summary>
        /// Gets or Sets AwsSessionToken
        /// </summary>
        [DataMember(Name = "aws_session_token", EmitDefaultValue = false)]
        public string AwsSessionToken { get; set; }

        /// <summary>
        /// Gets or Sets AwsTransitiveTagKeys
        /// </summary>
        [DataMember(Name = "aws_transitive_tag_keys", EmitDefaultValue = false)]
        public string AwsTransitiveTagKeys { get; set; }

        /// <summary>
        /// Gets or Sets AwsUserConsoleAccess
        /// </summary>
        [DataMember(Name = "aws_user_console_access", EmitDefaultValue = true)]
        public bool AwsUserConsoleAccess { get; set; }

        /// <summary>
        /// Gets or Sets AwsUserGroups
        /// </summary>
        [DataMember(Name = "aws_user_groups", EmitDefaultValue = false)]
        public string AwsUserGroups { get; set; }

        /// <summary>
        /// Gets or Sets AwsUserPolicies
        /// </summary>
        [DataMember(Name = "aws_user_policies", EmitDefaultValue = false)]
        public string AwsUserPolicies { get; set; }

        /// <summary>
        /// Gets or Sets AwsUserProgrammaticAccess
        /// </summary>
        [DataMember(Name = "aws_user_programmatic_access", EmitDefaultValue = true)]
        public bool AwsUserProgrammaticAccess { get; set; }

        /// <summary>
        /// Gets or Sets AzureAppObjectId
        /// </summary>
        [DataMember(Name = "azure_app_object_id", EmitDefaultValue = false)]
        public string AzureAppObjectId { get; set; }

        /// <summary>
        /// Gets or Sets AzureClientId
        /// </summary>
        [DataMember(Name = "azure_client_id", EmitDefaultValue = false)]
        public string AzureClientId { get; set; }

        /// <summary>
        /// Gets or Sets AzureClientSecret
        /// </summary>
        [DataMember(Name = "azure_client_secret", EmitDefaultValue = false)]
        public string AzureClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets AzureFixedUserNameSubClaimKey
        /// </summary>
        [DataMember(Name = "azure_fixed_user_name_sub_claim_key", EmitDefaultValue = false)]
        public string AzureFixedUserNameSubClaimKey { get; set; }

        /// <summary>
        /// Gets or Sets AzureFixedUserOnly
        /// </summary>
        [DataMember(Name = "azure_fixed_user_only", EmitDefaultValue = true)]
        public bool AzureFixedUserOnly { get; set; }

        /// <summary>
        /// Gets or Sets AzureResourceGroupName
        /// </summary>
        [DataMember(Name = "azure_resource_group_name", EmitDefaultValue = false)]
        public string AzureResourceGroupName { get; set; }

        /// <summary>
        /// Gets or Sets AzureResourceName
        /// </summary>
        [DataMember(Name = "azure_resource_name", EmitDefaultValue = false)]
        public string AzureResourceName { get; set; }

        /// <summary>
        /// Gets or Sets AzureSubscriptionId
        /// </summary>
        [DataMember(Name = "azure_subscription_id", EmitDefaultValue = false)]
        public string AzureSubscriptionId { get; set; }

        /// <summary>
        /// Gets or Sets AzureTenantId
        /// </summary>
        [DataMember(Name = "azure_tenant_id", EmitDefaultValue = false)]
        public string AzureTenantId { get; set; }

        /// <summary>
        /// Gets or Sets AzureUserGroupsObjId
        /// </summary>
        [DataMember(Name = "azure_user_groups_obj_id", EmitDefaultValue = false)]
        public string AzureUserGroupsObjId { get; set; }

        /// <summary>
        /// Gets or Sets AzureUserPortalAccess
        /// </summary>
        [DataMember(Name = "azure_user_portal_access", EmitDefaultValue = true)]
        public bool AzureUserPortalAccess { get; set; }

        /// <summary>
        /// Gets or Sets AzureUserProgrammaticAccess
        /// </summary>
        [DataMember(Name = "azure_user_programmatic_access", EmitDefaultValue = true)]
        public bool AzureUserProgrammaticAccess { get; set; }

        /// <summary>
        /// Gets or Sets AzureUserRolesTemplateId
        /// </summary>
        [DataMember(Name = "azure_user_roles_template_id", EmitDefaultValue = false)]
        public string AzureUserRolesTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets AzureUsername
        /// </summary>
        [DataMember(Name = "azure_username", EmitDefaultValue = false)]
        public string AzureUsername { get; set; }

        /// <summary>
        /// Gets or Sets CassandraCreationStatements
        /// </summary>
        [DataMember(Name = "cassandra_creation_statements", EmitDefaultValue = false)]
        public string CassandraCreationStatements { get; set; }

        /// <summary>
        /// Gets or Sets ChefOrganizations
        /// </summary>
        [DataMember(Name = "chef_organizations", EmitDefaultValue = false)]
        public string ChefOrganizations { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerAccessMode
        /// </summary>
        [DataMember(Name = "chef_server_access_mode", EmitDefaultValue = false)]
        public string ChefServerAccessMode { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerHostName
        /// </summary>
        [DataMember(Name = "chef_server_host_name", EmitDefaultValue = false)]
        public string ChefServerHostName { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerKey
        /// </summary>
        [DataMember(Name = "chef_server_key", EmitDefaultValue = false)]
        public string ChefServerKey { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerPort
        /// </summary>
        [DataMember(Name = "chef_server_port", EmitDefaultValue = false)]
        public string ChefServerPort { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerUrl
        /// </summary>
        [DataMember(Name = "chef_server_url", EmitDefaultValue = false)]
        public string ChefServerUrl { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerUsername
        /// </summary>
        [DataMember(Name = "chef_server_username", EmitDefaultValue = false)]
        public string ChefServerUsername { get; set; }

        /// <summary>
        /// Gets or Sets ChefSkipSsl
        /// </summary>
        [DataMember(Name = "chef_skip_ssl", EmitDefaultValue = true)]
        public bool ChefSkipSsl { get; set; }

        /// <summary>
        /// Gets or Sets ClientAuthenticationType
        /// </summary>
        [DataMember(Name = "client_authentication_type", EmitDefaultValue = false)]
        public string ClientAuthenticationType { get; set; }

        /// <summary>
        /// Gets or Sets CloudServiceProvider
        /// </summary>
        [DataMember(Name = "cloud_service_provider", EmitDefaultValue = false)]
        public string CloudServiceProvider { get; set; }

        /// <summary>
        /// Gets or Sets ClusterMode
        /// </summary>
        [DataMember(Name = "cluster_mode", EmitDefaultValue = true)]
        public bool ClusterMode { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionType
        /// </summary>
        [DataMember(Name = "connection_type", EmitDefaultValue = false)]
        public string ConnectionType { get; set; }

        /// <summary>
        /// Gets or Sets CreateSyncUrl
        /// </summary>
        [DataMember(Name = "create_sync_url", EmitDefaultValue = false)]
        public string CreateSyncUrl { get; set; }

        /// <summary>
        /// Gets or Sets DbClientId
        /// </summary>
        [DataMember(Name = "db_client_id", EmitDefaultValue = false)]
        public string DbClientId { get; set; }

        /// <summary>
        /// Gets or Sets DbClientSecret
        /// </summary>
        [DataMember(Name = "db_client_secret", EmitDefaultValue = false)]
        public string DbClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets DbHostName
        /// </summary>
        [DataMember(Name = "db_host_name", EmitDefaultValue = false)]
        public string DbHostName { get; set; }

        /// <summary>
        /// Gets or Sets DbIsolationLevel
        /// </summary>
        [DataMember(Name = "db_isolation_level", EmitDefaultValue = false)]
        public string DbIsolationLevel { get; set; }

        /// <summary>
        /// Gets or Sets DbMaxIdleConns
        /// </summary>
        [DataMember(Name = "db_max_idle_conns", EmitDefaultValue = false)]
        public string DbMaxIdleConns { get; set; }

        /// <summary>
        /// Gets or Sets DbMaxOpenConns
        /// </summary>
        [DataMember(Name = "db_max_open_conns", EmitDefaultValue = false)]
        public string DbMaxOpenConns { get; set; }

        /// <summary>
        /// Gets or Sets DbName
        /// </summary>
        [DataMember(Name = "db_name", EmitDefaultValue = false)]
        public string DbName { get; set; }

        /// <summary>
        /// Gets or Sets DbPort
        /// </summary>
        [DataMember(Name = "db_port", EmitDefaultValue = false)]
        public string DbPort { get; set; }

        /// <summary>
        /// (Optional) Private Key in PEM format
        /// </summary>
        /// <value>(Optional) Private Key in PEM format</value>
        [DataMember(Name = "db_private_key", EmitDefaultValue = false)]
        public string DbPrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets DbPrivateKeyPassphrase
        /// </summary>
        [DataMember(Name = "db_private_key_passphrase", EmitDefaultValue = false)]
        public string DbPrivateKeyPassphrase { get; set; }

        /// <summary>
        /// Gets or Sets DbPwd
        /// </summary>
        [DataMember(Name = "db_pwd", EmitDefaultValue = false)]
        public string DbPwd { get; set; }

        /// <summary>
        /// (Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host&#39;s root CA set.
        /// </summary>
        /// <value>(Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host&#39;s root CA set.</value>
        [DataMember(Name = "db_server_certificates", EmitDefaultValue = false)]
        public string DbServerCertificates { get; set; }

        /// <summary>
        /// (Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client&#39;s handshake to support virtual hosting unless it is an IP address.
        /// </summary>
        /// <value>(Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client&#39;s handshake to support virtual hosting unless it is an IP address.</value>
        [DataMember(Name = "db_server_name", EmitDefaultValue = false)]
        public string DbServerName { get; set; }

        /// <summary>
        /// Gets or Sets DbTenantId
        /// </summary>
        [DataMember(Name = "db_tenant_id", EmitDefaultValue = false)]
        public string DbTenantId { get; set; }

        /// <summary>
        /// Gets or Sets DbUserName
        /// </summary>
        [DataMember(Name = "db_user_name", EmitDefaultValue = false)]
        public string DbUserName { get; set; }

        /// <summary>
        /// Gets or Sets DeleteProtection
        /// </summary>
        [DataMember(Name = "delete_protection", EmitDefaultValue = true)]
        public bool DeleteProtection { get; set; }

        /// <summary>
        /// Gets or Sets DynamicSecretId
        /// </summary>
        [DataMember(Name = "dynamic_secret_id", EmitDefaultValue = false)]
        public long DynamicSecretId { get; set; }

        /// <summary>
        /// Gets or Sets DynamicSecretKey
        /// </summary>
        [DataMember(Name = "dynamic_secret_key", EmitDefaultValue = false)]
        public string DynamicSecretKey { get; set; }

        /// <summary>
        /// Gets or Sets DynamicSecretName
        /// </summary>
        [DataMember(Name = "dynamic_secret_name", EmitDefaultValue = false)]
        public string DynamicSecretName { get; set; }

        /// <summary>
        /// Gets or Sets DynamicSecretType
        /// </summary>
        [DataMember(Name = "dynamic_secret_type", EmitDefaultValue = false)]
        public string DynamicSecretType { get; set; }

        /// <summary>
        /// Gets or Sets EksAccessKeyId
        /// </summary>
        [DataMember(Name = "eks_access_key_id", EmitDefaultValue = false)]
        public string EksAccessKeyId { get; set; }

        /// <summary>
        /// Gets or Sets EksAssumeRole
        /// </summary>
        [DataMember(Name = "eks_assume_role", EmitDefaultValue = false)]
        public string EksAssumeRole { get; set; }

        /// <summary>
        /// Gets or Sets EksClusterCaCertificate
        /// </summary>
        [DataMember(Name = "eks_cluster_ca_certificate", EmitDefaultValue = false)]
        public string EksClusterCaCertificate { get; set; }

        /// <summary>
        /// Gets or Sets EksClusterEndpoint
        /// </summary>
        [DataMember(Name = "eks_cluster_endpoint", EmitDefaultValue = false)]
        public string EksClusterEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets EksClusterName
        /// </summary>
        [DataMember(Name = "eks_cluster_name", EmitDefaultValue = false)]
        public string EksClusterName { get; set; }

        /// <summary>
        /// Gets or Sets EksRegion
        /// </summary>
        [DataMember(Name = "eks_region", EmitDefaultValue = false)]
        public string EksRegion { get; set; }

        /// <summary>
        /// Gets or Sets EksSecretAccessKey
        /// </summary>
        [DataMember(Name = "eks_secret_access_key", EmitDefaultValue = false)]
        public string EksSecretAccessKey { get; set; }

        /// <summary>
        /// Gets or Sets EnableAdminRotation
        /// </summary>
        [DataMember(Name = "enable_admin_rotation", EmitDefaultValue = true)]
        public bool EnableAdminRotation { get; set; }

        /// <summary>
        /// relevant for PRIVATE_KEY_JWT client authentication type
        /// </summary>
        /// <value>relevant for PRIVATE_KEY_JWT client authentication type</value>
        [DataMember(Name = "enforce_replay_prevention", EmitDefaultValue = true)]
        public bool EnforceReplayPrevention { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name = "expiration_date", EmitDefaultValue = false)]
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets ExternallyProvidedUser
        /// </summary>
        [DataMember(Name = "externally_provided_user", EmitDefaultValue = false)]
        public string ExternallyProvidedUser { get; set; }

        /// <summary>
        /// Gets or Sets FailureMessage
        /// </summary>
        [DataMember(Name = "failure_message", EmitDefaultValue = false)]
        public string FailureMessage { get; set; }

        /// <summary>
        /// Gets or Sets FixedUserOnly
        /// </summary>
        [DataMember(Name = "fixed_user_only", EmitDefaultValue = false)]
        public string FixedUserOnly { get; set; }

        /// <summary>
        /// Gets or Sets GcpKeyAlgo
        /// </summary>
        [DataMember(Name = "gcp_key_algo", EmitDefaultValue = false)]
        public string GcpKeyAlgo { get; set; }

        /// <summary>
        /// Gets or Sets GcpRoleBindings
        /// </summary>
        [DataMember(Name = "gcp_role_bindings", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> GcpRoleBindings { get; set; }

        /// <summary>
        /// GCPServiceAccountEmail overrides the deprecated field from the target
        /// </summary>
        /// <value>GCPServiceAccountEmail overrides the deprecated field from the target</value>
        [DataMember(Name = "gcp_service_account_email", EmitDefaultValue = false)]
        public string GcpServiceAccountEmail { get; set; }

        /// <summary>
        /// Gets or Sets GcpServiceAccountKey
        /// </summary>
        [DataMember(Name = "gcp_service_account_key", EmitDefaultValue = false)]
        public string GcpServiceAccountKey { get; set; }

        /// <summary>
        /// Gets or Sets GcpServiceAccountKeyBase64
        /// </summary>
        [DataMember(Name = "gcp_service_account_key_base64", EmitDefaultValue = false)]
        public string GcpServiceAccountKeyBase64 { get; set; }

        /// <summary>
        /// Gets or Sets GcpServiceAccountKeyId
        /// </summary>
        [DataMember(Name = "gcp_service_account_key_id", EmitDefaultValue = false)]
        public string GcpServiceAccountKeyId { get; set; }

        /// <summary>
        /// Gets or Sets GcpServiceAccountType
        /// </summary>
        [DataMember(Name = "gcp_service_account_type", EmitDefaultValue = false)]
        public string GcpServiceAccountType { get; set; }

        /// <summary>
        /// Gets or Sets GcpTmpServiceAccountName
        /// </summary>
        [DataMember(Name = "gcp_tmp_service_account_name", EmitDefaultValue = false)]
        public string GcpTmpServiceAccountName { get; set; }

        /// <summary>
        /// Gets or Sets GcpTokenLifetime
        /// </summary>
        [DataMember(Name = "gcp_token_lifetime", EmitDefaultValue = false)]
        public string GcpTokenLifetime { get; set; }

        /// <summary>
        /// Gets or Sets GcpTokenScope
        /// </summary>
        [DataMember(Name = "gcp_token_scope", EmitDefaultValue = false)]
        public string GcpTokenScope { get; set; }

        /// <summary>
        /// Gets or Sets GcpTokenType
        /// </summary>
        [DataMember(Name = "gcp_token_type", EmitDefaultValue = false)]
        public string GcpTokenType { get; set; }

        /// <summary>
        /// Gets or Sets GithubAppId
        /// </summary>
        [DataMember(Name = "github_app_id", EmitDefaultValue = false)]
        public long GithubAppId { get; set; }

        /// <summary>
        /// Gets or Sets GithubAppPrivateKey
        /// </summary>
        [DataMember(Name = "github_app_private_key", EmitDefaultValue = false)]
        public string GithubAppPrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets GithubBaseUrl
        /// </summary>
        [DataMember(Name = "github_base_url", EmitDefaultValue = false)]
        public string GithubBaseUrl { get; set; }

        /// <summary>
        /// Gets or Sets GithubInstallationId
        /// </summary>
        [DataMember(Name = "github_installation_id", EmitDefaultValue = false)]
        public long GithubInstallationId { get; set; }

        /// <summary>
        /// Gets or Sets GithubInstallationTokenPermissions
        /// </summary>
        [DataMember(Name = "github_installation_token_permissions", EmitDefaultValue = false)]
        public Dictionary<string, string> GithubInstallationTokenPermissions { get; set; }

        /// <summary>
        /// Gets or Sets GithubInstallationTokenRepositories
        /// </summary>
        [DataMember(Name = "github_installation_token_repositories", EmitDefaultValue = false)]
        public List<string> GithubInstallationTokenRepositories { get; set; }

        /// <summary>
        /// Gets or Sets GithubInstallationTokenRepositoriesIds
        /// </summary>
        [DataMember(Name = "github_installation_token_repositories_ids", EmitDefaultValue = false)]
        public List<long> GithubInstallationTokenRepositoriesIds { get; set; }

        /// <summary>
        /// Gets or Sets GithubOrganizationName
        /// </summary>
        [DataMember(Name = "github_organization_name", EmitDefaultValue = false)]
        public string GithubOrganizationName { get; set; }

        /// <summary>
        /// Gets or Sets GithubRepositoryPath
        /// </summary>
        [DataMember(Name = "github_repository_path", EmitDefaultValue = false)]
        public string GithubRepositoryPath { get; set; }

        /// <summary>
        /// Gets or Sets GitlabAccessToken
        /// </summary>
        [DataMember(Name = "gitlab_access_token", EmitDefaultValue = false)]
        public string GitlabAccessToken { get; set; }

        /// <summary>
        /// Gets or Sets GitlabAccessType
        /// </summary>
        [DataMember(Name = "gitlab_access_type", EmitDefaultValue = false)]
        public string GitlabAccessType { get; set; }

        /// <summary>
        /// Gets or Sets GitlabCertificate
        /// </summary>
        [DataMember(Name = "gitlab_certificate", EmitDefaultValue = false)]
        public string GitlabCertificate { get; set; }

        /// <summary>
        /// Gets or Sets GitlabGroupName
        /// </summary>
        [DataMember(Name = "gitlab_group_name", EmitDefaultValue = false)]
        public string GitlabGroupName { get; set; }

        /// <summary>
        /// Gets or Sets GitlabProjectName
        /// </summary>
        [DataMember(Name = "gitlab_project_name", EmitDefaultValue = false)]
        public string GitlabProjectName { get; set; }

        /// <summary>
        /// Gets or Sets GitlabRole
        /// </summary>
        [DataMember(Name = "gitlab_role", EmitDefaultValue = false)]
        public string GitlabRole { get; set; }

        /// <summary>
        /// Gets or Sets GitlabTokenScope
        /// </summary>
        [DataMember(Name = "gitlab_token_scope", EmitDefaultValue = false)]
        public List<string> GitlabTokenScope { get; set; }

        /// <summary>
        /// Gets or Sets GitlabUrl
        /// </summary>
        [DataMember(Name = "gitlab_url", EmitDefaultValue = false)]
        public string GitlabUrl { get; set; }

        /// <summary>
        /// Gets or Sets GkeClusterCaCertificate
        /// </summary>
        [DataMember(Name = "gke_cluster_ca_certificate", EmitDefaultValue = false)]
        public string GkeClusterCaCertificate { get; set; }

        /// <summary>
        /// Gets or Sets GkeClusterEndpoint
        /// </summary>
        [DataMember(Name = "gke_cluster_endpoint", EmitDefaultValue = false)]
        public string GkeClusterEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets GkeClusterName
        /// </summary>
        [DataMember(Name = "gke_cluster_name", EmitDefaultValue = false)]
        public string GkeClusterName { get; set; }

        /// <summary>
        /// Gets or Sets GkeServiceAccountKey
        /// </summary>
        [DataMember(Name = "gke_service_account_key", EmitDefaultValue = false)]
        public string GkeServiceAccountKey { get; set; }

        /// <summary>
        /// Gets or Sets GkeServiceAccountName
        /// </summary>
        [DataMember(Name = "gke_service_account_name", EmitDefaultValue = false)]
        public string GkeServiceAccountName { get; set; }

        /// <summary>
        /// Gets or Sets GoogleWorkspaceAccessMode
        /// </summary>
        [DataMember(Name = "google_workspace_access_mode", EmitDefaultValue = false)]
        public string GoogleWorkspaceAccessMode { get; set; }

        /// <summary>
        /// Gets or Sets GoogleWorkspaceAdminName
        /// </summary>
        [DataMember(Name = "google_workspace_admin_name", EmitDefaultValue = false)]
        public string GoogleWorkspaceAdminName { get; set; }

        /// <summary>
        /// Gets or Sets GoogleWorkspaceFixedUserNameSubClaimKey
        /// </summary>
        [DataMember(Name = "google_workspace_fixed_user_name_sub_claim_key", EmitDefaultValue = false)]
        public string GoogleWorkspaceFixedUserNameSubClaimKey { get; set; }

        /// <summary>
        /// Gets or Sets GoogleWorkspaceGroupName
        /// </summary>
        [DataMember(Name = "google_workspace_group_name", EmitDefaultValue = false)]
        public string GoogleWorkspaceGroupName { get; set; }

        /// <summary>
        /// Gets or Sets GoogleWorkspaceGroupRole
        /// </summary>
        [DataMember(Name = "google_workspace_group_role", EmitDefaultValue = false)]
        public string GoogleWorkspaceGroupRole { get; set; }

        /// <summary>
        /// Gets or Sets GoogleWorkspaceRoleName
        /// </summary>
        [DataMember(Name = "google_workspace_role_name", EmitDefaultValue = false)]
        public string GoogleWorkspaceRoleName { get; set; }

        /// <summary>
        /// Gets or Sets GoogleWorkspaceRoleScope
        /// </summary>
        [DataMember(Name = "google_workspace_role_scope", EmitDefaultValue = false)]
        public string GoogleWorkspaceRoleScope { get; set; }

        /// <summary>
        /// Gets or Sets GrantTypes
        /// </summary>
        [DataMember(Name = "grant_types", EmitDefaultValue = false)]
        public List<string> GrantTypes { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public string Groups { get; set; }

        /// <summary>
        /// Gets or Sets HanadbCreationStatements
        /// </summary>
        [DataMember(Name = "hanadb_creation_statements", EmitDefaultValue = false)]
        public string HanadbCreationStatements { get; set; }

        /// <summary>
        /// Gets or Sets HanadbRevocationStatements
        /// </summary>
        [DataMember(Name = "hanadb_revocation_statements", EmitDefaultValue = false)]
        public string HanadbRevocationStatements { get; set; }

        /// <summary>
        /// Gets or Sets HostName
        /// </summary>
        [DataMember(Name = "host_name", EmitDefaultValue = false)]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or Sets HostPort
        /// </summary>
        [DataMember(Name = "host_port", EmitDefaultValue = false)]
        public string HostPort { get; set; }

        /// <summary>
        /// Gets or Sets ImplementationType
        /// </summary>
        [DataMember(Name = "implementation_type", EmitDefaultValue = false)]
        public string ImplementationType { get; set; }

        /// <summary>
        /// Gets or Sets IsFixedUser
        /// </summary>
        [DataMember(Name = "is_fixed_user", EmitDefaultValue = false)]
        public string IsFixedUser { get; set; }

        /// <summary>
        /// relevant for CLIENT_TLS_CERTIFICATE client authentication type
        /// </summary>
        /// <value>relevant for CLIENT_TLS_CERTIFICATE client authentication type</value>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public string Issuer { get; set; }

        /// <summary>
        /// Gets or Sets ItemTargetsAssoc
        /// </summary>
        [DataMember(Name = "item_targets_assoc", EmitDefaultValue = false)]
        public List<ItemTargetAssociation> ItemTargetsAssoc { get; set; }

        /// <summary>
        /// Gets or Sets Jwks
        /// </summary>
        [DataMember(Name = "jwks", EmitDefaultValue = false)]
        public string Jwks { get; set; }

        /// <summary>
        /// Gets or Sets JwksUrl
        /// </summary>
        [DataMember(Name = "jwks_url", EmitDefaultValue = false)]
        public string JwksUrl { get; set; }

        /// <summary>
        /// comma-separated list of allowed namespaces. Can hold just * which signifies that any namespace is allowed
        /// </summary>
        /// <value>comma-separated list of allowed namespaces. Can hold just * which signifies that any namespace is allowed</value>
        [DataMember(Name = "k8s_allowed_namespaces", EmitDefaultValue = false)]
        public string K8sAllowedNamespaces { get; set; }

        /// <summary>
        /// Gets or Sets K8sAuthType
        /// </summary>
        [DataMember(Name = "k8s_auth_type", EmitDefaultValue = false)]
        public string K8sAuthType { get; set; }

        /// <summary>
        /// Gets or Sets K8sBearerToken
        /// </summary>
        [DataMember(Name = "k8s_bearer_token", EmitDefaultValue = false)]
        public string K8sBearerToken { get; set; }

        /// <summary>
        /// For K8s Client certificates authentication
        /// </summary>
        /// <value>For K8s Client certificates authentication</value>
        [DataMember(Name = "k8s_client_cert_data", EmitDefaultValue = false)]
        public string K8sClientCertData { get; set; }

        /// <summary>
        /// Gets or Sets K8sClientKeyData
        /// </summary>
        [DataMember(Name = "k8s_client_key_data", EmitDefaultValue = false)]
        public string K8sClientKeyData { get; set; }

        /// <summary>
        /// Gets or Sets K8sClusterCaCertificate
        /// </summary>
        [DataMember(Name = "k8s_cluster_ca_certificate", EmitDefaultValue = false)]
        public string K8sClusterCaCertificate { get; set; }

        /// <summary>
        /// Gets or Sets K8sClusterEndpoint
        /// </summary>
        [DataMember(Name = "k8s_cluster_endpoint", EmitDefaultValue = false)]
        public string K8sClusterEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets K8sClusterName
        /// </summary>
        [DataMember(Name = "k8s_cluster_name", EmitDefaultValue = false)]
        public string K8sClusterName { get; set; }

        /// <summary>
        /// when native k8s is in dynamic mode, user can define allowed namespaces, K8sServiceAccount doesn&#39;t exist from the start and will only be created at time of getting dynamic secret value By default dynamic mode is false and producer behaves like it did before
        /// </summary>
        /// <value>when native k8s is in dynamic mode, user can define allowed namespaces, K8sServiceAccount doesn&#39;t exist from the start and will only be created at time of getting dynamic secret value By default dynamic mode is false and producer behaves like it did before</value>
        [DataMember(Name = "k8s_dynamic_mode", EmitDefaultValue = true)]
        public bool K8sDynamicMode { get; set; }

        /// <summary>
        /// Yaml definition for creation of temporary objects. Field that can hold multiple docs from which following will be extracted: ServiceAccount, Role/ClusterRole and RoleBinding/ClusterRoleBinding. If ServiceAccount not specified - it will be generated automatically
        /// </summary>
        /// <value>Yaml definition for creation of temporary objects. Field that can hold multiple docs from which following will be extracted: ServiceAccount, Role/ClusterRole and RoleBinding/ClusterRoleBinding. If ServiceAccount not specified - it will be generated automatically</value>
        [DataMember(Name = "k8s_multiple_doc_yaml_temp_definition", EmitDefaultValue = false)]
        public List<int> K8sMultipleDocYamlTempDefinition { get; set; }

        /// <summary>
        /// Gets or Sets K8sNamespace
        /// </summary>
        [DataMember(Name = "k8s_namespace", EmitDefaultValue = false)]
        public string K8sNamespace { get; set; }

        /// <summary>
        /// Name of the pre-existing Role or ClusterRole to bind a generated service account to.
        /// </summary>
        /// <value>Name of the pre-existing Role or ClusterRole to bind a generated service account to.</value>
        [DataMember(Name = "k8s_role_name", EmitDefaultValue = false)]
        public string K8sRoleName { get; set; }

        /// <summary>
        /// Gets or Sets K8sRoleType
        /// </summary>
        [DataMember(Name = "k8s_role_type", EmitDefaultValue = false)]
        public string K8sRoleType { get; set; }

        /// <summary>
        /// Gets or Sets K8sServiceAccount
        /// </summary>
        [DataMember(Name = "k8s_service_account", EmitDefaultValue = false)]
        public string K8sServiceAccount { get; set; }

        /// <summary>
        /// Gets or Sets LastAdminRotation
        /// </summary>
        [DataMember(Name = "last_admin_rotation", EmitDefaultValue = false)]
        public long LastAdminRotation { get; set; }

        /// <summary>
        /// Gets or Sets LdapAudience
        /// </summary>
        [DataMember(Name = "ldap_audience", EmitDefaultValue = false)]
        public string LdapAudience { get; set; }

        /// <summary>
        /// Gets or Sets LdapBindDn
        /// </summary>
        [DataMember(Name = "ldap_bind_dn", EmitDefaultValue = false)]
        public string LdapBindDn { get; set; }

        /// <summary>
        /// Gets or Sets LdapBindPassword
        /// </summary>
        [DataMember(Name = "ldap_bind_password", EmitDefaultValue = false)]
        public string LdapBindPassword { get; set; }

        /// <summary>
        /// Gets or Sets LdapCertificate
        /// </summary>
        [DataMember(Name = "ldap_certificate", EmitDefaultValue = false)]
        public string LdapCertificate { get; set; }

        /// <summary>
        /// Gets or Sets LdapFixedUserNameSubClaimKey
        /// </summary>
        [DataMember(Name = "ldap_fixed_user_name_sub_claim_key", EmitDefaultValue = false)]
        public string LdapFixedUserNameSubClaimKey { get; set; }

        /// <summary>
        /// Gets or Sets LdapFixedUserType
        /// </summary>
        [DataMember(Name = "ldap_fixed_user_type", EmitDefaultValue = false)]
        public string LdapFixedUserType { get; set; }

        /// <summary>
        /// Gets or Sets LdapGroupDn
        /// </summary>
        [DataMember(Name = "ldap_group_dn", EmitDefaultValue = false)]
        public string LdapGroupDn { get; set; }

        /// <summary>
        /// Gets or Sets LdapTokenExpiration
        /// </summary>
        [DataMember(Name = "ldap_token_expiration", EmitDefaultValue = false)]
        public string LdapTokenExpiration { get; set; }

        /// <summary>
        /// Gets or Sets LdapUrl
        /// </summary>
        [DataMember(Name = "ldap_url", EmitDefaultValue = false)]
        public string LdapUrl { get; set; }

        /// <summary>
        /// Gets or Sets LdapUserAttr
        /// </summary>
        [DataMember(Name = "ldap_user_attr", EmitDefaultValue = false)]
        public string LdapUserAttr { get; set; }

        /// <summary>
        /// Gets or Sets LdapUserDn
        /// </summary>
        [DataMember(Name = "ldap_user_dn", EmitDefaultValue = false)]
        public string LdapUserDn { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Gets or Sets MongodbAtlasApiPrivateKey
        /// </summary>
        [DataMember(Name = "mongodb_atlas_api_private_key", EmitDefaultValue = false)]
        public string MongodbAtlasApiPrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets MongodbAtlasApiPublicKey
        /// </summary>
        [DataMember(Name = "mongodb_atlas_api_public_key", EmitDefaultValue = false)]
        public string MongodbAtlasApiPublicKey { get; set; }

        /// <summary>
        /// mongodb atlas fields
        /// </summary>
        /// <value>mongodb atlas fields</value>
        [DataMember(Name = "mongodb_atlas_project_id", EmitDefaultValue = false)]
        public string MongodbAtlasProjectId { get; set; }

        /// <summary>
        /// Gets or Sets MongodbCustomData
        /// </summary>
        [DataMember(Name = "mongodb_custom_data", EmitDefaultValue = false)]
        public string MongodbCustomData { get; set; }

        /// <summary>
        /// common fields
        /// </summary>
        /// <value>common fields</value>
        [DataMember(Name = "mongodb_db_name", EmitDefaultValue = false)]
        public string MongodbDbName { get; set; }

        /// <summary>
        /// Gets or Sets MongodbDefaultAuthDb
        /// </summary>
        [DataMember(Name = "mongodb_default_auth_db", EmitDefaultValue = false)]
        public string MongodbDefaultAuthDb { get; set; }

        /// <summary>
        /// Gets or Sets MongodbHostPort
        /// </summary>
        [DataMember(Name = "mongodb_host_port", EmitDefaultValue = false)]
        public string MongodbHostPort { get; set; }

        /// <summary>
        /// Gets or Sets MongodbIsAtlas
        /// </summary>
        [DataMember(Name = "mongodb_is_atlas", EmitDefaultValue = true)]
        public bool MongodbIsAtlas { get; set; }

        /// <summary>
        /// Gets or Sets MongodbPassword
        /// </summary>
        [DataMember(Name = "mongodb_password", EmitDefaultValue = false)]
        public string MongodbPassword { get; set; }

        /// <summary>
        /// common fields
        /// </summary>
        /// <value>common fields</value>
        [DataMember(Name = "mongodb_roles", EmitDefaultValue = false)]
        public string MongodbRoles { get; set; }

        /// <summary>
        /// mongodb fields
        /// </summary>
        /// <value>mongodb fields</value>
        [DataMember(Name = "mongodb_uri_connection", EmitDefaultValue = false)]
        public string MongodbUriConnection { get; set; }

        /// <summary>
        /// Gets or Sets MongodbUriOptions
        /// </summary>
        [DataMember(Name = "mongodb_uri_options", EmitDefaultValue = false)]
        public string MongodbUriOptions { get; set; }

        /// <summary>
        /// Gets or Sets MongodbUsername
        /// </summary>
        [DataMember(Name = "mongodb_username", EmitDefaultValue = false)]
        public string MongodbUsername { get; set; }

        /// <summary>
        /// Gets or Sets MssqlCreationStatements
        /// </summary>
        [DataMember(Name = "mssql_creation_statements", EmitDefaultValue = false)]
        public string MssqlCreationStatements { get; set; }

        /// <summary>
        /// Gets or Sets MssqlRevocationStatements
        /// </summary>
        [DataMember(Name = "mssql_revocation_statements", EmitDefaultValue = false)]
        public string MssqlRevocationStatements { get; set; }

        /// <summary>
        /// Gets or Sets MysqlCreationStatements
        /// </summary>
        [DataMember(Name = "mysql_creation_statements", EmitDefaultValue = false)]
        public string MysqlCreationStatements { get; set; }

        /// <summary>
        /// Gets or Sets MysqlRevocationStatements
        /// </summary>
        [DataMember(Name = "mysql_revocation_statements", EmitDefaultValue = false)]
        public string MysqlRevocationStatements { get; set; }

        /// <summary>
        /// Gets or Sets OracleCreationStatements
        /// </summary>
        [DataMember(Name = "oracle_creation_statements", EmitDefaultValue = false)]
        public string OracleCreationStatements { get; set; }

        /// <summary>
        /// Gets or Sets OracleRevocationStatements
        /// </summary>
        [DataMember(Name = "oracle_revocation_statements", EmitDefaultValue = false)]
        public string OracleRevocationStatements { get; set; }

        /// <summary>
        /// Gets or Sets OracleWalletDetails
        /// </summary>
        [DataMember(Name = "oracle_wallet_details", EmitDefaultValue = false)]
        public WalletDetails OracleWalletDetails { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets PasswordLength
        /// </summary>
        [DataMember(Name = "password_length", EmitDefaultValue = false)]
        public long PasswordLength { get; set; }

        /// <summary>
        /// Gets or Sets PasswordPolicy
        /// </summary>
        [DataMember(Name = "password_policy", EmitDefaultValue = false)]
        public string PasswordPolicy { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name = "payload", EmitDefaultValue = false)]
        public string Payload { get; set; }

        /// <summary>
        /// Gets or Sets PingUrl
        /// </summary>
        [DataMember(Name = "ping_url", EmitDefaultValue = false)]
        public string PingUrl { get; set; }

        /// <summary>
        /// Gets or Sets PostgresCreationStatements
        /// </summary>
        [DataMember(Name = "postgres_creation_statements", EmitDefaultValue = false)]
        public string PostgresCreationStatements { get; set; }

        /// <summary>
        /// Gets or Sets PostgresRevocationStatements
        /// </summary>
        [DataMember(Name = "postgres_revocation_statements", EmitDefaultValue = false)]
        public string PostgresRevocationStatements { get; set; }

        /// <summary>
        /// Gets or Sets PrivilegedUser
        /// </summary>
        [DataMember(Name = "privileged_user", EmitDefaultValue = false)]
        public string PrivilegedUser { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqServerPassword
        /// </summary>
        [DataMember(Name = "rabbitmq_server_password", EmitDefaultValue = false)]
        public string RabbitmqServerPassword { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqServerUri
        /// </summary>
        [DataMember(Name = "rabbitmq_server_uri", EmitDefaultValue = false)]
        public string RabbitmqServerUri { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqServerUser
        /// </summary>
        [DataMember(Name = "rabbitmq_server_user", EmitDefaultValue = false)]
        public string RabbitmqServerUser { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqUserConfPermission
        /// </summary>
        [DataMember(Name = "rabbitmq_user_conf_permission", EmitDefaultValue = false)]
        public string RabbitmqUserConfPermission { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqUserReadPermission
        /// </summary>
        [DataMember(Name = "rabbitmq_user_read_permission", EmitDefaultValue = false)]
        public string RabbitmqUserReadPermission { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqUserTags
        /// </summary>
        [DataMember(Name = "rabbitmq_user_tags", EmitDefaultValue = false)]
        public string RabbitmqUserTags { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqUserVhost
        /// </summary>
        [DataMember(Name = "rabbitmq_user_vhost", EmitDefaultValue = false)]
        public string RabbitmqUserVhost { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqUserWritePermission
        /// </summary>
        [DataMember(Name = "rabbitmq_user_write_permission", EmitDefaultValue = false)]
        public string RabbitmqUserWritePermission { get; set; }

        /// <summary>
        /// Gets or Sets RdpFixedUserNameSubClaimKey
        /// </summary>
        [DataMember(Name = "rdp_fixed_user_name_sub_claim_key", EmitDefaultValue = false)]
        public string RdpFixedUserNameSubClaimKey { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUris
        /// </summary>
        [DataMember(Name = "redirect_uris", EmitDefaultValue = false)]
        public List<string> RedirectUris { get; set; }

        /// <summary>
        /// Gets or Sets RedshiftCreationStatements
        /// </summary>
        [DataMember(Name = "redshift_creation_statements", EmitDefaultValue = false)]
        public string RedshiftCreationStatements { get; set; }

        /// <summary>
        /// Gets or Sets RestrictedScopes
        /// </summary>
        [DataMember(Name = "restricted_scopes", EmitDefaultValue = false)]
        public List<string> RestrictedScopes { get; set; }

        /// <summary>
        /// Gets or Sets RevokeSyncUrl
        /// </summary>
        [DataMember(Name = "revoke_sync_url", EmitDefaultValue = false)]
        public string RevokeSyncUrl { get; set; }

        /// <summary>
        /// Gets or Sets RotateSyncUrl
        /// </summary>
        [DataMember(Name = "rotate_sync_url", EmitDefaultValue = false)]
        public string RotateSyncUrl { get; set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [DataMember(Name = "scopes", EmitDefaultValue = false)]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// Gets or Sets SecureRemoteAccessDetails
        /// </summary>
        [DataMember(Name = "secure_remote_access_details", EmitDefaultValue = false)]
        public SecureRemoteAccess SecureRemoteAccessDetails { get; set; }

        /// <summary>
        /// Gets or Sets SessionExtensionWarnIntervalMin
        /// </summary>
        [DataMember(Name = "session_extension_warn_interval_min", EmitDefaultValue = false)]
        public long SessionExtensionWarnIntervalMin { get; set; }

        /// <summary>
        /// Gets or Sets SfAccount
        /// </summary>
        [DataMember(Name = "sf_account", EmitDefaultValue = false)]
        public string SfAccount { get; set; }

        /// <summary>
        /// generated  users info
        /// </summary>
        /// <value>generated  users info</value>
        [DataMember(Name = "sf_user_role", EmitDefaultValue = false)]
        public string SfUserRole { get; set; }

        /// <summary>
        /// Gets or Sets SfWarehouseName
        /// </summary>
        [DataMember(Name = "sf_warehouse_name", EmitDefaultValue = false)]
        public string SfWarehouseName { get; set; }

        /// <summary>
        /// TODO delete this after migration
        /// </summary>
        /// <value>TODO delete this after migration</value>
        [DataMember(Name = "should_stop", EmitDefaultValue = false)]
        public string ShouldStop { get; set; }

        /// <summary>
        /// Gets or Sets SigningAlgorithm
        /// </summary>
        [DataMember(Name = "signing_algorithm", EmitDefaultValue = false)]
        public string SigningAlgorithm { get; set; }

        /// <summary>
        /// (Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field
        /// </summary>
        /// <value>(Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field</value>
        [DataMember(Name = "ssl_connection_certificate", EmitDefaultValue = false)]
        public string SslConnectionCertificate { get; set; }

        /// <summary>
        /// (Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB
        /// </summary>
        /// <value>(Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB</value>
        [DataMember(Name = "ssl_connection_mode", EmitDefaultValue = true)]
        public bool SslConnectionMode { get; set; }

        /// <summary>
        /// Gets or Sets SubjectDn
        /// </summary>
        [DataMember(Name = "subject_dn", EmitDefaultValue = false)]
        public string SubjectDn { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets TimeoutSeconds
        /// </summary>
        [DataMember(Name = "timeout_seconds", EmitDefaultValue = false)]
        public long TimeoutSeconds { get; set; }

        /// <summary>
        /// Gets or Sets UseGwCloudIdentity
        /// </summary>
        [DataMember(Name = "use_gw_cloud_identity", EmitDefaultValue = true)]
        public bool UseGwCloudIdentity { get; set; }

        /// <summary>
        /// Gets or Sets UseGwServiceAccount
        /// </summary>
        [DataMember(Name = "use_gw_service_account", EmitDefaultValue = true)]
        public bool UseGwServiceAccount { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "user_name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets UserPassword
        /// </summary>
        [DataMember(Name = "user_password", EmitDefaultValue = false)]
        public string UserPassword { get; set; }

        /// <summary>
        /// Gets or Sets UserPrincipalName
        /// </summary>
        [DataMember(Name = "user_principal_name", EmitDefaultValue = false)]
        public string UserPrincipalName { get; set; }

        /// <summary>
        /// Gets or Sets UserTtl
        /// </summary>
        [DataMember(Name = "user_ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Gets or Sets UsernameLength
        /// </summary>
        [DataMember(Name = "username_length", EmitDefaultValue = false)]
        public long UsernameLength { get; set; }

        /// <summary>
        /// Gets or Sets UsernamePolicy
        /// </summary>
        [DataMember(Name = "username_policy", EmitDefaultValue = false)]
        public string UsernamePolicy { get; set; }

        /// <summary>
        /// Gets or Sets VenafiAllowSubdomains
        /// </summary>
        [DataMember(Name = "venafi_allow_subdomains", EmitDefaultValue = true)]
        public bool VenafiAllowSubdomains { get; set; }

        /// <summary>
        /// Gets or Sets VenafiAllowedDomains
        /// </summary>
        [DataMember(Name = "venafi_allowed_domains", EmitDefaultValue = false)]
        public List<string> VenafiAllowedDomains { get; set; }

        /// <summary>
        /// Gets or Sets VenafiApiKey
        /// </summary>
        [DataMember(Name = "venafi_api_key", EmitDefaultValue = false)]
        public string VenafiApiKey { get; set; }

        /// <summary>
        /// Gets or Sets VenafiAutoGeneratedFolder
        /// </summary>
        [DataMember(Name = "venafi_auto_generated_folder", EmitDefaultValue = false)]
        public string VenafiAutoGeneratedFolder { get; set; }

        /// <summary>
        /// Gets or Sets VenafiBaseUrl
        /// </summary>
        [DataMember(Name = "venafi_base_url", EmitDefaultValue = false)]
        public string VenafiBaseUrl { get; set; }

        /// <summary>
        /// Gets or Sets VenafiRootFirstInChain
        /// </summary>
        [DataMember(Name = "venafi_root_first_in_chain", EmitDefaultValue = true)]
        public bool VenafiRootFirstInChain { get; set; }

        /// <summary>
        /// Gets or Sets VenafiSignUsingAkeylessPki
        /// </summary>
        [DataMember(Name = "venafi_sign_using_akeyless_pki", EmitDefaultValue = true)]
        public bool VenafiSignUsingAkeylessPki { get; set; }

        /// <summary>
        /// Gets or Sets VenafiSignerKeyName
        /// </summary>
        [DataMember(Name = "venafi_signer_key_name", EmitDefaultValue = false)]
        public string VenafiSignerKeyName { get; set; }

        /// <summary>
        /// Gets or Sets VenafiStorePrivateKey
        /// </summary>
        [DataMember(Name = "venafi_store_private_key", EmitDefaultValue = true)]
        public bool VenafiStorePrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets VenafiTppAccessToken
        /// </summary>
        [DataMember(Name = "venafi_tpp_access_token", EmitDefaultValue = false)]
        public string VenafiTppAccessToken { get; set; }

        /// <summary>
        /// Gets or Sets VenafiTppClientId
        /// </summary>
        [DataMember(Name = "venafi_tpp_client_id", EmitDefaultValue = false)]
        public string VenafiTppClientId { get; set; }

        /// <summary>
        /// Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead
        /// </summary>
        /// <value>Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead</value>
        [DataMember(Name = "venafi_tpp_password", EmitDefaultValue = false)]
        public string VenafiTppPassword { get; set; }

        /// <summary>
        /// Gets or Sets VenafiTppRefreshToken
        /// </summary>
        [DataMember(Name = "venafi_tpp_refresh_token", EmitDefaultValue = false)]
        public string VenafiTppRefreshToken { get; set; }

        /// <summary>
        /// Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead
        /// </summary>
        /// <value>Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead</value>
        [DataMember(Name = "venafi_tpp_username", EmitDefaultValue = false)]
        public string VenafiTppUsername { get; set; }

        /// <summary>
        /// Gets or Sets VenafiUseTpp
        /// </summary>
        [DataMember(Name = "venafi_use_tpp", EmitDefaultValue = true)]
        public bool VenafiUseTpp { get; set; }

        /// <summary>
        /// Gets or Sets VenafiZone
        /// </summary>
        [DataMember(Name = "venafi_zone", EmitDefaultValue = false)]
        public string VenafiZone { get; set; }

        /// <summary>
        /// Gets or Sets WarnBeforeUserExpirationMin
        /// </summary>
        [DataMember(Name = "warn_before_user_expiration_min", EmitDefaultValue = false)]
        public long WarnBeforeUserExpirationMin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DSProducerDetails {\n");
            sb.Append("  AccessTokenManagerId: ").Append(AccessTokenManagerId).Append("\n");
            sb.Append("  AclRules: ").Append(AclRules).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AdminName: ").Append(AdminName).Append("\n");
            sb.Append("  AdminPwd: ").Append(AdminPwd).Append("\n");
            sb.Append("  AdminRotationIntervalDays: ").Append(AdminRotationIntervalDays).Append("\n");
            sb.Append("  AdministrativePort: ").Append(AdministrativePort).Append("\n");
            sb.Append("  ArtifactoryAdminApikey: ").Append(ArtifactoryAdminApikey).Append("\n");
            sb.Append("  ArtifactoryAdminUsername: ").Append(ArtifactoryAdminUsername).Append("\n");
            sb.Append("  ArtifactoryBaseUrl: ").Append(ArtifactoryBaseUrl).Append("\n");
            sb.Append("  ArtifactoryTokenAudience: ").Append(ArtifactoryTokenAudience).Append("\n");
            sb.Append("  ArtifactoryTokenScope: ").Append(ArtifactoryTokenScope).Append("\n");
            sb.Append("  AuthorizationPort: ").Append(AuthorizationPort).Append("\n");
            sb.Append("  AwsAccessKeyId: ").Append(AwsAccessKeyId).Append("\n");
            sb.Append("  AwsAccessMode: ").Append(AwsAccessMode).Append("\n");
            sb.Append("  AwsRegion: ").Append(AwsRegion).Append("\n");
            sb.Append("  AwsRoleArns: ").Append(AwsRoleArns).Append("\n");
            sb.Append("  AwsSecretAccessKey: ").Append(AwsSecretAccessKey).Append("\n");
            sb.Append("  AwsSessionTags: ").Append(AwsSessionTags).Append("\n");
            sb.Append("  AwsSessionToken: ").Append(AwsSessionToken).Append("\n");
            sb.Append("  AwsTransitiveTagKeys: ").Append(AwsTransitiveTagKeys).Append("\n");
            sb.Append("  AwsUserConsoleAccess: ").Append(AwsUserConsoleAccess).Append("\n");
            sb.Append("  AwsUserGroups: ").Append(AwsUserGroups).Append("\n");
            sb.Append("  AwsUserPolicies: ").Append(AwsUserPolicies).Append("\n");
            sb.Append("  AwsUserProgrammaticAccess: ").Append(AwsUserProgrammaticAccess).Append("\n");
            sb.Append("  AzureAppObjectId: ").Append(AzureAppObjectId).Append("\n");
            sb.Append("  AzureClientId: ").Append(AzureClientId).Append("\n");
            sb.Append("  AzureClientSecret: ").Append(AzureClientSecret).Append("\n");
            sb.Append("  AzureFixedUserNameSubClaimKey: ").Append(AzureFixedUserNameSubClaimKey).Append("\n");
            sb.Append("  AzureFixedUserOnly: ").Append(AzureFixedUserOnly).Append("\n");
            sb.Append("  AzureResourceGroupName: ").Append(AzureResourceGroupName).Append("\n");
            sb.Append("  AzureResourceName: ").Append(AzureResourceName).Append("\n");
            sb.Append("  AzureSubscriptionId: ").Append(AzureSubscriptionId).Append("\n");
            sb.Append("  AzureTenantId: ").Append(AzureTenantId).Append("\n");
            sb.Append("  AzureUserGroupsObjId: ").Append(AzureUserGroupsObjId).Append("\n");
            sb.Append("  AzureUserPortalAccess: ").Append(AzureUserPortalAccess).Append("\n");
            sb.Append("  AzureUserProgrammaticAccess: ").Append(AzureUserProgrammaticAccess).Append("\n");
            sb.Append("  AzureUserRolesTemplateId: ").Append(AzureUserRolesTemplateId).Append("\n");
            sb.Append("  AzureUsername: ").Append(AzureUsername).Append("\n");
            sb.Append("  CassandraCreationStatements: ").Append(CassandraCreationStatements).Append("\n");
            sb.Append("  ChefOrganizations: ").Append(ChefOrganizations).Append("\n");
            sb.Append("  ChefServerAccessMode: ").Append(ChefServerAccessMode).Append("\n");
            sb.Append("  ChefServerHostName: ").Append(ChefServerHostName).Append("\n");
            sb.Append("  ChefServerKey: ").Append(ChefServerKey).Append("\n");
            sb.Append("  ChefServerPort: ").Append(ChefServerPort).Append("\n");
            sb.Append("  ChefServerUrl: ").Append(ChefServerUrl).Append("\n");
            sb.Append("  ChefServerUsername: ").Append(ChefServerUsername).Append("\n");
            sb.Append("  ChefSkipSsl: ").Append(ChefSkipSsl).Append("\n");
            sb.Append("  ClientAuthenticationType: ").Append(ClientAuthenticationType).Append("\n");
            sb.Append("  CloudServiceProvider: ").Append(CloudServiceProvider).Append("\n");
            sb.Append("  ClusterMode: ").Append(ClusterMode).Append("\n");
            sb.Append("  ConnectionType: ").Append(ConnectionType).Append("\n");
            sb.Append("  CreateSyncUrl: ").Append(CreateSyncUrl).Append("\n");
            sb.Append("  DbClientId: ").Append(DbClientId).Append("\n");
            sb.Append("  DbClientSecret: ").Append(DbClientSecret).Append("\n");
            sb.Append("  DbHostName: ").Append(DbHostName).Append("\n");
            sb.Append("  DbIsolationLevel: ").Append(DbIsolationLevel).Append("\n");
            sb.Append("  DbMaxIdleConns: ").Append(DbMaxIdleConns).Append("\n");
            sb.Append("  DbMaxOpenConns: ").Append(DbMaxOpenConns).Append("\n");
            sb.Append("  DbName: ").Append(DbName).Append("\n");
            sb.Append("  DbPort: ").Append(DbPort).Append("\n");
            sb.Append("  DbPrivateKey: ").Append(DbPrivateKey).Append("\n");
            sb.Append("  DbPrivateKeyPassphrase: ").Append(DbPrivateKeyPassphrase).Append("\n");
            sb.Append("  DbPwd: ").Append(DbPwd).Append("\n");
            sb.Append("  DbServerCertificates: ").Append(DbServerCertificates).Append("\n");
            sb.Append("  DbServerName: ").Append(DbServerName).Append("\n");
            sb.Append("  DbTenantId: ").Append(DbTenantId).Append("\n");
            sb.Append("  DbUserName: ").Append(DbUserName).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  DynamicSecretId: ").Append(DynamicSecretId).Append("\n");
            sb.Append("  DynamicSecretKey: ").Append(DynamicSecretKey).Append("\n");
            sb.Append("  DynamicSecretName: ").Append(DynamicSecretName).Append("\n");
            sb.Append("  DynamicSecretType: ").Append(DynamicSecretType).Append("\n");
            sb.Append("  EksAccessKeyId: ").Append(EksAccessKeyId).Append("\n");
            sb.Append("  EksAssumeRole: ").Append(EksAssumeRole).Append("\n");
            sb.Append("  EksClusterCaCertificate: ").Append(EksClusterCaCertificate).Append("\n");
            sb.Append("  EksClusterEndpoint: ").Append(EksClusterEndpoint).Append("\n");
            sb.Append("  EksClusterName: ").Append(EksClusterName).Append("\n");
            sb.Append("  EksRegion: ").Append(EksRegion).Append("\n");
            sb.Append("  EksSecretAccessKey: ").Append(EksSecretAccessKey).Append("\n");
            sb.Append("  EnableAdminRotation: ").Append(EnableAdminRotation).Append("\n");
            sb.Append("  EnforceReplayPrevention: ").Append(EnforceReplayPrevention).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ExternallyProvidedUser: ").Append(ExternallyProvidedUser).Append("\n");
            sb.Append("  FailureMessage: ").Append(FailureMessage).Append("\n");
            sb.Append("  FixedUserOnly: ").Append(FixedUserOnly).Append("\n");
            sb.Append("  GcpKeyAlgo: ").Append(GcpKeyAlgo).Append("\n");
            sb.Append("  GcpRoleBindings: ").Append(GcpRoleBindings).Append("\n");
            sb.Append("  GcpServiceAccountEmail: ").Append(GcpServiceAccountEmail).Append("\n");
            sb.Append("  GcpServiceAccountKey: ").Append(GcpServiceAccountKey).Append("\n");
            sb.Append("  GcpServiceAccountKeyBase64: ").Append(GcpServiceAccountKeyBase64).Append("\n");
            sb.Append("  GcpServiceAccountKeyId: ").Append(GcpServiceAccountKeyId).Append("\n");
            sb.Append("  GcpServiceAccountType: ").Append(GcpServiceAccountType).Append("\n");
            sb.Append("  GcpTmpServiceAccountName: ").Append(GcpTmpServiceAccountName).Append("\n");
            sb.Append("  GcpTokenLifetime: ").Append(GcpTokenLifetime).Append("\n");
            sb.Append("  GcpTokenScope: ").Append(GcpTokenScope).Append("\n");
            sb.Append("  GcpTokenType: ").Append(GcpTokenType).Append("\n");
            sb.Append("  GithubAppId: ").Append(GithubAppId).Append("\n");
            sb.Append("  GithubAppPrivateKey: ").Append(GithubAppPrivateKey).Append("\n");
            sb.Append("  GithubBaseUrl: ").Append(GithubBaseUrl).Append("\n");
            sb.Append("  GithubInstallationId: ").Append(GithubInstallationId).Append("\n");
            sb.Append("  GithubInstallationTokenPermissions: ").Append(GithubInstallationTokenPermissions).Append("\n");
            sb.Append("  GithubInstallationTokenRepositories: ").Append(GithubInstallationTokenRepositories).Append("\n");
            sb.Append("  GithubInstallationTokenRepositoriesIds: ").Append(GithubInstallationTokenRepositoriesIds).Append("\n");
            sb.Append("  GithubOrganizationName: ").Append(GithubOrganizationName).Append("\n");
            sb.Append("  GithubRepositoryPath: ").Append(GithubRepositoryPath).Append("\n");
            sb.Append("  GitlabAccessToken: ").Append(GitlabAccessToken).Append("\n");
            sb.Append("  GitlabAccessType: ").Append(GitlabAccessType).Append("\n");
            sb.Append("  GitlabCertificate: ").Append(GitlabCertificate).Append("\n");
            sb.Append("  GitlabGroupName: ").Append(GitlabGroupName).Append("\n");
            sb.Append("  GitlabProjectName: ").Append(GitlabProjectName).Append("\n");
            sb.Append("  GitlabRole: ").Append(GitlabRole).Append("\n");
            sb.Append("  GitlabTokenScope: ").Append(GitlabTokenScope).Append("\n");
            sb.Append("  GitlabUrl: ").Append(GitlabUrl).Append("\n");
            sb.Append("  GkeClusterCaCertificate: ").Append(GkeClusterCaCertificate).Append("\n");
            sb.Append("  GkeClusterEndpoint: ").Append(GkeClusterEndpoint).Append("\n");
            sb.Append("  GkeClusterName: ").Append(GkeClusterName).Append("\n");
            sb.Append("  GkeServiceAccountKey: ").Append(GkeServiceAccountKey).Append("\n");
            sb.Append("  GkeServiceAccountName: ").Append(GkeServiceAccountName).Append("\n");
            sb.Append("  GoogleWorkspaceAccessMode: ").Append(GoogleWorkspaceAccessMode).Append("\n");
            sb.Append("  GoogleWorkspaceAdminName: ").Append(GoogleWorkspaceAdminName).Append("\n");
            sb.Append("  GoogleWorkspaceFixedUserNameSubClaimKey: ").Append(GoogleWorkspaceFixedUserNameSubClaimKey).Append("\n");
            sb.Append("  GoogleWorkspaceGroupName: ").Append(GoogleWorkspaceGroupName).Append("\n");
            sb.Append("  GoogleWorkspaceGroupRole: ").Append(GoogleWorkspaceGroupRole).Append("\n");
            sb.Append("  GoogleWorkspaceRoleName: ").Append(GoogleWorkspaceRoleName).Append("\n");
            sb.Append("  GoogleWorkspaceRoleScope: ").Append(GoogleWorkspaceRoleScope).Append("\n");
            sb.Append("  GrantTypes: ").Append(GrantTypes).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  HanadbCreationStatements: ").Append(HanadbCreationStatements).Append("\n");
            sb.Append("  HanadbRevocationStatements: ").Append(HanadbRevocationStatements).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  HostPort: ").Append(HostPort).Append("\n");
            sb.Append("  ImplementationType: ").Append(ImplementationType).Append("\n");
            sb.Append("  IsFixedUser: ").Append(IsFixedUser).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  ItemTargetsAssoc: ").Append(ItemTargetsAssoc).Append("\n");
            sb.Append("  Jwks: ").Append(Jwks).Append("\n");
            sb.Append("  JwksUrl: ").Append(JwksUrl).Append("\n");
            sb.Append("  K8sAllowedNamespaces: ").Append(K8sAllowedNamespaces).Append("\n");
            sb.Append("  K8sAuthType: ").Append(K8sAuthType).Append("\n");
            sb.Append("  K8sBearerToken: ").Append(K8sBearerToken).Append("\n");
            sb.Append("  K8sClientCertData: ").Append(K8sClientCertData).Append("\n");
            sb.Append("  K8sClientKeyData: ").Append(K8sClientKeyData).Append("\n");
            sb.Append("  K8sClusterCaCertificate: ").Append(K8sClusterCaCertificate).Append("\n");
            sb.Append("  K8sClusterEndpoint: ").Append(K8sClusterEndpoint).Append("\n");
            sb.Append("  K8sClusterName: ").Append(K8sClusterName).Append("\n");
            sb.Append("  K8sDynamicMode: ").Append(K8sDynamicMode).Append("\n");
            sb.Append("  K8sMultipleDocYamlTempDefinition: ").Append(K8sMultipleDocYamlTempDefinition).Append("\n");
            sb.Append("  K8sNamespace: ").Append(K8sNamespace).Append("\n");
            sb.Append("  K8sRoleName: ").Append(K8sRoleName).Append("\n");
            sb.Append("  K8sRoleType: ").Append(K8sRoleType).Append("\n");
            sb.Append("  K8sServiceAccount: ").Append(K8sServiceAccount).Append("\n");
            sb.Append("  LastAdminRotation: ").Append(LastAdminRotation).Append("\n");
            sb.Append("  LdapAudience: ").Append(LdapAudience).Append("\n");
            sb.Append("  LdapBindDn: ").Append(LdapBindDn).Append("\n");
            sb.Append("  LdapBindPassword: ").Append(LdapBindPassword).Append("\n");
            sb.Append("  LdapCertificate: ").Append(LdapCertificate).Append("\n");
            sb.Append("  LdapFixedUserNameSubClaimKey: ").Append(LdapFixedUserNameSubClaimKey).Append("\n");
            sb.Append("  LdapFixedUserType: ").Append(LdapFixedUserType).Append("\n");
            sb.Append("  LdapGroupDn: ").Append(LdapGroupDn).Append("\n");
            sb.Append("  LdapTokenExpiration: ").Append(LdapTokenExpiration).Append("\n");
            sb.Append("  LdapUrl: ").Append(LdapUrl).Append("\n");
            sb.Append("  LdapUserAttr: ").Append(LdapUserAttr).Append("\n");
            sb.Append("  LdapUserDn: ").Append(LdapUserDn).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  MongodbAtlasApiPrivateKey: ").Append(MongodbAtlasApiPrivateKey).Append("\n");
            sb.Append("  MongodbAtlasApiPublicKey: ").Append(MongodbAtlasApiPublicKey).Append("\n");
            sb.Append("  MongodbAtlasProjectId: ").Append(MongodbAtlasProjectId).Append("\n");
            sb.Append("  MongodbCustomData: ").Append(MongodbCustomData).Append("\n");
            sb.Append("  MongodbDbName: ").Append(MongodbDbName).Append("\n");
            sb.Append("  MongodbDefaultAuthDb: ").Append(MongodbDefaultAuthDb).Append("\n");
            sb.Append("  MongodbHostPort: ").Append(MongodbHostPort).Append("\n");
            sb.Append("  MongodbIsAtlas: ").Append(MongodbIsAtlas).Append("\n");
            sb.Append("  MongodbPassword: ").Append(MongodbPassword).Append("\n");
            sb.Append("  MongodbRoles: ").Append(MongodbRoles).Append("\n");
            sb.Append("  MongodbUriConnection: ").Append(MongodbUriConnection).Append("\n");
            sb.Append("  MongodbUriOptions: ").Append(MongodbUriOptions).Append("\n");
            sb.Append("  MongodbUsername: ").Append(MongodbUsername).Append("\n");
            sb.Append("  MssqlCreationStatements: ").Append(MssqlCreationStatements).Append("\n");
            sb.Append("  MssqlRevocationStatements: ").Append(MssqlRevocationStatements).Append("\n");
            sb.Append("  MysqlCreationStatements: ").Append(MysqlCreationStatements).Append("\n");
            sb.Append("  MysqlRevocationStatements: ").Append(MysqlRevocationStatements).Append("\n");
            sb.Append("  OracleCreationStatements: ").Append(OracleCreationStatements).Append("\n");
            sb.Append("  OracleRevocationStatements: ").Append(OracleRevocationStatements).Append("\n");
            sb.Append("  OracleWalletDetails: ").Append(OracleWalletDetails).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PasswordLength: ").Append(PasswordLength).Append("\n");
            sb.Append("  PasswordPolicy: ").Append(PasswordPolicy).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  PingUrl: ").Append(PingUrl).Append("\n");
            sb.Append("  PostgresCreationStatements: ").Append(PostgresCreationStatements).Append("\n");
            sb.Append("  PostgresRevocationStatements: ").Append(PostgresRevocationStatements).Append("\n");
            sb.Append("  PrivilegedUser: ").Append(PrivilegedUser).Append("\n");
            sb.Append("  RabbitmqServerPassword: ").Append(RabbitmqServerPassword).Append("\n");
            sb.Append("  RabbitmqServerUri: ").Append(RabbitmqServerUri).Append("\n");
            sb.Append("  RabbitmqServerUser: ").Append(RabbitmqServerUser).Append("\n");
            sb.Append("  RabbitmqUserConfPermission: ").Append(RabbitmqUserConfPermission).Append("\n");
            sb.Append("  RabbitmqUserReadPermission: ").Append(RabbitmqUserReadPermission).Append("\n");
            sb.Append("  RabbitmqUserTags: ").Append(RabbitmqUserTags).Append("\n");
            sb.Append("  RabbitmqUserVhost: ").Append(RabbitmqUserVhost).Append("\n");
            sb.Append("  RabbitmqUserWritePermission: ").Append(RabbitmqUserWritePermission).Append("\n");
            sb.Append("  RdpFixedUserNameSubClaimKey: ").Append(RdpFixedUserNameSubClaimKey).Append("\n");
            sb.Append("  RedirectUris: ").Append(RedirectUris).Append("\n");
            sb.Append("  RedshiftCreationStatements: ").Append(RedshiftCreationStatements).Append("\n");
            sb.Append("  RestrictedScopes: ").Append(RestrictedScopes).Append("\n");
            sb.Append("  RevokeSyncUrl: ").Append(RevokeSyncUrl).Append("\n");
            sb.Append("  RotateSyncUrl: ").Append(RotateSyncUrl).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  SecureRemoteAccessDetails: ").Append(SecureRemoteAccessDetails).Append("\n");
            sb.Append("  SessionExtensionWarnIntervalMin: ").Append(SessionExtensionWarnIntervalMin).Append("\n");
            sb.Append("  SfAccount: ").Append(SfAccount).Append("\n");
            sb.Append("  SfUserRole: ").Append(SfUserRole).Append("\n");
            sb.Append("  SfWarehouseName: ").Append(SfWarehouseName).Append("\n");
            sb.Append("  ShouldStop: ").Append(ShouldStop).Append("\n");
            sb.Append("  SigningAlgorithm: ").Append(SigningAlgorithm).Append("\n");
            sb.Append("  SslConnectionCertificate: ").Append(SslConnectionCertificate).Append("\n");
            sb.Append("  SslConnectionMode: ").Append(SslConnectionMode).Append("\n");
            sb.Append("  SubjectDn: ").Append(SubjectDn).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TimeoutSeconds: ").Append(TimeoutSeconds).Append("\n");
            sb.Append("  UseGwCloudIdentity: ").Append(UseGwCloudIdentity).Append("\n");
            sb.Append("  UseGwServiceAccount: ").Append(UseGwServiceAccount).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  UserPassword: ").Append(UserPassword).Append("\n");
            sb.Append("  UserPrincipalName: ").Append(UserPrincipalName).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("  UsernameLength: ").Append(UsernameLength).Append("\n");
            sb.Append("  UsernamePolicy: ").Append(UsernamePolicy).Append("\n");
            sb.Append("  VenafiAllowSubdomains: ").Append(VenafiAllowSubdomains).Append("\n");
            sb.Append("  VenafiAllowedDomains: ").Append(VenafiAllowedDomains).Append("\n");
            sb.Append("  VenafiApiKey: ").Append(VenafiApiKey).Append("\n");
            sb.Append("  VenafiAutoGeneratedFolder: ").Append(VenafiAutoGeneratedFolder).Append("\n");
            sb.Append("  VenafiBaseUrl: ").Append(VenafiBaseUrl).Append("\n");
            sb.Append("  VenafiRootFirstInChain: ").Append(VenafiRootFirstInChain).Append("\n");
            sb.Append("  VenafiSignUsingAkeylessPki: ").Append(VenafiSignUsingAkeylessPki).Append("\n");
            sb.Append("  VenafiSignerKeyName: ").Append(VenafiSignerKeyName).Append("\n");
            sb.Append("  VenafiStorePrivateKey: ").Append(VenafiStorePrivateKey).Append("\n");
            sb.Append("  VenafiTppAccessToken: ").Append(VenafiTppAccessToken).Append("\n");
            sb.Append("  VenafiTppClientId: ").Append(VenafiTppClientId).Append("\n");
            sb.Append("  VenafiTppPassword: ").Append(VenafiTppPassword).Append("\n");
            sb.Append("  VenafiTppRefreshToken: ").Append(VenafiTppRefreshToken).Append("\n");
            sb.Append("  VenafiTppUsername: ").Append(VenafiTppUsername).Append("\n");
            sb.Append("  VenafiUseTpp: ").Append(VenafiUseTpp).Append("\n");
            sb.Append("  VenafiZone: ").Append(VenafiZone).Append("\n");
            sb.Append("  WarnBeforeUserExpirationMin: ").Append(WarnBeforeUserExpirationMin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
