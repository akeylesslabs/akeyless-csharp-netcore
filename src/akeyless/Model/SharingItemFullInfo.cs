/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SharingItemFullInfo
    /// </summary>
    [DataContract(Name = "SharingItemFullInfo")]
    public partial class SharingItemFullInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharingItemFullInfo" /> class.
        /// </summary>
        /// <param name="assigners">assigners.</param>
        /// <param name="capabilities">The approved/denied capabilities in the path.</param>
        /// <param name="cb">cb.</param>
        /// <param name="isLimitAccess">flag that indicate that this rule is allowed to be access RemainingAccess of times..</param>
        /// <param name="itemId">The item id this rule directly refers to (when applicable).</param>
        /// <param name="name">name.</param>
        /// <param name="numberOfAccessUsed">numberOfAccessUsed.</param>
        /// <param name="numberOfAllowedAccess">numberOfAllowedAccess.</param>
        /// <param name="path">The path the rule refers to.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="ttl">ttl.</param>
        /// <param name="type">type.</param>
        public SharingItemFullInfo(List<RuleAssigner> assigners = default(List<RuleAssigner>), List<string> capabilities = default(List<string>), int cb = default(int), bool isLimitAccess = default(bool), long itemId = default(long), string name = default(string), long numberOfAccessUsed = default(long), long numberOfAllowedAccess = default(long), string path = default(string), long startTime = default(long), long ttl = default(long), string type = default(string))
        {
            this.Assigners = assigners;
            this.Capabilities = capabilities;
            this.Cb = cb;
            this.IsLimitAccess = isLimitAccess;
            this.ItemId = itemId;
            this.Name = name;
            this.NumberOfAccessUsed = numberOfAccessUsed;
            this.NumberOfAllowedAccess = numberOfAllowedAccess;
            this.Path = path;
            this.StartTime = startTime;
            this.Ttl = ttl;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Assigners
        /// </summary>
        [DataMember(Name = "assigners", EmitDefaultValue = false)]
        public List<RuleAssigner> Assigners { get; set; }

        /// <summary>
        /// The approved/denied capabilities in the path
        /// </summary>
        /// <value>The approved/denied capabilities in the path</value>
        [DataMember(Name = "capabilities", EmitDefaultValue = false)]
        public List<string> Capabilities { get; set; }

        /// <summary>
        /// Gets or Sets Cb
        /// </summary>
        [DataMember(Name = "cb", EmitDefaultValue = false)]
        public int Cb { get; set; }

        /// <summary>
        /// flag that indicate that this rule is allowed to be access RemainingAccess of times.
        /// </summary>
        /// <value>flag that indicate that this rule is allowed to be access RemainingAccess of times.</value>
        [DataMember(Name = "is_limit_access", EmitDefaultValue = true)]
        public bool IsLimitAccess { get; set; }

        /// <summary>
        /// The item id this rule directly refers to (when applicable)
        /// </summary>
        /// <value>The item id this rule directly refers to (when applicable)</value>
        [DataMember(Name = "item_id", EmitDefaultValue = false)]
        public long ItemId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfAccessUsed
        /// </summary>
        [DataMember(Name = "number_of_access_used", EmitDefaultValue = false)]
        public long NumberOfAccessUsed { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfAllowedAccess
        /// </summary>
        [DataMember(Name = "number_of_allowed_access", EmitDefaultValue = false)]
        public long NumberOfAllowedAccess { get; set; }

        /// <summary>
        /// The path the rule refers to
        /// </summary>
        /// <value>The path the rule refers to</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "start_time", EmitDefaultValue = false)]
        public long StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Ttl
        /// </summary>
        [DataMember(Name = "ttl", EmitDefaultValue = false)]
        public long Ttl { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SharingItemFullInfo {\n");
            sb.Append("  Assigners: ").Append(Assigners).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  Cb: ").Append(Cb).Append("\n");
            sb.Append("  IsLimitAccess: ").Append(IsLimitAccess).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberOfAccessUsed: ").Append(NumberOfAccessUsed).Append("\n");
            sb.Append("  NumberOfAllowedAccess: ").Append(NumberOfAllowedAccess).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
