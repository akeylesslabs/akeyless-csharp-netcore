/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UpdateEKSTarget
    /// </summary>
    [DataContract]
    public partial class UpdateEKSTarget :  IEquatable<UpdateEKSTarget>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateEKSTarget" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateEKSTarget() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateEKSTarget" /> class.
        /// </summary>
        /// <param name="comment">Comment about the target.</param>
        /// <param name="eksAccessKeyId">Access Key ID (required).</param>
        /// <param name="eksClusterCaCert">EKS cluster CA certificate (required).</param>
        /// <param name="eksClusterEndpoint">EKS cluster URL endpoint (required).</param>
        /// <param name="eksClusterName">EKS cluster name (required).</param>
        /// <param name="eksRegion">Region (default to &quot;us-east-2&quot;).</param>
        /// <param name="eksSecretAccessKey">Secret Access Key (required).</param>
        /// <param name="key">The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="name">Target name (required).</param>
        /// <param name="newName">New target name.</param>
        /// <param name="password">Required only when the authentication process requires a username and password.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="updateVersion">Create new version for the target (default to false).</param>
        /// <param name="username">Required only when the authentication process requires a username and password.</param>
        public UpdateEKSTarget(string comment = default(string), string eksAccessKeyId = default(string), string eksClusterCaCert = default(string), string eksClusterEndpoint = default(string), string eksClusterName = default(string), string eksRegion = "us-east-2", string eksSecretAccessKey = default(string), string key = default(string), string name = default(string), string newName = default(string), string password = default(string), string token = default(string), string uidToken = default(string), bool updateVersion = false, string username = default(string))
        {
            // to ensure "eksAccessKeyId" is required (not null)
            this.EksAccessKeyId = eksAccessKeyId ?? throw new ArgumentNullException("eksAccessKeyId is a required property for UpdateEKSTarget and cannot be null");
            // to ensure "eksClusterCaCert" is required (not null)
            this.EksClusterCaCert = eksClusterCaCert ?? throw new ArgumentNullException("eksClusterCaCert is a required property for UpdateEKSTarget and cannot be null");
            // to ensure "eksClusterEndpoint" is required (not null)
            this.EksClusterEndpoint = eksClusterEndpoint ?? throw new ArgumentNullException("eksClusterEndpoint is a required property for UpdateEKSTarget and cannot be null");
            // to ensure "eksClusterName" is required (not null)
            this.EksClusterName = eksClusterName ?? throw new ArgumentNullException("eksClusterName is a required property for UpdateEKSTarget and cannot be null");
            // to ensure "eksSecretAccessKey" is required (not null)
            this.EksSecretAccessKey = eksSecretAccessKey ?? throw new ArgumentNullException("eksSecretAccessKey is a required property for UpdateEKSTarget and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for UpdateEKSTarget and cannot be null");
            this.Comment = comment;
            // use default value if no "eksRegion" provided
            this.EksRegion = eksRegion ?? "us-east-2";
            this.Key = key;
            this.NewName = newName;
            this.Password = password;
            this.Token = token;
            this.UidToken = uidToken;
            this.UpdateVersion = updateVersion;
            this.Username = username;
        }
        
        /// <summary>
        /// Comment about the target
        /// </summary>
        /// <value>Comment about the target</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Access Key ID
        /// </summary>
        /// <value>Access Key ID</value>
        [DataMember(Name="eks-access-key-id", EmitDefaultValue=false)]
        public string EksAccessKeyId { get; set; }

        /// <summary>
        /// EKS cluster CA certificate
        /// </summary>
        /// <value>EKS cluster CA certificate</value>
        [DataMember(Name="eks-cluster-ca-cert", EmitDefaultValue=false)]
        public string EksClusterCaCert { get; set; }

        /// <summary>
        /// EKS cluster URL endpoint
        /// </summary>
        /// <value>EKS cluster URL endpoint</value>
        [DataMember(Name="eks-cluster-endpoint", EmitDefaultValue=false)]
        public string EksClusterEndpoint { get; set; }

        /// <summary>
        /// EKS cluster name
        /// </summary>
        /// <value>EKS cluster name</value>
        [DataMember(Name="eks-cluster-name", EmitDefaultValue=false)]
        public string EksClusterName { get; set; }

        /// <summary>
        /// Region
        /// </summary>
        /// <value>Region</value>
        [DataMember(Name="eks-region", EmitDefaultValue=false)]
        public string EksRegion { get; set; }

        /// <summary>
        /// Secret Access Key
        /// </summary>
        /// <value>Secret Access Key</value>
        [DataMember(Name="eks-secret-access-key", EmitDefaultValue=false)]
        public string EksSecretAccessKey { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// New target name
        /// </summary>
        /// <value>New target name</value>
        [DataMember(Name="new-name", EmitDefaultValue=false)]
        public string NewName { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Create new version for the target
        /// </summary>
        /// <value>Create new version for the target</value>
        [DataMember(Name="update-version", EmitDefaultValue=false)]
        public bool UpdateVersion { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateEKSTarget {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  EksAccessKeyId: ").Append(EksAccessKeyId).Append("\n");
            sb.Append("  EksClusterCaCert: ").Append(EksClusterCaCert).Append("\n");
            sb.Append("  EksClusterEndpoint: ").Append(EksClusterEndpoint).Append("\n");
            sb.Append("  EksClusterName: ").Append(EksClusterName).Append("\n");
            sb.Append("  EksRegion: ").Append(EksRegion).Append("\n");
            sb.Append("  EksSecretAccessKey: ").Append(EksSecretAccessKey).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UpdateVersion: ").Append(UpdateVersion).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateEKSTarget);
        }

        /// <summary>
        /// Returns true if UpdateEKSTarget instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateEKSTarget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateEKSTarget input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.EksAccessKeyId == input.EksAccessKeyId ||
                    (this.EksAccessKeyId != null &&
                    this.EksAccessKeyId.Equals(input.EksAccessKeyId))
                ) && 
                (
                    this.EksClusterCaCert == input.EksClusterCaCert ||
                    (this.EksClusterCaCert != null &&
                    this.EksClusterCaCert.Equals(input.EksClusterCaCert))
                ) && 
                (
                    this.EksClusterEndpoint == input.EksClusterEndpoint ||
                    (this.EksClusterEndpoint != null &&
                    this.EksClusterEndpoint.Equals(input.EksClusterEndpoint))
                ) && 
                (
                    this.EksClusterName == input.EksClusterName ||
                    (this.EksClusterName != null &&
                    this.EksClusterName.Equals(input.EksClusterName))
                ) && 
                (
                    this.EksRegion == input.EksRegion ||
                    (this.EksRegion != null &&
                    this.EksRegion.Equals(input.EksRegion))
                ) && 
                (
                    this.EksSecretAccessKey == input.EksSecretAccessKey ||
                    (this.EksSecretAccessKey != null &&
                    this.EksSecretAccessKey.Equals(input.EksSecretAccessKey))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UpdateVersion == input.UpdateVersion ||
                    this.UpdateVersion.Equals(input.UpdateVersion)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.EksAccessKeyId != null)
                    hashCode = hashCode * 59 + this.EksAccessKeyId.GetHashCode();
                if (this.EksClusterCaCert != null)
                    hashCode = hashCode * 59 + this.EksClusterCaCert.GetHashCode();
                if (this.EksClusterEndpoint != null)
                    hashCode = hashCode * 59 + this.EksClusterEndpoint.GetHashCode();
                if (this.EksClusterName != null)
                    hashCode = hashCode * 59 + this.EksClusterName.GetHashCode();
                if (this.EksRegion != null)
                    hashCode = hashCode * 59 + this.EksRegion.GetHashCode();
                if (this.EksSecretAccessKey != null)
                    hashCode = hashCode * 59 + this.EksSecretAccessKey.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NewName != null)
                    hashCode = hashCode * 59 + this.NewName.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateVersion.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
