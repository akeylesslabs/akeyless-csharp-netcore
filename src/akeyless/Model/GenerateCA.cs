/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GenerateCA is a command that creates a new PKI CA and Intermediate issuers
    /// </summary>
    [DataContract(Name = "GenerateCA")]
    public partial class GenerateCA : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateCA" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerateCA() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateCA" /> class.
        /// </summary>
        /// <param name="alg">alg.</param>
        /// <param name="allowedDomains">A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list) (required).</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="extendedKeyUsage">A comma sepereted list of extended key usage for the intermediate (serverauth / clientauth / codesigning) (default to &quot;serverauth,clientauth&quot;).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="keyType">keyType.</param>
        /// <param name="maxPathLen">The maximum number of intermediate certificates that can appear in a certification path (default to 1).</param>
        /// <param name="pkiChainName">PKI chain name (required).</param>
        /// <param name="protectionKeyName">The name of a key that used to encrypt the secrets values (if empty, the account default protectionKey key will be used).</param>
        /// <param name="splitLevel">The number of fragments that the item will be split into (default to 3).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="ttl">The maximum requested Time To Live for issued certificate by default in seconds, supported formats are s,m,h,d (required).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GenerateCA(string alg = default(string), string allowedDomains = default(string), string deleteProtection = default(string), string extendedKeyUsage = @"serverauth,clientauth", bool json = false, string keyType = default(string), long maxPathLen = 1, string pkiChainName = default(string), string protectionKeyName = default(string), long splitLevel = 3, string token = default(string), string ttl = default(string), string uidToken = default(string))
        {
            // to ensure "allowedDomains" is required (not null)
            if (allowedDomains == null)
            {
                throw new ArgumentNullException("allowedDomains is a required property for GenerateCA and cannot be null");
            }
            this.AllowedDomains = allowedDomains;
            // to ensure "pkiChainName" is required (not null)
            if (pkiChainName == null)
            {
                throw new ArgumentNullException("pkiChainName is a required property for GenerateCA and cannot be null");
            }
            this.PkiChainName = pkiChainName;
            // to ensure "ttl" is required (not null)
            if (ttl == null)
            {
                throw new ArgumentNullException("ttl is a required property for GenerateCA and cannot be null");
            }
            this.Ttl = ttl;
            this.Alg = alg;
            this.DeleteProtection = deleteProtection;
            // use default value if no "extendedKeyUsage" provided
            this.ExtendedKeyUsage = extendedKeyUsage ?? @"serverauth,clientauth";
            this.Json = json;
            this.KeyType = keyType;
            this.MaxPathLen = maxPathLen;
            this.ProtectionKeyName = protectionKeyName;
            this.SplitLevel = splitLevel;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Gets or Sets Alg
        /// </summary>
        [DataMember(Name = "alg", EmitDefaultValue = false)]
        public string Alg { get; set; }

        /// <summary>
        /// A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list)
        /// </summary>
        /// <value>A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list)</value>
        [DataMember(Name = "allowed-domains", IsRequired = true, EmitDefaultValue = true)]
        public string AllowedDomains { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// A comma sepereted list of extended key usage for the intermediate (serverauth / clientauth / codesigning)
        /// </summary>
        /// <value>A comma sepereted list of extended key usage for the intermediate (serverauth / clientauth / codesigning)</value>
        [DataMember(Name = "extended-key-usage", EmitDefaultValue = false)]
        public string ExtendedKeyUsage { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Gets or Sets KeyType
        /// </summary>
        [DataMember(Name = "key-type", EmitDefaultValue = false)]
        public string KeyType { get; set; }

        /// <summary>
        /// The maximum number of intermediate certificates that can appear in a certification path
        /// </summary>
        /// <value>The maximum number of intermediate certificates that can appear in a certification path</value>
        [DataMember(Name = "max-path-len", EmitDefaultValue = false)]
        public long MaxPathLen { get; set; }

        /// <summary>
        /// PKI chain name
        /// </summary>
        /// <value>PKI chain name</value>
        [DataMember(Name = "pki-chain-name", IsRequired = true, EmitDefaultValue = true)]
        public string PkiChainName { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secrets values (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the secrets values (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "protection-key-name", EmitDefaultValue = false)]
        public string ProtectionKeyName { get; set; }

        /// <summary>
        /// The number of fragments that the item will be split into
        /// </summary>
        /// <value>The number of fragments that the item will be split into</value>
        [DataMember(Name = "split-level", EmitDefaultValue = false)]
        public long SplitLevel { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The maximum requested Time To Live for issued certificate by default in seconds, supported formats are s,m,h,d
        /// </summary>
        /// <value>The maximum requested Time To Live for issued certificate by default in seconds, supported formats are s,m,h,d</value>
        [DataMember(Name = "ttl", IsRequired = true, EmitDefaultValue = true)]
        public string Ttl { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateCA {\n");
            sb.Append("  Alg: ").Append(Alg).Append("\n");
            sb.Append("  AllowedDomains: ").Append(AllowedDomains).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  ExtendedKeyUsage: ").Append(ExtendedKeyUsage).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeyType: ").Append(KeyType).Append("\n");
            sb.Append("  MaxPathLen: ").Append(MaxPathLen).Append("\n");
            sb.Append("  PkiChainName: ").Append(PkiChainName).Append("\n");
            sb.Append("  ProtectionKeyName: ").Append(ProtectionKeyName).Append("\n");
            sb.Append("  SplitLevel: ").Append(SplitLevel).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
