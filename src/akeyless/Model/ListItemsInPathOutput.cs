/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ListItemsInPathOutput
    /// </summary>
    [DataContract(Name = "ListItemsInPathOutput")]
    public partial class ListItemsInPathOutput : IEquatable<ListItemsInPathOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListItemsInPathOutput" /> class.
        /// </summary>
        /// <param name="folders">folders.</param>
        /// <param name="items">items.</param>
        /// <param name="nextPage">nextPage.</param>
        public ListItemsInPathOutput(List<string> folders = default(List<string>), List<Item> items = default(List<Item>), string nextPage = default(string))
        {
            this.Folders = folders;
            this.Items = items;
            this.NextPage = nextPage;
        }

        /// <summary>
        /// Gets or Sets Folders
        /// </summary>
        [DataMember(Name = "folders", EmitDefaultValue = false)]
        public List<string> Folders { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<Item> Items { get; set; }

        /// <summary>
        /// Gets or Sets NextPage
        /// </summary>
        [DataMember(Name = "next_page", EmitDefaultValue = false)]
        public string NextPage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListItemsInPathOutput {\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  NextPage: ").Append(NextPage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListItemsInPathOutput);
        }

        /// <summary>
        /// Returns true if ListItemsInPathOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of ListItemsInPathOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListItemsInPathOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Folders == input.Folders ||
                    this.Folders != null &&
                    input.Folders != null &&
                    this.Folders.SequenceEqual(input.Folders)
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.NextPage == input.NextPage ||
                    (this.NextPage != null &&
                    this.NextPage.Equals(input.NextPage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Folders != null)
                    hashCode = hashCode * 59 + this.Folders.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.NextPage != null)
                    hashCode = hashCode * 59 + this.NextPage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
