/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// uidCreateChildToken is a command that creates a new child token using Akeyless Universal Identity.
    /// </summary>
    [DataContract(Name = "uidCreateChildToken")]
    public partial class UidCreateChildToken : IEquatable<UidCreateChildToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UidCreateChildToken" /> class.
        /// </summary>
        /// <param name="authMethodName">The universal identity auth method name, required only when uid-token is not provided.</param>
        /// <param name="childDenyInheritance">Deny from new child to create their own children.</param>
        /// <param name="childDenyRotate">Deny from new child to rotate.</param>
        /// <param name="childTtl">New child token ttl.</param>
        /// <param name="comment">New Token comment.</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="uidTokenId">The ID of the uid-token, required only when uid-token is not provided.</param>
        public UidCreateChildToken(string authMethodName = default(string), bool childDenyInheritance = default(bool), bool childDenyRotate = default(bool), int childTtl = default(int), string comment = default(string), bool json = default(bool), string token = default(string), string uidToken = default(string), string uidTokenId = default(string))
        {
            this.AuthMethodName = authMethodName;
            this.ChildDenyInheritance = childDenyInheritance;
            this.ChildDenyRotate = childDenyRotate;
            this.ChildTtl = childTtl;
            this.Comment = comment;
            this.Json = json;
            this.Token = token;
            this.UidToken = uidToken;
            this.UidTokenId = uidTokenId;
        }

        /// <summary>
        /// The universal identity auth method name, required only when uid-token is not provided
        /// </summary>
        /// <value>The universal identity auth method name, required only when uid-token is not provided</value>
        [DataMember(Name = "auth-method-name", EmitDefaultValue = false)]
        public string AuthMethodName { get; set; }

        /// <summary>
        /// Deny from new child to create their own children
        /// </summary>
        /// <value>Deny from new child to create their own children</value>
        [DataMember(Name = "child-deny-inheritance", EmitDefaultValue = true)]
        public bool ChildDenyInheritance { get; set; }

        /// <summary>
        /// Deny from new child to rotate
        /// </summary>
        /// <value>Deny from new child to rotate</value>
        [DataMember(Name = "child-deny-rotate", EmitDefaultValue = true)]
        public bool ChildDenyRotate { get; set; }

        /// <summary>
        /// New child token ttl
        /// </summary>
        /// <value>New child token ttl</value>
        [DataMember(Name = "child-ttl", EmitDefaultValue = false)]
        public int ChildTtl { get; set; }

        /// <summary>
        /// New Token comment
        /// </summary>
        /// <value>New Token comment</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// The ID of the uid-token, required only when uid-token is not provided
        /// </summary>
        /// <value>The ID of the uid-token, required only when uid-token is not provided</value>
        [DataMember(Name = "uid-token-id", EmitDefaultValue = false)]
        public string UidTokenId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UidCreateChildToken {\n");
            sb.Append("  AuthMethodName: ").Append(AuthMethodName).Append("\n");
            sb.Append("  ChildDenyInheritance: ").Append(ChildDenyInheritance).Append("\n");
            sb.Append("  ChildDenyRotate: ").Append(ChildDenyRotate).Append("\n");
            sb.Append("  ChildTtl: ").Append(ChildTtl).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UidTokenId: ").Append(UidTokenId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UidCreateChildToken);
        }

        /// <summary>
        /// Returns true if UidCreateChildToken instances are equal
        /// </summary>
        /// <param name="input">Instance of UidCreateChildToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UidCreateChildToken input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthMethodName == input.AuthMethodName ||
                    (this.AuthMethodName != null &&
                    this.AuthMethodName.Equals(input.AuthMethodName))
                ) && 
                (
                    this.ChildDenyInheritance == input.ChildDenyInheritance ||
                    this.ChildDenyInheritance.Equals(input.ChildDenyInheritance)
                ) && 
                (
                    this.ChildDenyRotate == input.ChildDenyRotate ||
                    this.ChildDenyRotate.Equals(input.ChildDenyRotate)
                ) && 
                (
                    this.ChildTtl == input.ChildTtl ||
                    this.ChildTtl.Equals(input.ChildTtl)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UidTokenId == input.UidTokenId ||
                    (this.UidTokenId != null &&
                    this.UidTokenId.Equals(input.UidTokenId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthMethodName != null)
                {
                    hashCode = (hashCode * 59) + this.AuthMethodName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChildDenyInheritance.GetHashCode();
                hashCode = (hashCode * 59) + this.ChildDenyRotate.GetHashCode();
                hashCode = (hashCode * 59) + this.ChildTtl.GetHashCode();
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UidTokenId != null)
                {
                    hashCode = (hashCode * 59) + this.UidTokenId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
