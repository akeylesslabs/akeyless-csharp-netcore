/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GwClusterIdentity
    /// </summary>
    [DataContract(Name = "GwClusterIdentity")]
    public partial class GwClusterIdentity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GwClusterIdentity" /> class.
        /// </summary>
        /// <param name="actionAllowed">actionAllowed.</param>
        /// <param name="allowed">allowed.</param>
        /// <param name="allowedAccessIds">allowedAccessIds.</param>
        /// <param name="clusterName">clusterName.</param>
        /// <param name="clusterUrl">clusterUrl.</param>
        /// <param name="currentGw">currentGw.</param>
        /// <param name="customerFragmentIds">Deprecated - use CustomerFragments instead.</param>
        /// <param name="customerFragments">customerFragments.</param>
        /// <param name="defaultProtectionKeyId">defaultProtectionKeyId.</param>
        /// <param name="defaultSecretLocation">defaultSecretLocation.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="id">id.</param>
        /// <param name="isKerberosAuthEnabled">isKerberosAuthEnabled.</param>
        /// <param name="isLdapAuthEnabled">isLdapAuthEnabled.</param>
        /// <param name="serverlessType">serverlessType.</param>
        /// <param name="status">status.</param>
        /// <param name="statusDescription">statusDescription.</param>
        public GwClusterIdentity(bool actionAllowed = default(bool), bool allowed = default(bool), List<string> allowedAccessIds = default(List<string>), string clusterName = default(string), string clusterUrl = default(string), bool currentGw = default(bool), List<string> customerFragmentIds = default(List<string>), List<CfInfo> customerFragments = default(List<CfInfo>), long defaultProtectionKeyId = default(long), string defaultSecretLocation = default(string), string displayName = default(string), long id = default(long), bool isKerberosAuthEnabled = default(bool), bool isLdapAuthEnabled = default(bool), string serverlessType = default(string), string status = default(string), string statusDescription = default(string))
        {
            this.ActionAllowed = actionAllowed;
            this.Allowed = allowed;
            this.AllowedAccessIds = allowedAccessIds;
            this.ClusterName = clusterName;
            this.ClusterUrl = clusterUrl;
            this.CurrentGw = currentGw;
            this.CustomerFragmentIds = customerFragmentIds;
            this.CustomerFragments = customerFragments;
            this.DefaultProtectionKeyId = defaultProtectionKeyId;
            this.DefaultSecretLocation = defaultSecretLocation;
            this.DisplayName = displayName;
            this.Id = id;
            this.IsKerberosAuthEnabled = isKerberosAuthEnabled;
            this.IsLdapAuthEnabled = isLdapAuthEnabled;
            this.ServerlessType = serverlessType;
            this.Status = status;
            this.StatusDescription = statusDescription;
        }

        /// <summary>
        /// Gets or Sets ActionAllowed
        /// </summary>
        [DataMember(Name = "action_allowed", EmitDefaultValue = true)]
        public bool ActionAllowed { get; set; }

        /// <summary>
        /// Gets or Sets Allowed
        /// </summary>
        [DataMember(Name = "allowed", EmitDefaultValue = true)]
        public bool Allowed { get; set; }

        /// <summary>
        /// Gets or Sets AllowedAccessIds
        /// </summary>
        [DataMember(Name = "allowed_access_ids", EmitDefaultValue = false)]
        public List<string> AllowedAccessIds { get; set; }

        /// <summary>
        /// Gets or Sets ClusterName
        /// </summary>
        [DataMember(Name = "cluster_name", EmitDefaultValue = false)]
        public string ClusterName { get; set; }

        /// <summary>
        /// Gets or Sets ClusterUrl
        /// </summary>
        [DataMember(Name = "cluster_url", EmitDefaultValue = false)]
        public string ClusterUrl { get; set; }

        /// <summary>
        /// Gets or Sets CurrentGw
        /// </summary>
        [DataMember(Name = "current_gw", EmitDefaultValue = true)]
        public bool CurrentGw { get; set; }

        /// <summary>
        /// Deprecated - use CustomerFragments instead
        /// </summary>
        /// <value>Deprecated - use CustomerFragments instead</value>
        [DataMember(Name = "customer_fragment_ids", EmitDefaultValue = false)]
        public List<string> CustomerFragmentIds { get; set; }

        /// <summary>
        /// Gets or Sets CustomerFragments
        /// </summary>
        [DataMember(Name = "customer_fragments", EmitDefaultValue = false)]
        public List<CfInfo> CustomerFragments { get; set; }

        /// <summary>
        /// Gets or Sets DefaultProtectionKeyId
        /// </summary>
        [DataMember(Name = "default_protection_key_id", EmitDefaultValue = false)]
        public long DefaultProtectionKeyId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultSecretLocation
        /// </summary>
        [DataMember(Name = "default_secret_location", EmitDefaultValue = false)]
        public string DefaultSecretLocation { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets IsKerberosAuthEnabled
        /// </summary>
        [DataMember(Name = "is_kerberos_auth_enabled", EmitDefaultValue = true)]
        public bool IsKerberosAuthEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsLdapAuthEnabled
        /// </summary>
        [DataMember(Name = "is_ldap_auth_enabled", EmitDefaultValue = true)]
        public bool IsLdapAuthEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ServerlessType
        /// </summary>
        [DataMember(Name = "serverless_type", EmitDefaultValue = false)]
        public string ServerlessType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusDescription
        /// </summary>
        [DataMember(Name = "status_description", EmitDefaultValue = false)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GwClusterIdentity {\n");
            sb.Append("  ActionAllowed: ").Append(ActionAllowed).Append("\n");
            sb.Append("  Allowed: ").Append(Allowed).Append("\n");
            sb.Append("  AllowedAccessIds: ").Append(AllowedAccessIds).Append("\n");
            sb.Append("  ClusterName: ").Append(ClusterName).Append("\n");
            sb.Append("  ClusterUrl: ").Append(ClusterUrl).Append("\n");
            sb.Append("  CurrentGw: ").Append(CurrentGw).Append("\n");
            sb.Append("  CustomerFragmentIds: ").Append(CustomerFragmentIds).Append("\n");
            sb.Append("  CustomerFragments: ").Append(CustomerFragments).Append("\n");
            sb.Append("  DefaultProtectionKeyId: ").Append(DefaultProtectionKeyId).Append("\n");
            sb.Append("  DefaultSecretLocation: ").Append(DefaultSecretLocation).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsKerberosAuthEnabled: ").Append(IsKerberosAuthEnabled).Append("\n");
            sb.Append("  IsLdapAuthEnabled: ").Append(IsLdapAuthEnabled).Append("\n");
            sb.Append("  ServerlessType: ").Append(ServerlessType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
