/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SystemAccessCredentialsReplyObj
    /// </summary>
    [DataContract(Name = "SystemAccessCredentialsReplyObj")]
    public partial class SystemAccessCredentialsReplyObj : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemAccessCredentialsReplyObj" /> class.
        /// </summary>
        /// <param name="accessId">accessId.</param>
        /// <param name="authCreds">Temporary credentials for accessing Auth.</param>
        /// <param name="expiry">Credentials expiration date.</param>
        /// <param name="kfmCreds">Temporary credentials for accessing the KFMs instances.</param>
        /// <param name="needMfaAppFirstConfig">If the user didn&#39;t complete to configure the MFA app.</param>
        /// <param name="requiredMfa">requiredMfa.</param>
        /// <param name="token">Credentials tmp token.</param>
        /// <param name="uamCreds">Temporary credentials for accessing the UAM service.</param>
        public SystemAccessCredentialsReplyObj(string accessId = default(string), string authCreds = default(string), long expiry = default(long), string kfmCreds = default(string), bool needMfaAppFirstConfig = default(bool), string requiredMfa = default(string), string token = default(string), string uamCreds = default(string))
        {
            this.AccessId = accessId;
            this.AuthCreds = authCreds;
            this.Expiry = expiry;
            this.KfmCreds = kfmCreds;
            this.NeedMfaAppFirstConfig = needMfaAppFirstConfig;
            this.RequiredMfa = requiredMfa;
            this.Token = token;
            this.UamCreds = uamCreds;
        }

        /// <summary>
        /// Gets or Sets AccessId
        /// </summary>
        [DataMember(Name = "access_id", EmitDefaultValue = false)]
        public string AccessId { get; set; }

        /// <summary>
        /// Temporary credentials for accessing Auth
        /// </summary>
        /// <value>Temporary credentials for accessing Auth</value>
        [DataMember(Name = "auth_creds", EmitDefaultValue = false)]
        public string AuthCreds { get; set; }

        /// <summary>
        /// Credentials expiration date
        /// </summary>
        /// <value>Credentials expiration date</value>
        [DataMember(Name = "expiry", EmitDefaultValue = false)]
        public long Expiry { get; set; }

        /// <summary>
        /// Temporary credentials for accessing the KFMs instances
        /// </summary>
        /// <value>Temporary credentials for accessing the KFMs instances</value>
        [DataMember(Name = "kfm_creds", EmitDefaultValue = false)]
        public string KfmCreds { get; set; }

        /// <summary>
        /// If the user didn&#39;t complete to configure the MFA app
        /// </summary>
        /// <value>If the user didn&#39;t complete to configure the MFA app</value>
        [DataMember(Name = "need_mfa_app_first_config", EmitDefaultValue = true)]
        public bool NeedMfaAppFirstConfig { get; set; }

        /// <summary>
        /// Gets or Sets RequiredMfa
        /// </summary>
        [DataMember(Name = "required_mfa", EmitDefaultValue = false)]
        public string RequiredMfa { get; set; }

        /// <summary>
        /// Credentials tmp token
        /// </summary>
        /// <value>Credentials tmp token</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Temporary credentials for accessing the UAM service
        /// </summary>
        /// <value>Temporary credentials for accessing the UAM service</value>
        [DataMember(Name = "uam_creds", EmitDefaultValue = false)]
        public string UamCreds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemAccessCredentialsReplyObj {\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  AuthCreds: ").Append(AuthCreds).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  KfmCreds: ").Append(KfmCreds).Append("\n");
            sb.Append("  NeedMfaAppFirstConfig: ").Append(NeedMfaAppFirstConfig).Append("\n");
            sb.Append("  RequiredMfa: ").Append(RequiredMfa).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UamCreds: ").Append(UamCreds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
