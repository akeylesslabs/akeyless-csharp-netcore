/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SystemAccessCredentialsReplyObj
    /// </summary>
    [DataContract(Name = "SystemAccessCredentialsReplyObj")]
    public partial class SystemAccessCredentialsReplyObj : IEquatable<SystemAccessCredentialsReplyObj>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemAccessCredentialsReplyObj" /> class.
        /// </summary>
        /// <param name="authCreds">Temporary credentials for accessing Auth.</param>
        /// <param name="expiry">Credentials expiration date.</param>
        /// <param name="kfmCreds">Temporary credentials for accessing the KFMs instances.</param>
        /// <param name="uamCreds">Temporary credentials for accessing the UAM service.</param>
        public SystemAccessCredentialsReplyObj(string authCreds = default(string), long expiry = default(long), string kfmCreds = default(string), string uamCreds = default(string))
        {
            this.AuthCreds = authCreds;
            this.Expiry = expiry;
            this.KfmCreds = kfmCreds;
            this.UamCreds = uamCreds;
        }

        /// <summary>
        /// Temporary credentials for accessing Auth
        /// </summary>
        /// <value>Temporary credentials for accessing Auth</value>
        [DataMember(Name = "auth_creds", EmitDefaultValue = false)]
        public string AuthCreds { get; set; }

        /// <summary>
        /// Credentials expiration date
        /// </summary>
        /// <value>Credentials expiration date</value>
        [DataMember(Name = "expiry", EmitDefaultValue = false)]
        public long Expiry { get; set; }

        /// <summary>
        /// Temporary credentials for accessing the KFMs instances
        /// </summary>
        /// <value>Temporary credentials for accessing the KFMs instances</value>
        [DataMember(Name = "kfm_creds", EmitDefaultValue = false)]
        public string KfmCreds { get; set; }

        /// <summary>
        /// Temporary credentials for accessing the UAM service
        /// </summary>
        /// <value>Temporary credentials for accessing the UAM service</value>
        [DataMember(Name = "uam_creds", EmitDefaultValue = false)]
        public string UamCreds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemAccessCredentialsReplyObj {\n");
            sb.Append("  AuthCreds: ").Append(AuthCreds).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  KfmCreds: ").Append(KfmCreds).Append("\n");
            sb.Append("  UamCreds: ").Append(UamCreds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemAccessCredentialsReplyObj);
        }

        /// <summary>
        /// Returns true if SystemAccessCredentialsReplyObj instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemAccessCredentialsReplyObj to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemAccessCredentialsReplyObj input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthCreds == input.AuthCreds ||
                    (this.AuthCreds != null &&
                    this.AuthCreds.Equals(input.AuthCreds))
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    this.Expiry.Equals(input.Expiry)
                ) && 
                (
                    this.KfmCreds == input.KfmCreds ||
                    (this.KfmCreds != null &&
                    this.KfmCreds.Equals(input.KfmCreds))
                ) && 
                (
                    this.UamCreds == input.UamCreds ||
                    (this.UamCreds != null &&
                    this.UamCreds.Equals(input.UamCreds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthCreds != null)
                    hashCode = hashCode * 59 + this.AuthCreds.GetHashCode();
                hashCode = hashCode * 59 + this.Expiry.GetHashCode();
                if (this.KfmCreds != null)
                    hashCode = hashCode * 59 + this.KfmCreds.GetHashCode();
                if (this.UamCreds != null)
                    hashCode = hashCode * 59 + this.UamCreds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
