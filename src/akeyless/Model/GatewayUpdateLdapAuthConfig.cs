/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayUpdateLdapAuth is a command that updates ldap auth config
    /// </summary>
    [DataContract(Name = "GatewayUpdateLdapAuthConfig")]
    public partial class GatewayUpdateLdapAuthConfig : IEquatable<GatewayUpdateLdapAuthConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateLdapAuthConfig" /> class.
        /// </summary>
        /// <param name="accessId">The access ID of the Ldap auth method.</param>
        /// <param name="bindDn">Bind DN.</param>
        /// <param name="bindDnPassword">Bind DN Password.</param>
        /// <param name="groupAttr">Group Attr.</param>
        /// <param name="groupDn">Group Dn.</param>
        /// <param name="groupFilter">Group Filter.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="ldapCaCert">LDAP CA Certificate (base64 encoded).</param>
        /// <param name="ldapEnable">Enable Ldap [true/false].</param>
        /// <param name="ldapUrl">LDAP Server URL, e.g. ldap://planetexpress.com:389.</param>
        /// <param name="ldapAnonymousSearch">Ldap Anonymous Search.</param>
        /// <param name="signingKeyData">The private key (base64 encoded), associated with the public key defined in the Ldap auth.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userAttribute">User Attribute.</param>
        /// <param name="userDn">User DN.</param>
        public GatewayUpdateLdapAuthConfig(string accessId = default(string), string bindDn = default(string), string bindDnPassword = default(string), string groupAttr = default(string), string groupDn = default(string), string groupFilter = default(string), bool json = false, string ldapCaCert = default(string), string ldapEnable = default(string), string ldapUrl = default(string), bool ldapAnonymousSearch = default(bool), string signingKeyData = default(string), string token = default(string), string uidToken = default(string), string userAttribute = default(string), string userDn = default(string))
        {
            this.AccessId = accessId;
            this.BindDn = bindDn;
            this.BindDnPassword = bindDnPassword;
            this.GroupAttr = groupAttr;
            this.GroupDn = groupDn;
            this.GroupFilter = groupFilter;
            this.Json = json;
            this.LdapCaCert = ldapCaCert;
            this.LdapEnable = ldapEnable;
            this.LdapUrl = ldapUrl;
            this.LdapAnonymousSearch = ldapAnonymousSearch;
            this.SigningKeyData = signingKeyData;
            this.Token = token;
            this.UidToken = uidToken;
            this.UserAttribute = userAttribute;
            this.UserDn = userDn;
        }

        /// <summary>
        /// The access ID of the Ldap auth method
        /// </summary>
        /// <value>The access ID of the Ldap auth method</value>
        [DataMember(Name = "access-id", EmitDefaultValue = false)]
        public string AccessId { get; set; }

        /// <summary>
        /// Bind DN
        /// </summary>
        /// <value>Bind DN</value>
        [DataMember(Name = "bind-dn", EmitDefaultValue = false)]
        public string BindDn { get; set; }

        /// <summary>
        /// Bind DN Password
        /// </summary>
        /// <value>Bind DN Password</value>
        [DataMember(Name = "bind-dn-password", EmitDefaultValue = false)]
        public string BindDnPassword { get; set; }

        /// <summary>
        /// Group Attr
        /// </summary>
        /// <value>Group Attr</value>
        [DataMember(Name = "group-attr", EmitDefaultValue = false)]
        public string GroupAttr { get; set; }

        /// <summary>
        /// Group Dn
        /// </summary>
        /// <value>Group Dn</value>
        [DataMember(Name = "group-dn", EmitDefaultValue = false)]
        public string GroupDn { get; set; }

        /// <summary>
        /// Group Filter
        /// </summary>
        /// <value>Group Filter</value>
        [DataMember(Name = "group-filter", EmitDefaultValue = false)]
        public string GroupFilter { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// LDAP CA Certificate (base64 encoded)
        /// </summary>
        /// <value>LDAP CA Certificate (base64 encoded)</value>
        [DataMember(Name = "ldap-ca-cert", EmitDefaultValue = false)]
        public string LdapCaCert { get; set; }

        /// <summary>
        /// Enable Ldap [true/false]
        /// </summary>
        /// <value>Enable Ldap [true/false]</value>
        [DataMember(Name = "ldap-enable", EmitDefaultValue = false)]
        public string LdapEnable { get; set; }

        /// <summary>
        /// LDAP Server URL, e.g. ldap://planetexpress.com:389
        /// </summary>
        /// <value>LDAP Server URL, e.g. ldap://planetexpress.com:389</value>
        [DataMember(Name = "ldap-url", EmitDefaultValue = false)]
        public string LdapUrl { get; set; }

        /// <summary>
        /// Ldap Anonymous Search
        /// </summary>
        /// <value>Ldap Anonymous Search</value>
        [DataMember(Name = "ldap_anonymous_search", EmitDefaultValue = true)]
        public bool LdapAnonymousSearch { get; set; }

        /// <summary>
        /// The private key (base64 encoded), associated with the public key defined in the Ldap auth
        /// </summary>
        /// <value>The private key (base64 encoded), associated with the public key defined in the Ldap auth</value>
        [DataMember(Name = "signing-key-data", EmitDefaultValue = false)]
        public string SigningKeyData { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User Attribute
        /// </summary>
        /// <value>User Attribute</value>
        [DataMember(Name = "user-attribute", EmitDefaultValue = false)]
        public string UserAttribute { get; set; }

        /// <summary>
        /// User DN
        /// </summary>
        /// <value>User DN</value>
        [DataMember(Name = "user-dn", EmitDefaultValue = false)]
        public string UserDn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayUpdateLdapAuthConfig {\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  BindDn: ").Append(BindDn).Append("\n");
            sb.Append("  BindDnPassword: ").Append(BindDnPassword).Append("\n");
            sb.Append("  GroupAttr: ").Append(GroupAttr).Append("\n");
            sb.Append("  GroupDn: ").Append(GroupDn).Append("\n");
            sb.Append("  GroupFilter: ").Append(GroupFilter).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  LdapCaCert: ").Append(LdapCaCert).Append("\n");
            sb.Append("  LdapEnable: ").Append(LdapEnable).Append("\n");
            sb.Append("  LdapUrl: ").Append(LdapUrl).Append("\n");
            sb.Append("  LdapAnonymousSearch: ").Append(LdapAnonymousSearch).Append("\n");
            sb.Append("  SigningKeyData: ").Append(SigningKeyData).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserAttribute: ").Append(UserAttribute).Append("\n");
            sb.Append("  UserDn: ").Append(UserDn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayUpdateLdapAuthConfig);
        }

        /// <summary>
        /// Returns true if GatewayUpdateLdapAuthConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayUpdateLdapAuthConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayUpdateLdapAuthConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessId == input.AccessId ||
                    (this.AccessId != null &&
                    this.AccessId.Equals(input.AccessId))
                ) && 
                (
                    this.BindDn == input.BindDn ||
                    (this.BindDn != null &&
                    this.BindDn.Equals(input.BindDn))
                ) && 
                (
                    this.BindDnPassword == input.BindDnPassword ||
                    (this.BindDnPassword != null &&
                    this.BindDnPassword.Equals(input.BindDnPassword))
                ) && 
                (
                    this.GroupAttr == input.GroupAttr ||
                    (this.GroupAttr != null &&
                    this.GroupAttr.Equals(input.GroupAttr))
                ) && 
                (
                    this.GroupDn == input.GroupDn ||
                    (this.GroupDn != null &&
                    this.GroupDn.Equals(input.GroupDn))
                ) && 
                (
                    this.GroupFilter == input.GroupFilter ||
                    (this.GroupFilter != null &&
                    this.GroupFilter.Equals(input.GroupFilter))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.LdapCaCert == input.LdapCaCert ||
                    (this.LdapCaCert != null &&
                    this.LdapCaCert.Equals(input.LdapCaCert))
                ) && 
                (
                    this.LdapEnable == input.LdapEnable ||
                    (this.LdapEnable != null &&
                    this.LdapEnable.Equals(input.LdapEnable))
                ) && 
                (
                    this.LdapUrl == input.LdapUrl ||
                    (this.LdapUrl != null &&
                    this.LdapUrl.Equals(input.LdapUrl))
                ) && 
                (
                    this.LdapAnonymousSearch == input.LdapAnonymousSearch ||
                    this.LdapAnonymousSearch.Equals(input.LdapAnonymousSearch)
                ) && 
                (
                    this.SigningKeyData == input.SigningKeyData ||
                    (this.SigningKeyData != null &&
                    this.SigningKeyData.Equals(input.SigningKeyData))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserAttribute == input.UserAttribute ||
                    (this.UserAttribute != null &&
                    this.UserAttribute.Equals(input.UserAttribute))
                ) && 
                (
                    this.UserDn == input.UserDn ||
                    (this.UserDn != null &&
                    this.UserDn.Equals(input.UserDn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessId != null)
                {
                    hashCode = (hashCode * 59) + this.AccessId.GetHashCode();
                }
                if (this.BindDn != null)
                {
                    hashCode = (hashCode * 59) + this.BindDn.GetHashCode();
                }
                if (this.BindDnPassword != null)
                {
                    hashCode = (hashCode * 59) + this.BindDnPassword.GetHashCode();
                }
                if (this.GroupAttr != null)
                {
                    hashCode = (hashCode * 59) + this.GroupAttr.GetHashCode();
                }
                if (this.GroupDn != null)
                {
                    hashCode = (hashCode * 59) + this.GroupDn.GetHashCode();
                }
                if (this.GroupFilter != null)
                {
                    hashCode = (hashCode * 59) + this.GroupFilter.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.LdapCaCert != null)
                {
                    hashCode = (hashCode * 59) + this.LdapCaCert.GetHashCode();
                }
                if (this.LdapEnable != null)
                {
                    hashCode = (hashCode * 59) + this.LdapEnable.GetHashCode();
                }
                if (this.LdapUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LdapUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LdapAnonymousSearch.GetHashCode();
                if (this.SigningKeyData != null)
                {
                    hashCode = (hashCode * 59) + this.SigningKeyData.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UserAttribute != null)
                {
                    hashCode = (hashCode * 59) + this.UserAttribute.GetHashCode();
                }
                if (this.UserDn != null)
                {
                    hashCode = (hashCode * 59) + this.UserDn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
