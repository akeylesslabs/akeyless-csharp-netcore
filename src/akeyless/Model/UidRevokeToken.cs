/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UidRevokeToken
    /// </summary>
    [DataContract(Name = "uidRevokeToken")]
    public partial class UidRevokeToken : IEquatable<UidRevokeToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UidRevokeToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UidRevokeToken() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UidRevokeToken" /> class.
        /// </summary>
        /// <param name="authMethodName">The universal identity auth method name.</param>
        /// <param name="password">Required only when the authentication process requires a username and password.</param>
        /// <param name="revokeToken">the universal identity token/token-id to revoke (required).</param>
        /// <param name="revokeType">revokeSelf/revokeAll (delete only this token/this token and his children) (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="username">Required only when the authentication process requires a username and password.</param>
        public UidRevokeToken(string authMethodName = default(string), string password = default(string), string revokeToken = default(string), string revokeType = default(string), string token = default(string), string uidToken = default(string), string username = default(string))
        {
            // to ensure "revokeToken" is required (not null)
            if (revokeToken == null) {
                throw new ArgumentNullException("revokeToken is a required property for UidRevokeToken and cannot be null");
            }
            this.RevokeToken = revokeToken;
            // to ensure "revokeType" is required (not null)
            if (revokeType == null) {
                throw new ArgumentNullException("revokeType is a required property for UidRevokeToken and cannot be null");
            }
            this.RevokeType = revokeType;
            this.AuthMethodName = authMethodName;
            this.Password = password;
            this.Token = token;
            this.UidToken = uidToken;
            this.Username = username;
        }

        /// <summary>
        /// The universal identity auth method name
        /// </summary>
        /// <value>The universal identity auth method name</value>
        [DataMember(Name = "auth-method-name", EmitDefaultValue = false)]
        public string AuthMethodName { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// the universal identity token/token-id to revoke
        /// </summary>
        /// <value>the universal identity token/token-id to revoke</value>
        [DataMember(Name = "revoke-token", IsRequired = true, EmitDefaultValue = false)]
        public string RevokeToken { get; set; }

        /// <summary>
        /// revokeSelf/revokeAll (delete only this token/this token and his children)
        /// </summary>
        /// <value>revokeSelf/revokeAll (delete only this token/this token and his children)</value>
        [DataMember(Name = "revoke-type", IsRequired = true, EmitDefaultValue = false)]
        public string RevokeType { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UidRevokeToken {\n");
            sb.Append("  AuthMethodName: ").Append(AuthMethodName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  RevokeToken: ").Append(RevokeToken).Append("\n");
            sb.Append("  RevokeType: ").Append(RevokeType).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UidRevokeToken);
        }

        /// <summary>
        /// Returns true if UidRevokeToken instances are equal
        /// </summary>
        /// <param name="input">Instance of UidRevokeToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UidRevokeToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthMethodName == input.AuthMethodName ||
                    (this.AuthMethodName != null &&
                    this.AuthMethodName.Equals(input.AuthMethodName))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.RevokeToken == input.RevokeToken ||
                    (this.RevokeToken != null &&
                    this.RevokeToken.Equals(input.RevokeToken))
                ) && 
                (
                    this.RevokeType == input.RevokeType ||
                    (this.RevokeType != null &&
                    this.RevokeType.Equals(input.RevokeType))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthMethodName != null)
                    hashCode = hashCode * 59 + this.AuthMethodName.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.RevokeToken != null)
                    hashCode = hashCode * 59 + this.RevokeToken.GetHashCode();
                if (this.RevokeType != null)
                    hashCode = hashCode * 59 + this.RevokeType.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
