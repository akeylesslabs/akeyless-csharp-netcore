/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UpdateRole
    /// </summary>
    [DataContract]
    public partial class UpdateRole :  IEquatable<UpdateRole>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRole" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateRole() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRole" /> class.
        /// </summary>
        /// <param name="analyticsAccess">Allow this role to view analytics. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported, allowing associated auth methods to view reports produced by the same auth methods..</param>
        /// <param name="auditAccess">Allow this role to view audit logs. Currently only &#39;none&#39;, &#39;own&#39; and &#39;all&#39; values are supported, allowing associated auth methods to view audit logs produced by the same auth methods..</param>
        /// <param name="gwAnalyticsAccess">Allow this role to view gw analytics. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported, allowing associated auth methods to view reports produced by the same auth methods..</param>
        /// <param name="name">Role name (required).</param>
        /// <param name="newComment">New comment about the role (default to &quot;default_comment&quot;).</param>
        /// <param name="newName">New Role name.</param>
        /// <param name="password">Required only when the authentication process requires a username and password.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="username">Required only when the authentication process requires a username and password.</param>
        public UpdateRole(string analyticsAccess = default(string), string auditAccess = default(string), string gwAnalyticsAccess = default(string), string name = default(string), string newComment = "default_comment", string newName = default(string), string password = default(string), string token = default(string), string uidToken = default(string), string username = default(string))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for UpdateRole and cannot be null");
            this.AnalyticsAccess = analyticsAccess;
            this.AuditAccess = auditAccess;
            this.GwAnalyticsAccess = gwAnalyticsAccess;
            // use default value if no "newComment" provided
            this.NewComment = newComment ?? "default_comment";
            this.NewName = newName;
            this.Password = password;
            this.Token = token;
            this.UidToken = uidToken;
            this.Username = username;
        }
        
        /// <summary>
        /// Allow this role to view analytics. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported, allowing associated auth methods to view reports produced by the same auth methods.
        /// </summary>
        /// <value>Allow this role to view analytics. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported, allowing associated auth methods to view reports produced by the same auth methods.</value>
        [DataMember(Name="analytics-access", EmitDefaultValue=false)]
        public string AnalyticsAccess { get; set; }

        /// <summary>
        /// Allow this role to view audit logs. Currently only &#39;none&#39;, &#39;own&#39; and &#39;all&#39; values are supported, allowing associated auth methods to view audit logs produced by the same auth methods.
        /// </summary>
        /// <value>Allow this role to view audit logs. Currently only &#39;none&#39;, &#39;own&#39; and &#39;all&#39; values are supported, allowing associated auth methods to view audit logs produced by the same auth methods.</value>
        [DataMember(Name="audit-access", EmitDefaultValue=false)]
        public string AuditAccess { get; set; }

        /// <summary>
        /// Allow this role to view gw analytics. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported, allowing associated auth methods to view reports produced by the same auth methods.
        /// </summary>
        /// <value>Allow this role to view gw analytics. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported, allowing associated auth methods to view reports produced by the same auth methods.</value>
        [DataMember(Name="gw-analytics-access", EmitDefaultValue=false)]
        public string GwAnalyticsAccess { get; set; }

        /// <summary>
        /// Role name
        /// </summary>
        /// <value>Role name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// New comment about the role
        /// </summary>
        /// <value>New comment about the role</value>
        [DataMember(Name="new-comment", EmitDefaultValue=false)]
        public string NewComment { get; set; }

        /// <summary>
        /// New Role name
        /// </summary>
        /// <value>New Role name</value>
        [DataMember(Name="new-name", EmitDefaultValue=false)]
        public string NewName { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateRole {\n");
            sb.Append("  AnalyticsAccess: ").Append(AnalyticsAccess).Append("\n");
            sb.Append("  AuditAccess: ").Append(AuditAccess).Append("\n");
            sb.Append("  GwAnalyticsAccess: ").Append(GwAnalyticsAccess).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewComment: ").Append(NewComment).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateRole);
        }

        /// <summary>
        /// Returns true if UpdateRole instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateRole to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateRole input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AnalyticsAccess == input.AnalyticsAccess ||
                    (this.AnalyticsAccess != null &&
                    this.AnalyticsAccess.Equals(input.AnalyticsAccess))
                ) && 
                (
                    this.AuditAccess == input.AuditAccess ||
                    (this.AuditAccess != null &&
                    this.AuditAccess.Equals(input.AuditAccess))
                ) && 
                (
                    this.GwAnalyticsAccess == input.GwAnalyticsAccess ||
                    (this.GwAnalyticsAccess != null &&
                    this.GwAnalyticsAccess.Equals(input.GwAnalyticsAccess))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewComment == input.NewComment ||
                    (this.NewComment != null &&
                    this.NewComment.Equals(input.NewComment))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnalyticsAccess != null)
                    hashCode = hashCode * 59 + this.AnalyticsAccess.GetHashCode();
                if (this.AuditAccess != null)
                    hashCode = hashCode * 59 + this.AuditAccess.GetHashCode();
                if (this.GwAnalyticsAccess != null)
                    hashCode = hashCode * 59 + this.GwAnalyticsAccess.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NewComment != null)
                    hashCode = hashCode * 59 + this.NewComment.GetHashCode();
                if (this.NewName != null)
                    hashCode = hashCode * 59 + this.NewName.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
