/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// dynamicSecretCreateGoogleWorkspace is a command that creates Google Workspace dynamic secret
    /// </summary>
    [DataContract(Name = "dynamicSecretCreateGoogleWorkspace")]
    public partial class DynamicSecretCreateGoogleWorkspace : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicSecretCreateGoogleWorkspace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DynamicSecretCreateGoogleWorkspace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicSecretCreateGoogleWorkspace" /> class.
        /// </summary>
        /// <param name="accessMode">accessMode (required).</param>
        /// <param name="adminEmail">Admin user email (required).</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="fixedUserClaimKeyname">For externally provided users, denotes the key-name of IdP claim to extract the username from (default to &quot;ext_email&quot;).</param>
        /// <param name="gcpKey">Base64-encoded service account private key text.</param>
        /// <param name="groupEmail">A group email, relevant only for group access-mode.</param>
        /// <param name="groupRole">groupRole.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Dynamic secret name (required).</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="roleName">Name of the admin role to assign to the user, relevant only for role access-mode.</param>
        /// <param name="roleScope">roleScope.</param>
        /// <param name="secureAccessEnable">Enable/Disable secure remote access [true/false].</param>
        /// <param name="secureAccessUrl">Destination URL to inject secrets.</param>
        /// <param name="secureAccessWeb">Enable Web Secure Remote Access (default to true).</param>
        /// <param name="secureAccessWebBrowsing">Secure browser via Akeyless&#39;s Secure Remote Access (SRA) (default to false).</param>
        /// <param name="secureAccessWebProxy">Web-Proxy via Akeyless&#39;s Secure Remote Access (SRA) (default to false).</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="targetName">Name of existing target to use in dynamic secret creation.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public DynamicSecretCreateGoogleWorkspace(string accessMode = default(string), string adminEmail = default(string), string deleteProtection = default(string), string description = default(string), string fixedUserClaimKeyname = @"ext_email", string gcpKey = default(string), string groupEmail = default(string), string groupRole = default(string), bool json = false, string name = default(string), string producerEncryptionKeyName = default(string), string roleName = default(string), string roleScope = default(string), string secureAccessEnable = default(string), string secureAccessUrl = default(string), bool secureAccessWeb = true, bool secureAccessWebBrowsing = false, bool secureAccessWebProxy = false, List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userTtl = @"60m")
        {
            // to ensure "accessMode" is required (not null)
            if (accessMode == null)
            {
                throw new ArgumentNullException("accessMode is a required property for DynamicSecretCreateGoogleWorkspace and cannot be null");
            }
            this.AccessMode = accessMode;
            // to ensure "adminEmail" is required (not null)
            if (adminEmail == null)
            {
                throw new ArgumentNullException("adminEmail is a required property for DynamicSecretCreateGoogleWorkspace and cannot be null");
            }
            this.AdminEmail = adminEmail;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DynamicSecretCreateGoogleWorkspace and cannot be null");
            }
            this.Name = name;
            this.DeleteProtection = deleteProtection;
            this.Description = description;
            // use default value if no "fixedUserClaimKeyname" provided
            this.FixedUserClaimKeyname = fixedUserClaimKeyname ?? @"ext_email";
            this.GcpKey = gcpKey;
            this.GroupEmail = groupEmail;
            this.GroupRole = groupRole;
            this.Json = json;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.RoleName = roleName;
            this.RoleScope = roleScope;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessUrl = secureAccessUrl;
            this.SecureAccessWeb = secureAccessWeb;
            this.SecureAccessWebBrowsing = secureAccessWebBrowsing;
            this.SecureAccessWebProxy = secureAccessWebProxy;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? @"60m";
        }

        /// <summary>
        /// Gets or Sets AccessMode
        /// </summary>
        [DataMember(Name = "access-mode", IsRequired = true, EmitDefaultValue = true)]
        public string AccessMode { get; set; }

        /// <summary>
        /// Admin user email
        /// </summary>
        /// <value>Admin user email</value>
        [DataMember(Name = "admin-email", IsRequired = true, EmitDefaultValue = true)]
        public string AdminEmail { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// For externally provided users, denotes the key-name of IdP claim to extract the username from
        /// </summary>
        /// <value>For externally provided users, denotes the key-name of IdP claim to extract the username from</value>
        [DataMember(Name = "fixed-user-claim-keyname", EmitDefaultValue = false)]
        public string FixedUserClaimKeyname { get; set; }

        /// <summary>
        /// Base64-encoded service account private key text
        /// </summary>
        /// <value>Base64-encoded service account private key text</value>
        [DataMember(Name = "gcp-key", EmitDefaultValue = false)]
        public string GcpKey { get; set; }

        /// <summary>
        /// A group email, relevant only for group access-mode
        /// </summary>
        /// <value>A group email, relevant only for group access-mode</value>
        [DataMember(Name = "group-email", EmitDefaultValue = false)]
        public string GroupEmail { get; set; }

        /// <summary>
        /// Gets or Sets GroupRole
        /// </summary>
        [DataMember(Name = "group-role", EmitDefaultValue = false)]
        public string GroupRole { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Name of the admin role to assign to the user, relevant only for role access-mode
        /// </summary>
        /// <value>Name of the admin role to assign to the user, relevant only for role access-mode</value>
        [DataMember(Name = "role-name", EmitDefaultValue = false)]
        public string RoleName { get; set; }

        /// <summary>
        /// Gets or Sets RoleScope
        /// </summary>
        [DataMember(Name = "role-scope", EmitDefaultValue = false)]
        public string RoleScope { get; set; }

        /// <summary>
        /// Enable/Disable secure remote access [true/false]
        /// </summary>
        /// <value>Enable/Disable secure remote access [true/false]</value>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Destination URL to inject secrets
        /// </summary>
        /// <value>Destination URL to inject secrets</value>
        [DataMember(Name = "secure-access-url", EmitDefaultValue = false)]
        public string SecureAccessUrl { get; set; }

        /// <summary>
        /// Enable Web Secure Remote Access
        /// </summary>
        /// <value>Enable Web Secure Remote Access</value>
        [DataMember(Name = "secure-access-web", EmitDefaultValue = true)]
        public bool SecureAccessWeb { get; set; }

        /// <summary>
        /// Secure browser via Akeyless&#39;s Secure Remote Access (SRA)
        /// </summary>
        /// <value>Secure browser via Akeyless&#39;s Secure Remote Access (SRA)</value>
        [DataMember(Name = "secure-access-web-browsing", EmitDefaultValue = true)]
        public bool SecureAccessWebBrowsing { get; set; }

        /// <summary>
        /// Web-Proxy via Akeyless&#39;s Secure Remote Access (SRA)
        /// </summary>
        /// <value>Web-Proxy via Akeyless&#39;s Secure Remote Access (SRA)</value>
        [DataMember(Name = "secure-access-web-proxy", EmitDefaultValue = true)]
        public bool SecureAccessWebProxy { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Name of existing target to use in dynamic secret creation
        /// </summary>
        /// <value>Name of existing target to use in dynamic secret creation</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DynamicSecretCreateGoogleWorkspace {\n");
            sb.Append("  AccessMode: ").Append(AccessMode).Append("\n");
            sb.Append("  AdminEmail: ").Append(AdminEmail).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FixedUserClaimKeyname: ").Append(FixedUserClaimKeyname).Append("\n");
            sb.Append("  GcpKey: ").Append(GcpKey).Append("\n");
            sb.Append("  GroupEmail: ").Append(GroupEmail).Append("\n");
            sb.Append("  GroupRole: ").Append(GroupRole).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  RoleScope: ").Append(RoleScope).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessUrl: ").Append(SecureAccessUrl).Append("\n");
            sb.Append("  SecureAccessWeb: ").Append(SecureAccessWeb).Append("\n");
            sb.Append("  SecureAccessWebBrowsing: ").Append(SecureAccessWebBrowsing).Append("\n");
            sb.Append("  SecureAccessWebProxy: ").Append(SecureAccessWebProxy).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
