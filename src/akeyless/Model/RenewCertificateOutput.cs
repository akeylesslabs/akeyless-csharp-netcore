/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// RenewCertificateOutput
    /// </summary>
    [DataContract(Name = "RenewCertificateOutput")]
    public partial class RenewCertificateOutput : IEquatable<RenewCertificateOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RenewCertificateOutput" /> class.
        /// </summary>
        /// <param name="cert">cert.</param>
        /// <param name="certDisplayId">certDisplayId.</param>
        /// <param name="itemId">itemId.</param>
        /// <param name="parentCert">parentCert.</param>
        /// <param name="privateKey">privateKey.</param>
        /// <param name="readingToken">readingToken.</param>
        public RenewCertificateOutput(string cert = default(string), string certDisplayId = default(string), string itemId = default(string), string parentCert = default(string), string privateKey = default(string), string readingToken = default(string))
        {
            this.Cert = cert;
            this.CertDisplayId = certDisplayId;
            this.ItemId = itemId;
            this.ParentCert = parentCert;
            this.PrivateKey = privateKey;
            this.ReadingToken = readingToken;
        }

        /// <summary>
        /// Gets or Sets Cert
        /// </summary>
        [DataMember(Name = "cert", EmitDefaultValue = false)]
        public string Cert { get; set; }

        /// <summary>
        /// Gets or Sets CertDisplayId
        /// </summary>
        [DataMember(Name = "cert_display_id", EmitDefaultValue = false)]
        public string CertDisplayId { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name = "item_id", EmitDefaultValue = false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets ParentCert
        /// </summary>
        [DataMember(Name = "parent_cert", EmitDefaultValue = false)]
        public string ParentCert { get; set; }

        /// <summary>
        /// Gets or Sets PrivateKey
        /// </summary>
        [DataMember(Name = "private_key", EmitDefaultValue = false)]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets ReadingToken
        /// </summary>
        [DataMember(Name = "reading_token", EmitDefaultValue = false)]
        public string ReadingToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RenewCertificateOutput {\n");
            sb.Append("  Cert: ").Append(Cert).Append("\n");
            sb.Append("  CertDisplayId: ").Append(CertDisplayId).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ParentCert: ").Append(ParentCert).Append("\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("  ReadingToken: ").Append(ReadingToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RenewCertificateOutput);
        }

        /// <summary>
        /// Returns true if RenewCertificateOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of RenewCertificateOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RenewCertificateOutput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Cert == input.Cert ||
                    (this.Cert != null &&
                    this.Cert.Equals(input.Cert))
                ) && 
                (
                    this.CertDisplayId == input.CertDisplayId ||
                    (this.CertDisplayId != null &&
                    this.CertDisplayId.Equals(input.CertDisplayId))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.ParentCert == input.ParentCert ||
                    (this.ParentCert != null &&
                    this.ParentCert.Equals(input.ParentCert))
                ) && 
                (
                    this.PrivateKey == input.PrivateKey ||
                    (this.PrivateKey != null &&
                    this.PrivateKey.Equals(input.PrivateKey))
                ) && 
                (
                    this.ReadingToken == input.ReadingToken ||
                    (this.ReadingToken != null &&
                    this.ReadingToken.Equals(input.ReadingToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cert != null)
                {
                    hashCode = (hashCode * 59) + this.Cert.GetHashCode();
                }
                if (this.CertDisplayId != null)
                {
                    hashCode = (hashCode * 59) + this.CertDisplayId.GetHashCode();
                }
                if (this.ItemId != null)
                {
                    hashCode = (hashCode * 59) + this.ItemId.GetHashCode();
                }
                if (this.ParentCert != null)
                {
                    hashCode = (hashCode * 59) + this.ParentCert.GetHashCode();
                }
                if (this.PrivateKey != null)
                {
                    hashCode = (hashCode * 59) + this.PrivateKey.GetHashCode();
                }
                if (this.ReadingToken != null)
                {
                    hashCode = (hashCode * 59) + this.ReadingToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
