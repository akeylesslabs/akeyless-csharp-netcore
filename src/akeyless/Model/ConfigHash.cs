/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ConfigHash
    /// </summary>
    [DataContract]
    public partial class ConfigHash :  IEquatable<ConfigHash>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigHash" /> class.
        /// </summary>
        /// <param name="admins">admins.</param>
        /// <param name="cache">cache.</param>
        /// <param name="customerFragements">customerFragements.</param>
        /// <param name="general">general.</param>
        /// <param name="k8sAuths">k8sAuths.</param>
        /// <param name="kmip">kmip.</param>
        /// <param name="ldap">ldap.</param>
        /// <param name="leadership">leadership.</param>
        /// <param name="logForwarding">logForwarding.</param>
        /// <param name="migrations">migrations.</param>
        /// <param name="producers">producers.</param>
        /// <param name="rotators">rotators.</param>
        /// <param name="saml">saml.</param>
        /// <param name="universalIdentity">universalIdentity.</param>
        public ConfigHash(string admins = default(string), string cache = default(string), string customerFragements = default(string), string general = default(string), string k8sAuths = default(string), string kmip = default(string), string ldap = default(string), string leadership = default(string), string logForwarding = default(string), string migrations = default(string), Object producers = default(Object), Object rotators = default(Object), string saml = default(string), string universalIdentity = default(string))
        {
            this.Admins = admins;
            this.Cache = cache;
            this.CustomerFragements = customerFragements;
            this.General = general;
            this.K8sAuths = k8sAuths;
            this.Kmip = kmip;
            this.Ldap = ldap;
            this.Leadership = leadership;
            this.LogForwarding = logForwarding;
            this.Migrations = migrations;
            this.Producers = producers;
            this.Rotators = rotators;
            this.Saml = saml;
            this.UniversalIdentity = universalIdentity;
        }
        
        /// <summary>
        /// Gets or Sets Admins
        /// </summary>
        [DataMember(Name="admins", EmitDefaultValue=false)]
        public string Admins { get; set; }

        /// <summary>
        /// Gets or Sets Cache
        /// </summary>
        [DataMember(Name="cache", EmitDefaultValue=false)]
        public string Cache { get; set; }

        /// <summary>
        /// Gets or Sets CustomerFragements
        /// </summary>
        [DataMember(Name="customer_fragements", EmitDefaultValue=false)]
        public string CustomerFragements { get; set; }

        /// <summary>
        /// Gets or Sets General
        /// </summary>
        [DataMember(Name="general", EmitDefaultValue=false)]
        public string General { get; set; }

        /// <summary>
        /// Gets or Sets K8sAuths
        /// </summary>
        [DataMember(Name="k8s_auths", EmitDefaultValue=false)]
        public string K8sAuths { get; set; }

        /// <summary>
        /// Gets or Sets Kmip
        /// </summary>
        [DataMember(Name="kmip", EmitDefaultValue=false)]
        public string Kmip { get; set; }

        /// <summary>
        /// Gets or Sets Ldap
        /// </summary>
        [DataMember(Name="ldap", EmitDefaultValue=false)]
        public string Ldap { get; set; }

        /// <summary>
        /// Gets or Sets Leadership
        /// </summary>
        [DataMember(Name="leadership", EmitDefaultValue=false)]
        public string Leadership { get; set; }

        /// <summary>
        /// Gets or Sets LogForwarding
        /// </summary>
        [DataMember(Name="log_forwarding", EmitDefaultValue=false)]
        public string LogForwarding { get; set; }

        /// <summary>
        /// Gets or Sets Migrations
        /// </summary>
        [DataMember(Name="migrations", EmitDefaultValue=false)]
        public string Migrations { get; set; }

        /// <summary>
        /// Gets or Sets Producers
        /// </summary>
        [DataMember(Name="producers", EmitDefaultValue=false)]
        public Object Producers { get; set; }

        /// <summary>
        /// Gets or Sets Rotators
        /// </summary>
        [DataMember(Name="rotators", EmitDefaultValue=false)]
        public Object Rotators { get; set; }

        /// <summary>
        /// Gets or Sets Saml
        /// </summary>
        [DataMember(Name="saml", EmitDefaultValue=false)]
        public string Saml { get; set; }

        /// <summary>
        /// Gets or Sets UniversalIdentity
        /// </summary>
        [DataMember(Name="universal_identity", EmitDefaultValue=false)]
        public string UniversalIdentity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigHash {\n");
            sb.Append("  Admins: ").Append(Admins).Append("\n");
            sb.Append("  Cache: ").Append(Cache).Append("\n");
            sb.Append("  CustomerFragements: ").Append(CustomerFragements).Append("\n");
            sb.Append("  General: ").Append(General).Append("\n");
            sb.Append("  K8sAuths: ").Append(K8sAuths).Append("\n");
            sb.Append("  Kmip: ").Append(Kmip).Append("\n");
            sb.Append("  Ldap: ").Append(Ldap).Append("\n");
            sb.Append("  Leadership: ").Append(Leadership).Append("\n");
            sb.Append("  LogForwarding: ").Append(LogForwarding).Append("\n");
            sb.Append("  Migrations: ").Append(Migrations).Append("\n");
            sb.Append("  Producers: ").Append(Producers).Append("\n");
            sb.Append("  Rotators: ").Append(Rotators).Append("\n");
            sb.Append("  Saml: ").Append(Saml).Append("\n");
            sb.Append("  UniversalIdentity: ").Append(UniversalIdentity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigHash);
        }

        /// <summary>
        /// Returns true if ConfigHash instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigHash to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigHash input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Admins == input.Admins ||
                    (this.Admins != null &&
                    this.Admins.Equals(input.Admins))
                ) && 
                (
                    this.Cache == input.Cache ||
                    (this.Cache != null &&
                    this.Cache.Equals(input.Cache))
                ) && 
                (
                    this.CustomerFragements == input.CustomerFragements ||
                    (this.CustomerFragements != null &&
                    this.CustomerFragements.Equals(input.CustomerFragements))
                ) && 
                (
                    this.General == input.General ||
                    (this.General != null &&
                    this.General.Equals(input.General))
                ) && 
                (
                    this.K8sAuths == input.K8sAuths ||
                    (this.K8sAuths != null &&
                    this.K8sAuths.Equals(input.K8sAuths))
                ) && 
                (
                    this.Kmip == input.Kmip ||
                    (this.Kmip != null &&
                    this.Kmip.Equals(input.Kmip))
                ) && 
                (
                    this.Ldap == input.Ldap ||
                    (this.Ldap != null &&
                    this.Ldap.Equals(input.Ldap))
                ) && 
                (
                    this.Leadership == input.Leadership ||
                    (this.Leadership != null &&
                    this.Leadership.Equals(input.Leadership))
                ) && 
                (
                    this.LogForwarding == input.LogForwarding ||
                    (this.LogForwarding != null &&
                    this.LogForwarding.Equals(input.LogForwarding))
                ) && 
                (
                    this.Migrations == input.Migrations ||
                    (this.Migrations != null &&
                    this.Migrations.Equals(input.Migrations))
                ) && 
                (
                    this.Producers == input.Producers ||
                    (this.Producers != null &&
                    this.Producers.Equals(input.Producers))
                ) && 
                (
                    this.Rotators == input.Rotators ||
                    (this.Rotators != null &&
                    this.Rotators.Equals(input.Rotators))
                ) && 
                (
                    this.Saml == input.Saml ||
                    (this.Saml != null &&
                    this.Saml.Equals(input.Saml))
                ) && 
                (
                    this.UniversalIdentity == input.UniversalIdentity ||
                    (this.UniversalIdentity != null &&
                    this.UniversalIdentity.Equals(input.UniversalIdentity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Admins != null)
                    hashCode = hashCode * 59 + this.Admins.GetHashCode();
                if (this.Cache != null)
                    hashCode = hashCode * 59 + this.Cache.GetHashCode();
                if (this.CustomerFragements != null)
                    hashCode = hashCode * 59 + this.CustomerFragements.GetHashCode();
                if (this.General != null)
                    hashCode = hashCode * 59 + this.General.GetHashCode();
                if (this.K8sAuths != null)
                    hashCode = hashCode * 59 + this.K8sAuths.GetHashCode();
                if (this.Kmip != null)
                    hashCode = hashCode * 59 + this.Kmip.GetHashCode();
                if (this.Ldap != null)
                    hashCode = hashCode * 59 + this.Ldap.GetHashCode();
                if (this.Leadership != null)
                    hashCode = hashCode * 59 + this.Leadership.GetHashCode();
                if (this.LogForwarding != null)
                    hashCode = hashCode * 59 + this.LogForwarding.GetHashCode();
                if (this.Migrations != null)
                    hashCode = hashCode * 59 + this.Migrations.GetHashCode();
                if (this.Producers != null)
                    hashCode = hashCode * 59 + this.Producers.GetHashCode();
                if (this.Rotators != null)
                    hashCode = hashCode * 59 + this.Rotators.GetHashCode();
                if (this.Saml != null)
                    hashCode = hashCode * 59 + this.Saml.GetHashCode();
                if (this.UniversalIdentity != null)
                    hashCode = hashCode * 59 + this.UniversalIdentity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
