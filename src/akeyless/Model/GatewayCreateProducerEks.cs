/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateProducerEks is a command that creates eks producer
    /// </summary>
    [DataContract]
    public partial class GatewayCreateProducerEks :  IEquatable<GatewayCreateProducerEks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerEks" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerEks() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerEks" /> class.
        /// </summary>
        /// <param name="eksAccessKeyId">Access Key ID (required).</param>
        /// <param name="eksAssumeRole">IAM assume role.</param>
        /// <param name="eksClusterCaCert">EKS cluster CA certificate (required).</param>
        /// <param name="eksClusterEndpoint">EKS cluster URL endpoint (required).</param>
        /// <param name="eksClusterName">EKS cluster name (required).</param>
        /// <param name="eksRegion">Region (default to &quot;us-east-2&quot;).</param>
        /// <param name="eksSecretAccessKey">Secret Access Key (required).</param>
        /// <param name="name">Producer name (required).</param>
        /// <param name="password">Required only when the authentication process requires a username and password.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="secureAccessAllowPortForwading">secureAccessAllowPortForwading.</param>
        /// <param name="secureAccessBastionIssuer">secureAccessBastionIssuer.</param>
        /// <param name="secureAccessClusterEndpoint">secureAccessClusterEndpoint.</param>
        /// <param name="secureAccessEnable">secureAccessEnable.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        /// <param name="username">Required only when the authentication process requires a username and password.</param>
        public GatewayCreateProducerEks(string eksAccessKeyId = default(string), string eksAssumeRole = default(string), string eksClusterCaCert = default(string), string eksClusterEndpoint = default(string), string eksClusterName = default(string), string eksRegion = "us-east-2", string eksSecretAccessKey = default(string), string name = default(string), string password = default(string), string producerEncryptionKeyName = default(string), bool secureAccessAllowPortForwading = default(bool), string secureAccessBastionIssuer = default(string), string secureAccessClusterEndpoint = default(string), string secureAccessEnable = default(string), string token = default(string), string uidToken = default(string), string userTtl = "60m", string username = default(string))
        {
            // to ensure "eksAccessKeyId" is required (not null)
            this.EksAccessKeyId = eksAccessKeyId ?? throw new ArgumentNullException("eksAccessKeyId is a required property for GatewayCreateProducerEks and cannot be null");
            // to ensure "eksClusterCaCert" is required (not null)
            this.EksClusterCaCert = eksClusterCaCert ?? throw new ArgumentNullException("eksClusterCaCert is a required property for GatewayCreateProducerEks and cannot be null");
            // to ensure "eksClusterEndpoint" is required (not null)
            this.EksClusterEndpoint = eksClusterEndpoint ?? throw new ArgumentNullException("eksClusterEndpoint is a required property for GatewayCreateProducerEks and cannot be null");
            // to ensure "eksClusterName" is required (not null)
            this.EksClusterName = eksClusterName ?? throw new ArgumentNullException("eksClusterName is a required property for GatewayCreateProducerEks and cannot be null");
            // to ensure "eksSecretAccessKey" is required (not null)
            this.EksSecretAccessKey = eksSecretAccessKey ?? throw new ArgumentNullException("eksSecretAccessKey is a required property for GatewayCreateProducerEks and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for GatewayCreateProducerEks and cannot be null");
            this.EksAssumeRole = eksAssumeRole;
            // use default value if no "eksRegion" provided
            this.EksRegion = eksRegion ?? "us-east-2";
            this.Password = password;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.SecureAccessAllowPortForwading = secureAccessAllowPortForwading;
            this.SecureAccessBastionIssuer = secureAccessBastionIssuer;
            this.SecureAccessClusterEndpoint = secureAccessClusterEndpoint;
            this.SecureAccessEnable = secureAccessEnable;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "60m";
            this.Username = username;
        }
        
        /// <summary>
        /// Access Key ID
        /// </summary>
        /// <value>Access Key ID</value>
        [DataMember(Name="eks-access-key-id", EmitDefaultValue=false)]
        public string EksAccessKeyId { get; set; }

        /// <summary>
        /// IAM assume role
        /// </summary>
        /// <value>IAM assume role</value>
        [DataMember(Name="eks-assume-role", EmitDefaultValue=false)]
        public string EksAssumeRole { get; set; }

        /// <summary>
        /// EKS cluster CA certificate
        /// </summary>
        /// <value>EKS cluster CA certificate</value>
        [DataMember(Name="eks-cluster-ca-cert", EmitDefaultValue=false)]
        public string EksClusterCaCert { get; set; }

        /// <summary>
        /// EKS cluster URL endpoint
        /// </summary>
        /// <value>EKS cluster URL endpoint</value>
        [DataMember(Name="eks-cluster-endpoint", EmitDefaultValue=false)]
        public string EksClusterEndpoint { get; set; }

        /// <summary>
        /// EKS cluster name
        /// </summary>
        /// <value>EKS cluster name</value>
        [DataMember(Name="eks-cluster-name", EmitDefaultValue=false)]
        public string EksClusterName { get; set; }

        /// <summary>
        /// Region
        /// </summary>
        /// <value>Region</value>
        [DataMember(Name="eks-region", EmitDefaultValue=false)]
        public string EksRegion { get; set; }

        /// <summary>
        /// Secret Access Key
        /// </summary>
        /// <value>Secret Access Key</value>
        [DataMember(Name="eks-secret-access-key", EmitDefaultValue=false)]
        public string EksSecretAccessKey { get; set; }

        /// <summary>
        /// Producer name
        /// </summary>
        /// <value>Producer name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name="producer-encryption-key-name", EmitDefaultValue=false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessAllowPortForwading
        /// </summary>
        [DataMember(Name="secure-access-allow-port-forwading", EmitDefaultValue=false)]
        public bool SecureAccessAllowPortForwading { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessBastionIssuer
        /// </summary>
        [DataMember(Name="secure-access-bastion-issuer", EmitDefaultValue=false)]
        public string SecureAccessBastionIssuer { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessClusterEndpoint
        /// </summary>
        [DataMember(Name="secure-access-cluster-endpoint", EmitDefaultValue=false)]
        public string SecureAccessClusterEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessEnable
        /// </summary>
        [DataMember(Name="secure-access-enable", EmitDefaultValue=false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name="user-ttl", EmitDefaultValue=false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerEks {\n");
            sb.Append("  EksAccessKeyId: ").Append(EksAccessKeyId).Append("\n");
            sb.Append("  EksAssumeRole: ").Append(EksAssumeRole).Append("\n");
            sb.Append("  EksClusterCaCert: ").Append(EksClusterCaCert).Append("\n");
            sb.Append("  EksClusterEndpoint: ").Append(EksClusterEndpoint).Append("\n");
            sb.Append("  EksClusterName: ").Append(EksClusterName).Append("\n");
            sb.Append("  EksRegion: ").Append(EksRegion).Append("\n");
            sb.Append("  EksSecretAccessKey: ").Append(EksSecretAccessKey).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  SecureAccessAllowPortForwading: ").Append(SecureAccessAllowPortForwading).Append("\n");
            sb.Append("  SecureAccessBastionIssuer: ").Append(SecureAccessBastionIssuer).Append("\n");
            sb.Append("  SecureAccessClusterEndpoint: ").Append(SecureAccessClusterEndpoint).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayCreateProducerEks);
        }

        /// <summary>
        /// Returns true if GatewayCreateProducerEks instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayCreateProducerEks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayCreateProducerEks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EksAccessKeyId == input.EksAccessKeyId ||
                    (this.EksAccessKeyId != null &&
                    this.EksAccessKeyId.Equals(input.EksAccessKeyId))
                ) && 
                (
                    this.EksAssumeRole == input.EksAssumeRole ||
                    (this.EksAssumeRole != null &&
                    this.EksAssumeRole.Equals(input.EksAssumeRole))
                ) && 
                (
                    this.EksClusterCaCert == input.EksClusterCaCert ||
                    (this.EksClusterCaCert != null &&
                    this.EksClusterCaCert.Equals(input.EksClusterCaCert))
                ) && 
                (
                    this.EksClusterEndpoint == input.EksClusterEndpoint ||
                    (this.EksClusterEndpoint != null &&
                    this.EksClusterEndpoint.Equals(input.EksClusterEndpoint))
                ) && 
                (
                    this.EksClusterName == input.EksClusterName ||
                    (this.EksClusterName != null &&
                    this.EksClusterName.Equals(input.EksClusterName))
                ) && 
                (
                    this.EksRegion == input.EksRegion ||
                    (this.EksRegion != null &&
                    this.EksRegion.Equals(input.EksRegion))
                ) && 
                (
                    this.EksSecretAccessKey == input.EksSecretAccessKey ||
                    (this.EksSecretAccessKey != null &&
                    this.EksSecretAccessKey.Equals(input.EksSecretAccessKey))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.SecureAccessAllowPortForwading == input.SecureAccessAllowPortForwading ||
                    this.SecureAccessAllowPortForwading.Equals(input.SecureAccessAllowPortForwading)
                ) && 
                (
                    this.SecureAccessBastionIssuer == input.SecureAccessBastionIssuer ||
                    (this.SecureAccessBastionIssuer != null &&
                    this.SecureAccessBastionIssuer.Equals(input.SecureAccessBastionIssuer))
                ) && 
                (
                    this.SecureAccessClusterEndpoint == input.SecureAccessClusterEndpoint ||
                    (this.SecureAccessClusterEndpoint != null &&
                    this.SecureAccessClusterEndpoint.Equals(input.SecureAccessClusterEndpoint))
                ) && 
                (
                    this.SecureAccessEnable == input.SecureAccessEnable ||
                    (this.SecureAccessEnable != null &&
                    this.SecureAccessEnable.Equals(input.SecureAccessEnable))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EksAccessKeyId != null)
                    hashCode = hashCode * 59 + this.EksAccessKeyId.GetHashCode();
                if (this.EksAssumeRole != null)
                    hashCode = hashCode * 59 + this.EksAssumeRole.GetHashCode();
                if (this.EksClusterCaCert != null)
                    hashCode = hashCode * 59 + this.EksClusterCaCert.GetHashCode();
                if (this.EksClusterEndpoint != null)
                    hashCode = hashCode * 59 + this.EksClusterEndpoint.GetHashCode();
                if (this.EksClusterName != null)
                    hashCode = hashCode * 59 + this.EksClusterName.GetHashCode();
                if (this.EksRegion != null)
                    hashCode = hashCode * 59 + this.EksRegion.GetHashCode();
                if (this.EksSecretAccessKey != null)
                    hashCode = hashCode * 59 + this.EksSecretAccessKey.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.ProducerEncryptionKeyName != null)
                    hashCode = hashCode * 59 + this.ProducerEncryptionKeyName.GetHashCode();
                hashCode = hashCode * 59 + this.SecureAccessAllowPortForwading.GetHashCode();
                if (this.SecureAccessBastionIssuer != null)
                    hashCode = hashCode * 59 + this.SecureAccessBastionIssuer.GetHashCode();
                if (this.SecureAccessClusterEndpoint != null)
                    hashCode = hashCode * 59 + this.SecureAccessClusterEndpoint.GetHashCode();
                if (this.SecureAccessEnable != null)
                    hashCode = hashCode * 59 + this.SecureAccessEnable.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.UserTtl != null)
                    hashCode = hashCode * 59 + this.UserTtl.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
