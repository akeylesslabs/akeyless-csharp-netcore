/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// EKSTargetDetails defines details related to connecting to a EKS (Elastic Container Service) target
    /// </summary>
    [DataContract(Name = "EKSTargetDetails")]
    public partial class EKSTargetDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EKSTargetDetails" /> class.
        /// </summary>
        /// <param name="eksAccessKeyId">eksAccessKeyId.</param>
        /// <param name="eksClusterCaCertificate">eksClusterCaCertificate.</param>
        /// <param name="eksClusterEndpoint">eksClusterEndpoint.</param>
        /// <param name="eksClusterName">eksClusterName.</param>
        /// <param name="eksRegion">eksRegion.</param>
        /// <param name="eksSecretAccessKey">eksSecretAccessKey.</param>
        /// <param name="useGwCloudIdentity">useGwCloudIdentity.</param>
        public EKSTargetDetails(string eksAccessKeyId = default(string), string eksClusterCaCertificate = default(string), string eksClusterEndpoint = default(string), string eksClusterName = default(string), string eksRegion = default(string), string eksSecretAccessKey = default(string), bool useGwCloudIdentity = default(bool))
        {
            this.EksAccessKeyId = eksAccessKeyId;
            this.EksClusterCaCertificate = eksClusterCaCertificate;
            this.EksClusterEndpoint = eksClusterEndpoint;
            this.EksClusterName = eksClusterName;
            this.EksRegion = eksRegion;
            this.EksSecretAccessKey = eksSecretAccessKey;
            this.UseGwCloudIdentity = useGwCloudIdentity;
        }

        /// <summary>
        /// Gets or Sets EksAccessKeyId
        /// </summary>
        [DataMember(Name = "eks_access_key_id", EmitDefaultValue = false)]
        public string EksAccessKeyId { get; set; }

        /// <summary>
        /// Gets or Sets EksClusterCaCertificate
        /// </summary>
        [DataMember(Name = "eks_cluster_ca_certificate", EmitDefaultValue = false)]
        public string EksClusterCaCertificate { get; set; }

        /// <summary>
        /// Gets or Sets EksClusterEndpoint
        /// </summary>
        [DataMember(Name = "eks_cluster_endpoint", EmitDefaultValue = false)]
        public string EksClusterEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets EksClusterName
        /// </summary>
        [DataMember(Name = "eks_cluster_name", EmitDefaultValue = false)]
        public string EksClusterName { get; set; }

        /// <summary>
        /// Gets or Sets EksRegion
        /// </summary>
        [DataMember(Name = "eks_region", EmitDefaultValue = false)]
        public string EksRegion { get; set; }

        /// <summary>
        /// Gets or Sets EksSecretAccessKey
        /// </summary>
        [DataMember(Name = "eks_secret_access_key", EmitDefaultValue = false)]
        public string EksSecretAccessKey { get; set; }

        /// <summary>
        /// Gets or Sets UseGwCloudIdentity
        /// </summary>
        [DataMember(Name = "use_gw_cloud_identity", EmitDefaultValue = true)]
        public bool UseGwCloudIdentity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EKSTargetDetails {\n");
            sb.Append("  EksAccessKeyId: ").Append(EksAccessKeyId).Append("\n");
            sb.Append("  EksClusterCaCertificate: ").Append(EksClusterCaCertificate).Append("\n");
            sb.Append("  EksClusterEndpoint: ").Append(EksClusterEndpoint).Append("\n");
            sb.Append("  EksClusterName: ").Append(EksClusterName).Append("\n");
            sb.Append("  EksRegion: ").Append(EksRegion).Append("\n");
            sb.Append("  EksSecretAccessKey: ").Append(EksSecretAccessKey).Append("\n");
            sb.Append("  UseGwCloudIdentity: ").Append(UseGwCloudIdentity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
