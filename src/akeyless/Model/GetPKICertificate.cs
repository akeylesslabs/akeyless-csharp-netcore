/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GetPKICertificate
    /// </summary>
    [DataContract]
    public partial class GetPKICertificate :  IEquatable<GetPKICertificate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPKICertificate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetPKICertificate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPKICertificate" /> class.
        /// </summary>
        /// <param name="altNames">The Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list).</param>
        /// <param name="certIssuerName">The name of the PKI certificate issuer (required).</param>
        /// <param name="commonName">The common name to be included in the PKI certificate.</param>
        /// <param name="keyFilePath">The client public or private key file path (in case of a private key, it will be use to extract the public key) (required).</param>
        /// <param name="outfile">Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="uriSans">The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list).</param>
        public GetPKICertificate(string altNames = default(string), string certIssuerName = default(string), string commonName = default(string), string keyFilePath = default(string), string outfile = default(string), string token = default(string), string uidToken = default(string), string uriSans = default(string))
        {
            // to ensure "certIssuerName" is required (not null)
            this.CertIssuerName = certIssuerName ?? throw new ArgumentNullException("certIssuerName is a required property for GetPKICertificate and cannot be null");
            // to ensure "keyFilePath" is required (not null)
            this.KeyFilePath = keyFilePath ?? throw new ArgumentNullException("keyFilePath is a required property for GetPKICertificate and cannot be null");
            this.AltNames = altNames;
            this.CommonName = commonName;
            this.Outfile = outfile;
            this.Token = token;
            this.UidToken = uidToken;
            this.UriSans = uriSans;
        }
        
        /// <summary>
        /// The Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
        /// </summary>
        /// <value>The Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)</value>
        [DataMember(Name="alt-names", EmitDefaultValue=false)]
        public string AltNames { get; set; }

        /// <summary>
        /// The name of the PKI certificate issuer
        /// </summary>
        /// <value>The name of the PKI certificate issuer</value>
        [DataMember(Name="cert-issuer-name", EmitDefaultValue=false)]
        public string CertIssuerName { get; set; }

        /// <summary>
        /// The common name to be included in the PKI certificate
        /// </summary>
        /// <value>The common name to be included in the PKI certificate</value>
        [DataMember(Name="common-name", EmitDefaultValue=false)]
        public string CommonName { get; set; }

        /// <summary>
        /// The client public or private key file path (in case of a private key, it will be use to extract the public key)
        /// </summary>
        /// <value>The client public or private key file path (in case of a private key, it will be use to extract the public key)</value>
        [DataMember(Name="key-file-path", EmitDefaultValue=false)]
        public string KeyFilePath { get; set; }

        /// <summary>
        /// Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension
        /// </summary>
        /// <value>Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension</value>
        [DataMember(Name="outfile", EmitDefaultValue=false)]
        public string Outfile { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
        /// </summary>
        /// <value>The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)</value>
        [DataMember(Name="uri-sans", EmitDefaultValue=false)]
        public string UriSans { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetPKICertificate {\n");
            sb.Append("  AltNames: ").Append(AltNames).Append("\n");
            sb.Append("  CertIssuerName: ").Append(CertIssuerName).Append("\n");
            sb.Append("  CommonName: ").Append(CommonName).Append("\n");
            sb.Append("  KeyFilePath: ").Append(KeyFilePath).Append("\n");
            sb.Append("  Outfile: ").Append(Outfile).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UriSans: ").Append(UriSans).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetPKICertificate);
        }

        /// <summary>
        /// Returns true if GetPKICertificate instances are equal
        /// </summary>
        /// <param name="input">Instance of GetPKICertificate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetPKICertificate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AltNames == input.AltNames ||
                    (this.AltNames != null &&
                    this.AltNames.Equals(input.AltNames))
                ) && 
                (
                    this.CertIssuerName == input.CertIssuerName ||
                    (this.CertIssuerName != null &&
                    this.CertIssuerName.Equals(input.CertIssuerName))
                ) && 
                (
                    this.CommonName == input.CommonName ||
                    (this.CommonName != null &&
                    this.CommonName.Equals(input.CommonName))
                ) && 
                (
                    this.KeyFilePath == input.KeyFilePath ||
                    (this.KeyFilePath != null &&
                    this.KeyFilePath.Equals(input.KeyFilePath))
                ) && 
                (
                    this.Outfile == input.Outfile ||
                    (this.Outfile != null &&
                    this.Outfile.Equals(input.Outfile))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UriSans == input.UriSans ||
                    (this.UriSans != null &&
                    this.UriSans.Equals(input.UriSans))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AltNames != null)
                    hashCode = hashCode * 59 + this.AltNames.GetHashCode();
                if (this.CertIssuerName != null)
                    hashCode = hashCode * 59 + this.CertIssuerName.GetHashCode();
                if (this.CommonName != null)
                    hashCode = hashCode * 59 + this.CommonName.GetHashCode();
                if (this.KeyFilePath != null)
                    hashCode = hashCode * 59 + this.KeyFilePath.GetHashCode();
                if (this.Outfile != null)
                    hashCode = hashCode * 59 + this.Outfile.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.UriSans != null)
                    hashCode = hashCode * 59 + this.UriSans.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
