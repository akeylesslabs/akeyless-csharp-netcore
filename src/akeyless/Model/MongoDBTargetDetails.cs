/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// MongoDBTargetDetails
    /// </summary>
    [DataContract(Name = "MongoDBTargetDetails")]
    public partial class MongoDBTargetDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MongoDBTargetDetails" /> class.
        /// </summary>
        /// <param name="mongodbAtlasApiPrivateKey">mongodbAtlasApiPrivateKey.</param>
        /// <param name="mongodbAtlasApiPublicKey">mongodbAtlasApiPublicKey.</param>
        /// <param name="mongodbAtlasProjectId">mongodb atlas fields.</param>
        /// <param name="mongodbDbName">common fields.</param>
        /// <param name="mongodbDefaultAuthDb">mongodbDefaultAuthDb.</param>
        /// <param name="mongodbHostPort">mongodbHostPort.</param>
        /// <param name="mongodbIsAtlas">mongodbIsAtlas.</param>
        /// <param name="mongodbPassword">mongodbPassword.</param>
        /// <param name="mongodbUriConnection">mongodb fields.</param>
        /// <param name="mongodbUriOptions">mongodbUriOptions.</param>
        /// <param name="mongodbUsername">mongodbUsername.</param>
        public MongoDBTargetDetails(string mongodbAtlasApiPrivateKey = default(string), string mongodbAtlasApiPublicKey = default(string), string mongodbAtlasProjectId = default(string), string mongodbDbName = default(string), string mongodbDefaultAuthDb = default(string), string mongodbHostPort = default(string), bool mongodbIsAtlas = default(bool), string mongodbPassword = default(string), string mongodbUriConnection = default(string), string mongodbUriOptions = default(string), string mongodbUsername = default(string))
        {
            this.MongodbAtlasApiPrivateKey = mongodbAtlasApiPrivateKey;
            this.MongodbAtlasApiPublicKey = mongodbAtlasApiPublicKey;
            this.MongodbAtlasProjectId = mongodbAtlasProjectId;
            this.MongodbDbName = mongodbDbName;
            this.MongodbDefaultAuthDb = mongodbDefaultAuthDb;
            this.MongodbHostPort = mongodbHostPort;
            this.MongodbIsAtlas = mongodbIsAtlas;
            this.MongodbPassword = mongodbPassword;
            this.MongodbUriConnection = mongodbUriConnection;
            this.MongodbUriOptions = mongodbUriOptions;
            this.MongodbUsername = mongodbUsername;
        }

        /// <summary>
        /// Gets or Sets MongodbAtlasApiPrivateKey
        /// </summary>
        [DataMember(Name = "mongodb_atlas_api_private_key", EmitDefaultValue = false)]
        public string MongodbAtlasApiPrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets MongodbAtlasApiPublicKey
        /// </summary>
        [DataMember(Name = "mongodb_atlas_api_public_key", EmitDefaultValue = false)]
        public string MongodbAtlasApiPublicKey { get; set; }

        /// <summary>
        /// mongodb atlas fields
        /// </summary>
        /// <value>mongodb atlas fields</value>
        [DataMember(Name = "mongodb_atlas_project_id", EmitDefaultValue = false)]
        public string MongodbAtlasProjectId { get; set; }

        /// <summary>
        /// common fields
        /// </summary>
        /// <value>common fields</value>
        [DataMember(Name = "mongodb_db_name", EmitDefaultValue = false)]
        public string MongodbDbName { get; set; }

        /// <summary>
        /// Gets or Sets MongodbDefaultAuthDb
        /// </summary>
        [DataMember(Name = "mongodb_default_auth_db", EmitDefaultValue = false)]
        public string MongodbDefaultAuthDb { get; set; }

        /// <summary>
        /// Gets or Sets MongodbHostPort
        /// </summary>
        [DataMember(Name = "mongodb_host_port", EmitDefaultValue = false)]
        public string MongodbHostPort { get; set; }

        /// <summary>
        /// Gets or Sets MongodbIsAtlas
        /// </summary>
        [DataMember(Name = "mongodb_is_atlas", EmitDefaultValue = true)]
        public bool MongodbIsAtlas { get; set; }

        /// <summary>
        /// Gets or Sets MongodbPassword
        /// </summary>
        [DataMember(Name = "mongodb_password", EmitDefaultValue = false)]
        public string MongodbPassword { get; set; }

        /// <summary>
        /// mongodb fields
        /// </summary>
        /// <value>mongodb fields</value>
        [DataMember(Name = "mongodb_uri_connection", EmitDefaultValue = false)]
        public string MongodbUriConnection { get; set; }

        /// <summary>
        /// Gets or Sets MongodbUriOptions
        /// </summary>
        [DataMember(Name = "mongodb_uri_options", EmitDefaultValue = false)]
        public string MongodbUriOptions { get; set; }

        /// <summary>
        /// Gets or Sets MongodbUsername
        /// </summary>
        [DataMember(Name = "mongodb_username", EmitDefaultValue = false)]
        public string MongodbUsername { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MongoDBTargetDetails {\n");
            sb.Append("  MongodbAtlasApiPrivateKey: ").Append(MongodbAtlasApiPrivateKey).Append("\n");
            sb.Append("  MongodbAtlasApiPublicKey: ").Append(MongodbAtlasApiPublicKey).Append("\n");
            sb.Append("  MongodbAtlasProjectId: ").Append(MongodbAtlasProjectId).Append("\n");
            sb.Append("  MongodbDbName: ").Append(MongodbDbName).Append("\n");
            sb.Append("  MongodbDefaultAuthDb: ").Append(MongodbDefaultAuthDb).Append("\n");
            sb.Append("  MongodbHostPort: ").Append(MongodbHostPort).Append("\n");
            sb.Append("  MongodbIsAtlas: ").Append(MongodbIsAtlas).Append("\n");
            sb.Append("  MongodbPassword: ").Append(MongodbPassword).Append("\n");
            sb.Append("  MongodbUriConnection: ").Append(MongodbUriConnection).Append("\n");
            sb.Append("  MongodbUriOptions: ").Append(MongodbUriOptions).Append("\n");
            sb.Append("  MongodbUsername: ").Append(MongodbUsername).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
