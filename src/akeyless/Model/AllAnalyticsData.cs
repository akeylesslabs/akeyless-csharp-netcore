/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// AllAnalyticsData
    /// </summary>
    [DataContract(Name = "AllAnalyticsData")]
    public partial class AllAnalyticsData : IEquatable<AllAnalyticsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllAnalyticsData" /> class.
        /// </summary>
        /// <param name="analyticsData">analyticsData.</param>
        /// <param name="certificatesExpiryData">certificatesExpiryData.</param>
        /// <param name="clientsUsageReports">clientsUsageReports.</param>
        /// <param name="dateUpdated">dateUpdated.</param>
        /// <param name="usageReports">usageReports.</param>
        public AllAnalyticsData(Dictionary<string, List<List<string>>> analyticsData = default(Dictionary<string, List<List<string>>>), CertificateAnalyticAggregation certificatesExpiryData = default(CertificateAnalyticAggregation), Dictionary<string, ClientsUsageReport> clientsUsageReports = default(Dictionary<string, ClientsUsageReport>), long dateUpdated = default(long), Dictionary<string, UsageReportSummary> usageReports = default(Dictionary<string, UsageReportSummary>))
        {
            this.AnalyticsData = analyticsData;
            this.CertificatesExpiryData = certificatesExpiryData;
            this.ClientsUsageReports = clientsUsageReports;
            this.DateUpdated = dateUpdated;
            this.UsageReports = usageReports;
        }

        /// <summary>
        /// Gets or Sets AnalyticsData
        /// </summary>
        [DataMember(Name = "analytics_data", EmitDefaultValue = false)]
        public Dictionary<string, List<List<string>>> AnalyticsData { get; set; }

        /// <summary>
        /// Gets or Sets CertificatesExpiryData
        /// </summary>
        [DataMember(Name = "certificates_expiry_data", EmitDefaultValue = false)]
        public CertificateAnalyticAggregation CertificatesExpiryData { get; set; }

        /// <summary>
        /// Gets or Sets ClientsUsageReports
        /// </summary>
        [DataMember(Name = "clients_usage_reports", EmitDefaultValue = false)]
        public Dictionary<string, ClientsUsageReport> ClientsUsageReports { get; set; }

        /// <summary>
        /// Gets or Sets DateUpdated
        /// </summary>
        [DataMember(Name = "date_updated", EmitDefaultValue = false)]
        public long DateUpdated { get; set; }

        /// <summary>
        /// Gets or Sets UsageReports
        /// </summary>
        [DataMember(Name = "usage_reports", EmitDefaultValue = false)]
        public Dictionary<string, UsageReportSummary> UsageReports { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AllAnalyticsData {\n");
            sb.Append("  AnalyticsData: ").Append(AnalyticsData).Append("\n");
            sb.Append("  CertificatesExpiryData: ").Append(CertificatesExpiryData).Append("\n");
            sb.Append("  ClientsUsageReports: ").Append(ClientsUsageReports).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  UsageReports: ").Append(UsageReports).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllAnalyticsData);
        }

        /// <summary>
        /// Returns true if AllAnalyticsData instances are equal
        /// </summary>
        /// <param name="input">Instance of AllAnalyticsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllAnalyticsData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AnalyticsData == input.AnalyticsData ||
                    this.AnalyticsData != null &&
                    input.AnalyticsData != null &&
                    this.AnalyticsData.SequenceEqual(input.AnalyticsData)
                ) && 
                (
                    this.CertificatesExpiryData == input.CertificatesExpiryData ||
                    (this.CertificatesExpiryData != null &&
                    this.CertificatesExpiryData.Equals(input.CertificatesExpiryData))
                ) && 
                (
                    this.ClientsUsageReports == input.ClientsUsageReports ||
                    this.ClientsUsageReports != null &&
                    input.ClientsUsageReports != null &&
                    this.ClientsUsageReports.SequenceEqual(input.ClientsUsageReports)
                ) && 
                (
                    this.DateUpdated == input.DateUpdated ||
                    this.DateUpdated.Equals(input.DateUpdated)
                ) && 
                (
                    this.UsageReports == input.UsageReports ||
                    this.UsageReports != null &&
                    input.UsageReports != null &&
                    this.UsageReports.SequenceEqual(input.UsageReports)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnalyticsData != null)
                {
                    hashCode = (hashCode * 59) + this.AnalyticsData.GetHashCode();
                }
                if (this.CertificatesExpiryData != null)
                {
                    hashCode = (hashCode * 59) + this.CertificatesExpiryData.GetHashCode();
                }
                if (this.ClientsUsageReports != null)
                {
                    hashCode = (hashCode * 59) + this.ClientsUsageReports.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DateUpdated.GetHashCode();
                if (this.UsageReports != null)
                {
                    hashCode = (hashCode * 59) + this.UsageReports.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
