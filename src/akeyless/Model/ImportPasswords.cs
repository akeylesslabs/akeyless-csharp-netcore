/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// importPasswords is a command that import passwords
    /// </summary>
    [DataContract(Name = "importPasswords")]
    public partial class ImportPasswords : IEquatable<ImportPasswords>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportPasswords" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImportPasswords() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportPasswords" /> class.
        /// </summary>
        /// <param name="accessibility">for personal password manager (default to &quot;personal&quot;).</param>
        /// <param name="format">Password format type [LastPass/Chrome/Firefox] (default to &quot;LastPass&quot;).</param>
        /// <param name="importPath">File path (required).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="protectionKey">The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="targetFolder">Target folder for imported passwords (default to &quot;/&quot;).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="updateMode">updateMode.</param>
        public ImportPasswords(string accessibility = "personal", string format = "LastPass", string importPath = default(string), bool json = false, string protectionKey = default(string), string targetFolder = "/", string token = default(string), string uidToken = default(string), string updateMode = default(string))
        {
            // to ensure "importPath" is required (not null)
            if (importPath == null)
            {
                throw new ArgumentNullException("importPath is a required property for ImportPasswords and cannot be null");
            }
            this.ImportPath = importPath;
            // use default value if no "accessibility" provided
            this.Accessibility = accessibility ?? "personal";
            // use default value if no "format" provided
            this.Format = format ?? "LastPass";
            this.Json = json;
            this.ProtectionKey = protectionKey;
            // use default value if no "targetFolder" provided
            this.TargetFolder = targetFolder ?? "/";
            this.Token = token;
            this.UidToken = uidToken;
            this.UpdateMode = updateMode;
        }

        /// <summary>
        /// for personal password manager
        /// </summary>
        /// <value>for personal password manager</value>
        [DataMember(Name = "accessibility", EmitDefaultValue = false)]
        public string Accessibility { get; set; }

        /// <summary>
        /// Password format type [LastPass/Chrome/Firefox]
        /// </summary>
        /// <value>Password format type [LastPass/Chrome/Firefox]</value>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public string Format { get; set; }

        /// <summary>
        /// File path
        /// </summary>
        /// <value>File path</value>
        [DataMember(Name = "import-path", IsRequired = true, EmitDefaultValue = true)]
        public string ImportPath { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "protection_key", EmitDefaultValue = false)]
        public string ProtectionKey { get; set; }

        /// <summary>
        /// Target folder for imported passwords
        /// </summary>
        /// <value>Target folder for imported passwords</value>
        [DataMember(Name = "target-folder", EmitDefaultValue = false)]
        public string TargetFolder { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Gets or Sets UpdateMode
        /// </summary>
        [DataMember(Name = "update-mode", EmitDefaultValue = false)]
        public string UpdateMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImportPasswords {\n");
            sb.Append("  Accessibility: ").Append(Accessibility).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  ImportPath: ").Append(ImportPath).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  ProtectionKey: ").Append(ProtectionKey).Append("\n");
            sb.Append("  TargetFolder: ").Append(TargetFolder).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UpdateMode: ").Append(UpdateMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportPasswords);
        }

        /// <summary>
        /// Returns true if ImportPasswords instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportPasswords to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportPasswords input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Accessibility == input.Accessibility ||
                    (this.Accessibility != null &&
                    this.Accessibility.Equals(input.Accessibility))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.ImportPath == input.ImportPath ||
                    (this.ImportPath != null &&
                    this.ImportPath.Equals(input.ImportPath))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.ProtectionKey == input.ProtectionKey ||
                    (this.ProtectionKey != null &&
                    this.ProtectionKey.Equals(input.ProtectionKey))
                ) && 
                (
                    this.TargetFolder == input.TargetFolder ||
                    (this.TargetFolder != null &&
                    this.TargetFolder.Equals(input.TargetFolder))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UpdateMode == input.UpdateMode ||
                    (this.UpdateMode != null &&
                    this.UpdateMode.Equals(input.UpdateMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accessibility != null)
                {
                    hashCode = (hashCode * 59) + this.Accessibility.GetHashCode();
                }
                if (this.Format != null)
                {
                    hashCode = (hashCode * 59) + this.Format.GetHashCode();
                }
                if (this.ImportPath != null)
                {
                    hashCode = (hashCode * 59) + this.ImportPath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.ProtectionKey != null)
                {
                    hashCode = (hashCode * 59) + this.ProtectionKey.GetHashCode();
                }
                if (this.TargetFolder != null)
                {
                    hashCode = (hashCode * 59) + this.TargetFolder.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UpdateMode != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateMode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
