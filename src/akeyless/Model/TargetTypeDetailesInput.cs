/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// TargetTypeDetailesInput
    /// </summary>
    [DataContract]
    public partial class TargetTypeDetailesInput :  IEquatable<TargetTypeDetailesInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetTypeDetailesInput" /> class.
        /// </summary>
        /// <param name="awsAccessKeyId">awsAccessKeyId.</param>
        /// <param name="awsRegion">awsRegion.</param>
        /// <param name="awsSecretAccessKey">awsSecretAccessKey.</param>
        /// <param name="awsSessionToken">awsSessionToken.</param>
        /// <param name="dbHostName">dbHostName.</param>
        /// <param name="dbName">dbName.</param>
        /// <param name="dbPort">dbPort.</param>
        /// <param name="dbPwd">dbPwd.</param>
        /// <param name="dbServerCertificates">(Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host&#39;s root CA set..</param>
        /// <param name="dbServerName">(Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client&#39;s handshake to support virtual hosting unless it is an IP address..</param>
        /// <param name="dbUserName">dbUserName.</param>
        /// <param name="host">host.</param>
        /// <param name="mongodbDbName">mongodbDbName.</param>
        /// <param name="mongodbUriConnection">mongodbUriConnection.</param>
        /// <param name="password">password.</param>
        /// <param name="port">port.</param>
        /// <param name="privateKey">privateKey.</param>
        /// <param name="privateKeyPassword">privateKeyPassword.</param>
        /// <param name="rabbitmqServerPassword">rabbitmqServerPassword.</param>
        /// <param name="rabbitmqServerUri">rabbitmqServerUri.</param>
        /// <param name="rabbitmqServerUser">rabbitmqServerUser.</param>
        /// <param name="url">url.</param>
        /// <param name="username">username.</param>
        public TargetTypeDetailesInput(string awsAccessKeyId = default(string), string awsRegion = default(string), string awsSecretAccessKey = default(string), string awsSessionToken = default(string), string dbHostName = default(string), string dbName = default(string), string dbPort = default(string), string dbPwd = default(string), string dbServerCertificates = default(string), string dbServerName = default(string), string dbUserName = default(string), string host = default(string), string mongodbDbName = default(string), string mongodbUriConnection = default(string), string password = default(string), string port = default(string), string privateKey = default(string), string privateKeyPassword = default(string), string rabbitmqServerPassword = default(string), string rabbitmqServerUri = default(string), string rabbitmqServerUser = default(string), string url = default(string), string username = default(string))
        {
            this.AwsAccessKeyId = awsAccessKeyId;
            this.AwsRegion = awsRegion;
            this.AwsSecretAccessKey = awsSecretAccessKey;
            this.AwsSessionToken = awsSessionToken;
            this.DbHostName = dbHostName;
            this.DbName = dbName;
            this.DbPort = dbPort;
            this.DbPwd = dbPwd;
            this.DbServerCertificates = dbServerCertificates;
            this.DbServerName = dbServerName;
            this.DbUserName = dbUserName;
            this.Host = host;
            this.MongodbDbName = mongodbDbName;
            this.MongodbUriConnection = mongodbUriConnection;
            this.Password = password;
            this.Port = port;
            this.PrivateKey = privateKey;
            this.PrivateKeyPassword = privateKeyPassword;
            this.RabbitmqServerPassword = rabbitmqServerPassword;
            this.RabbitmqServerUri = rabbitmqServerUri;
            this.RabbitmqServerUser = rabbitmqServerUser;
            this.Url = url;
            this.Username = username;
        }
        
        /// <summary>
        /// Gets or Sets AwsAccessKeyId
        /// </summary>
        [DataMember(Name="aws_access_key_id", EmitDefaultValue=false)]
        public string AwsAccessKeyId { get; set; }

        /// <summary>
        /// Gets or Sets AwsRegion
        /// </summary>
        [DataMember(Name="aws_region", EmitDefaultValue=false)]
        public string AwsRegion { get; set; }

        /// <summary>
        /// Gets or Sets AwsSecretAccessKey
        /// </summary>
        [DataMember(Name="aws_secret_access_key", EmitDefaultValue=false)]
        public string AwsSecretAccessKey { get; set; }

        /// <summary>
        /// Gets or Sets AwsSessionToken
        /// </summary>
        [DataMember(Name="aws_session_token", EmitDefaultValue=false)]
        public string AwsSessionToken { get; set; }

        /// <summary>
        /// Gets or Sets DbHostName
        /// </summary>
        [DataMember(Name="db_host_name", EmitDefaultValue=false)]
        public string DbHostName { get; set; }

        /// <summary>
        /// Gets or Sets DbName
        /// </summary>
        [DataMember(Name="db_name", EmitDefaultValue=false)]
        public string DbName { get; set; }

        /// <summary>
        /// Gets or Sets DbPort
        /// </summary>
        [DataMember(Name="db_port", EmitDefaultValue=false)]
        public string DbPort { get; set; }

        /// <summary>
        /// Gets or Sets DbPwd
        /// </summary>
        [DataMember(Name="db_pwd", EmitDefaultValue=false)]
        public string DbPwd { get; set; }

        /// <summary>
        /// (Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host&#39;s root CA set.
        /// </summary>
        /// <value>(Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host&#39;s root CA set.</value>
        [DataMember(Name="db_server_certificates", EmitDefaultValue=false)]
        public string DbServerCertificates { get; set; }

        /// <summary>
        /// (Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client&#39;s handshake to support virtual hosting unless it is an IP address.
        /// </summary>
        /// <value>(Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client&#39;s handshake to support virtual hosting unless it is an IP address.</value>
        [DataMember(Name="db_server_name", EmitDefaultValue=false)]
        public string DbServerName { get; set; }

        /// <summary>
        /// Gets or Sets DbUserName
        /// </summary>
        [DataMember(Name="db_user_name", EmitDefaultValue=false)]
        public string DbUserName { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets MongodbDbName
        /// </summary>
        [DataMember(Name="mongodb_db_name", EmitDefaultValue=false)]
        public string MongodbDbName { get; set; }

        /// <summary>
        /// Gets or Sets MongodbUriConnection
        /// </summary>
        [DataMember(Name="mongodb_uri_connection", EmitDefaultValue=false)]
        public string MongodbUriConnection { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public string Port { get; set; }

        /// <summary>
        /// Gets or Sets PrivateKey
        /// </summary>
        [DataMember(Name="private_key", EmitDefaultValue=false)]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets PrivateKeyPassword
        /// </summary>
        [DataMember(Name="private_key_password", EmitDefaultValue=false)]
        public string PrivateKeyPassword { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqServerPassword
        /// </summary>
        [DataMember(Name="rabbitmq_server_password", EmitDefaultValue=false)]
        public string RabbitmqServerPassword { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqServerUri
        /// </summary>
        [DataMember(Name="rabbitmq_server_uri", EmitDefaultValue=false)]
        public string RabbitmqServerUri { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqServerUser
        /// </summary>
        [DataMember(Name="rabbitmq_server_user", EmitDefaultValue=false)]
        public string RabbitmqServerUser { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TargetTypeDetailesInput {\n");
            sb.Append("  AwsAccessKeyId: ").Append(AwsAccessKeyId).Append("\n");
            sb.Append("  AwsRegion: ").Append(AwsRegion).Append("\n");
            sb.Append("  AwsSecretAccessKey: ").Append(AwsSecretAccessKey).Append("\n");
            sb.Append("  AwsSessionToken: ").Append(AwsSessionToken).Append("\n");
            sb.Append("  DbHostName: ").Append(DbHostName).Append("\n");
            sb.Append("  DbName: ").Append(DbName).Append("\n");
            sb.Append("  DbPort: ").Append(DbPort).Append("\n");
            sb.Append("  DbPwd: ").Append(DbPwd).Append("\n");
            sb.Append("  DbServerCertificates: ").Append(DbServerCertificates).Append("\n");
            sb.Append("  DbServerName: ").Append(DbServerName).Append("\n");
            sb.Append("  DbUserName: ").Append(DbUserName).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  MongodbDbName: ").Append(MongodbDbName).Append("\n");
            sb.Append("  MongodbUriConnection: ").Append(MongodbUriConnection).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("  PrivateKeyPassword: ").Append(PrivateKeyPassword).Append("\n");
            sb.Append("  RabbitmqServerPassword: ").Append(RabbitmqServerPassword).Append("\n");
            sb.Append("  RabbitmqServerUri: ").Append(RabbitmqServerUri).Append("\n");
            sb.Append("  RabbitmqServerUser: ").Append(RabbitmqServerUser).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TargetTypeDetailesInput);
        }

        /// <summary>
        /// Returns true if TargetTypeDetailesInput instances are equal
        /// </summary>
        /// <param name="input">Instance of TargetTypeDetailesInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TargetTypeDetailesInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AwsAccessKeyId == input.AwsAccessKeyId ||
                    (this.AwsAccessKeyId != null &&
                    this.AwsAccessKeyId.Equals(input.AwsAccessKeyId))
                ) && 
                (
                    this.AwsRegion == input.AwsRegion ||
                    (this.AwsRegion != null &&
                    this.AwsRegion.Equals(input.AwsRegion))
                ) && 
                (
                    this.AwsSecretAccessKey == input.AwsSecretAccessKey ||
                    (this.AwsSecretAccessKey != null &&
                    this.AwsSecretAccessKey.Equals(input.AwsSecretAccessKey))
                ) && 
                (
                    this.AwsSessionToken == input.AwsSessionToken ||
                    (this.AwsSessionToken != null &&
                    this.AwsSessionToken.Equals(input.AwsSessionToken))
                ) && 
                (
                    this.DbHostName == input.DbHostName ||
                    (this.DbHostName != null &&
                    this.DbHostName.Equals(input.DbHostName))
                ) && 
                (
                    this.DbName == input.DbName ||
                    (this.DbName != null &&
                    this.DbName.Equals(input.DbName))
                ) && 
                (
                    this.DbPort == input.DbPort ||
                    (this.DbPort != null &&
                    this.DbPort.Equals(input.DbPort))
                ) && 
                (
                    this.DbPwd == input.DbPwd ||
                    (this.DbPwd != null &&
                    this.DbPwd.Equals(input.DbPwd))
                ) && 
                (
                    this.DbServerCertificates == input.DbServerCertificates ||
                    (this.DbServerCertificates != null &&
                    this.DbServerCertificates.Equals(input.DbServerCertificates))
                ) && 
                (
                    this.DbServerName == input.DbServerName ||
                    (this.DbServerName != null &&
                    this.DbServerName.Equals(input.DbServerName))
                ) && 
                (
                    this.DbUserName == input.DbUserName ||
                    (this.DbUserName != null &&
                    this.DbUserName.Equals(input.DbUserName))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.MongodbDbName == input.MongodbDbName ||
                    (this.MongodbDbName != null &&
                    this.MongodbDbName.Equals(input.MongodbDbName))
                ) && 
                (
                    this.MongodbUriConnection == input.MongodbUriConnection ||
                    (this.MongodbUriConnection != null &&
                    this.MongodbUriConnection.Equals(input.MongodbUriConnection))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.PrivateKey == input.PrivateKey ||
                    (this.PrivateKey != null &&
                    this.PrivateKey.Equals(input.PrivateKey))
                ) && 
                (
                    this.PrivateKeyPassword == input.PrivateKeyPassword ||
                    (this.PrivateKeyPassword != null &&
                    this.PrivateKeyPassword.Equals(input.PrivateKeyPassword))
                ) && 
                (
                    this.RabbitmqServerPassword == input.RabbitmqServerPassword ||
                    (this.RabbitmqServerPassword != null &&
                    this.RabbitmqServerPassword.Equals(input.RabbitmqServerPassword))
                ) && 
                (
                    this.RabbitmqServerUri == input.RabbitmqServerUri ||
                    (this.RabbitmqServerUri != null &&
                    this.RabbitmqServerUri.Equals(input.RabbitmqServerUri))
                ) && 
                (
                    this.RabbitmqServerUser == input.RabbitmqServerUser ||
                    (this.RabbitmqServerUser != null &&
                    this.RabbitmqServerUser.Equals(input.RabbitmqServerUser))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AwsAccessKeyId != null)
                    hashCode = hashCode * 59 + this.AwsAccessKeyId.GetHashCode();
                if (this.AwsRegion != null)
                    hashCode = hashCode * 59 + this.AwsRegion.GetHashCode();
                if (this.AwsSecretAccessKey != null)
                    hashCode = hashCode * 59 + this.AwsSecretAccessKey.GetHashCode();
                if (this.AwsSessionToken != null)
                    hashCode = hashCode * 59 + this.AwsSessionToken.GetHashCode();
                if (this.DbHostName != null)
                    hashCode = hashCode * 59 + this.DbHostName.GetHashCode();
                if (this.DbName != null)
                    hashCode = hashCode * 59 + this.DbName.GetHashCode();
                if (this.DbPort != null)
                    hashCode = hashCode * 59 + this.DbPort.GetHashCode();
                if (this.DbPwd != null)
                    hashCode = hashCode * 59 + this.DbPwd.GetHashCode();
                if (this.DbServerCertificates != null)
                    hashCode = hashCode * 59 + this.DbServerCertificates.GetHashCode();
                if (this.DbServerName != null)
                    hashCode = hashCode * 59 + this.DbServerName.GetHashCode();
                if (this.DbUserName != null)
                    hashCode = hashCode * 59 + this.DbUserName.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.MongodbDbName != null)
                    hashCode = hashCode * 59 + this.MongodbDbName.GetHashCode();
                if (this.MongodbUriConnection != null)
                    hashCode = hashCode * 59 + this.MongodbUriConnection.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.PrivateKey != null)
                    hashCode = hashCode * 59 + this.PrivateKey.GetHashCode();
                if (this.PrivateKeyPassword != null)
                    hashCode = hashCode * 59 + this.PrivateKeyPassword.GetHashCode();
                if (this.RabbitmqServerPassword != null)
                    hashCode = hashCode * 59 + this.RabbitmqServerPassword.GetHashCode();
                if (this.RabbitmqServerUri != null)
                    hashCode = hashCode * 59 + this.RabbitmqServerUri.GetHashCode();
                if (this.RabbitmqServerUser != null)
                    hashCode = hashCode * 59 + this.RabbitmqServerUser.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
