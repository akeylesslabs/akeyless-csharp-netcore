/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GatewayCreateProducerSnowflakeCmd is a command that creates a Snowflake producer
    /// </summary>
    [DataContract(Name = "gatewayCreateProducerSnowflake")]
    public partial class GatewayCreateProducerSnowflake : IEquatable<GatewayCreateProducerSnowflake>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerSnowflake" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerSnowflake() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerSnowflake" /> class.
        /// </summary>
        /// <param name="account">Account name.</param>
        /// <param name="accountPassword">Database Password.</param>
        /// <param name="accountUsername">Database Username.</param>
        /// <param name="dbName">Database name.</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this item.</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="name">Producer name (required).</param>
        /// <param name="privateKey">RSA Private key (base64 encoded).</param>
        /// <param name="privateKeyPassphrase">The Private key passphrase.</param>
        /// <param name="role">User role.</param>
        /// <param name="tags">List of the tags attached to this secret.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;24h&quot;).</param>
        /// <param name="warehouse">Warehouse name.</param>
        public GatewayCreateProducerSnowflake(string account = default(string), string accountPassword = default(string), string accountUsername = default(string), string dbName = default(string), string deleteProtection = default(string), bool json = default(bool), string name = default(string), string privateKey = default(string), string privateKeyPassphrase = default(string), string role = default(string), List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userTtl = "24h", string warehouse = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayCreateProducerSnowflake and cannot be null");
            }
            this.Name = name;
            this.Account = account;
            this.AccountPassword = accountPassword;
            this.AccountUsername = accountUsername;
            this.DbName = dbName;
            this.DeleteProtection = deleteProtection;
            this.Json = json;
            this.PrivateKey = privateKey;
            this.PrivateKeyPassphrase = privateKeyPassphrase;
            this.Role = role;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "24h";
            this.Warehouse = warehouse;
        }

        /// <summary>
        /// Account name
        /// </summary>
        /// <value>Account name</value>
        [DataMember(Name = "account", EmitDefaultValue = false)]
        public string Account { get; set; }

        /// <summary>
        /// Database Password
        /// </summary>
        /// <value>Database Password</value>
        [DataMember(Name = "account-password", EmitDefaultValue = false)]
        public string AccountPassword { get; set; }

        /// <summary>
        /// Database Username
        /// </summary>
        /// <value>Database Username</value>
        [DataMember(Name = "account-username", EmitDefaultValue = false)]
        public string AccountUsername { get; set; }

        /// <summary>
        /// Database name
        /// </summary>
        /// <value>Database name</value>
        [DataMember(Name = "db-name", EmitDefaultValue = false)]
        public string DbName { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this item
        /// </summary>
        /// <value>Protection from accidental deletion of this item</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Producer name
        /// </summary>
        /// <value>Producer name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// RSA Private key (base64 encoded)
        /// </summary>
        /// <value>RSA Private key (base64 encoded)</value>
        [DataMember(Name = "private-key", EmitDefaultValue = false)]
        public string PrivateKey { get; set; }

        /// <summary>
        /// The Private key passphrase
        /// </summary>
        /// <value>The Private key passphrase</value>
        [DataMember(Name = "private-key-passphrase", EmitDefaultValue = false)]
        public string PrivateKeyPassphrase { get; set; }

        /// <summary>
        /// User role
        /// </summary>
        /// <value>User role</value>
        [DataMember(Name = "role", EmitDefaultValue = false)]
        public string Role { get; set; }

        /// <summary>
        /// List of the tags attached to this secret
        /// </summary>
        /// <value>List of the tags attached to this secret</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Warehouse name
        /// </summary>
        /// <value>Warehouse name</value>
        [DataMember(Name = "warehouse", EmitDefaultValue = false)]
        public string Warehouse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerSnowflake {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  AccountPassword: ").Append(AccountPassword).Append("\n");
            sb.Append("  AccountUsername: ").Append(AccountUsername).Append("\n");
            sb.Append("  DbName: ").Append(DbName).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("  PrivateKeyPassphrase: ").Append(PrivateKeyPassphrase).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("  Warehouse: ").Append(Warehouse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayCreateProducerSnowflake);
        }

        /// <summary>
        /// Returns true if GatewayCreateProducerSnowflake instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayCreateProducerSnowflake to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayCreateProducerSnowflake input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.AccountPassword == input.AccountPassword ||
                    (this.AccountPassword != null &&
                    this.AccountPassword.Equals(input.AccountPassword))
                ) && 
                (
                    this.AccountUsername == input.AccountUsername ||
                    (this.AccountUsername != null &&
                    this.AccountUsername.Equals(input.AccountUsername))
                ) && 
                (
                    this.DbName == input.DbName ||
                    (this.DbName != null &&
                    this.DbName.Equals(input.DbName))
                ) && 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    (this.DeleteProtection != null &&
                    this.DeleteProtection.Equals(input.DeleteProtection))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PrivateKey == input.PrivateKey ||
                    (this.PrivateKey != null &&
                    this.PrivateKey.Equals(input.PrivateKey))
                ) && 
                (
                    this.PrivateKeyPassphrase == input.PrivateKeyPassphrase ||
                    (this.PrivateKeyPassphrase != null &&
                    this.PrivateKeyPassphrase.Equals(input.PrivateKeyPassphrase))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                ) && 
                (
                    this.Warehouse == input.Warehouse ||
                    (this.Warehouse != null &&
                    this.Warehouse.Equals(input.Warehouse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                if (this.AccountPassword != null)
                {
                    hashCode = (hashCode * 59) + this.AccountPassword.GetHashCode();
                }
                if (this.AccountUsername != null)
                {
                    hashCode = (hashCode * 59) + this.AccountUsername.GetHashCode();
                }
                if (this.DbName != null)
                {
                    hashCode = (hashCode * 59) + this.DbName.GetHashCode();
                }
                if (this.DeleteProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteProtection.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.PrivateKey != null)
                {
                    hashCode = (hashCode * 59) + this.PrivateKey.GetHashCode();
                }
                if (this.PrivateKeyPassphrase != null)
                {
                    hashCode = (hashCode * 59) + this.PrivateKeyPassphrase.GetHashCode();
                }
                if (this.Role != null)
                {
                    hashCode = (hashCode * 59) + this.Role.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TargetName != null)
                {
                    hashCode = (hashCode * 59) + this.TargetName.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UserTtl != null)
                {
                    hashCode = (hashCode * 59) + this.UserTtl.GetHashCode();
                }
                if (this.Warehouse != null)
                {
                    hashCode = (hashCode * 59) + this.Warehouse.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
