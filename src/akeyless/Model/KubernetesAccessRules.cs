/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// KubernetesAccessRules
    /// </summary>
    [DataContract(Name = "KubernetesAccessRules")]
    public partial class KubernetesAccessRules : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KubernetesAccessRules" /> class.
        /// </summary>
        /// <param name="alg">alg.</param>
        /// <param name="audience">Audience is an optional Kubernetes jwt claim to verify.</param>
        /// <param name="boundNamespaces">A list of namespaces that the authentication is restricted to..</param>
        /// <param name="boundPodNames">A list of pods names that the authentication is restricted to..</param>
        /// <param name="boundServiceAccountNames">A list of service account names that the authentication is restricted to..</param>
        /// <param name="genKeyPair">Generate public/private key (the private key is required for the K8S Auth Config in the Akeyless Gateway).</param>
        /// <param name="pubKey">The public key value of the Kubernetes auth method configuration in the Akeyless Gateway..</param>
        public KubernetesAccessRules(string alg = default(string), string audience = default(string), List<string> boundNamespaces = default(List<string>), List<string> boundPodNames = default(List<string>), List<string> boundServiceAccountNames = default(List<string>), string genKeyPair = default(string), string pubKey = default(string))
        {
            this.Alg = alg;
            this.Audience = audience;
            this.BoundNamespaces = boundNamespaces;
            this.BoundPodNames = boundPodNames;
            this.BoundServiceAccountNames = boundServiceAccountNames;
            this.GenKeyPair = genKeyPair;
            this.PubKey = pubKey;
        }

        /// <summary>
        /// Gets or Sets Alg
        /// </summary>
        [DataMember(Name = "alg", EmitDefaultValue = false)]
        public string Alg { get; set; }

        /// <summary>
        /// Audience is an optional Kubernetes jwt claim to verify
        /// </summary>
        /// <value>Audience is an optional Kubernetes jwt claim to verify</value>
        [DataMember(Name = "audience", EmitDefaultValue = false)]
        public string Audience { get; set; }

        /// <summary>
        /// A list of namespaces that the authentication is restricted to.
        /// </summary>
        /// <value>A list of namespaces that the authentication is restricted to.</value>
        [DataMember(Name = "bound_namespaces", EmitDefaultValue = false)]
        public List<string> BoundNamespaces { get; set; }

        /// <summary>
        /// A list of pods names that the authentication is restricted to.
        /// </summary>
        /// <value>A list of pods names that the authentication is restricted to.</value>
        [DataMember(Name = "bound_pod_names", EmitDefaultValue = false)]
        public List<string> BoundPodNames { get; set; }

        /// <summary>
        /// A list of service account names that the authentication is restricted to.
        /// </summary>
        /// <value>A list of service account names that the authentication is restricted to.</value>
        [DataMember(Name = "bound_service_account_names", EmitDefaultValue = false)]
        public List<string> BoundServiceAccountNames { get; set; }

        /// <summary>
        /// Generate public/private key (the private key is required for the K8S Auth Config in the Akeyless Gateway)
        /// </summary>
        /// <value>Generate public/private key (the private key is required for the K8S Auth Config in the Akeyless Gateway)</value>
        [DataMember(Name = "gen_key_pair", EmitDefaultValue = false)]
        public string GenKeyPair { get; set; }

        /// <summary>
        /// The public key value of the Kubernetes auth method configuration in the Akeyless Gateway.
        /// </summary>
        /// <value>The public key value of the Kubernetes auth method configuration in the Akeyless Gateway.</value>
        [DataMember(Name = "pub_key", EmitDefaultValue = false)]
        public string PubKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KubernetesAccessRules {\n");
            sb.Append("  Alg: ").Append(Alg).Append("\n");
            sb.Append("  Audience: ").Append(Audience).Append("\n");
            sb.Append("  BoundNamespaces: ").Append(BoundNamespaces).Append("\n");
            sb.Append("  BoundPodNames: ").Append(BoundPodNames).Append("\n");
            sb.Append("  BoundServiceAccountNames: ").Append(BoundServiceAccountNames).Append("\n");
            sb.Append("  GenKeyPair: ").Append(GenKeyPair).Append("\n");
            sb.Append("  PubKey: ").Append(PubKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
