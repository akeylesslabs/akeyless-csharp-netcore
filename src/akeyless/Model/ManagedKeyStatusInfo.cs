/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ManagedKeyStatusInfo
    /// </summary>
    [DataContract]
    public partial class ManagedKeyStatusInfo :  IEquatable<ManagedKeyStatusInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagedKeyStatusInfo" /> class.
        /// </summary>
        /// <param name="keyId">keyId.</param>
        /// <param name="lastError">lastError.</param>
        /// <param name="lastStatus">ManagedKeyTargetStatus defines status of managed key target.</param>
        public ManagedKeyStatusInfo(long keyId = default(long), string lastError = default(string), string lastStatus = default(string))
        {
            this.KeyId = keyId;
            this.LastError = lastError;
            this.LastStatus = lastStatus;
        }
        
        /// <summary>
        /// Gets or Sets KeyId
        /// </summary>
        [DataMember(Name="key_id", EmitDefaultValue=false)]
        public long KeyId { get; set; }

        /// <summary>
        /// Gets or Sets LastError
        /// </summary>
        [DataMember(Name="last_error", EmitDefaultValue=false)]
        public string LastError { get; set; }

        /// <summary>
        /// ManagedKeyTargetStatus defines status of managed key target
        /// </summary>
        /// <value>ManagedKeyTargetStatus defines status of managed key target</value>
        [DataMember(Name="last_status", EmitDefaultValue=false)]
        public string LastStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManagedKeyStatusInfo {\n");
            sb.Append("  KeyId: ").Append(KeyId).Append("\n");
            sb.Append("  LastError: ").Append(LastError).Append("\n");
            sb.Append("  LastStatus: ").Append(LastStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManagedKeyStatusInfo);
        }

        /// <summary>
        /// Returns true if ManagedKeyStatusInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ManagedKeyStatusInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManagedKeyStatusInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KeyId == input.KeyId ||
                    this.KeyId.Equals(input.KeyId)
                ) && 
                (
                    this.LastError == input.LastError ||
                    (this.LastError != null &&
                    this.LastError.Equals(input.LastError))
                ) && 
                (
                    this.LastStatus == input.LastStatus ||
                    (this.LastStatus != null &&
                    this.LastStatus.Equals(input.LastStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.KeyId.GetHashCode();
                if (this.LastError != null)
                    hashCode = hashCode * 59 + this.LastError.GetHashCode();
                if (this.LastStatus != null)
                    hashCode = hashCode * 59 + this.LastStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
