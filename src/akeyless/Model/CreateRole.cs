/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CreateRole
    /// </summary>
    [DataContract(Name = "createRole")]
    public partial class CreateRole : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRole" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateRole() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRole" /> class.
        /// </summary>
        /// <param name="analyticsAccess">Allow this role to view analytics. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported, allowing associated auth methods to view reports produced by the same auth methods..</param>
        /// <param name="auditAccess">Allow this role to view audit logs. Currently only &#39;none&#39;, &#39;own&#39; and &#39;all&#39; values are supported, allowing associated auth methods to view audit logs produced by the same auth methods..</param>
        /// <param name="comment">Deprecated - use description.</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="eventCenterAccess">Allow this role to view Event Center. Currently only &#39;none&#39;, &#39;own&#39; and &#39;all&#39; values are supported.</param>
        /// <param name="eventForwardersAccess">Allow this role to manage Event Forwarders. Currently only &#39;none&#39; and &#39;all&#39; values are supported..</param>
        /// <param name="gwAnalyticsAccess">Allow this role to view gw analytics. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported, allowing associated auth methods to view reports produced by the same auth methods..</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Role name (required).</param>
        /// <param name="sraReportsAccess">Allow this role to view SRA Clusters. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported..</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="usageReportsAccess">Allow this role to view Usage Report. Currently only &#39;none&#39; and &#39;all&#39; values are supported..</param>
        public CreateRole(string analyticsAccess = default(string), string auditAccess = default(string), string comment = default(string), string deleteProtection = default(string), string description = default(string), string eventCenterAccess = default(string), string eventForwardersAccess = default(string), string gwAnalyticsAccess = default(string), bool json = false, string name = default(string), string sraReportsAccess = default(string), string token = default(string), string uidToken = default(string), string usageReportsAccess = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateRole and cannot be null");
            }
            this.Name = name;
            this.AnalyticsAccess = analyticsAccess;
            this.AuditAccess = auditAccess;
            this.Comment = comment;
            this.DeleteProtection = deleteProtection;
            this.Description = description;
            this.EventCenterAccess = eventCenterAccess;
            this.EventForwardersAccess = eventForwardersAccess;
            this.GwAnalyticsAccess = gwAnalyticsAccess;
            this.Json = json;
            this.SraReportsAccess = sraReportsAccess;
            this.Token = token;
            this.UidToken = uidToken;
            this.UsageReportsAccess = usageReportsAccess;
        }

        /// <summary>
        /// Allow this role to view analytics. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported, allowing associated auth methods to view reports produced by the same auth methods.
        /// </summary>
        /// <value>Allow this role to view analytics. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported, allowing associated auth methods to view reports produced by the same auth methods.</value>
        [DataMember(Name = "analytics-access", EmitDefaultValue = false)]
        public string AnalyticsAccess { get; set; }

        /// <summary>
        /// Allow this role to view audit logs. Currently only &#39;none&#39;, &#39;own&#39; and &#39;all&#39; values are supported, allowing associated auth methods to view audit logs produced by the same auth methods.
        /// </summary>
        /// <value>Allow this role to view audit logs. Currently only &#39;none&#39;, &#39;own&#39; and &#39;all&#39; values are supported, allowing associated auth methods to view audit logs produced by the same auth methods.</value>
        [DataMember(Name = "audit-access", EmitDefaultValue = false)]
        public string AuditAccess { get; set; }

        /// <summary>
        /// Deprecated - use description
        /// </summary>
        /// <value>Deprecated - use description</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Allow this role to view Event Center. Currently only &#39;none&#39;, &#39;own&#39; and &#39;all&#39; values are supported
        /// </summary>
        /// <value>Allow this role to view Event Center. Currently only &#39;none&#39;, &#39;own&#39; and &#39;all&#39; values are supported</value>
        [DataMember(Name = "event-center-access", EmitDefaultValue = false)]
        public string EventCenterAccess { get; set; }

        /// <summary>
        /// Allow this role to manage Event Forwarders. Currently only &#39;none&#39; and &#39;all&#39; values are supported.
        /// </summary>
        /// <value>Allow this role to manage Event Forwarders. Currently only &#39;none&#39; and &#39;all&#39; values are supported.</value>
        [DataMember(Name = "event-forwarders-access", EmitDefaultValue = false)]
        public string EventForwardersAccess { get; set; }

        /// <summary>
        /// Allow this role to view gw analytics. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported, allowing associated auth methods to view reports produced by the same auth methods.
        /// </summary>
        /// <value>Allow this role to view gw analytics. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported, allowing associated auth methods to view reports produced by the same auth methods.</value>
        [DataMember(Name = "gw-analytics-access", EmitDefaultValue = false)]
        public string GwAnalyticsAccess { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Role name
        /// </summary>
        /// <value>Role name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Allow this role to view SRA Clusters. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported.
        /// </summary>
        /// <value>Allow this role to view SRA Clusters. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported.</value>
        [DataMember(Name = "sra-reports-access", EmitDefaultValue = false)]
        public string SraReportsAccess { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Allow this role to view Usage Report. Currently only &#39;none&#39; and &#39;all&#39; values are supported.
        /// </summary>
        /// <value>Allow this role to view Usage Report. Currently only &#39;none&#39; and &#39;all&#39; values are supported.</value>
        [DataMember(Name = "usage-reports-access", EmitDefaultValue = false)]
        public string UsageReportsAccess { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateRole {\n");
            sb.Append("  AnalyticsAccess: ").Append(AnalyticsAccess).Append("\n");
            sb.Append("  AuditAccess: ").Append(AuditAccess).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EventCenterAccess: ").Append(EventCenterAccess).Append("\n");
            sb.Append("  EventForwardersAccess: ").Append(EventForwardersAccess).Append("\n");
            sb.Append("  GwAnalyticsAccess: ").Append(GwAnalyticsAccess).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SraReportsAccess: ").Append(SraReportsAccess).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UsageReportsAccess: ").Append(UsageReportsAccess).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
