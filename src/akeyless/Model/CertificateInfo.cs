/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CertificateInfo
    /// </summary>
    [DataContract(Name = "CertificateInfo")]
    public partial class CertificateInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateInfo" /> class.
        /// </summary>
        /// <param name="extKeyUsage">extKeyUsage.</param>
        /// <param name="keyUsage">KeyUsage represents the set of actions that are valid for a given key. It&#39;s a bitmap of the KeyUsage* constants..</param>
        /// <param name="crlDistributionPoints">crlDistributionPoints.</param>
        /// <param name="dnsNames">dnsNames.</param>
        /// <param name="emailAddresses">emailAddresses.</param>
        /// <param name="extensions">extensions.</param>
        /// <param name="ipAddresses">ipAddresses.</param>
        /// <param name="isCa">isCa.</param>
        /// <param name="issuer">issuer.</param>
        /// <param name="issuingCertificateUrl">issuingCertificateUrl.</param>
        /// <param name="keySize">keySize.</param>
        /// <param name="notAfter">notAfter.</param>
        /// <param name="notBefore">notBefore.</param>
        /// <param name="ocspServer">ocspServer.</param>
        /// <param name="publicKeyAlgorithmName">publicKeyAlgorithmName.</param>
        /// <param name="serialNumber">serialNumber.</param>
        /// <param name="sha1Fingerprint">sha1Fingerprint.</param>
        /// <param name="sha256Fingerprint">sha256Fingerprint.</param>
        /// <param name="signature">signature.</param>
        /// <param name="signatureAlgorithmName">signatureAlgorithmName.</param>
        /// <param name="subject">subject.</param>
        /// <param name="subjectPublicKey">subjectPublicKey.</param>
        /// <param name="uris">uris.</param>
        /// <param name="varVersion">varVersion.</param>
        public CertificateInfo(List<long> extKeyUsage = default(List<long>), long keyUsage = default(long), List<string> crlDistributionPoints = default(List<string>), List<string> dnsNames = default(List<string>), List<string> emailAddresses = default(List<string>), List<Extension> extensions = default(List<Extension>), List<string> ipAddresses = default(List<string>), bool isCa = default(bool), Name issuer = default(Name), List<string> issuingCertificateUrl = default(List<string>), long keySize = default(long), DateTime notAfter = default(DateTime), DateTime notBefore = default(DateTime), List<string> ocspServer = default(List<string>), string publicKeyAlgorithmName = default(string), string serialNumber = default(string), string sha1Fingerprint = default(string), string sha256Fingerprint = default(string), string signature = default(string), string signatureAlgorithmName = default(string), Name subject = default(Name), string subjectPublicKey = default(string), List<string> uris = default(List<string>), long varVersion = default(long))
        {
            this.ExtKeyUsage = extKeyUsage;
            this.KeyUsage = keyUsage;
            this.CrlDistributionPoints = crlDistributionPoints;
            this.DnsNames = dnsNames;
            this.EmailAddresses = emailAddresses;
            this.Extensions = extensions;
            this.IpAddresses = ipAddresses;
            this.IsCa = isCa;
            this.Issuer = issuer;
            this.IssuingCertificateUrl = issuingCertificateUrl;
            this.KeySize = keySize;
            this.NotAfter = notAfter;
            this.NotBefore = notBefore;
            this.OcspServer = ocspServer;
            this.PublicKeyAlgorithmName = publicKeyAlgorithmName;
            this.SerialNumber = serialNumber;
            this.Sha1Fingerprint = sha1Fingerprint;
            this.Sha256Fingerprint = sha256Fingerprint;
            this.Signature = signature;
            this.SignatureAlgorithmName = signatureAlgorithmName;
            this.Subject = subject;
            this.SubjectPublicKey = subjectPublicKey;
            this.Uris = uris;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Gets or Sets ExtKeyUsage
        /// </summary>
        [DataMember(Name = "ExtKeyUsage", EmitDefaultValue = false)]
        public List<long> ExtKeyUsage { get; set; }

        /// <summary>
        /// KeyUsage represents the set of actions that are valid for a given key. It&#39;s a bitmap of the KeyUsage* constants.
        /// </summary>
        /// <value>KeyUsage represents the set of actions that are valid for a given key. It&#39;s a bitmap of the KeyUsage* constants.</value>
        [DataMember(Name = "KeyUsage", EmitDefaultValue = false)]
        public long KeyUsage { get; set; }

        /// <summary>
        /// Gets or Sets CrlDistributionPoints
        /// </summary>
        [DataMember(Name = "crl_distribution_points", EmitDefaultValue = false)]
        public List<string> CrlDistributionPoints { get; set; }

        /// <summary>
        /// Gets or Sets DnsNames
        /// </summary>
        [DataMember(Name = "dns_names", EmitDefaultValue = false)]
        public List<string> DnsNames { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddresses
        /// </summary>
        [DataMember(Name = "email_addresses", EmitDefaultValue = false)]
        public List<string> EmailAddresses { get; set; }

        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [DataMember(Name = "extensions", EmitDefaultValue = false)]
        public List<Extension> Extensions { get; set; }

        /// <summary>
        /// Gets or Sets IpAddresses
        /// </summary>
        [DataMember(Name = "ip_addresses", EmitDefaultValue = false)]
        public List<string> IpAddresses { get; set; }

        /// <summary>
        /// Gets or Sets IsCa
        /// </summary>
        [DataMember(Name = "is_ca", EmitDefaultValue = true)]
        public bool IsCa { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public Name Issuer { get; set; }

        /// <summary>
        /// Gets or Sets IssuingCertificateUrl
        /// </summary>
        [DataMember(Name = "issuing_certificate_url", EmitDefaultValue = false)]
        public List<string> IssuingCertificateUrl { get; set; }

        /// <summary>
        /// Gets or Sets KeySize
        /// </summary>
        [DataMember(Name = "key_size", EmitDefaultValue = false)]
        public long KeySize { get; set; }

        /// <summary>
        /// Gets or Sets NotAfter
        /// </summary>
        [DataMember(Name = "not_after", EmitDefaultValue = false)]
        public DateTime NotAfter { get; set; }

        /// <summary>
        /// Gets or Sets NotBefore
        /// </summary>
        [DataMember(Name = "not_before", EmitDefaultValue = false)]
        public DateTime NotBefore { get; set; }

        /// <summary>
        /// Gets or Sets OcspServer
        /// </summary>
        [DataMember(Name = "ocsp_server", EmitDefaultValue = false)]
        public List<string> OcspServer { get; set; }

        /// <summary>
        /// Gets or Sets PublicKeyAlgorithmName
        /// </summary>
        [DataMember(Name = "public_key_algorithm_name", EmitDefaultValue = false)]
        public string PublicKeyAlgorithmName { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name = "serial_number", EmitDefaultValue = false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets Sha1Fingerprint
        /// </summary>
        [DataMember(Name = "sha_1_fingerprint", EmitDefaultValue = false)]
        public string Sha1Fingerprint { get; set; }

        /// <summary>
        /// Gets or Sets Sha256Fingerprint
        /// </summary>
        [DataMember(Name = "sha_256_fingerprint", EmitDefaultValue = false)]
        public string Sha256Fingerprint { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name = "signature", EmitDefaultValue = false)]
        public string Signature { get; set; }

        /// <summary>
        /// Gets or Sets SignatureAlgorithmName
        /// </summary>
        [DataMember(Name = "signature_algorithm_name", EmitDefaultValue = false)]
        public string SignatureAlgorithmName { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public Name Subject { get; set; }

        /// <summary>
        /// Gets or Sets SubjectPublicKey
        /// </summary>
        [DataMember(Name = "subject_public_key", EmitDefaultValue = false)]
        public string SubjectPublicKey { get; set; }

        /// <summary>
        /// Gets or Sets Uris
        /// </summary>
        [DataMember(Name = "uris", EmitDefaultValue = false)]
        public List<string> Uris { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public long VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertificateInfo {\n");
            sb.Append("  ExtKeyUsage: ").Append(ExtKeyUsage).Append("\n");
            sb.Append("  KeyUsage: ").Append(KeyUsage).Append("\n");
            sb.Append("  CrlDistributionPoints: ").Append(CrlDistributionPoints).Append("\n");
            sb.Append("  DnsNames: ").Append(DnsNames).Append("\n");
            sb.Append("  EmailAddresses: ").Append(EmailAddresses).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  IpAddresses: ").Append(IpAddresses).Append("\n");
            sb.Append("  IsCa: ").Append(IsCa).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  IssuingCertificateUrl: ").Append(IssuingCertificateUrl).Append("\n");
            sb.Append("  KeySize: ").Append(KeySize).Append("\n");
            sb.Append("  NotAfter: ").Append(NotAfter).Append("\n");
            sb.Append("  NotBefore: ").Append(NotBefore).Append("\n");
            sb.Append("  OcspServer: ").Append(OcspServer).Append("\n");
            sb.Append("  PublicKeyAlgorithmName: ").Append(PublicKeyAlgorithmName).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Sha1Fingerprint: ").Append(Sha1Fingerprint).Append("\n");
            sb.Append("  Sha256Fingerprint: ").Append(Sha256Fingerprint).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  SignatureAlgorithmName: ").Append(SignatureAlgorithmName).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  SubjectPublicKey: ").Append(SubjectPublicKey).Append("\n");
            sb.Append("  Uris: ").Append(Uris).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
