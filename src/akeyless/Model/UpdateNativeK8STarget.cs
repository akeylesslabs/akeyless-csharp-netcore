/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UpdateNativeK8STarget
    /// </summary>
    [DataContract(Name = "updateNativeK8STarget")]
    public partial class UpdateNativeK8STarget : IEquatable<UpdateNativeK8STarget>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNativeK8STarget" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateNativeK8STarget() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNativeK8STarget" /> class.
        /// </summary>
        /// <param name="comment">Comment about the target.</param>
        /// <param name="k8sClusterCaCert">K8S cluster CA certificate (required).</param>
        /// <param name="k8sClusterEndpoint">K8S cluster URL endpoint (required).</param>
        /// <param name="k8sClusterToken">K8S cluster Bearer token (required).</param>
        /// <param name="key">The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="name">Target name (required).</param>
        /// <param name="newName">New target name.</param>
        /// <param name="password">Required only when the authentication process requires a username and password.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="updateVersion">Create new version for the target (default to false).</param>
        /// <param name="username">Required only when the authentication process requires a username and password.</param>
        public UpdateNativeK8STarget(string comment = default(string), string k8sClusterCaCert = default(string), string k8sClusterEndpoint = default(string), string k8sClusterToken = default(string), string key = default(string), string name = default(string), string newName = default(string), string password = default(string), string token = default(string), string uidToken = default(string), bool updateVersion = false, string username = default(string))
        {
            // to ensure "k8sClusterCaCert" is required (not null)
            if (k8sClusterCaCert == null) {
                throw new ArgumentNullException("k8sClusterCaCert is a required property for UpdateNativeK8STarget and cannot be null");
            }
            this.K8sClusterCaCert = k8sClusterCaCert;
            // to ensure "k8sClusterEndpoint" is required (not null)
            if (k8sClusterEndpoint == null) {
                throw new ArgumentNullException("k8sClusterEndpoint is a required property for UpdateNativeK8STarget and cannot be null");
            }
            this.K8sClusterEndpoint = k8sClusterEndpoint;
            // to ensure "k8sClusterToken" is required (not null)
            if (k8sClusterToken == null) {
                throw new ArgumentNullException("k8sClusterToken is a required property for UpdateNativeK8STarget and cannot be null");
            }
            this.K8sClusterToken = k8sClusterToken;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for UpdateNativeK8STarget and cannot be null");
            }
            this.Name = name;
            this.Comment = comment;
            this.Key = key;
            this.NewName = newName;
            this.Password = password;
            this.Token = token;
            this.UidToken = uidToken;
            this.UpdateVersion = updateVersion;
            this.Username = username;
        }

        /// <summary>
        /// Comment about the target
        /// </summary>
        /// <value>Comment about the target</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// K8S cluster CA certificate
        /// </summary>
        /// <value>K8S cluster CA certificate</value>
        [DataMember(Name = "k8s-cluster-ca-cert", IsRequired = true, EmitDefaultValue = false)]
        public string K8sClusterCaCert { get; set; }

        /// <summary>
        /// K8S cluster URL endpoint
        /// </summary>
        /// <value>K8S cluster URL endpoint</value>
        [DataMember(Name = "k8s-cluster-endpoint", IsRequired = true, EmitDefaultValue = false)]
        public string K8sClusterEndpoint { get; set; }

        /// <summary>
        /// K8S cluster Bearer token
        /// </summary>
        /// <value>K8S cluster Bearer token</value>
        [DataMember(Name = "k8s-cluster-token", IsRequired = true, EmitDefaultValue = false)]
        public string K8sClusterToken { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// New target name
        /// </summary>
        /// <value>New target name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Create new version for the target
        /// </summary>
        /// <value>Create new version for the target</value>
        [DataMember(Name = "update-version", EmitDefaultValue = true)]
        public bool UpdateVersion { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNativeK8STarget {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  K8sClusterCaCert: ").Append(K8sClusterCaCert).Append("\n");
            sb.Append("  K8sClusterEndpoint: ").Append(K8sClusterEndpoint).Append("\n");
            sb.Append("  K8sClusterToken: ").Append(K8sClusterToken).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UpdateVersion: ").Append(UpdateVersion).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateNativeK8STarget);
        }

        /// <summary>
        /// Returns true if UpdateNativeK8STarget instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateNativeK8STarget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNativeK8STarget input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.K8sClusterCaCert == input.K8sClusterCaCert ||
                    (this.K8sClusterCaCert != null &&
                    this.K8sClusterCaCert.Equals(input.K8sClusterCaCert))
                ) && 
                (
                    this.K8sClusterEndpoint == input.K8sClusterEndpoint ||
                    (this.K8sClusterEndpoint != null &&
                    this.K8sClusterEndpoint.Equals(input.K8sClusterEndpoint))
                ) && 
                (
                    this.K8sClusterToken == input.K8sClusterToken ||
                    (this.K8sClusterToken != null &&
                    this.K8sClusterToken.Equals(input.K8sClusterToken))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UpdateVersion == input.UpdateVersion ||
                    this.UpdateVersion.Equals(input.UpdateVersion)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.K8sClusterCaCert != null)
                    hashCode = hashCode * 59 + this.K8sClusterCaCert.GetHashCode();
                if (this.K8sClusterEndpoint != null)
                    hashCode = hashCode * 59 + this.K8sClusterEndpoint.GetHashCode();
                if (this.K8sClusterToken != null)
                    hashCode = hashCode * 59 + this.K8sClusterToken.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NewName != null)
                    hashCode = hashCode * 59 + this.NewName.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateVersion.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
