/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GlobalSignAtlasTargetDetails
    /// </summary>
    [DataContract(Name = "GlobalSignAtlasTargetDetails")]
    public partial class GlobalSignAtlasTargetDetails : IEquatable<GlobalSignAtlasTargetDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalSignAtlasTargetDetails" /> class.
        /// </summary>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="apiSecret">apiSecret.</param>
        /// <param name="mtlsCert">mtlsCert.</param>
        /// <param name="mtlsKey">mtlsKey.</param>
        /// <param name="timeout">A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years..</param>
        public GlobalSignAtlasTargetDetails(string apiKey = default(string), string apiSecret = default(string), string mtlsCert = default(string), string mtlsKey = default(string), long timeout = default(long))
        {
            this.ApiKey = apiKey;
            this.ApiSecret = apiSecret;
            this.MtlsCert = mtlsCert;
            this.MtlsKey = mtlsKey;
            this.Timeout = timeout;
        }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name = "api_key", EmitDefaultValue = false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets ApiSecret
        /// </summary>
        [DataMember(Name = "api_secret", EmitDefaultValue = false)]
        public string ApiSecret { get; set; }

        /// <summary>
        /// Gets or Sets MtlsCert
        /// </summary>
        [DataMember(Name = "mtls_cert", EmitDefaultValue = false)]
        public string MtlsCert { get; set; }

        /// <summary>
        /// Gets or Sets MtlsKey
        /// </summary>
        [DataMember(Name = "mtls_key", EmitDefaultValue = false)]
        public string MtlsKey { get; set; }

        /// <summary>
        /// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
        /// </summary>
        /// <value>A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.</value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public long Timeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GlobalSignAtlasTargetDetails {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  ApiSecret: ").Append(ApiSecret).Append("\n");
            sb.Append("  MtlsCert: ").Append(MtlsCert).Append("\n");
            sb.Append("  MtlsKey: ").Append(MtlsKey).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlobalSignAtlasTargetDetails);
        }

        /// <summary>
        /// Returns true if GlobalSignAtlasTargetDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of GlobalSignAtlasTargetDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlobalSignAtlasTargetDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.ApiSecret == input.ApiSecret ||
                    (this.ApiSecret != null &&
                    this.ApiSecret.Equals(input.ApiSecret))
                ) && 
                (
                    this.MtlsCert == input.MtlsCert ||
                    (this.MtlsCert != null &&
                    this.MtlsCert.Equals(input.MtlsCert))
                ) && 
                (
                    this.MtlsKey == input.MtlsKey ||
                    (this.MtlsKey != null &&
                    this.MtlsKey.Equals(input.MtlsKey))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    this.Timeout.Equals(input.Timeout)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.ApiKey.GetHashCode();
                }
                if (this.ApiSecret != null)
                {
                    hashCode = (hashCode * 59) + this.ApiSecret.GetHashCode();
                }
                if (this.MtlsCert != null)
                {
                    hashCode = (hashCode * 59) + this.MtlsCert.GetHashCode();
                }
                if (this.MtlsKey != null)
                {
                    hashCode = (hashCode * 59) + this.MtlsKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
