/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// TargetUpdateEks
    /// </summary>
    [DataContract(Name = "targetUpdateEks")]
    public partial class TargetUpdateEks : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetUpdateEks" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TargetUpdateEks() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetUpdateEks" /> class.
        /// </summary>
        /// <param name="description">Description of the object.</param>
        /// <param name="eksAccessKeyId">Access Key ID (required).</param>
        /// <param name="eksClusterCaCert">EKS cluster CA certificate (required).</param>
        /// <param name="eksClusterEndpoint">EKS cluster URL endpoint (required).</param>
        /// <param name="eksClusterName">EKS cluster name (required).</param>
        /// <param name="eksRegion">Region (default to &quot;us-east-2&quot;).</param>
        /// <param name="eksSecretAccessKey">Secret Access Key (required).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="keepPrevVersion">Whether to keep previous version [true/false]. If not set, use default according to account settings.</param>
        /// <param name="key">The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="maxVersions">Set the maximum number of versions, limited by the account settings defaults..</param>
        /// <param name="name">Target name (required).</param>
        /// <param name="newName">New target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="useGwCloudIdentity">useGwCloudIdentity.</param>
        public TargetUpdateEks(string description = default(string), string eksAccessKeyId = default(string), string eksClusterCaCert = default(string), string eksClusterEndpoint = default(string), string eksClusterName = default(string), string eksRegion = @"us-east-2", string eksSecretAccessKey = default(string), bool json = false, string keepPrevVersion = default(string), string key = default(string), string maxVersions = default(string), string name = default(string), string newName = default(string), string token = default(string), string uidToken = default(string), bool useGwCloudIdentity = default(bool))
        {
            // to ensure "eksAccessKeyId" is required (not null)
            if (eksAccessKeyId == null)
            {
                throw new ArgumentNullException("eksAccessKeyId is a required property for TargetUpdateEks and cannot be null");
            }
            this.EksAccessKeyId = eksAccessKeyId;
            // to ensure "eksClusterCaCert" is required (not null)
            if (eksClusterCaCert == null)
            {
                throw new ArgumentNullException("eksClusterCaCert is a required property for TargetUpdateEks and cannot be null");
            }
            this.EksClusterCaCert = eksClusterCaCert;
            // to ensure "eksClusterEndpoint" is required (not null)
            if (eksClusterEndpoint == null)
            {
                throw new ArgumentNullException("eksClusterEndpoint is a required property for TargetUpdateEks and cannot be null");
            }
            this.EksClusterEndpoint = eksClusterEndpoint;
            // to ensure "eksClusterName" is required (not null)
            if (eksClusterName == null)
            {
                throw new ArgumentNullException("eksClusterName is a required property for TargetUpdateEks and cannot be null");
            }
            this.EksClusterName = eksClusterName;
            // to ensure "eksSecretAccessKey" is required (not null)
            if (eksSecretAccessKey == null)
            {
                throw new ArgumentNullException("eksSecretAccessKey is a required property for TargetUpdateEks and cannot be null");
            }
            this.EksSecretAccessKey = eksSecretAccessKey;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TargetUpdateEks and cannot be null");
            }
            this.Name = name;
            this.Description = description;
            // use default value if no "eksRegion" provided
            this.EksRegion = eksRegion ?? @"us-east-2";
            this.Json = json;
            this.KeepPrevVersion = keepPrevVersion;
            this.Key = key;
            this.MaxVersions = maxVersions;
            this.NewName = newName;
            this.Token = token;
            this.UidToken = uidToken;
            this.UseGwCloudIdentity = useGwCloudIdentity;
        }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Access Key ID
        /// </summary>
        /// <value>Access Key ID</value>
        [DataMember(Name = "eks-access-key-id", IsRequired = true, EmitDefaultValue = true)]
        public string EksAccessKeyId { get; set; }

        /// <summary>
        /// EKS cluster CA certificate
        /// </summary>
        /// <value>EKS cluster CA certificate</value>
        [DataMember(Name = "eks-cluster-ca-cert", IsRequired = true, EmitDefaultValue = true)]
        public string EksClusterCaCert { get; set; }

        /// <summary>
        /// EKS cluster URL endpoint
        /// </summary>
        /// <value>EKS cluster URL endpoint</value>
        [DataMember(Name = "eks-cluster-endpoint", IsRequired = true, EmitDefaultValue = true)]
        public string EksClusterEndpoint { get; set; }

        /// <summary>
        /// EKS cluster name
        /// </summary>
        /// <value>EKS cluster name</value>
        [DataMember(Name = "eks-cluster-name", IsRequired = true, EmitDefaultValue = true)]
        public string EksClusterName { get; set; }

        /// <summary>
        /// Region
        /// </summary>
        /// <value>Region</value>
        [DataMember(Name = "eks-region", EmitDefaultValue = false)]
        public string EksRegion { get; set; }

        /// <summary>
        /// Secret Access Key
        /// </summary>
        /// <value>Secret Access Key</value>
        [DataMember(Name = "eks-secret-access-key", IsRequired = true, EmitDefaultValue = true)]
        public string EksSecretAccessKey { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Whether to keep previous version [true/false]. If not set, use default according to account settings
        /// </summary>
        /// <value>Whether to keep previous version [true/false]. If not set, use default according to account settings</value>
        [DataMember(Name = "keep-prev-version", EmitDefaultValue = false)]
        public string KeepPrevVersion { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Set the maximum number of versions, limited by the account settings defaults.
        /// </summary>
        /// <value>Set the maximum number of versions, limited by the account settings defaults.</value>
        [DataMember(Name = "max-versions", EmitDefaultValue = false)]
        public string MaxVersions { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// New target name
        /// </summary>
        /// <value>New target name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Gets or Sets UseGwCloudIdentity
        /// </summary>
        [DataMember(Name = "use-gw-cloud-identity", EmitDefaultValue = true)]
        public bool UseGwCloudIdentity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TargetUpdateEks {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EksAccessKeyId: ").Append(EksAccessKeyId).Append("\n");
            sb.Append("  EksClusterCaCert: ").Append(EksClusterCaCert).Append("\n");
            sb.Append("  EksClusterEndpoint: ").Append(EksClusterEndpoint).Append("\n");
            sb.Append("  EksClusterName: ").Append(EksClusterName).Append("\n");
            sb.Append("  EksRegion: ").Append(EksRegion).Append("\n");
            sb.Append("  EksSecretAccessKey: ").Append(EksSecretAccessKey).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeepPrevVersion: ").Append(KeepPrevVersion).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  MaxVersions: ").Append(MaxVersions).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UseGwCloudIdentity: ").Append(UseGwCloudIdentity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
