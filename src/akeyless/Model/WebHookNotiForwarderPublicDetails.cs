/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// WebHookNotiForwarderPublicDetails
    /// </summary>
    [DataContract(Name = "WebHookNotiForwarderPublicDetails")]
    public partial class WebHookNotiForwarderPublicDetails : IEquatable<WebHookNotiForwarderPublicDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebHookNotiForwarderPublicDetails" /> class.
        /// </summary>
        /// <param name="authType">authType.</param>
        /// <param name="endpointUrl">endpointUrl.</param>
        /// <param name="username">Auth type - User Password.</param>
        public WebHookNotiForwarderPublicDetails(string authType = default(string), string endpointUrl = default(string), string username = default(string))
        {
            this.AuthType = authType;
            this.EndpointUrl = endpointUrl;
            this.Username = username;
        }

        /// <summary>
        /// Gets or Sets AuthType
        /// </summary>
        [DataMember(Name = "auth_type", EmitDefaultValue = false)]
        public string AuthType { get; set; }

        /// <summary>
        /// Gets or Sets EndpointUrl
        /// </summary>
        [DataMember(Name = "endpoint_url", EmitDefaultValue = false)]
        public string EndpointUrl { get; set; }

        /// <summary>
        /// Auth type - User Password
        /// </summary>
        /// <value>Auth type - User Password</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebHookNotiForwarderPublicDetails {\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  EndpointUrl: ").Append(EndpointUrl).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebHookNotiForwarderPublicDetails);
        }

        /// <summary>
        /// Returns true if WebHookNotiForwarderPublicDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of WebHookNotiForwarderPublicDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebHookNotiForwarderPublicDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthType == input.AuthType ||
                    (this.AuthType != null &&
                    this.AuthType.Equals(input.AuthType))
                ) && 
                (
                    this.EndpointUrl == input.EndpointUrl ||
                    (this.EndpointUrl != null &&
                    this.EndpointUrl.Equals(input.EndpointUrl))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthType != null)
                {
                    hashCode = (hashCode * 59) + this.AuthType.GetHashCode();
                }
                if (this.EndpointUrl != null)
                {
                    hashCode = (hashCode * 59) + this.EndpointUrl.GetHashCode();
                }
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
