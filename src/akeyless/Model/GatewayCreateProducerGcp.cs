/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateProducerGcp is a command that creates a GCP producer
    /// </summary>
    [DataContract]
    public partial class GatewayCreateProducerGcp :  IEquatable<GatewayCreateProducerGcp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerGcp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerGcp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerGcp" /> class.
        /// </summary>
        /// <param name="gatewayUrl">Gateway url (default to &quot;http://localhost:8000&quot;).</param>
        /// <param name="gcpCredType">gcpCredType (required).</param>
        /// <param name="gcpKey">Base64-encoded service account private key text.</param>
        /// <param name="gcpKeyAlgo">Service account key algorithm, e.g. KEY_ALG_RSA_1024.</param>
        /// <param name="gcpSaEmail">GCP service account email (required).</param>
        /// <param name="gcpTokenScopes">Access token scopes list, e.g. scope1,scope2.</param>
        /// <param name="name">Producer name (required).</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public GatewayCreateProducerGcp(string gatewayUrl = "http://localhost:8000", string gcpCredType = default(string), string gcpKey = default(string), string gcpKeyAlgo = default(string), string gcpSaEmail = default(string), string gcpTokenScopes = default(string), string name = default(string), string producerEncryptionKeyName = default(string), string token = default(string), string uidToken = default(string), string userTtl = "60m")
        {
            // to ensure "gcpCredType" is required (not null)
            this.GcpCredType = gcpCredType ?? throw new ArgumentNullException("gcpCredType is a required property for GatewayCreateProducerGcp and cannot be null");
            // to ensure "gcpSaEmail" is required (not null)
            this.GcpSaEmail = gcpSaEmail ?? throw new ArgumentNullException("gcpSaEmail is a required property for GatewayCreateProducerGcp and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for GatewayCreateProducerGcp and cannot be null");
            // use default value if no "gatewayUrl" provided
            this.GatewayUrl = gatewayUrl ?? "http://localhost:8000";
            this.GcpKey = gcpKey;
            this.GcpKeyAlgo = gcpKeyAlgo;
            this.GcpTokenScopes = gcpTokenScopes;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "60m";
        }
        
        /// <summary>
        /// Gateway url
        /// </summary>
        /// <value>Gateway url</value>
        [DataMember(Name="gateway-url", EmitDefaultValue=false)]
        public string GatewayUrl { get; set; }

        /// <summary>
        /// Gets or Sets GcpCredType
        /// </summary>
        [DataMember(Name="gcp-cred-type", EmitDefaultValue=false)]
        public string GcpCredType { get; set; }

        /// <summary>
        /// Base64-encoded service account private key text
        /// </summary>
        /// <value>Base64-encoded service account private key text</value>
        [DataMember(Name="gcp-key", EmitDefaultValue=false)]
        public string GcpKey { get; set; }

        /// <summary>
        /// Service account key algorithm, e.g. KEY_ALG_RSA_1024
        /// </summary>
        /// <value>Service account key algorithm, e.g. KEY_ALG_RSA_1024</value>
        [DataMember(Name="gcp-key-algo", EmitDefaultValue=false)]
        public string GcpKeyAlgo { get; set; }

        /// <summary>
        /// GCP service account email
        /// </summary>
        /// <value>GCP service account email</value>
        [DataMember(Name="gcp-sa-email", EmitDefaultValue=false)]
        public string GcpSaEmail { get; set; }

        /// <summary>
        /// Access token scopes list, e.g. scope1,scope2
        /// </summary>
        /// <value>Access token scopes list, e.g. scope1,scope2</value>
        [DataMember(Name="gcp-token-scopes", EmitDefaultValue=false)]
        public string GcpTokenScopes { get; set; }

        /// <summary>
        /// Producer name
        /// </summary>
        /// <value>Producer name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name="producer-encryption-key-name", EmitDefaultValue=false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name="user-ttl", EmitDefaultValue=false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerGcp {\n");
            sb.Append("  GatewayUrl: ").Append(GatewayUrl).Append("\n");
            sb.Append("  GcpCredType: ").Append(GcpCredType).Append("\n");
            sb.Append("  GcpKey: ").Append(GcpKey).Append("\n");
            sb.Append("  GcpKeyAlgo: ").Append(GcpKeyAlgo).Append("\n");
            sb.Append("  GcpSaEmail: ").Append(GcpSaEmail).Append("\n");
            sb.Append("  GcpTokenScopes: ").Append(GcpTokenScopes).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayCreateProducerGcp);
        }

        /// <summary>
        /// Returns true if GatewayCreateProducerGcp instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayCreateProducerGcp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayCreateProducerGcp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GatewayUrl == input.GatewayUrl ||
                    (this.GatewayUrl != null &&
                    this.GatewayUrl.Equals(input.GatewayUrl))
                ) && 
                (
                    this.GcpCredType == input.GcpCredType ||
                    (this.GcpCredType != null &&
                    this.GcpCredType.Equals(input.GcpCredType))
                ) && 
                (
                    this.GcpKey == input.GcpKey ||
                    (this.GcpKey != null &&
                    this.GcpKey.Equals(input.GcpKey))
                ) && 
                (
                    this.GcpKeyAlgo == input.GcpKeyAlgo ||
                    (this.GcpKeyAlgo != null &&
                    this.GcpKeyAlgo.Equals(input.GcpKeyAlgo))
                ) && 
                (
                    this.GcpSaEmail == input.GcpSaEmail ||
                    (this.GcpSaEmail != null &&
                    this.GcpSaEmail.Equals(input.GcpSaEmail))
                ) && 
                (
                    this.GcpTokenScopes == input.GcpTokenScopes ||
                    (this.GcpTokenScopes != null &&
                    this.GcpTokenScopes.Equals(input.GcpTokenScopes))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GatewayUrl != null)
                    hashCode = hashCode * 59 + this.GatewayUrl.GetHashCode();
                if (this.GcpCredType != null)
                    hashCode = hashCode * 59 + this.GcpCredType.GetHashCode();
                if (this.GcpKey != null)
                    hashCode = hashCode * 59 + this.GcpKey.GetHashCode();
                if (this.GcpKeyAlgo != null)
                    hashCode = hashCode * 59 + this.GcpKeyAlgo.GetHashCode();
                if (this.GcpSaEmail != null)
                    hashCode = hashCode * 59 + this.GcpSaEmail.GetHashCode();
                if (this.GcpTokenScopes != null)
                    hashCode = hashCode * 59 + this.GcpTokenScopes.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ProducerEncryptionKeyName != null)
                    hashCode = hashCode * 59 + this.ProducerEncryptionKeyName.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.UserTtl != null)
                    hashCode = hashCode * 59 + this.UserTtl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
