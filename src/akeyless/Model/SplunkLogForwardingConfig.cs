/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SplunkLogForwardingConfig
    /// </summary>
    [DataContract(Name = "SplunkLogForwardingConfig")]
    public partial class SplunkLogForwardingConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SplunkLogForwardingConfig" /> class.
        /// </summary>
        /// <param name="splunkEnableTls">splunkEnableTls.</param>
        /// <param name="splunkIndex">splunkIndex.</param>
        /// <param name="splunkSource">splunkSource.</param>
        /// <param name="splunkSourcetype">splunkSourcetype.</param>
        /// <param name="splunkTlsCertificate">splunkTlsCertificate.</param>
        /// <param name="splunkToken">splunkToken.</param>
        /// <param name="splunkUrl">splunkUrl.</param>
        public SplunkLogForwardingConfig(bool splunkEnableTls = default(bool), string splunkIndex = default(string), string splunkSource = default(string), string splunkSourcetype = default(string), string splunkTlsCertificate = default(string), string splunkToken = default(string), string splunkUrl = default(string))
        {
            this.SplunkEnableTls = splunkEnableTls;
            this.SplunkIndex = splunkIndex;
            this.SplunkSource = splunkSource;
            this.SplunkSourcetype = splunkSourcetype;
            this.SplunkTlsCertificate = splunkTlsCertificate;
            this.SplunkToken = splunkToken;
            this.SplunkUrl = splunkUrl;
        }

        /// <summary>
        /// Gets or Sets SplunkEnableTls
        /// </summary>
        [DataMember(Name = "splunk_enable_tls", EmitDefaultValue = true)]
        public bool SplunkEnableTls { get; set; }

        /// <summary>
        /// Gets or Sets SplunkIndex
        /// </summary>
        [DataMember(Name = "splunk_index", EmitDefaultValue = false)]
        public string SplunkIndex { get; set; }

        /// <summary>
        /// Gets or Sets SplunkSource
        /// </summary>
        [DataMember(Name = "splunk_source", EmitDefaultValue = false)]
        public string SplunkSource { get; set; }

        /// <summary>
        /// Gets or Sets SplunkSourcetype
        /// </summary>
        [DataMember(Name = "splunk_sourcetype", EmitDefaultValue = false)]
        public string SplunkSourcetype { get; set; }

        /// <summary>
        /// Gets or Sets SplunkTlsCertificate
        /// </summary>
        [DataMember(Name = "splunk_tls_certificate", EmitDefaultValue = false)]
        public string SplunkTlsCertificate { get; set; }

        /// <summary>
        /// Gets or Sets SplunkToken
        /// </summary>
        [DataMember(Name = "splunk_token", EmitDefaultValue = false)]
        public string SplunkToken { get; set; }

        /// <summary>
        /// Gets or Sets SplunkUrl
        /// </summary>
        [DataMember(Name = "splunk_url", EmitDefaultValue = false)]
        public string SplunkUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SplunkLogForwardingConfig {\n");
            sb.Append("  SplunkEnableTls: ").Append(SplunkEnableTls).Append("\n");
            sb.Append("  SplunkIndex: ").Append(SplunkIndex).Append("\n");
            sb.Append("  SplunkSource: ").Append(SplunkSource).Append("\n");
            sb.Append("  SplunkSourcetype: ").Append(SplunkSourcetype).Append("\n");
            sb.Append("  SplunkTlsCertificate: ").Append(SplunkTlsCertificate).Append("\n");
            sb.Append("  SplunkToken: ").Append(SplunkToken).Append("\n");
            sb.Append("  SplunkUrl: ").Append(SplunkUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
