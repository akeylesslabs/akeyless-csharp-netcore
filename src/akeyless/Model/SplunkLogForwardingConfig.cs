/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SplunkLogForwardingConfig
    /// </summary>
    [DataContract]
    public partial class SplunkLogForwardingConfig :  IEquatable<SplunkLogForwardingConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SplunkLogForwardingConfig" /> class.
        /// </summary>
        /// <param name="splunkIndex">splunkIndex.</param>
        /// <param name="splunkSource">splunkSource.</param>
        /// <param name="splunkSourcetype">splunkSourcetype.</param>
        /// <param name="splunkToken">splunkToken.</param>
        /// <param name="splunkUrl">splunkUrl.</param>
        public SplunkLogForwardingConfig(string splunkIndex = default(string), string splunkSource = default(string), string splunkSourcetype = default(string), string splunkToken = default(string), string splunkUrl = default(string))
        {
            this.SplunkIndex = splunkIndex;
            this.SplunkSource = splunkSource;
            this.SplunkSourcetype = splunkSourcetype;
            this.SplunkToken = splunkToken;
            this.SplunkUrl = splunkUrl;
        }
        
        /// <summary>
        /// Gets or Sets SplunkIndex
        /// </summary>
        [DataMember(Name="splunk_index", EmitDefaultValue=false)]
        public string SplunkIndex { get; set; }

        /// <summary>
        /// Gets or Sets SplunkSource
        /// </summary>
        [DataMember(Name="splunk_source", EmitDefaultValue=false)]
        public string SplunkSource { get; set; }

        /// <summary>
        /// Gets or Sets SplunkSourcetype
        /// </summary>
        [DataMember(Name="splunk_sourcetype", EmitDefaultValue=false)]
        public string SplunkSourcetype { get; set; }

        /// <summary>
        /// Gets or Sets SplunkToken
        /// </summary>
        [DataMember(Name="splunk_token", EmitDefaultValue=false)]
        public string SplunkToken { get; set; }

        /// <summary>
        /// Gets or Sets SplunkUrl
        /// </summary>
        [DataMember(Name="splunk_url", EmitDefaultValue=false)]
        public string SplunkUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SplunkLogForwardingConfig {\n");
            sb.Append("  SplunkIndex: ").Append(SplunkIndex).Append("\n");
            sb.Append("  SplunkSource: ").Append(SplunkSource).Append("\n");
            sb.Append("  SplunkSourcetype: ").Append(SplunkSourcetype).Append("\n");
            sb.Append("  SplunkToken: ").Append(SplunkToken).Append("\n");
            sb.Append("  SplunkUrl: ").Append(SplunkUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SplunkLogForwardingConfig);
        }

        /// <summary>
        /// Returns true if SplunkLogForwardingConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of SplunkLogForwardingConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SplunkLogForwardingConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SplunkIndex == input.SplunkIndex ||
                    (this.SplunkIndex != null &&
                    this.SplunkIndex.Equals(input.SplunkIndex))
                ) && 
                (
                    this.SplunkSource == input.SplunkSource ||
                    (this.SplunkSource != null &&
                    this.SplunkSource.Equals(input.SplunkSource))
                ) && 
                (
                    this.SplunkSourcetype == input.SplunkSourcetype ||
                    (this.SplunkSourcetype != null &&
                    this.SplunkSourcetype.Equals(input.SplunkSourcetype))
                ) && 
                (
                    this.SplunkToken == input.SplunkToken ||
                    (this.SplunkToken != null &&
                    this.SplunkToken.Equals(input.SplunkToken))
                ) && 
                (
                    this.SplunkUrl == input.SplunkUrl ||
                    (this.SplunkUrl != null &&
                    this.SplunkUrl.Equals(input.SplunkUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SplunkIndex != null)
                    hashCode = hashCode * 59 + this.SplunkIndex.GetHashCode();
                if (this.SplunkSource != null)
                    hashCode = hashCode * 59 + this.SplunkSource.GetHashCode();
                if (this.SplunkSourcetype != null)
                    hashCode = hashCode * 59 + this.SplunkSourcetype.GetHashCode();
                if (this.SplunkToken != null)
                    hashCode = hashCode * 59 + this.SplunkToken.GetHashCode();
                if (this.SplunkUrl != null)
                    hashCode = hashCode * 59 + this.SplunkUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
