/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// AkeylessGatewayConfig
    /// </summary>
    [DataContract(Name = "AkeylessGatewayConfig")]
    public partial class AkeylessGatewayConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AkeylessGatewayConfig" /> class.
        /// </summary>
        /// <param name="admins">admins.</param>
        /// <param name="caCertificates">caCertificates.</param>
        /// <param name="cache">cache.</param>
        /// <param name="cf">cf.</param>
        /// <param name="configProtectionKeyName">configProtectionKeyName.</param>
        /// <param name="general">general.</param>
        /// <param name="k8sAuths">k8sAuths.</param>
        /// <param name="kerberos">kerberos.</param>
        /// <param name="kmipClients">kmipClients.</param>
        /// <param name="ldap">ldap.</param>
        /// <param name="leadership">leadership.</param>
        /// <param name="logForwarding">logForwarding.</param>
        /// <param name="messageQueueInfo">messageQueueInfo.</param>
        /// <param name="migrations">migrations.</param>
        /// <param name="producers">producers.</param>
        /// <param name="rotators">rotators.</param>
        /// <param name="saml">saml.</param>
        /// <param name="varVersion">varVersion.</param>
        public AkeylessGatewayConfig(AdminsConfigPart admins = default(AdminsConfigPart), CaCertificatesConfigPart caCertificates = default(CaCertificatesConfigPart), CacheConfigPart cache = default(CacheConfigPart), CFConfigPart cf = default(CFConfigPart), string configProtectionKeyName = default(string), GeneralConfigPart general = default(GeneralConfigPart), K8SAuthsConfigPart k8sAuths = default(K8SAuthsConfigPart), KerberosConfigPart kerberos = default(KerberosConfigPart), KMIPConfigPart kmipClients = default(KMIPConfigPart), LdapConfigPart ldap = default(LdapConfigPart), LeadershipConfigPart leadership = default(LeadershipConfigPart), LogForwardingConfigPart logForwarding = default(LogForwardingConfigPart), GatewayMessageQueueInfo messageQueueInfo = default(GatewayMessageQueueInfo), MigrationsConfigPart migrations = default(MigrationsConfigPart), ProducersConfigPart producers = default(ProducersConfigPart), RotatorsConfigPart rotators = default(RotatorsConfigPart), DefaultConfigPart saml = default(DefaultConfigPart), int varVersion = default(int))
        {
            this.Admins = admins;
            this.CaCertificates = caCertificates;
            this.Cache = cache;
            this.Cf = cf;
            this.ConfigProtectionKeyName = configProtectionKeyName;
            this.General = general;
            this.K8sAuths = k8sAuths;
            this.Kerberos = kerberos;
            this.KmipClients = kmipClients;
            this.Ldap = ldap;
            this.Leadership = leadership;
            this.LogForwarding = logForwarding;
            this.MessageQueueInfo = messageQueueInfo;
            this.Migrations = migrations;
            this.Producers = producers;
            this.Rotators = rotators;
            this.Saml = saml;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Gets or Sets Admins
        /// </summary>
        [DataMember(Name = "admins", EmitDefaultValue = false)]
        public AdminsConfigPart Admins { get; set; }

        /// <summary>
        /// Gets or Sets CaCertificates
        /// </summary>
        [DataMember(Name = "ca_certificates", EmitDefaultValue = false)]
        public CaCertificatesConfigPart CaCertificates { get; set; }

        /// <summary>
        /// Gets or Sets Cache
        /// </summary>
        [DataMember(Name = "cache", EmitDefaultValue = false)]
        public CacheConfigPart Cache { get; set; }

        /// <summary>
        /// Gets or Sets Cf
        /// </summary>
        [DataMember(Name = "cf", EmitDefaultValue = false)]
        public CFConfigPart Cf { get; set; }

        /// <summary>
        /// Gets or Sets ConfigProtectionKeyName
        /// </summary>
        [DataMember(Name = "config_protection_key_name", EmitDefaultValue = false)]
        public string ConfigProtectionKeyName { get; set; }

        /// <summary>
        /// Gets or Sets General
        /// </summary>
        [DataMember(Name = "general", EmitDefaultValue = false)]
        public GeneralConfigPart General { get; set; }

        /// <summary>
        /// Gets or Sets K8sAuths
        /// </summary>
        [DataMember(Name = "k8s_auths", EmitDefaultValue = false)]
        public K8SAuthsConfigPart K8sAuths { get; set; }

        /// <summary>
        /// Gets or Sets Kerberos
        /// </summary>
        [DataMember(Name = "kerberos", EmitDefaultValue = false)]
        public KerberosConfigPart Kerberos { get; set; }

        /// <summary>
        /// Gets or Sets KmipClients
        /// </summary>
        [DataMember(Name = "kmip_clients", EmitDefaultValue = false)]
        public KMIPConfigPart KmipClients { get; set; }

        /// <summary>
        /// Gets or Sets Ldap
        /// </summary>
        [DataMember(Name = "ldap", EmitDefaultValue = false)]
        public LdapConfigPart Ldap { get; set; }

        /// <summary>
        /// Gets or Sets Leadership
        /// </summary>
        [DataMember(Name = "leadership", EmitDefaultValue = false)]
        public LeadershipConfigPart Leadership { get; set; }

        /// <summary>
        /// Gets or Sets LogForwarding
        /// </summary>
        [DataMember(Name = "log_forwarding", EmitDefaultValue = false)]
        public LogForwardingConfigPart LogForwarding { get; set; }

        /// <summary>
        /// Gets or Sets MessageQueueInfo
        /// </summary>
        [DataMember(Name = "message_queue_info", EmitDefaultValue = false)]
        public GatewayMessageQueueInfo MessageQueueInfo { get; set; }

        /// <summary>
        /// Gets or Sets Migrations
        /// </summary>
        [DataMember(Name = "migrations", EmitDefaultValue = false)]
        public MigrationsConfigPart Migrations { get; set; }

        /// <summary>
        /// Gets or Sets Producers
        /// </summary>
        [DataMember(Name = "producers", EmitDefaultValue = false)]
        public ProducersConfigPart Producers { get; set; }

        /// <summary>
        /// Gets or Sets Rotators
        /// </summary>
        [DataMember(Name = "rotators", EmitDefaultValue = false)]
        public RotatorsConfigPart Rotators { get; set; }

        /// <summary>
        /// Gets or Sets Saml
        /// </summary>
        [DataMember(Name = "saml", EmitDefaultValue = false)]
        public DefaultConfigPart Saml { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AkeylessGatewayConfig {\n");
            sb.Append("  Admins: ").Append(Admins).Append("\n");
            sb.Append("  CaCertificates: ").Append(CaCertificates).Append("\n");
            sb.Append("  Cache: ").Append(Cache).Append("\n");
            sb.Append("  Cf: ").Append(Cf).Append("\n");
            sb.Append("  ConfigProtectionKeyName: ").Append(ConfigProtectionKeyName).Append("\n");
            sb.Append("  General: ").Append(General).Append("\n");
            sb.Append("  K8sAuths: ").Append(K8sAuths).Append("\n");
            sb.Append("  Kerberos: ").Append(Kerberos).Append("\n");
            sb.Append("  KmipClients: ").Append(KmipClients).Append("\n");
            sb.Append("  Ldap: ").Append(Ldap).Append("\n");
            sb.Append("  Leadership: ").Append(Leadership).Append("\n");
            sb.Append("  LogForwarding: ").Append(LogForwarding).Append("\n");
            sb.Append("  MessageQueueInfo: ").Append(MessageQueueInfo).Append("\n");
            sb.Append("  Migrations: ").Append(Migrations).Append("\n");
            sb.Append("  Producers: ").Append(Producers).Append("\n");
            sb.Append("  Rotators: ").Append(Rotators).Append("\n");
            sb.Append("  Saml: ").Append(Saml).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
