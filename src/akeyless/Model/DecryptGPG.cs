/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// DecryptGPG
    /// </summary>
    [DataContract(Name = "decryptGPG")]
    public partial class DecryptGPG : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DecryptGPG" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DecryptGPG() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DecryptGPG" /> class.
        /// </summary>
        /// <param name="ciphertext">Ciphertext to be decrypted (required).</param>
        /// <param name="displayId">The display id of the key to use in the decryption process.</param>
        /// <param name="inputFormat">Select default assumed format for the ciphertext. Currently supported options: [base64,raw] (default to &quot;base64&quot;).</param>
        /// <param name="itemId">The item id of the key to use in the decryption process.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="keyName">The name of the key to use in the decryption process (required).</param>
        /// <param name="outputFormat">If specified, the output will be formatted accordingly. options: [base64].</param>
        /// <param name="passphrase">Passphrase that was used to generate the key.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public DecryptGPG(string ciphertext = default(string), string displayId = default(string), string inputFormat = @"base64", long itemId = default(long), bool json = false, string keyName = default(string), string outputFormat = default(string), string passphrase = default(string), string token = default(string), string uidToken = default(string))
        {
            // to ensure "ciphertext" is required (not null)
            if (ciphertext == null)
            {
                throw new ArgumentNullException("ciphertext is a required property for DecryptGPG and cannot be null");
            }
            this.Ciphertext = ciphertext;
            // to ensure "keyName" is required (not null)
            if (keyName == null)
            {
                throw new ArgumentNullException("keyName is a required property for DecryptGPG and cannot be null");
            }
            this.KeyName = keyName;
            this.DisplayId = displayId;
            // use default value if no "inputFormat" provided
            this.InputFormat = inputFormat ?? @"base64";
            this.ItemId = itemId;
            this.Json = json;
            this.OutputFormat = outputFormat;
            this.Passphrase = passphrase;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Ciphertext to be decrypted
        /// </summary>
        /// <value>Ciphertext to be decrypted</value>
        [DataMember(Name = "ciphertext", IsRequired = true, EmitDefaultValue = true)]
        public string Ciphertext { get; set; }

        /// <summary>
        /// The display id of the key to use in the decryption process
        /// </summary>
        /// <value>The display id of the key to use in the decryption process</value>
        [DataMember(Name = "display-id", EmitDefaultValue = false)]
        public string DisplayId { get; set; }

        /// <summary>
        /// Select default assumed format for the ciphertext. Currently supported options: [base64,raw]
        /// </summary>
        /// <value>Select default assumed format for the ciphertext. Currently supported options: [base64,raw]</value>
        [DataMember(Name = "input-format", EmitDefaultValue = false)]
        public string InputFormat { get; set; }

        /// <summary>
        /// The item id of the key to use in the decryption process
        /// </summary>
        /// <value>The item id of the key to use in the decryption process</value>
        [DataMember(Name = "item-id", EmitDefaultValue = false)]
        public long ItemId { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The name of the key to use in the decryption process
        /// </summary>
        /// <value>The name of the key to use in the decryption process</value>
        [DataMember(Name = "key-name", IsRequired = true, EmitDefaultValue = true)]
        public string KeyName { get; set; }

        /// <summary>
        /// If specified, the output will be formatted accordingly. options: [base64]
        /// </summary>
        /// <value>If specified, the output will be formatted accordingly. options: [base64]</value>
        [DataMember(Name = "output-format", EmitDefaultValue = false)]
        public string OutputFormat { get; set; }

        /// <summary>
        /// Passphrase that was used to generate the key
        /// </summary>
        /// <value>Passphrase that was used to generate the key</value>
        [DataMember(Name = "passphrase", EmitDefaultValue = false)]
        public string Passphrase { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DecryptGPG {\n");
            sb.Append("  Ciphertext: ").Append(Ciphertext).Append("\n");
            sb.Append("  DisplayId: ").Append(DisplayId).Append("\n");
            sb.Append("  InputFormat: ").Append(InputFormat).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeyName: ").Append(KeyName).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  Passphrase: ").Append(Passphrase).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
