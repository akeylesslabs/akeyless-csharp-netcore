/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GetPKICertificateOutput
    /// </summary>
    [DataContract(Name = "getPKICertificateOutput")]
    public partial class GetPKICertificateOutput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPKICertificateOutput" /> class.
        /// </summary>
        /// <param name="certDisplayId">certDisplayId.</param>
        /// <param name="certItemId">certItemId.</param>
        /// <param name="data">data.</param>
        /// <param name="parentCert">parentCert.</param>
        /// <param name="path">path.</param>
        /// <param name="readingToken">readingToken.</param>
        public GetPKICertificateOutput(string certDisplayId = default(string), long certItemId = default(long), string data = default(string), string parentCert = default(string), string path = default(string), string readingToken = default(string))
        {
            this.CertDisplayId = certDisplayId;
            this.CertItemId = certItemId;
            this.Data = data;
            this.ParentCert = parentCert;
            this.Path = path;
            this.ReadingToken = readingToken;
        }

        /// <summary>
        /// Gets or Sets CertDisplayId
        /// </summary>
        [DataMember(Name = "cert_display_id", EmitDefaultValue = false)]
        public string CertDisplayId { get; set; }

        /// <summary>
        /// Gets or Sets CertItemId
        /// </summary>
        [DataMember(Name = "cert_item_id", EmitDefaultValue = false)]
        public long CertItemId { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets ParentCert
        /// </summary>
        [DataMember(Name = "parent_cert", EmitDefaultValue = false)]
        public string ParentCert { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets ReadingToken
        /// </summary>
        [DataMember(Name = "reading_token", EmitDefaultValue = false)]
        public string ReadingToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetPKICertificateOutput {\n");
            sb.Append("  CertDisplayId: ").Append(CertDisplayId).Append("\n");
            sb.Append("  CertItemId: ").Append(CertItemId).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  ParentCert: ").Append(ParentCert).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ReadingToken: ").Append(ReadingToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
