/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayUpdateProducerGcp is a command that updates a GCP producer [Deprecated: Use dynamic-secret-update-gcp command]
    /// </summary>
    [DataContract(Name = "gatewayUpdateProducerGcp")]
    public partial class GatewayUpdateProducerGcp : IEquatable<GatewayUpdateProducerGcp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateProducerGcp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayUpdateProducerGcp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateProducerGcp" /> class.
        /// </summary>
        /// <param name="deleteProtection">Protection from accidental deletion of this item [true/false].</param>
        /// <param name="gcpCredType">gcpCredType.</param>
        /// <param name="gcpKey">Base64-encoded service account private key text.</param>
        /// <param name="gcpKeyAlgo">Service account key algorithm, e.g. KEY_ALG_RSA_1024.</param>
        /// <param name="gcpSaEmail">The email of the fixed service acocunt to generate keys or tokens for. (revelant for service-account-type&#x3D;fixed).</param>
        /// <param name="gcpTokenScopes">Access token scopes list, e.g. scope1,scope2.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Dynamic secret name (required).</param>
        /// <param name="newName">Dynamic secret name.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="roleBinding">Role binding definitions in json format.</param>
        /// <param name="serviceAccountType">The type of the gcp dynamic secret. Options[fixed, dynamic] (required) (default to &quot;fixed&quot;).</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public GatewayUpdateProducerGcp(string deleteProtection = default(string), string gcpCredType = default(string), string gcpKey = default(string), string gcpKeyAlgo = default(string), string gcpSaEmail = default(string), string gcpTokenScopes = default(string), bool json = false, string name = default(string), string newName = default(string), string producerEncryptionKeyName = default(string), string roleBinding = default(string), string serviceAccountType = "fixed", List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userTtl = "60m")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayUpdateProducerGcp and cannot be null");
            }
            this.Name = name;
            // to ensure "serviceAccountType" is required (not null)
            if (serviceAccountType == null)
            {
                throw new ArgumentNullException("serviceAccountType is a required property for GatewayUpdateProducerGcp and cannot be null");
            }
            this.ServiceAccountType = serviceAccountType;
            this.DeleteProtection = deleteProtection;
            this.GcpCredType = gcpCredType;
            this.GcpKey = gcpKey;
            this.GcpKeyAlgo = gcpKeyAlgo;
            this.GcpSaEmail = gcpSaEmail;
            this.GcpTokenScopes = gcpTokenScopes;
            this.Json = json;
            this.NewName = newName;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.RoleBinding = roleBinding;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "60m";
        }

        /// <summary>
        /// Protection from accidental deletion of this item [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this item [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Gets or Sets GcpCredType
        /// </summary>
        [DataMember(Name = "gcp-cred-type", EmitDefaultValue = false)]
        public string GcpCredType { get; set; }

        /// <summary>
        /// Base64-encoded service account private key text
        /// </summary>
        /// <value>Base64-encoded service account private key text</value>
        [DataMember(Name = "gcp-key", EmitDefaultValue = false)]
        public string GcpKey { get; set; }

        /// <summary>
        /// Service account key algorithm, e.g. KEY_ALG_RSA_1024
        /// </summary>
        /// <value>Service account key algorithm, e.g. KEY_ALG_RSA_1024</value>
        [DataMember(Name = "gcp-key-algo", EmitDefaultValue = false)]
        public string GcpKeyAlgo { get; set; }

        /// <summary>
        /// The email of the fixed service acocunt to generate keys or tokens for. (revelant for service-account-type&#x3D;fixed)
        /// </summary>
        /// <value>The email of the fixed service acocunt to generate keys or tokens for. (revelant for service-account-type&#x3D;fixed)</value>
        [DataMember(Name = "gcp-sa-email", EmitDefaultValue = false)]
        public string GcpSaEmail { get; set; }

        /// <summary>
        /// Access token scopes list, e.g. scope1,scope2
        /// </summary>
        /// <value>Access token scopes list, e.g. scope1,scope2</value>
        [DataMember(Name = "gcp-token-scopes", EmitDefaultValue = false)]
        public string GcpTokenScopes { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Role binding definitions in json format
        /// </summary>
        /// <value>Role binding definitions in json format</value>
        [DataMember(Name = "role-binding", EmitDefaultValue = false)]
        public string RoleBinding { get; set; }

        /// <summary>
        /// The type of the gcp dynamic secret. Options[fixed, dynamic]
        /// </summary>
        /// <value>The type of the gcp dynamic secret. Options[fixed, dynamic]</value>
        [DataMember(Name = "service-account-type", IsRequired = true, EmitDefaultValue = true)]
        public string ServiceAccountType { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayUpdateProducerGcp {\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  GcpCredType: ").Append(GcpCredType).Append("\n");
            sb.Append("  GcpKey: ").Append(GcpKey).Append("\n");
            sb.Append("  GcpKeyAlgo: ").Append(GcpKeyAlgo).Append("\n");
            sb.Append("  GcpSaEmail: ").Append(GcpSaEmail).Append("\n");
            sb.Append("  GcpTokenScopes: ").Append(GcpTokenScopes).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  RoleBinding: ").Append(RoleBinding).Append("\n");
            sb.Append("  ServiceAccountType: ").Append(ServiceAccountType).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayUpdateProducerGcp);
        }

        /// <summary>
        /// Returns true if GatewayUpdateProducerGcp instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayUpdateProducerGcp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayUpdateProducerGcp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    (this.DeleteProtection != null &&
                    this.DeleteProtection.Equals(input.DeleteProtection))
                ) && 
                (
                    this.GcpCredType == input.GcpCredType ||
                    (this.GcpCredType != null &&
                    this.GcpCredType.Equals(input.GcpCredType))
                ) && 
                (
                    this.GcpKey == input.GcpKey ||
                    (this.GcpKey != null &&
                    this.GcpKey.Equals(input.GcpKey))
                ) && 
                (
                    this.GcpKeyAlgo == input.GcpKeyAlgo ||
                    (this.GcpKeyAlgo != null &&
                    this.GcpKeyAlgo.Equals(input.GcpKeyAlgo))
                ) && 
                (
                    this.GcpSaEmail == input.GcpSaEmail ||
                    (this.GcpSaEmail != null &&
                    this.GcpSaEmail.Equals(input.GcpSaEmail))
                ) && 
                (
                    this.GcpTokenScopes == input.GcpTokenScopes ||
                    (this.GcpTokenScopes != null &&
                    this.GcpTokenScopes.Equals(input.GcpTokenScopes))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.RoleBinding == input.RoleBinding ||
                    (this.RoleBinding != null &&
                    this.RoleBinding.Equals(input.RoleBinding))
                ) && 
                (
                    this.ServiceAccountType == input.ServiceAccountType ||
                    (this.ServiceAccountType != null &&
                    this.ServiceAccountType.Equals(input.ServiceAccountType))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeleteProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteProtection.GetHashCode();
                }
                if (this.GcpCredType != null)
                {
                    hashCode = (hashCode * 59) + this.GcpCredType.GetHashCode();
                }
                if (this.GcpKey != null)
                {
                    hashCode = (hashCode * 59) + this.GcpKey.GetHashCode();
                }
                if (this.GcpKeyAlgo != null)
                {
                    hashCode = (hashCode * 59) + this.GcpKeyAlgo.GetHashCode();
                }
                if (this.GcpSaEmail != null)
                {
                    hashCode = (hashCode * 59) + this.GcpSaEmail.GetHashCode();
                }
                if (this.GcpTokenScopes != null)
                {
                    hashCode = (hashCode * 59) + this.GcpTokenScopes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NewName != null)
                {
                    hashCode = (hashCode * 59) + this.NewName.GetHashCode();
                }
                if (this.ProducerEncryptionKeyName != null)
                {
                    hashCode = (hashCode * 59) + this.ProducerEncryptionKeyName.GetHashCode();
                }
                if (this.RoleBinding != null)
                {
                    hashCode = (hashCode * 59) + this.RoleBinding.GetHashCode();
                }
                if (this.ServiceAccountType != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceAccountType.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TargetName != null)
                {
                    hashCode = (hashCode * 59) + this.TargetName.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UserTtl != null)
                {
                    hashCode = (hashCode * 59) + this.UserTtl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
