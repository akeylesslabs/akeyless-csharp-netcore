/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// AccessOrGroupPermissionAssignment
    /// </summary>
    [DataContract(Name = "AccessOrGroupPermissionAssignment")]
    public partial class AccessOrGroupPermissionAssignment : IEquatable<AccessOrGroupPermissionAssignment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessOrGroupPermissionAssignment" /> class.
        /// </summary>
        /// <param name="accessId">accessId.</param>
        /// <param name="accessType">accessType.</param>
        /// <param name="assignmentName">assignmentName.</param>
        /// <param name="assignmentType">assignmentType.</param>
        /// <param name="groupId">groupId.</param>
        /// <param name="subClaims">subClaims.</param>
        public AccessOrGroupPermissionAssignment(string accessId = default(string), string accessType = default(string), string assignmentName = default(string), string assignmentType = default(string), string groupId = default(string), Dictionary<string, List<string>> subClaims = default(Dictionary<string, List<string>>))
        {
            this.AccessId = accessId;
            this.AccessType = accessType;
            this.AssignmentName = assignmentName;
            this.AssignmentType = assignmentType;
            this.GroupId = groupId;
            this.SubClaims = subClaims;
        }

        /// <summary>
        /// Gets or Sets AccessId
        /// </summary>
        [DataMember(Name = "access_id", EmitDefaultValue = false)]
        public string AccessId { get; set; }

        /// <summary>
        /// Gets or Sets AccessType
        /// </summary>
        [DataMember(Name = "access_type", EmitDefaultValue = false)]
        public string AccessType { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentName
        /// </summary>
        [DataMember(Name = "assignment_name", EmitDefaultValue = false)]
        public string AssignmentName { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentType
        /// </summary>
        [DataMember(Name = "assignment_type", EmitDefaultValue = false)]
        public string AssignmentType { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name = "group_id", EmitDefaultValue = false)]
        public string GroupId { get; set; }

        /// <summary>
        /// Gets or Sets SubClaims
        /// </summary>
        [DataMember(Name = "sub_claims", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> SubClaims { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccessOrGroupPermissionAssignment {\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  AssignmentName: ").Append(AssignmentName).Append("\n");
            sb.Append("  AssignmentType: ").Append(AssignmentType).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  SubClaims: ").Append(SubClaims).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccessOrGroupPermissionAssignment);
        }

        /// <summary>
        /// Returns true if AccessOrGroupPermissionAssignment instances are equal
        /// </summary>
        /// <param name="input">Instance of AccessOrGroupPermissionAssignment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessOrGroupPermissionAssignment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessId == input.AccessId ||
                    (this.AccessId != null &&
                    this.AccessId.Equals(input.AccessId))
                ) && 
                (
                    this.AccessType == input.AccessType ||
                    (this.AccessType != null &&
                    this.AccessType.Equals(input.AccessType))
                ) && 
                (
                    this.AssignmentName == input.AssignmentName ||
                    (this.AssignmentName != null &&
                    this.AssignmentName.Equals(input.AssignmentName))
                ) && 
                (
                    this.AssignmentType == input.AssignmentType ||
                    (this.AssignmentType != null &&
                    this.AssignmentType.Equals(input.AssignmentType))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.SubClaims == input.SubClaims ||
                    this.SubClaims != null &&
                    input.SubClaims != null &&
                    this.SubClaims.SequenceEqual(input.SubClaims)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessId != null)
                {
                    hashCode = (hashCode * 59) + this.AccessId.GetHashCode();
                }
                if (this.AccessType != null)
                {
                    hashCode = (hashCode * 59) + this.AccessType.GetHashCode();
                }
                if (this.AssignmentName != null)
                {
                    hashCode = (hashCode * 59) + this.AssignmentName.GetHashCode();
                }
                if (this.AssignmentType != null)
                {
                    hashCode = (hashCode * 59) + this.AssignmentType.GetHashCode();
                }
                if (this.GroupId != null)
                {
                    hashCode = (hashCode * 59) + this.GroupId.GetHashCode();
                }
                if (this.SubClaims != null)
                {
                    hashCode = (hashCode * 59) + this.SubClaims.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
