/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// TargetObjectAssociation includes details of an association between a target and an object (target, migration_id).
    /// </summary>
    [DataContract(Name = "TargetObjectAssociation")]
    public partial class TargetObjectAssociation : IEquatable<TargetObjectAssociation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetObjectAssociation" /> class.
        /// </summary>
        /// <param name="assocId">assocId.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="objectId">objectId.</param>
        /// <param name="objectName">objectName.</param>
        /// <param name="objectType">objectType.</param>
        /// <param name="targetName">targetName.</param>
        public TargetObjectAssociation(string assocId = default(string), Dictionary<string, string> attributes = default(Dictionary<string, string>), string objectId = default(string), string objectName = default(string), string objectType = default(string), string targetName = default(string))
        {
            this.AssocId = assocId;
            this.Attributes = attributes;
            this.ObjectId = objectId;
            this.ObjectName = objectName;
            this.ObjectType = objectType;
            this.TargetName = targetName;
        }

        /// <summary>
        /// Gets or Sets AssocId
        /// </summary>
        [DataMember(Name = "assoc_id", EmitDefaultValue = false)]
        public string AssocId { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public Dictionary<string, string> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [DataMember(Name = "object_id", EmitDefaultValue = false)]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets ObjectName
        /// </summary>
        [DataMember(Name = "object_name", EmitDefaultValue = false)]
        public string ObjectName { get; set; }

        /// <summary>
        /// Gets or Sets ObjectType
        /// </summary>
        [DataMember(Name = "object_type", EmitDefaultValue = false)]
        public string ObjectType { get; set; }

        /// <summary>
        /// Gets or Sets TargetName
        /// </summary>
        [DataMember(Name = "target_name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TargetObjectAssociation {\n");
            sb.Append("  AssocId: ").Append(AssocId).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  ObjectName: ").Append(ObjectName).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TargetObjectAssociation);
        }

        /// <summary>
        /// Returns true if TargetObjectAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of TargetObjectAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TargetObjectAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssocId == input.AssocId ||
                    (this.AssocId != null &&
                    this.AssocId.Equals(input.AssocId))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.ObjectName == input.ObjectName ||
                    (this.ObjectName != null &&
                    this.ObjectName.Equals(input.ObjectName))
                ) && 
                (
                    this.ObjectType == input.ObjectType ||
                    (this.ObjectType != null &&
                    this.ObjectType.Equals(input.ObjectType))
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssocId != null)
                    hashCode = hashCode * 59 + this.AssocId.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.ObjectId != null)
                    hashCode = hashCode * 59 + this.ObjectId.GetHashCode();
                if (this.ObjectName != null)
                    hashCode = hashCode * 59 + this.ObjectName.GetHashCode();
                if (this.ObjectType != null)
                    hashCode = hashCode * 59 + this.ObjectType.GetHashCode();
                if (this.TargetName != null)
                    hashCode = hashCode * 59 + this.TargetName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
