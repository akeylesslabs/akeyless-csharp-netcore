/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// DbTargetDetails
    /// </summary>
    [DataContract(Name = "DbTargetDetails")]
    public partial class DbTargetDetails : IEquatable<DbTargetDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DbTargetDetails" /> class.
        /// </summary>
        /// <param name="cloudServiceProvider">cloudServiceProvider.</param>
        /// <param name="connectionType">connectionType.</param>
        /// <param name="dbClientId">dbClientId.</param>
        /// <param name="dbClientSecret">dbClientSecret.</param>
        /// <param name="dbHostName">dbHostName.</param>
        /// <param name="dbName">dbName.</param>
        /// <param name="dbPort">dbPort.</param>
        /// <param name="dbPrivateKey">(Optional) Private Key in PEM format.</param>
        /// <param name="dbPrivateKeyPassphrase">dbPrivateKeyPassphrase.</param>
        /// <param name="dbPwd">dbPwd.</param>
        /// <param name="dbServerCertificates">(Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host&#39;s root CA set..</param>
        /// <param name="dbServerName">(Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client&#39;s handshake to support virtual hosting unless it is an IP address..</param>
        /// <param name="dbTenantId">dbTenantId.</param>
        /// <param name="dbUserName">dbUserName.</param>
        /// <param name="sfAccount">sfAccount.</param>
        /// <param name="sslConnectionCertificate">(Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field.</param>
        /// <param name="sslConnectionMode">(Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB.</param>
        public DbTargetDetails(string cloudServiceProvider = default(string), string connectionType = default(string), string dbClientId = default(string), string dbClientSecret = default(string), string dbHostName = default(string), string dbName = default(string), string dbPort = default(string), string dbPrivateKey = default(string), string dbPrivateKeyPassphrase = default(string), string dbPwd = default(string), string dbServerCertificates = default(string), string dbServerName = default(string), string dbTenantId = default(string), string dbUserName = default(string), string sfAccount = default(string), string sslConnectionCertificate = default(string), bool sslConnectionMode = default(bool))
        {
            this.CloudServiceProvider = cloudServiceProvider;
            this.ConnectionType = connectionType;
            this.DbClientId = dbClientId;
            this.DbClientSecret = dbClientSecret;
            this.DbHostName = dbHostName;
            this.DbName = dbName;
            this.DbPort = dbPort;
            this.DbPrivateKey = dbPrivateKey;
            this.DbPrivateKeyPassphrase = dbPrivateKeyPassphrase;
            this.DbPwd = dbPwd;
            this.DbServerCertificates = dbServerCertificates;
            this.DbServerName = dbServerName;
            this.DbTenantId = dbTenantId;
            this.DbUserName = dbUserName;
            this.SfAccount = sfAccount;
            this.SslConnectionCertificate = sslConnectionCertificate;
            this.SslConnectionMode = sslConnectionMode;
        }

        /// <summary>
        /// Gets or Sets CloudServiceProvider
        /// </summary>
        [DataMember(Name = "cloud_service_provider", EmitDefaultValue = false)]
        public string CloudServiceProvider { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionType
        /// </summary>
        [DataMember(Name = "connection_type", EmitDefaultValue = false)]
        public string ConnectionType { get; set; }

        /// <summary>
        /// Gets or Sets DbClientId
        /// </summary>
        [DataMember(Name = "db_client_id", EmitDefaultValue = false)]
        public string DbClientId { get; set; }

        /// <summary>
        /// Gets or Sets DbClientSecret
        /// </summary>
        [DataMember(Name = "db_client_secret", EmitDefaultValue = false)]
        public string DbClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets DbHostName
        /// </summary>
        [DataMember(Name = "db_host_name", EmitDefaultValue = false)]
        public string DbHostName { get; set; }

        /// <summary>
        /// Gets or Sets DbName
        /// </summary>
        [DataMember(Name = "db_name", EmitDefaultValue = false)]
        public string DbName { get; set; }

        /// <summary>
        /// Gets or Sets DbPort
        /// </summary>
        [DataMember(Name = "db_port", EmitDefaultValue = false)]
        public string DbPort { get; set; }

        /// <summary>
        /// (Optional) Private Key in PEM format
        /// </summary>
        /// <value>(Optional) Private Key in PEM format</value>
        [DataMember(Name = "db_private_key", EmitDefaultValue = false)]
        public string DbPrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets DbPrivateKeyPassphrase
        /// </summary>
        [DataMember(Name = "db_private_key_passphrase", EmitDefaultValue = false)]
        public string DbPrivateKeyPassphrase { get; set; }

        /// <summary>
        /// Gets or Sets DbPwd
        /// </summary>
        [DataMember(Name = "db_pwd", EmitDefaultValue = false)]
        public string DbPwd { get; set; }

        /// <summary>
        /// (Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host&#39;s root CA set.
        /// </summary>
        /// <value>(Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host&#39;s root CA set.</value>
        [DataMember(Name = "db_server_certificates", EmitDefaultValue = false)]
        public string DbServerCertificates { get; set; }

        /// <summary>
        /// (Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client&#39;s handshake to support virtual hosting unless it is an IP address.
        /// </summary>
        /// <value>(Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client&#39;s handshake to support virtual hosting unless it is an IP address.</value>
        [DataMember(Name = "db_server_name", EmitDefaultValue = false)]
        public string DbServerName { get; set; }

        /// <summary>
        /// Gets or Sets DbTenantId
        /// </summary>
        [DataMember(Name = "db_tenant_id", EmitDefaultValue = false)]
        public string DbTenantId { get; set; }

        /// <summary>
        /// Gets or Sets DbUserName
        /// </summary>
        [DataMember(Name = "db_user_name", EmitDefaultValue = false)]
        public string DbUserName { get; set; }

        /// <summary>
        /// Gets or Sets SfAccount
        /// </summary>
        [DataMember(Name = "sf_account", EmitDefaultValue = false)]
        public string SfAccount { get; set; }

        /// <summary>
        /// (Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field
        /// </summary>
        /// <value>(Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field</value>
        [DataMember(Name = "ssl_connection_certificate", EmitDefaultValue = false)]
        public string SslConnectionCertificate { get; set; }

        /// <summary>
        /// (Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB
        /// </summary>
        /// <value>(Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB</value>
        [DataMember(Name = "ssl_connection_mode", EmitDefaultValue = true)]
        public bool SslConnectionMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DbTargetDetails {\n");
            sb.Append("  CloudServiceProvider: ").Append(CloudServiceProvider).Append("\n");
            sb.Append("  ConnectionType: ").Append(ConnectionType).Append("\n");
            sb.Append("  DbClientId: ").Append(DbClientId).Append("\n");
            sb.Append("  DbClientSecret: ").Append(DbClientSecret).Append("\n");
            sb.Append("  DbHostName: ").Append(DbHostName).Append("\n");
            sb.Append("  DbName: ").Append(DbName).Append("\n");
            sb.Append("  DbPort: ").Append(DbPort).Append("\n");
            sb.Append("  DbPrivateKey: ").Append(DbPrivateKey).Append("\n");
            sb.Append("  DbPrivateKeyPassphrase: ").Append(DbPrivateKeyPassphrase).Append("\n");
            sb.Append("  DbPwd: ").Append(DbPwd).Append("\n");
            sb.Append("  DbServerCertificates: ").Append(DbServerCertificates).Append("\n");
            sb.Append("  DbServerName: ").Append(DbServerName).Append("\n");
            sb.Append("  DbTenantId: ").Append(DbTenantId).Append("\n");
            sb.Append("  DbUserName: ").Append(DbUserName).Append("\n");
            sb.Append("  SfAccount: ").Append(SfAccount).Append("\n");
            sb.Append("  SslConnectionCertificate: ").Append(SslConnectionCertificate).Append("\n");
            sb.Append("  SslConnectionMode: ").Append(SslConnectionMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DbTargetDetails);
        }

        /// <summary>
        /// Returns true if DbTargetDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of DbTargetDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DbTargetDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CloudServiceProvider == input.CloudServiceProvider ||
                    (this.CloudServiceProvider != null &&
                    this.CloudServiceProvider.Equals(input.CloudServiceProvider))
                ) && 
                (
                    this.ConnectionType == input.ConnectionType ||
                    (this.ConnectionType != null &&
                    this.ConnectionType.Equals(input.ConnectionType))
                ) && 
                (
                    this.DbClientId == input.DbClientId ||
                    (this.DbClientId != null &&
                    this.DbClientId.Equals(input.DbClientId))
                ) && 
                (
                    this.DbClientSecret == input.DbClientSecret ||
                    (this.DbClientSecret != null &&
                    this.DbClientSecret.Equals(input.DbClientSecret))
                ) && 
                (
                    this.DbHostName == input.DbHostName ||
                    (this.DbHostName != null &&
                    this.DbHostName.Equals(input.DbHostName))
                ) && 
                (
                    this.DbName == input.DbName ||
                    (this.DbName != null &&
                    this.DbName.Equals(input.DbName))
                ) && 
                (
                    this.DbPort == input.DbPort ||
                    (this.DbPort != null &&
                    this.DbPort.Equals(input.DbPort))
                ) && 
                (
                    this.DbPrivateKey == input.DbPrivateKey ||
                    (this.DbPrivateKey != null &&
                    this.DbPrivateKey.Equals(input.DbPrivateKey))
                ) && 
                (
                    this.DbPrivateKeyPassphrase == input.DbPrivateKeyPassphrase ||
                    (this.DbPrivateKeyPassphrase != null &&
                    this.DbPrivateKeyPassphrase.Equals(input.DbPrivateKeyPassphrase))
                ) && 
                (
                    this.DbPwd == input.DbPwd ||
                    (this.DbPwd != null &&
                    this.DbPwd.Equals(input.DbPwd))
                ) && 
                (
                    this.DbServerCertificates == input.DbServerCertificates ||
                    (this.DbServerCertificates != null &&
                    this.DbServerCertificates.Equals(input.DbServerCertificates))
                ) && 
                (
                    this.DbServerName == input.DbServerName ||
                    (this.DbServerName != null &&
                    this.DbServerName.Equals(input.DbServerName))
                ) && 
                (
                    this.DbTenantId == input.DbTenantId ||
                    (this.DbTenantId != null &&
                    this.DbTenantId.Equals(input.DbTenantId))
                ) && 
                (
                    this.DbUserName == input.DbUserName ||
                    (this.DbUserName != null &&
                    this.DbUserName.Equals(input.DbUserName))
                ) && 
                (
                    this.SfAccount == input.SfAccount ||
                    (this.SfAccount != null &&
                    this.SfAccount.Equals(input.SfAccount))
                ) && 
                (
                    this.SslConnectionCertificate == input.SslConnectionCertificate ||
                    (this.SslConnectionCertificate != null &&
                    this.SslConnectionCertificate.Equals(input.SslConnectionCertificate))
                ) && 
                (
                    this.SslConnectionMode == input.SslConnectionMode ||
                    this.SslConnectionMode.Equals(input.SslConnectionMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CloudServiceProvider != null)
                {
                    hashCode = (hashCode * 59) + this.CloudServiceProvider.GetHashCode();
                }
                if (this.ConnectionType != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionType.GetHashCode();
                }
                if (this.DbClientId != null)
                {
                    hashCode = (hashCode * 59) + this.DbClientId.GetHashCode();
                }
                if (this.DbClientSecret != null)
                {
                    hashCode = (hashCode * 59) + this.DbClientSecret.GetHashCode();
                }
                if (this.DbHostName != null)
                {
                    hashCode = (hashCode * 59) + this.DbHostName.GetHashCode();
                }
                if (this.DbName != null)
                {
                    hashCode = (hashCode * 59) + this.DbName.GetHashCode();
                }
                if (this.DbPort != null)
                {
                    hashCode = (hashCode * 59) + this.DbPort.GetHashCode();
                }
                if (this.DbPrivateKey != null)
                {
                    hashCode = (hashCode * 59) + this.DbPrivateKey.GetHashCode();
                }
                if (this.DbPrivateKeyPassphrase != null)
                {
                    hashCode = (hashCode * 59) + this.DbPrivateKeyPassphrase.GetHashCode();
                }
                if (this.DbPwd != null)
                {
                    hashCode = (hashCode * 59) + this.DbPwd.GetHashCode();
                }
                if (this.DbServerCertificates != null)
                {
                    hashCode = (hashCode * 59) + this.DbServerCertificates.GetHashCode();
                }
                if (this.DbServerName != null)
                {
                    hashCode = (hashCode * 59) + this.DbServerName.GetHashCode();
                }
                if (this.DbTenantId != null)
                {
                    hashCode = (hashCode * 59) + this.DbTenantId.GetHashCode();
                }
                if (this.DbUserName != null)
                {
                    hashCode = (hashCode * 59) + this.DbUserName.GetHashCode();
                }
                if (this.SfAccount != null)
                {
                    hashCode = (hashCode * 59) + this.SfAccount.GetHashCode();
                }
                if (this.SslConnectionCertificate != null)
                {
                    hashCode = (hashCode * 59) + this.SslConnectionCertificate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SslConnectionMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
