/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// TargetCreateDB
    /// </summary>
    [DataContract(Name = "targetCreateDB")]
    public partial class TargetCreateDB : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetCreateDB" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TargetCreateDB() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetCreateDB" /> class.
        /// </summary>
        /// <param name="azureClientId">(Optional) Client id (relevant for \&quot;cloud-service-provider\&quot; only).</param>
        /// <param name="azureClientSecret">(Optional) Client secret (relevant for \&quot;cloud-service-provider\&quot; only).</param>
        /// <param name="azureTenantId">(Optional) Tenant id (relevant for \&quot;cloud-service-provider\&quot; only).</param>
        /// <param name="cloudServiceProvider">(Optional) Cloud service provider (currently only supports Azure).</param>
        /// <param name="clusterMode">Cluster Mode.</param>
        /// <param name="comment">Deprecated - use description.</param>
        /// <param name="connectionType">Type of connection to mssql database [credentials/cloud-identity/wallet/parent-target] (required) (default to &quot;credentials&quot;).</param>
        /// <param name="dbName">dbName.</param>
        /// <param name="dbServerCertificates">(Optional) DB server certificates.</param>
        /// <param name="dbServerName">(Optional) Server name for certificate verification.</param>
        /// <param name="dbType">dbType (required).</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="host">host.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="key">The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="maxVersions">Set the maximum number of versions, limited by the account settings defaults..</param>
        /// <param name="mongodbAtlas">mongodbAtlas.</param>
        /// <param name="mongodbAtlasApiPrivateKey">MongoDB Atlas private key.</param>
        /// <param name="mongodbAtlasApiPublicKey">MongoDB Atlas public key.</param>
        /// <param name="mongodbAtlasProjectId">MongoDB Atlas project ID.</param>
        /// <param name="mongodbDefaultAuthDb">MongoDB server default authentication database.</param>
        /// <param name="mongodbUriOptions">MongoDB server URI options.</param>
        /// <param name="name">Target name (required).</param>
        /// <param name="oracleServiceName">Oracle db service name.</param>
        /// <param name="oracleWalletLoginType">Oracle Wallet login type (password/mtls).</param>
        /// <param name="oracleWalletP12FileData">Oracle wallet p12 file data in base64.</param>
        /// <param name="oracleWalletSsoFileData">Oracle wallet sso file data in base64.</param>
        /// <param name="parentTargetName">Name of the parent target, relevant only when connection-type is parent-target.</param>
        /// <param name="port">port.</param>
        /// <param name="pwd">pwd.</param>
        /// <param name="snowflakeAccount">snowflakeAccount.</param>
        /// <param name="snowflakeApiPrivateKey">RSA Private key (base64 encoded).</param>
        /// <param name="snowflakeApiPrivateKeyPassword">The Private key passphrase.</param>
        /// <param name="ssl">Enable/Disable SSL [true/false] (default to false).</param>
        /// <param name="sslCertificate">SSL connection certificate.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userName">userName.</param>
        public TargetCreateDB(string azureClientId = default(string), string azureClientSecret = default(string), string azureTenantId = default(string), string cloudServiceProvider = default(string), bool clusterMode = default(bool), string comment = default(string), string connectionType = @"credentials", string dbName = default(string), string dbServerCertificates = default(string), string dbServerName = default(string), string dbType = default(string), string description = default(string), string host = default(string), bool json = false, string key = default(string), string maxVersions = default(string), bool mongodbAtlas = default(bool), string mongodbAtlasApiPrivateKey = default(string), string mongodbAtlasApiPublicKey = default(string), string mongodbAtlasProjectId = default(string), string mongodbDefaultAuthDb = default(string), string mongodbUriOptions = default(string), string name = default(string), string oracleServiceName = default(string), string oracleWalletLoginType = default(string), string oracleWalletP12FileData = default(string), string oracleWalletSsoFileData = default(string), string parentTargetName = default(string), string port = default(string), string pwd = default(string), string snowflakeAccount = default(string), string snowflakeApiPrivateKey = default(string), string snowflakeApiPrivateKeyPassword = default(string), bool ssl = false, string sslCertificate = default(string), string token = default(string), string uidToken = default(string), string userName = default(string))
        {
            // to ensure "connectionType" is required (not null)
            if (connectionType == null)
            {
                throw new ArgumentNullException("connectionType is a required property for TargetCreateDB and cannot be null");
            }
            this.ConnectionType = connectionType;
            // to ensure "dbType" is required (not null)
            if (dbType == null)
            {
                throw new ArgumentNullException("dbType is a required property for TargetCreateDB and cannot be null");
            }
            this.DbType = dbType;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TargetCreateDB and cannot be null");
            }
            this.Name = name;
            this.AzureClientId = azureClientId;
            this.AzureClientSecret = azureClientSecret;
            this.AzureTenantId = azureTenantId;
            this.CloudServiceProvider = cloudServiceProvider;
            this.ClusterMode = clusterMode;
            this.Comment = comment;
            this.DbName = dbName;
            this.DbServerCertificates = dbServerCertificates;
            this.DbServerName = dbServerName;
            this.Description = description;
            this.Host = host;
            this.Json = json;
            this.Key = key;
            this.MaxVersions = maxVersions;
            this.MongodbAtlas = mongodbAtlas;
            this.MongodbAtlasApiPrivateKey = mongodbAtlasApiPrivateKey;
            this.MongodbAtlasApiPublicKey = mongodbAtlasApiPublicKey;
            this.MongodbAtlasProjectId = mongodbAtlasProjectId;
            this.MongodbDefaultAuthDb = mongodbDefaultAuthDb;
            this.MongodbUriOptions = mongodbUriOptions;
            this.OracleServiceName = oracleServiceName;
            this.OracleWalletLoginType = oracleWalletLoginType;
            this.OracleWalletP12FileData = oracleWalletP12FileData;
            this.OracleWalletSsoFileData = oracleWalletSsoFileData;
            this.ParentTargetName = parentTargetName;
            this.Port = port;
            this.Pwd = pwd;
            this.SnowflakeAccount = snowflakeAccount;
            this.SnowflakeApiPrivateKey = snowflakeApiPrivateKey;
            this.SnowflakeApiPrivateKeyPassword = snowflakeApiPrivateKeyPassword;
            this.Ssl = ssl;
            this.SslCertificate = sslCertificate;
            this.Token = token;
            this.UidToken = uidToken;
            this.UserName = userName;
        }

        /// <summary>
        /// (Optional) Client id (relevant for \&quot;cloud-service-provider\&quot; only)
        /// </summary>
        /// <value>(Optional) Client id (relevant for \&quot;cloud-service-provider\&quot; only)</value>
        [DataMember(Name = "azure-client-id", EmitDefaultValue = false)]
        public string AzureClientId { get; set; }

        /// <summary>
        /// (Optional) Client secret (relevant for \&quot;cloud-service-provider\&quot; only)
        /// </summary>
        /// <value>(Optional) Client secret (relevant for \&quot;cloud-service-provider\&quot; only)</value>
        [DataMember(Name = "azure-client-secret", EmitDefaultValue = false)]
        public string AzureClientSecret { get; set; }

        /// <summary>
        /// (Optional) Tenant id (relevant for \&quot;cloud-service-provider\&quot; only)
        /// </summary>
        /// <value>(Optional) Tenant id (relevant for \&quot;cloud-service-provider\&quot; only)</value>
        [DataMember(Name = "azure-tenant-id", EmitDefaultValue = false)]
        public string AzureTenantId { get; set; }

        /// <summary>
        /// (Optional) Cloud service provider (currently only supports Azure)
        /// </summary>
        /// <value>(Optional) Cloud service provider (currently only supports Azure)</value>
        [DataMember(Name = "cloud-service-provider", EmitDefaultValue = false)]
        public string CloudServiceProvider { get; set; }

        /// <summary>
        /// Cluster Mode
        /// </summary>
        /// <value>Cluster Mode</value>
        [DataMember(Name = "cluster-mode", EmitDefaultValue = true)]
        public bool ClusterMode { get; set; }

        /// <summary>
        /// Deprecated - use description
        /// </summary>
        /// <value>Deprecated - use description</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Type of connection to mssql database [credentials/cloud-identity/wallet/parent-target]
        /// </summary>
        /// <value>Type of connection to mssql database [credentials/cloud-identity/wallet/parent-target]</value>
        [DataMember(Name = "connection-type", IsRequired = true, EmitDefaultValue = true)]
        public string ConnectionType { get; set; }

        /// <summary>
        /// Gets or Sets DbName
        /// </summary>
        [DataMember(Name = "db-name", EmitDefaultValue = false)]
        public string DbName { get; set; }

        /// <summary>
        /// (Optional) DB server certificates
        /// </summary>
        /// <value>(Optional) DB server certificates</value>
        [DataMember(Name = "db-server-certificates", EmitDefaultValue = false)]
        public string DbServerCertificates { get; set; }

        /// <summary>
        /// (Optional) Server name for certificate verification
        /// </summary>
        /// <value>(Optional) Server name for certificate verification</value>
        [DataMember(Name = "db-server-name", EmitDefaultValue = false)]
        public string DbServerName { get; set; }

        /// <summary>
        /// Gets or Sets DbType
        /// </summary>
        [DataMember(Name = "db-type", IsRequired = true, EmitDefaultValue = true)]
        public string DbType { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Set the maximum number of versions, limited by the account settings defaults.
        /// </summary>
        /// <value>Set the maximum number of versions, limited by the account settings defaults.</value>
        [DataMember(Name = "max-versions", EmitDefaultValue = false)]
        public string MaxVersions { get; set; }

        /// <summary>
        /// Gets or Sets MongodbAtlas
        /// </summary>
        [DataMember(Name = "mongodb-atlas", EmitDefaultValue = true)]
        public bool MongodbAtlas { get; set; }

        /// <summary>
        /// MongoDB Atlas private key
        /// </summary>
        /// <value>MongoDB Atlas private key</value>
        [DataMember(Name = "mongodb-atlas-api-private-key", EmitDefaultValue = false)]
        public string MongodbAtlasApiPrivateKey { get; set; }

        /// <summary>
        /// MongoDB Atlas public key
        /// </summary>
        /// <value>MongoDB Atlas public key</value>
        [DataMember(Name = "mongodb-atlas-api-public-key", EmitDefaultValue = false)]
        public string MongodbAtlasApiPublicKey { get; set; }

        /// <summary>
        /// MongoDB Atlas project ID
        /// </summary>
        /// <value>MongoDB Atlas project ID</value>
        [DataMember(Name = "mongodb-atlas-project-id", EmitDefaultValue = false)]
        public string MongodbAtlasProjectId { get; set; }

        /// <summary>
        /// MongoDB server default authentication database
        /// </summary>
        /// <value>MongoDB server default authentication database</value>
        [DataMember(Name = "mongodb-default-auth-db", EmitDefaultValue = false)]
        public string MongodbDefaultAuthDb { get; set; }

        /// <summary>
        /// MongoDB server URI options
        /// </summary>
        /// <value>MongoDB server URI options</value>
        [DataMember(Name = "mongodb-uri-options", EmitDefaultValue = false)]
        public string MongodbUriOptions { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Oracle db service name
        /// </summary>
        /// <value>Oracle db service name</value>
        [DataMember(Name = "oracle-service-name", EmitDefaultValue = false)]
        public string OracleServiceName { get; set; }

        /// <summary>
        /// Oracle Wallet login type (password/mtls)
        /// </summary>
        /// <value>Oracle Wallet login type (password/mtls)</value>
        [DataMember(Name = "oracle-wallet-login-type", EmitDefaultValue = false)]
        public string OracleWalletLoginType { get; set; }

        /// <summary>
        /// Oracle wallet p12 file data in base64
        /// </summary>
        /// <value>Oracle wallet p12 file data in base64</value>
        [DataMember(Name = "oracle-wallet-p12-file-data", EmitDefaultValue = false)]
        public string OracleWalletP12FileData { get; set; }

        /// <summary>
        /// Oracle wallet sso file data in base64
        /// </summary>
        /// <value>Oracle wallet sso file data in base64</value>
        [DataMember(Name = "oracle-wallet-sso-file-data", EmitDefaultValue = false)]
        public string OracleWalletSsoFileData { get; set; }

        /// <summary>
        /// Name of the parent target, relevant only when connection-type is parent-target
        /// </summary>
        /// <value>Name of the parent target, relevant only when connection-type is parent-target</value>
        [DataMember(Name = "parent-target-name", EmitDefaultValue = false)]
        public string ParentTargetName { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public string Port { get; set; }

        /// <summary>
        /// Gets or Sets Pwd
        /// </summary>
        [DataMember(Name = "pwd", EmitDefaultValue = false)]
        public string Pwd { get; set; }

        /// <summary>
        /// Gets or Sets SnowflakeAccount
        /// </summary>
        [DataMember(Name = "snowflake-account", EmitDefaultValue = false)]
        public string SnowflakeAccount { get; set; }

        /// <summary>
        /// RSA Private key (base64 encoded)
        /// </summary>
        /// <value>RSA Private key (base64 encoded)</value>
        [DataMember(Name = "snowflake-api-private-key", EmitDefaultValue = false)]
        public string SnowflakeApiPrivateKey { get; set; }

        /// <summary>
        /// The Private key passphrase
        /// </summary>
        /// <value>The Private key passphrase</value>
        [DataMember(Name = "snowflake-api-private-key-password", EmitDefaultValue = false)]
        public string SnowflakeApiPrivateKeyPassword { get; set; }

        /// <summary>
        /// Enable/Disable SSL [true/false]
        /// </summary>
        /// <value>Enable/Disable SSL [true/false]</value>
        [DataMember(Name = "ssl", EmitDefaultValue = true)]
        public bool Ssl { get; set; }

        /// <summary>
        /// SSL connection certificate
        /// </summary>
        /// <value>SSL connection certificate</value>
        [DataMember(Name = "ssl-certificate", EmitDefaultValue = false)]
        public string SslCertificate { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "user-name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TargetCreateDB {\n");
            sb.Append("  AzureClientId: ").Append(AzureClientId).Append("\n");
            sb.Append("  AzureClientSecret: ").Append(AzureClientSecret).Append("\n");
            sb.Append("  AzureTenantId: ").Append(AzureTenantId).Append("\n");
            sb.Append("  CloudServiceProvider: ").Append(CloudServiceProvider).Append("\n");
            sb.Append("  ClusterMode: ").Append(ClusterMode).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ConnectionType: ").Append(ConnectionType).Append("\n");
            sb.Append("  DbName: ").Append(DbName).Append("\n");
            sb.Append("  DbServerCertificates: ").Append(DbServerCertificates).Append("\n");
            sb.Append("  DbServerName: ").Append(DbServerName).Append("\n");
            sb.Append("  DbType: ").Append(DbType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  MaxVersions: ").Append(MaxVersions).Append("\n");
            sb.Append("  MongodbAtlas: ").Append(MongodbAtlas).Append("\n");
            sb.Append("  MongodbAtlasApiPrivateKey: ").Append(MongodbAtlasApiPrivateKey).Append("\n");
            sb.Append("  MongodbAtlasApiPublicKey: ").Append(MongodbAtlasApiPublicKey).Append("\n");
            sb.Append("  MongodbAtlasProjectId: ").Append(MongodbAtlasProjectId).Append("\n");
            sb.Append("  MongodbDefaultAuthDb: ").Append(MongodbDefaultAuthDb).Append("\n");
            sb.Append("  MongodbUriOptions: ").Append(MongodbUriOptions).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OracleServiceName: ").Append(OracleServiceName).Append("\n");
            sb.Append("  OracleWalletLoginType: ").Append(OracleWalletLoginType).Append("\n");
            sb.Append("  OracleWalletP12FileData: ").Append(OracleWalletP12FileData).Append("\n");
            sb.Append("  OracleWalletSsoFileData: ").Append(OracleWalletSsoFileData).Append("\n");
            sb.Append("  ParentTargetName: ").Append(ParentTargetName).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Pwd: ").Append(Pwd).Append("\n");
            sb.Append("  SnowflakeAccount: ").Append(SnowflakeAccount).Append("\n");
            sb.Append("  SnowflakeApiPrivateKey: ").Append(SnowflakeApiPrivateKey).Append("\n");
            sb.Append("  SnowflakeApiPrivateKeyPassword: ").Append(SnowflakeApiPrivateKeyPassword).Append("\n");
            sb.Append("  Ssl: ").Append(Ssl).Append("\n");
            sb.Append("  SslCertificate: ").Append(SslCertificate).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
