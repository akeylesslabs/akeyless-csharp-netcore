/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CertificateChainInfo
    /// </summary>
    [DataContract(Name = "CertificateChainInfo")]
    public partial class CertificateChainInfo : IEquatable<CertificateChainInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateChainInfo" /> class.
        /// </summary>
        /// <param name="autoRenewCertificate">autoRenewCertificate.</param>
        /// <param name="certificateChain">certificateChain.</param>
        /// <param name="certificateFormat">certificateFormat.</param>
        /// <param name="certificateHasPrivateKey">certificateHasPrivateKey.</param>
        /// <param name="certificateIssuerGwClusterUrl">certificateIssuerGwClusterUrl.</param>
        /// <param name="certificateIssuerItemId">certificateIssuerItemId.</param>
        /// <param name="certificateIssuerName">certificateIssuerName.</param>
        /// <param name="certificatePem">certificatePem.</param>
        /// <param name="certificateStatus">certificateStatus.</param>
        /// <param name="errorMessage">errorMessage.</param>
        /// <param name="expirationEvents">expirationEvents.</param>
        /// <param name="renewBeforeExpirationInDays">renewBeforeExpirationInDays.</param>
        public CertificateChainInfo(bool autoRenewCertificate = default(bool), List<CertificateInfo> certificateChain = default(List<CertificateInfo>), string certificateFormat = default(string), bool certificateHasPrivateKey = default(bool), string certificateIssuerGwClusterUrl = default(string), long certificateIssuerItemId = default(long), string certificateIssuerName = default(string), string certificatePem = default(string), string certificateStatus = default(string), string errorMessage = default(string), List<CertificateExpirationEvent> expirationEvents = default(List<CertificateExpirationEvent>), long renewBeforeExpirationInDays = default(long))
        {
            this.AutoRenewCertificate = autoRenewCertificate;
            this.CertificateChain = certificateChain;
            this.CertificateFormat = certificateFormat;
            this.CertificateHasPrivateKey = certificateHasPrivateKey;
            this.CertificateIssuerGwClusterUrl = certificateIssuerGwClusterUrl;
            this.CertificateIssuerItemId = certificateIssuerItemId;
            this.CertificateIssuerName = certificateIssuerName;
            this.CertificatePem = certificatePem;
            this.CertificateStatus = certificateStatus;
            this.ErrorMessage = errorMessage;
            this.ExpirationEvents = expirationEvents;
            this.RenewBeforeExpirationInDays = renewBeforeExpirationInDays;
        }

        /// <summary>
        /// Gets or Sets AutoRenewCertificate
        /// </summary>
        [DataMember(Name = "auto_renew_certificate", EmitDefaultValue = true)]
        public bool AutoRenewCertificate { get; set; }

        /// <summary>
        /// Gets or Sets CertificateChain
        /// </summary>
        [DataMember(Name = "certificate_chain", EmitDefaultValue = false)]
        public List<CertificateInfo> CertificateChain { get; set; }

        /// <summary>
        /// Gets or Sets CertificateFormat
        /// </summary>
        [DataMember(Name = "certificate_format", EmitDefaultValue = false)]
        public string CertificateFormat { get; set; }

        /// <summary>
        /// Gets or Sets CertificateHasPrivateKey
        /// </summary>
        [DataMember(Name = "certificate_has_private_key", EmitDefaultValue = true)]
        public bool CertificateHasPrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets CertificateIssuerGwClusterUrl
        /// </summary>
        [DataMember(Name = "certificate_issuer_gw_cluster_url", EmitDefaultValue = false)]
        public string CertificateIssuerGwClusterUrl { get; set; }

        /// <summary>
        /// Gets or Sets CertificateIssuerItemId
        /// </summary>
        [DataMember(Name = "certificate_issuer_item_id", EmitDefaultValue = false)]
        public long CertificateIssuerItemId { get; set; }

        /// <summary>
        /// Gets or Sets CertificateIssuerName
        /// </summary>
        [DataMember(Name = "certificate_issuer_name", EmitDefaultValue = false)]
        public string CertificateIssuerName { get; set; }

        /// <summary>
        /// Gets or Sets CertificatePem
        /// </summary>
        [DataMember(Name = "certificate_pem", EmitDefaultValue = false)]
        public string CertificatePem { get; set; }

        /// <summary>
        /// Gets or Sets CertificateStatus
        /// </summary>
        [DataMember(Name = "certificate_status", EmitDefaultValue = false)]
        public string CertificateStatus { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name = "error_message", EmitDefaultValue = false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationEvents
        /// </summary>
        [DataMember(Name = "expiration_events", EmitDefaultValue = false)]
        public List<CertificateExpirationEvent> ExpirationEvents { get; set; }

        /// <summary>
        /// Gets or Sets RenewBeforeExpirationInDays
        /// </summary>
        [DataMember(Name = "renew_before_expiration_in_days", EmitDefaultValue = false)]
        public long RenewBeforeExpirationInDays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertificateChainInfo {\n");
            sb.Append("  AutoRenewCertificate: ").Append(AutoRenewCertificate).Append("\n");
            sb.Append("  CertificateChain: ").Append(CertificateChain).Append("\n");
            sb.Append("  CertificateFormat: ").Append(CertificateFormat).Append("\n");
            sb.Append("  CertificateHasPrivateKey: ").Append(CertificateHasPrivateKey).Append("\n");
            sb.Append("  CertificateIssuerGwClusterUrl: ").Append(CertificateIssuerGwClusterUrl).Append("\n");
            sb.Append("  CertificateIssuerItemId: ").Append(CertificateIssuerItemId).Append("\n");
            sb.Append("  CertificateIssuerName: ").Append(CertificateIssuerName).Append("\n");
            sb.Append("  CertificatePem: ").Append(CertificatePem).Append("\n");
            sb.Append("  CertificateStatus: ").Append(CertificateStatus).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ExpirationEvents: ").Append(ExpirationEvents).Append("\n");
            sb.Append("  RenewBeforeExpirationInDays: ").Append(RenewBeforeExpirationInDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificateChainInfo);
        }

        /// <summary>
        /// Returns true if CertificateChainInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificateChainInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateChainInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AutoRenewCertificate == input.AutoRenewCertificate ||
                    this.AutoRenewCertificate.Equals(input.AutoRenewCertificate)
                ) && 
                (
                    this.CertificateChain == input.CertificateChain ||
                    this.CertificateChain != null &&
                    input.CertificateChain != null &&
                    this.CertificateChain.SequenceEqual(input.CertificateChain)
                ) && 
                (
                    this.CertificateFormat == input.CertificateFormat ||
                    (this.CertificateFormat != null &&
                    this.CertificateFormat.Equals(input.CertificateFormat))
                ) && 
                (
                    this.CertificateHasPrivateKey == input.CertificateHasPrivateKey ||
                    this.CertificateHasPrivateKey.Equals(input.CertificateHasPrivateKey)
                ) && 
                (
                    this.CertificateIssuerGwClusterUrl == input.CertificateIssuerGwClusterUrl ||
                    (this.CertificateIssuerGwClusterUrl != null &&
                    this.CertificateIssuerGwClusterUrl.Equals(input.CertificateIssuerGwClusterUrl))
                ) && 
                (
                    this.CertificateIssuerItemId == input.CertificateIssuerItemId ||
                    this.CertificateIssuerItemId.Equals(input.CertificateIssuerItemId)
                ) && 
                (
                    this.CertificateIssuerName == input.CertificateIssuerName ||
                    (this.CertificateIssuerName != null &&
                    this.CertificateIssuerName.Equals(input.CertificateIssuerName))
                ) && 
                (
                    this.CertificatePem == input.CertificatePem ||
                    (this.CertificatePem != null &&
                    this.CertificatePem.Equals(input.CertificatePem))
                ) && 
                (
                    this.CertificateStatus == input.CertificateStatus ||
                    (this.CertificateStatus != null &&
                    this.CertificateStatus.Equals(input.CertificateStatus))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.ExpirationEvents == input.ExpirationEvents ||
                    this.ExpirationEvents != null &&
                    input.ExpirationEvents != null &&
                    this.ExpirationEvents.SequenceEqual(input.ExpirationEvents)
                ) && 
                (
                    this.RenewBeforeExpirationInDays == input.RenewBeforeExpirationInDays ||
                    this.RenewBeforeExpirationInDays.Equals(input.RenewBeforeExpirationInDays)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AutoRenewCertificate.GetHashCode();
                if (this.CertificateChain != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateChain.GetHashCode();
                }
                if (this.CertificateFormat != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateFormat.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CertificateHasPrivateKey.GetHashCode();
                if (this.CertificateIssuerGwClusterUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateIssuerGwClusterUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CertificateIssuerItemId.GetHashCode();
                if (this.CertificateIssuerName != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateIssuerName.GetHashCode();
                }
                if (this.CertificatePem != null)
                {
                    hashCode = (hashCode * 59) + this.CertificatePem.GetHashCode();
                }
                if (this.CertificateStatus != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateStatus.GetHashCode();
                }
                if (this.ErrorMessage != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMessage.GetHashCode();
                }
                if (this.ExpirationEvents != null)
                {
                    hashCode = (hashCode * 59) + this.ExpirationEvents.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RenewBeforeExpirationInDays.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
