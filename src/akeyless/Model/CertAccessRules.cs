/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CertAccessRules
    /// </summary>
    [DataContract(Name = "CertAccessRules")]
    public partial class CertAccessRules : IEquatable<CertAccessRules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertAccessRules" /> class.
        /// </summary>
        /// <param name="boundCommonNames">A list of names. At least one must exist in the Common Name. Supports globbing..</param>
        /// <param name="boundDnsSans">A list of DNS names. At least one must exist in the SANs. Supports globbing..</param>
        /// <param name="boundEmailSans">A list of Email Addresses. At least one must exist in the SANs. Supports globbing..</param>
        /// <param name="boundExtensions">A list of extensions formatted as \&quot;oid:value\&quot;. Expects the extension value to be some type of ASN1 encoded string. All values must match. Supports globbing on \&quot;value\&quot;..</param>
        /// <param name="boundOrganizationalUnits">A list of Organizational Units names. At least one must exist in the OU field..</param>
        /// <param name="boundUriSans">A list of URIs. At least one must exist in the SANs. Supports globbing..</param>
        /// <param name="certificate">Base64 encdoed PEM certificate.</param>
        /// <param name="revokedCertIds">A list of revoked cert ids.</param>
        /// <param name="uniqueIdentifier">A unique identifier to distinguish different users.</param>
        public CertAccessRules(List<string> boundCommonNames = default(List<string>), List<string> boundDnsSans = default(List<string>), List<string> boundEmailSans = default(List<string>), List<string> boundExtensions = default(List<string>), List<string> boundOrganizationalUnits = default(List<string>), List<string> boundUriSans = default(List<string>), string certificate = default(string), List<string> revokedCertIds = default(List<string>), string uniqueIdentifier = default(string))
        {
            this.BoundCommonNames = boundCommonNames;
            this.BoundDnsSans = boundDnsSans;
            this.BoundEmailSans = boundEmailSans;
            this.BoundExtensions = boundExtensions;
            this.BoundOrganizationalUnits = boundOrganizationalUnits;
            this.BoundUriSans = boundUriSans;
            this.Certificate = certificate;
            this.RevokedCertIds = revokedCertIds;
            this.UniqueIdentifier = uniqueIdentifier;
        }

        /// <summary>
        /// A list of names. At least one must exist in the Common Name. Supports globbing.
        /// </summary>
        /// <value>A list of names. At least one must exist in the Common Name. Supports globbing.</value>
        [DataMember(Name = "bound_common_names", EmitDefaultValue = false)]
        public List<string> BoundCommonNames { get; set; }

        /// <summary>
        /// A list of DNS names. At least one must exist in the SANs. Supports globbing.
        /// </summary>
        /// <value>A list of DNS names. At least one must exist in the SANs. Supports globbing.</value>
        [DataMember(Name = "bound_dns_sans", EmitDefaultValue = false)]
        public List<string> BoundDnsSans { get; set; }

        /// <summary>
        /// A list of Email Addresses. At least one must exist in the SANs. Supports globbing.
        /// </summary>
        /// <value>A list of Email Addresses. At least one must exist in the SANs. Supports globbing.</value>
        [DataMember(Name = "bound_email_sans", EmitDefaultValue = false)]
        public List<string> BoundEmailSans { get; set; }

        /// <summary>
        /// A list of extensions formatted as \&quot;oid:value\&quot;. Expects the extension value to be some type of ASN1 encoded string. All values must match. Supports globbing on \&quot;value\&quot;.
        /// </summary>
        /// <value>A list of extensions formatted as \&quot;oid:value\&quot;. Expects the extension value to be some type of ASN1 encoded string. All values must match. Supports globbing on \&quot;value\&quot;.</value>
        [DataMember(Name = "bound_extensions", EmitDefaultValue = false)]
        public List<string> BoundExtensions { get; set; }

        /// <summary>
        /// A list of Organizational Units names. At least one must exist in the OU field.
        /// </summary>
        /// <value>A list of Organizational Units names. At least one must exist in the OU field.</value>
        [DataMember(Name = "bound_organizational_units", EmitDefaultValue = false)]
        public List<string> BoundOrganizationalUnits { get; set; }

        /// <summary>
        /// A list of URIs. At least one must exist in the SANs. Supports globbing.
        /// </summary>
        /// <value>A list of URIs. At least one must exist in the SANs. Supports globbing.</value>
        [DataMember(Name = "bound_uri_sans", EmitDefaultValue = false)]
        public List<string> BoundUriSans { get; set; }

        /// <summary>
        /// Base64 encdoed PEM certificate
        /// </summary>
        /// <value>Base64 encdoed PEM certificate</value>
        [DataMember(Name = "certificate", EmitDefaultValue = false)]
        public string Certificate { get; set; }

        /// <summary>
        /// A list of revoked cert ids
        /// </summary>
        /// <value>A list of revoked cert ids</value>
        [DataMember(Name = "revoked_cert_ids", EmitDefaultValue = false)]
        public List<string> RevokedCertIds { get; set; }

        /// <summary>
        /// A unique identifier to distinguish different users
        /// </summary>
        /// <value>A unique identifier to distinguish different users</value>
        [DataMember(Name = "unique_identifier", EmitDefaultValue = false)]
        public string UniqueIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertAccessRules {\n");
            sb.Append("  BoundCommonNames: ").Append(BoundCommonNames).Append("\n");
            sb.Append("  BoundDnsSans: ").Append(BoundDnsSans).Append("\n");
            sb.Append("  BoundEmailSans: ").Append(BoundEmailSans).Append("\n");
            sb.Append("  BoundExtensions: ").Append(BoundExtensions).Append("\n");
            sb.Append("  BoundOrganizationalUnits: ").Append(BoundOrganizationalUnits).Append("\n");
            sb.Append("  BoundUriSans: ").Append(BoundUriSans).Append("\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("  RevokedCertIds: ").Append(RevokedCertIds).Append("\n");
            sb.Append("  UniqueIdentifier: ").Append(UniqueIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertAccessRules);
        }

        /// <summary>
        /// Returns true if CertAccessRules instances are equal
        /// </summary>
        /// <param name="input">Instance of CertAccessRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertAccessRules input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BoundCommonNames == input.BoundCommonNames ||
                    this.BoundCommonNames != null &&
                    input.BoundCommonNames != null &&
                    this.BoundCommonNames.SequenceEqual(input.BoundCommonNames)
                ) && 
                (
                    this.BoundDnsSans == input.BoundDnsSans ||
                    this.BoundDnsSans != null &&
                    input.BoundDnsSans != null &&
                    this.BoundDnsSans.SequenceEqual(input.BoundDnsSans)
                ) && 
                (
                    this.BoundEmailSans == input.BoundEmailSans ||
                    this.BoundEmailSans != null &&
                    input.BoundEmailSans != null &&
                    this.BoundEmailSans.SequenceEqual(input.BoundEmailSans)
                ) && 
                (
                    this.BoundExtensions == input.BoundExtensions ||
                    this.BoundExtensions != null &&
                    input.BoundExtensions != null &&
                    this.BoundExtensions.SequenceEqual(input.BoundExtensions)
                ) && 
                (
                    this.BoundOrganizationalUnits == input.BoundOrganizationalUnits ||
                    this.BoundOrganizationalUnits != null &&
                    input.BoundOrganizationalUnits != null &&
                    this.BoundOrganizationalUnits.SequenceEqual(input.BoundOrganizationalUnits)
                ) && 
                (
                    this.BoundUriSans == input.BoundUriSans ||
                    this.BoundUriSans != null &&
                    input.BoundUriSans != null &&
                    this.BoundUriSans.SequenceEqual(input.BoundUriSans)
                ) && 
                (
                    this.Certificate == input.Certificate ||
                    (this.Certificate != null &&
                    this.Certificate.Equals(input.Certificate))
                ) && 
                (
                    this.RevokedCertIds == input.RevokedCertIds ||
                    this.RevokedCertIds != null &&
                    input.RevokedCertIds != null &&
                    this.RevokedCertIds.SequenceEqual(input.RevokedCertIds)
                ) && 
                (
                    this.UniqueIdentifier == input.UniqueIdentifier ||
                    (this.UniqueIdentifier != null &&
                    this.UniqueIdentifier.Equals(input.UniqueIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BoundCommonNames != null)
                {
                    hashCode = (hashCode * 59) + this.BoundCommonNames.GetHashCode();
                }
                if (this.BoundDnsSans != null)
                {
                    hashCode = (hashCode * 59) + this.BoundDnsSans.GetHashCode();
                }
                if (this.BoundEmailSans != null)
                {
                    hashCode = (hashCode * 59) + this.BoundEmailSans.GetHashCode();
                }
                if (this.BoundExtensions != null)
                {
                    hashCode = (hashCode * 59) + this.BoundExtensions.GetHashCode();
                }
                if (this.BoundOrganizationalUnits != null)
                {
                    hashCode = (hashCode * 59) + this.BoundOrganizationalUnits.GetHashCode();
                }
                if (this.BoundUriSans != null)
                {
                    hashCode = (hashCode * 59) + this.BoundUriSans.GetHashCode();
                }
                if (this.Certificate != null)
                {
                    hashCode = (hashCode * 59) + this.Certificate.GetHashCode();
                }
                if (this.RevokedCertIds != null)
                {
                    hashCode = (hashCode * 59) + this.RevokedCertIds.GetHashCode();
                }
                if (this.UniqueIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.UniqueIdentifier.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
