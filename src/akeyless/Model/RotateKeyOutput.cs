/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// RotateKeyOutput defines output of RotateKey operation
    /// </summary>
    [DataContract(Name = "RotateKeyOutput")]
    public partial class RotateKeyOutput : IEquatable<RotateKeyOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RotateKeyOutput" /> class.
        /// </summary>
        /// <param name="classicKeyGwUrl">classicKeyGwUrl.</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="newItemVersion">newItemVersion.</param>
        /// <param name="nextRotationDate">nextRotationDate.</param>
        public RotateKeyOutput(string classicKeyGwUrl = default(string), string itemType = default(string), int newItemVersion = default(int), DateTime nextRotationDate = default(DateTime))
        {
            this.ClassicKeyGwUrl = classicKeyGwUrl;
            this.ItemType = itemType;
            this.NewItemVersion = newItemVersion;
            this.NextRotationDate = nextRotationDate;
        }

        /// <summary>
        /// Gets or Sets ClassicKeyGwUrl
        /// </summary>
        [DataMember(Name = "classic_key_gw_url", EmitDefaultValue = false)]
        public string ClassicKeyGwUrl { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "item_type", EmitDefaultValue = false)]
        public string ItemType { get; set; }

        /// <summary>
        /// Gets or Sets NewItemVersion
        /// </summary>
        [DataMember(Name = "new_item_version", EmitDefaultValue = false)]
        public int NewItemVersion { get; set; }

        /// <summary>
        /// Gets or Sets NextRotationDate
        /// </summary>
        [DataMember(Name = "next_rotation_date", EmitDefaultValue = false)]
        public DateTime NextRotationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RotateKeyOutput {\n");
            sb.Append("  ClassicKeyGwUrl: ").Append(ClassicKeyGwUrl).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  NewItemVersion: ").Append(NewItemVersion).Append("\n");
            sb.Append("  NextRotationDate: ").Append(NextRotationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RotateKeyOutput);
        }

        /// <summary>
        /// Returns true if RotateKeyOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of RotateKeyOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RotateKeyOutput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClassicKeyGwUrl == input.ClassicKeyGwUrl ||
                    (this.ClassicKeyGwUrl != null &&
                    this.ClassicKeyGwUrl.Equals(input.ClassicKeyGwUrl))
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    (this.ItemType != null &&
                    this.ItemType.Equals(input.ItemType))
                ) && 
                (
                    this.NewItemVersion == input.NewItemVersion ||
                    this.NewItemVersion.Equals(input.NewItemVersion)
                ) && 
                (
                    this.NextRotationDate == input.NextRotationDate ||
                    (this.NextRotationDate != null &&
                    this.NextRotationDate.Equals(input.NextRotationDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClassicKeyGwUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ClassicKeyGwUrl.GetHashCode();
                }
                if (this.ItemType != null)
                {
                    hashCode = (hashCode * 59) + this.ItemType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NewItemVersion.GetHashCode();
                if (this.NextRotationDate != null)
                {
                    hashCode = (hashCode * 59) + this.NextRotationDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
