/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateProducerGithub is a command that creates github producer [Deprecated: Use dynamic-secret-create-github command]
    /// </summary>
    [DataContract(Name = "gatewayCreateProducerGithub")]
    public partial class GatewayCreateProducerGithub : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerGithub" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerGithub() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerGithub" /> class.
        /// </summary>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="githubAppId">Github app id.</param>
        /// <param name="githubAppPrivateKey">App private key.</param>
        /// <param name="githubBaseUrl">Base URL (default to &quot;https://api.github.com/&quot;).</param>
        /// <param name="installationId">GitHub application installation id.</param>
        /// <param name="installationOrganization">Optional, mutually exclusive with installation id, GitHub organization name.</param>
        /// <param name="installationRepository">Optional, mutually exclusive with installation id, GitHub repository &#39;&lt;owner&gt;/&lt;repo-name&gt;&#39;.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Dynamic secret name (required).</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="tokenPermissions">Optional - installation token&#39;s allowed permissions.</param>
        /// <param name="tokenRepositories">Optional - installation token&#39;s allowed repositories.</param>
        /// <param name="tokenTtl">Token TTL (default to &quot;60m&quot;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GatewayCreateProducerGithub(string deleteProtection = default(string), long githubAppId = default(long), string githubAppPrivateKey = default(string), string githubBaseUrl = @"https://api.github.com/", long installationId = default(long), string installationOrganization = default(string), string installationRepository = default(string), bool json = false, string name = default(string), List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), List<string> tokenPermissions = default(List<string>), List<string> tokenRepositories = default(List<string>), string tokenTtl = @"60m", string uidToken = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayCreateProducerGithub and cannot be null");
            }
            this.Name = name;
            this.DeleteProtection = deleteProtection;
            this.GithubAppId = githubAppId;
            this.GithubAppPrivateKey = githubAppPrivateKey;
            // use default value if no "githubBaseUrl" provided
            this.GithubBaseUrl = githubBaseUrl ?? @"https://api.github.com/";
            this.InstallationId = installationId;
            this.InstallationOrganization = installationOrganization;
            this.InstallationRepository = installationRepository;
            this.Json = json;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.TokenPermissions = tokenPermissions;
            this.TokenRepositories = tokenRepositories;
            // use default value if no "tokenTtl" provided
            this.TokenTtl = tokenTtl ?? @"60m";
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Github app id
        /// </summary>
        /// <value>Github app id</value>
        [DataMember(Name = "github-app-id", EmitDefaultValue = false)]
        public long GithubAppId { get; set; }

        /// <summary>
        /// App private key
        /// </summary>
        /// <value>App private key</value>
        [DataMember(Name = "github-app-private-key", EmitDefaultValue = false)]
        public string GithubAppPrivateKey { get; set; }

        /// <summary>
        /// Base URL
        /// </summary>
        /// <value>Base URL</value>
        [DataMember(Name = "github-base-url", EmitDefaultValue = false)]
        public string GithubBaseUrl { get; set; }

        /// <summary>
        /// GitHub application installation id
        /// </summary>
        /// <value>GitHub application installation id</value>
        [DataMember(Name = "installation-id", EmitDefaultValue = false)]
        public long InstallationId { get; set; }

        /// <summary>
        /// Optional, mutually exclusive with installation id, GitHub organization name
        /// </summary>
        /// <value>Optional, mutually exclusive with installation id, GitHub organization name</value>
        [DataMember(Name = "installation-organization", EmitDefaultValue = false)]
        public string InstallationOrganization { get; set; }

        /// <summary>
        /// Optional, mutually exclusive with installation id, GitHub repository &#39;&lt;owner&gt;/&lt;repo-name&gt;&#39;
        /// </summary>
        /// <value>Optional, mutually exclusive with installation id, GitHub repository &#39;&lt;owner&gt;/&lt;repo-name&gt;&#39;</value>
        [DataMember(Name = "installation-repository", EmitDefaultValue = false)]
        public string InstallationRepository { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Optional - installation token&#39;s allowed permissions
        /// </summary>
        /// <value>Optional - installation token&#39;s allowed permissions</value>
        [DataMember(Name = "token-permissions", EmitDefaultValue = false)]
        public List<string> TokenPermissions { get; set; }

        /// <summary>
        /// Optional - installation token&#39;s allowed repositories
        /// </summary>
        /// <value>Optional - installation token&#39;s allowed repositories</value>
        [DataMember(Name = "token-repositories", EmitDefaultValue = false)]
        public List<string> TokenRepositories { get; set; }

        /// <summary>
        /// Token TTL
        /// </summary>
        /// <value>Token TTL</value>
        [DataMember(Name = "token-ttl", EmitDefaultValue = false)]
        public string TokenTtl { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerGithub {\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  GithubAppId: ").Append(GithubAppId).Append("\n");
            sb.Append("  GithubAppPrivateKey: ").Append(GithubAppPrivateKey).Append("\n");
            sb.Append("  GithubBaseUrl: ").Append(GithubBaseUrl).Append("\n");
            sb.Append("  InstallationId: ").Append(InstallationId).Append("\n");
            sb.Append("  InstallationOrganization: ").Append(InstallationOrganization).Append("\n");
            sb.Append("  InstallationRepository: ").Append(InstallationRepository).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  TokenPermissions: ").Append(TokenPermissions).Append("\n");
            sb.Append("  TokenRepositories: ").Append(TokenRepositories).Append("\n");
            sb.Append("  TokenTtl: ").Append(TokenTtl).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
