/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateProducerCertificateAutomation is a command that creates a Certificate Automation dynamic secret producer to dynamically create certificates generated by Venafi or have Akeyless generated certificates using PKI be monitored by Venafi
    /// </summary>
    [DataContract]
    public partial class GatewayCreateProducerCertificateAutomation :  IEquatable<GatewayCreateProducerCertificateAutomation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerCertificateAutomation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerCertificateAutomation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerCertificateAutomation" /> class.
        /// </summary>
        /// <param name="adminRotationIntervalDays">Admin credentials rotation interval (days) (default to 0).</param>
        /// <param name="allowSubdomains">Allow subdomains.</param>
        /// <param name="allowedDomains">Allowed domains.</param>
        /// <param name="autoGeneratedFolder">Auto generated folder.</param>
        /// <param name="enableAdminRotation">Automatic admin credentials rotation (default to false).</param>
        /// <param name="name">Producer name (required).</param>
        /// <param name="password">Required only when the authentication process requires a username and password.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="rootFirstInChain">Root first in chain.</param>
        /// <param name="signUsingAkeylessPki">Use Akeyless PKI issuer or Venafi issuer.</param>
        /// <param name="signerKeyName">Signer key name.</param>
        /// <param name="storePrivateKey">Store private key.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL in time.Duration format (2160h / 129600m / etc...). When using sign-using-akeyless-pki certificates created will have this validity period, otherwise the user-ttl is taken from the Validity Period field of the Zone&#39;s&#39; Issuing Template. When using cert-manager it is advised to have a TTL of above 60 days (1440h). For more information - https://cert-manager.io/docs/usage/certificate/.</param>
        /// <param name="username">Required only when the authentication process requires a username and password.</param>
        /// <param name="venafiApiKey">Venafi API key.</param>
        /// <param name="venafiBaseurl">Venafi Baseurl.</param>
        /// <param name="venafiPassword">Venafi Password.</param>
        /// <param name="venafiUseTpp">Venafi using TPP.</param>
        /// <param name="venafiUsername">Venafi Username.</param>
        /// <param name="venafiZone">Venafi Zone (required).</param>
        public GatewayCreateProducerCertificateAutomation(long adminRotationIntervalDays = 0, bool allowSubdomains = default(bool), List<string> allowedDomains = default(List<string>), string autoGeneratedFolder = default(string), bool enableAdminRotation = false, string name = default(string), string password = default(string), string producerEncryptionKeyName = default(string), bool rootFirstInChain = default(bool), bool signUsingAkeylessPki = default(bool), string signerKeyName = default(string), bool storePrivateKey = default(bool), string token = default(string), string uidToken = default(string), string userTtl = default(string), string username = default(string), string venafiApiKey = default(string), string venafiBaseurl = default(string), string venafiPassword = default(string), bool venafiUseTpp = default(bool), string venafiUsername = default(string), string venafiZone = default(string))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for GatewayCreateProducerCertificateAutomation and cannot be null");
            // to ensure "venafiZone" is required (not null)
            this.VenafiZone = venafiZone ?? throw new ArgumentNullException("venafiZone is a required property for GatewayCreateProducerCertificateAutomation and cannot be null");
            this.AdminRotationIntervalDays = adminRotationIntervalDays;
            this.AllowSubdomains = allowSubdomains;
            this.AllowedDomains = allowedDomains;
            this.AutoGeneratedFolder = autoGeneratedFolder;
            this.EnableAdminRotation = enableAdminRotation;
            this.Password = password;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.RootFirstInChain = rootFirstInChain;
            this.SignUsingAkeylessPki = signUsingAkeylessPki;
            this.SignerKeyName = signerKeyName;
            this.StorePrivateKey = storePrivateKey;
            this.Token = token;
            this.UidToken = uidToken;
            this.UserTtl = userTtl;
            this.Username = username;
            this.VenafiApiKey = venafiApiKey;
            this.VenafiBaseurl = venafiBaseurl;
            this.VenafiPassword = venafiPassword;
            this.VenafiUseTpp = venafiUseTpp;
            this.VenafiUsername = venafiUsername;
        }
        
        /// <summary>
        /// Admin credentials rotation interval (days)
        /// </summary>
        /// <value>Admin credentials rotation interval (days)</value>
        [DataMember(Name="admin-rotation-interval-days", EmitDefaultValue=false)]
        public long AdminRotationIntervalDays { get; set; }

        /// <summary>
        /// Allow subdomains
        /// </summary>
        /// <value>Allow subdomains</value>
        [DataMember(Name="allow-subdomains", EmitDefaultValue=false)]
        public bool AllowSubdomains { get; set; }

        /// <summary>
        /// Allowed domains
        /// </summary>
        /// <value>Allowed domains</value>
        [DataMember(Name="allowed-domains", EmitDefaultValue=false)]
        public List<string> AllowedDomains { get; set; }

        /// <summary>
        /// Auto generated folder
        /// </summary>
        /// <value>Auto generated folder</value>
        [DataMember(Name="auto-generated-folder", EmitDefaultValue=false)]
        public string AutoGeneratedFolder { get; set; }

        /// <summary>
        /// Automatic admin credentials rotation
        /// </summary>
        /// <value>Automatic admin credentials rotation</value>
        [DataMember(Name="enable-admin-rotation", EmitDefaultValue=false)]
        public bool EnableAdminRotation { get; set; }

        /// <summary>
        /// Producer name
        /// </summary>
        /// <value>Producer name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name="producer-encryption-key-name", EmitDefaultValue=false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Root first in chain
        /// </summary>
        /// <value>Root first in chain</value>
        [DataMember(Name="root-first-in-chain", EmitDefaultValue=false)]
        public bool RootFirstInChain { get; set; }

        /// <summary>
        /// Use Akeyless PKI issuer or Venafi issuer
        /// </summary>
        /// <value>Use Akeyless PKI issuer or Venafi issuer</value>
        [DataMember(Name="sign-using-akeyless-pki", EmitDefaultValue=false)]
        public bool SignUsingAkeylessPki { get; set; }

        /// <summary>
        /// Signer key name
        /// </summary>
        /// <value>Signer key name</value>
        [DataMember(Name="signer-key-name", EmitDefaultValue=false)]
        public string SignerKeyName { get; set; }

        /// <summary>
        /// Store private key
        /// </summary>
        /// <value>Store private key</value>
        [DataMember(Name="store-private-key", EmitDefaultValue=false)]
        public bool StorePrivateKey { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL in time.Duration format (2160h / 129600m / etc...). When using sign-using-akeyless-pki certificates created will have this validity period, otherwise the user-ttl is taken from the Validity Period field of the Zone&#39;s&#39; Issuing Template. When using cert-manager it is advised to have a TTL of above 60 days (1440h). For more information - https://cert-manager.io/docs/usage/certificate/
        /// </summary>
        /// <value>User TTL in time.Duration format (2160h / 129600m / etc...). When using sign-using-akeyless-pki certificates created will have this validity period, otherwise the user-ttl is taken from the Validity Period field of the Zone&#39;s&#39; Issuing Template. When using cert-manager it is advised to have a TTL of above 60 days (1440h). For more information - https://cert-manager.io/docs/usage/certificate/</value>
        [DataMember(Name="user-ttl", EmitDefaultValue=false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Venafi API key
        /// </summary>
        /// <value>Venafi API key</value>
        [DataMember(Name="venafi-api-key", EmitDefaultValue=false)]
        public string VenafiApiKey { get; set; }

        /// <summary>
        /// Venafi Baseurl
        /// </summary>
        /// <value>Venafi Baseurl</value>
        [DataMember(Name="venafi-baseurl", EmitDefaultValue=false)]
        public string VenafiBaseurl { get; set; }

        /// <summary>
        /// Venafi Password
        /// </summary>
        /// <value>Venafi Password</value>
        [DataMember(Name="venafi-password", EmitDefaultValue=false)]
        public string VenafiPassword { get; set; }

        /// <summary>
        /// Venafi using TPP
        /// </summary>
        /// <value>Venafi using TPP</value>
        [DataMember(Name="venafi-use-tpp", EmitDefaultValue=false)]
        public bool VenafiUseTpp { get; set; }

        /// <summary>
        /// Venafi Username
        /// </summary>
        /// <value>Venafi Username</value>
        [DataMember(Name="venafi-username", EmitDefaultValue=false)]
        public string VenafiUsername { get; set; }

        /// <summary>
        /// Venafi Zone
        /// </summary>
        /// <value>Venafi Zone</value>
        [DataMember(Name="venafi-zone", EmitDefaultValue=false)]
        public string VenafiZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerCertificateAutomation {\n");
            sb.Append("  AdminRotationIntervalDays: ").Append(AdminRotationIntervalDays).Append("\n");
            sb.Append("  AllowSubdomains: ").Append(AllowSubdomains).Append("\n");
            sb.Append("  AllowedDomains: ").Append(AllowedDomains).Append("\n");
            sb.Append("  AutoGeneratedFolder: ").Append(AutoGeneratedFolder).Append("\n");
            sb.Append("  EnableAdminRotation: ").Append(EnableAdminRotation).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  RootFirstInChain: ").Append(RootFirstInChain).Append("\n");
            sb.Append("  SignUsingAkeylessPki: ").Append(SignUsingAkeylessPki).Append("\n");
            sb.Append("  SignerKeyName: ").Append(SignerKeyName).Append("\n");
            sb.Append("  StorePrivateKey: ").Append(StorePrivateKey).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  VenafiApiKey: ").Append(VenafiApiKey).Append("\n");
            sb.Append("  VenafiBaseurl: ").Append(VenafiBaseurl).Append("\n");
            sb.Append("  VenafiPassword: ").Append(VenafiPassword).Append("\n");
            sb.Append("  VenafiUseTpp: ").Append(VenafiUseTpp).Append("\n");
            sb.Append("  VenafiUsername: ").Append(VenafiUsername).Append("\n");
            sb.Append("  VenafiZone: ").Append(VenafiZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayCreateProducerCertificateAutomation);
        }

        /// <summary>
        /// Returns true if GatewayCreateProducerCertificateAutomation instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayCreateProducerCertificateAutomation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayCreateProducerCertificateAutomation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdminRotationIntervalDays == input.AdminRotationIntervalDays ||
                    this.AdminRotationIntervalDays.Equals(input.AdminRotationIntervalDays)
                ) && 
                (
                    this.AllowSubdomains == input.AllowSubdomains ||
                    this.AllowSubdomains.Equals(input.AllowSubdomains)
                ) && 
                (
                    this.AllowedDomains == input.AllowedDomains ||
                    this.AllowedDomains != null &&
                    input.AllowedDomains != null &&
                    this.AllowedDomains.SequenceEqual(input.AllowedDomains)
                ) && 
                (
                    this.AutoGeneratedFolder == input.AutoGeneratedFolder ||
                    (this.AutoGeneratedFolder != null &&
                    this.AutoGeneratedFolder.Equals(input.AutoGeneratedFolder))
                ) && 
                (
                    this.EnableAdminRotation == input.EnableAdminRotation ||
                    this.EnableAdminRotation.Equals(input.EnableAdminRotation)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.RootFirstInChain == input.RootFirstInChain ||
                    this.RootFirstInChain.Equals(input.RootFirstInChain)
                ) && 
                (
                    this.SignUsingAkeylessPki == input.SignUsingAkeylessPki ||
                    this.SignUsingAkeylessPki.Equals(input.SignUsingAkeylessPki)
                ) && 
                (
                    this.SignerKeyName == input.SignerKeyName ||
                    (this.SignerKeyName != null &&
                    this.SignerKeyName.Equals(input.SignerKeyName))
                ) && 
                (
                    this.StorePrivateKey == input.StorePrivateKey ||
                    this.StorePrivateKey.Equals(input.StorePrivateKey)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.VenafiApiKey == input.VenafiApiKey ||
                    (this.VenafiApiKey != null &&
                    this.VenafiApiKey.Equals(input.VenafiApiKey))
                ) && 
                (
                    this.VenafiBaseurl == input.VenafiBaseurl ||
                    (this.VenafiBaseurl != null &&
                    this.VenafiBaseurl.Equals(input.VenafiBaseurl))
                ) && 
                (
                    this.VenafiPassword == input.VenafiPassword ||
                    (this.VenafiPassword != null &&
                    this.VenafiPassword.Equals(input.VenafiPassword))
                ) && 
                (
                    this.VenafiUseTpp == input.VenafiUseTpp ||
                    this.VenafiUseTpp.Equals(input.VenafiUseTpp)
                ) && 
                (
                    this.VenafiUsername == input.VenafiUsername ||
                    (this.VenafiUsername != null &&
                    this.VenafiUsername.Equals(input.VenafiUsername))
                ) && 
                (
                    this.VenafiZone == input.VenafiZone ||
                    (this.VenafiZone != null &&
                    this.VenafiZone.Equals(input.VenafiZone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AdminRotationIntervalDays.GetHashCode();
                hashCode = hashCode * 59 + this.AllowSubdomains.GetHashCode();
                if (this.AllowedDomains != null)
                    hashCode = hashCode * 59 + this.AllowedDomains.GetHashCode();
                if (this.AutoGeneratedFolder != null)
                    hashCode = hashCode * 59 + this.AutoGeneratedFolder.GetHashCode();
                hashCode = hashCode * 59 + this.EnableAdminRotation.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.ProducerEncryptionKeyName != null)
                    hashCode = hashCode * 59 + this.ProducerEncryptionKeyName.GetHashCode();
                hashCode = hashCode * 59 + this.RootFirstInChain.GetHashCode();
                hashCode = hashCode * 59 + this.SignUsingAkeylessPki.GetHashCode();
                if (this.SignerKeyName != null)
                    hashCode = hashCode * 59 + this.SignerKeyName.GetHashCode();
                hashCode = hashCode * 59 + this.StorePrivateKey.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.UserTtl != null)
                    hashCode = hashCode * 59 + this.UserTtl.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.VenafiApiKey != null)
                    hashCode = hashCode * 59 + this.VenafiApiKey.GetHashCode();
                if (this.VenafiBaseurl != null)
                    hashCode = hashCode * 59 + this.VenafiBaseurl.GetHashCode();
                if (this.VenafiPassword != null)
                    hashCode = hashCode * 59 + this.VenafiPassword.GetHashCode();
                hashCode = hashCode * 59 + this.VenafiUseTpp.GetHashCode();
                if (this.VenafiUsername != null)
                    hashCode = hashCode * 59 + this.VenafiUsername.GetHashCode();
                if (this.VenafiZone != null)
                    hashCode = hashCode * 59 + this.VenafiZone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
