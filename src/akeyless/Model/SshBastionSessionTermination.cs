/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SshBastionSessionTermination
    /// </summary>
    [DataContract(Name = "SshBastionSessionTermination")]
    public partial class SshBastionSessionTermination : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SshBastionSessionTermination" /> class.
        /// </summary>
        /// <param name="apiPassword">apiPassword.</param>
        /// <param name="apiToken">apiToken.</param>
        /// <param name="apiUrl">apiUrl.</param>
        /// <param name="apiUsername">apiUsername.</param>
        /// <param name="enabled">enabled.</param>
        public SshBastionSessionTermination(string apiPassword = default(string), string apiToken = default(string), string apiUrl = default(string), string apiUsername = default(string), bool enabled = default(bool))
        {
            this.ApiPassword = apiPassword;
            this.ApiToken = apiToken;
            this.ApiUrl = apiUrl;
            this.ApiUsername = apiUsername;
            this.Enabled = enabled;
        }

        /// <summary>
        /// Gets or Sets ApiPassword
        /// </summary>
        [DataMember(Name = "api_password", EmitDefaultValue = false)]
        public string ApiPassword { get; set; }

        /// <summary>
        /// Gets or Sets ApiToken
        /// </summary>
        [DataMember(Name = "api_token", EmitDefaultValue = false)]
        public string ApiToken { get; set; }

        /// <summary>
        /// Gets or Sets ApiUrl
        /// </summary>
        [DataMember(Name = "api_url", EmitDefaultValue = false)]
        public string ApiUrl { get; set; }

        /// <summary>
        /// Gets or Sets ApiUsername
        /// </summary>
        [DataMember(Name = "api_username", EmitDefaultValue = false)]
        public string ApiUsername { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SshBastionSessionTermination {\n");
            sb.Append("  ApiPassword: ").Append(ApiPassword).Append("\n");
            sb.Append("  ApiToken: ").Append(ApiToken).Append("\n");
            sb.Append("  ApiUrl: ").Append(ApiUrl).Append("\n");
            sb.Append("  ApiUsername: ").Append(ApiUsername).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
