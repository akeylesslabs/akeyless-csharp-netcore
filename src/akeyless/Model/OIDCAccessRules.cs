/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// OIDCAccessRules contains access rules specific to Open Id Connect authentication method.
    /// </summary>
    [DataContract(Name = "OIDCAccessRules")]
    public partial class OIDCAccessRules : IEquatable<OIDCAccessRules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OIDCAccessRules" /> class.
        /// </summary>
        /// <param name="allowedRedirectURIs">Allowed redirect URIs after the authentication.</param>
        /// <param name="audience">Audience claim to be used as part of the authentication flow. In case set, it must match the one configured on the Identity Provider&#39;s Application.</param>
        /// <param name="boundClaims">The claims that login is restricted to..</param>
        /// <param name="clientId">Client ID.</param>
        /// <param name="clientSecret">Client Secret.</param>
        /// <param name="isInternal">IsInternal indicates whether this is an internal Auth Method where the client has no control over it, or it was created by the client e.g - Sign In with Google will create an OIDC Auth Method with IsInternal&#x3D;true.</param>
        /// <param name="issuer">Issuer URL.</param>
        /// <param name="requiredScopes">A list of required scopes to request from the oidc provider, and to check on the token.</param>
        /// <param name="requiredScopesPrefix">A prefix to add to the required scopes (for example, azures&#39; Application ID URI).</param>
        /// <param name="uniqueIdentifier">A unique identifier to distinguish different users.</param>
        public OIDCAccessRules(List<string> allowedRedirectURIs = default(List<string>), string audience = default(string), List<OIDCCustomClaim> boundClaims = default(List<OIDCCustomClaim>), string clientId = default(string), string clientSecret = default(string), bool isInternal = default(bool), string issuer = default(string), List<string> requiredScopes = default(List<string>), string requiredScopesPrefix = default(string), string uniqueIdentifier = default(string))
        {
            this.AllowedRedirectURIs = allowedRedirectURIs;
            this.Audience = audience;
            this.BoundClaims = boundClaims;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.IsInternal = isInternal;
            this.Issuer = issuer;
            this.RequiredScopes = requiredScopes;
            this.RequiredScopesPrefix = requiredScopesPrefix;
            this.UniqueIdentifier = uniqueIdentifier;
        }

        /// <summary>
        /// Allowed redirect URIs after the authentication
        /// </summary>
        /// <value>Allowed redirect URIs after the authentication</value>
        [DataMember(Name = "allowed_redirect_URIs", EmitDefaultValue = false)]
        public List<string> AllowedRedirectURIs { get; set; }

        /// <summary>
        /// Audience claim to be used as part of the authentication flow. In case set, it must match the one configured on the Identity Provider&#39;s Application
        /// </summary>
        /// <value>Audience claim to be used as part of the authentication flow. In case set, it must match the one configured on the Identity Provider&#39;s Application</value>
        [DataMember(Name = "audience", EmitDefaultValue = false)]
        public string Audience { get; set; }

        /// <summary>
        /// The claims that login is restricted to.
        /// </summary>
        /// <value>The claims that login is restricted to.</value>
        [DataMember(Name = "bound_claims", EmitDefaultValue = false)]
        public List<OIDCCustomClaim> BoundClaims { get; set; }

        /// <summary>
        /// Client ID
        /// </summary>
        /// <value>Client ID</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Client Secret
        /// </summary>
        /// <value>Client Secret</value>
        [DataMember(Name = "client_secret", EmitDefaultValue = false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// IsInternal indicates whether this is an internal Auth Method where the client has no control over it, or it was created by the client e.g - Sign In with Google will create an OIDC Auth Method with IsInternal&#x3D;true
        /// </summary>
        /// <value>IsInternal indicates whether this is an internal Auth Method where the client has no control over it, or it was created by the client e.g - Sign In with Google will create an OIDC Auth Method with IsInternal&#x3D;true</value>
        [DataMember(Name = "is_internal", EmitDefaultValue = true)]
        public bool IsInternal { get; set; }

        /// <summary>
        /// Issuer URL
        /// </summary>
        /// <value>Issuer URL</value>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public string Issuer { get; set; }

        /// <summary>
        /// A list of required scopes to request from the oidc provider, and to check on the token
        /// </summary>
        /// <value>A list of required scopes to request from the oidc provider, and to check on the token</value>
        [DataMember(Name = "required_scopes", EmitDefaultValue = false)]
        public List<string> RequiredScopes { get; set; }

        /// <summary>
        /// A prefix to add to the required scopes (for example, azures&#39; Application ID URI)
        /// </summary>
        /// <value>A prefix to add to the required scopes (for example, azures&#39; Application ID URI)</value>
        [DataMember(Name = "required_scopes_prefix", EmitDefaultValue = false)]
        public string RequiredScopesPrefix { get; set; }

        /// <summary>
        /// A unique identifier to distinguish different users
        /// </summary>
        /// <value>A unique identifier to distinguish different users</value>
        [DataMember(Name = "unique_identifier", EmitDefaultValue = false)]
        public string UniqueIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OIDCAccessRules {\n");
            sb.Append("  AllowedRedirectURIs: ").Append(AllowedRedirectURIs).Append("\n");
            sb.Append("  Audience: ").Append(Audience).Append("\n");
            sb.Append("  BoundClaims: ").Append(BoundClaims).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  IsInternal: ").Append(IsInternal).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  RequiredScopes: ").Append(RequiredScopes).Append("\n");
            sb.Append("  RequiredScopesPrefix: ").Append(RequiredScopesPrefix).Append("\n");
            sb.Append("  UniqueIdentifier: ").Append(UniqueIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OIDCAccessRules);
        }

        /// <summary>
        /// Returns true if OIDCAccessRules instances are equal
        /// </summary>
        /// <param name="input">Instance of OIDCAccessRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OIDCAccessRules input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowedRedirectURIs == input.AllowedRedirectURIs ||
                    this.AllowedRedirectURIs != null &&
                    input.AllowedRedirectURIs != null &&
                    this.AllowedRedirectURIs.SequenceEqual(input.AllowedRedirectURIs)
                ) && 
                (
                    this.Audience == input.Audience ||
                    (this.Audience != null &&
                    this.Audience.Equals(input.Audience))
                ) && 
                (
                    this.BoundClaims == input.BoundClaims ||
                    this.BoundClaims != null &&
                    input.BoundClaims != null &&
                    this.BoundClaims.SequenceEqual(input.BoundClaims)
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.IsInternal == input.IsInternal ||
                    this.IsInternal.Equals(input.IsInternal)
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.RequiredScopes == input.RequiredScopes ||
                    this.RequiredScopes != null &&
                    input.RequiredScopes != null &&
                    this.RequiredScopes.SequenceEqual(input.RequiredScopes)
                ) && 
                (
                    this.RequiredScopesPrefix == input.RequiredScopesPrefix ||
                    (this.RequiredScopesPrefix != null &&
                    this.RequiredScopesPrefix.Equals(input.RequiredScopesPrefix))
                ) && 
                (
                    this.UniqueIdentifier == input.UniqueIdentifier ||
                    (this.UniqueIdentifier != null &&
                    this.UniqueIdentifier.Equals(input.UniqueIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowedRedirectURIs != null)
                    hashCode = hashCode * 59 + this.AllowedRedirectURIs.GetHashCode();
                if (this.Audience != null)
                    hashCode = hashCode * 59 + this.Audience.GetHashCode();
                if (this.BoundClaims != null)
                    hashCode = hashCode * 59 + this.BoundClaims.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ClientSecret != null)
                    hashCode = hashCode * 59 + this.ClientSecret.GetHashCode();
                hashCode = hashCode * 59 + this.IsInternal.GetHashCode();
                if (this.Issuer != null)
                    hashCode = hashCode * 59 + this.Issuer.GetHashCode();
                if (this.RequiredScopes != null)
                    hashCode = hashCode * 59 + this.RequiredScopes.GetHashCode();
                if (this.RequiredScopesPrefix != null)
                    hashCode = hashCode * 59 + this.RequiredScopesPrefix.GetHashCode();
                if (this.UniqueIdentifier != null)
                    hashCode = hashCode * 59 + this.UniqueIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
