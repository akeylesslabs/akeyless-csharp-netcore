/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// Item
    /// </summary>
    [DataContract(Name = "Item")]
    public partial class Item : IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="autoRotate">autoRotate.</param>
        /// <param name="certIssuerSignerKeyName">certIssuerSignerKeyName.</param>
        /// <param name="certificateIssueDetails">certificateIssueDetails.</param>
        /// <param name="certificates">certificates.</param>
        /// <param name="clientPermissions">clientPermissions.</param>
        /// <param name="creationDate">creationDate.</param>
        /// <param name="customerFragmentId">customerFragmentId.</param>
        /// <param name="deleteProtection">deleteProtection.</param>
        /// <param name="deletionDate">deletionDate.</param>
        /// <param name="displayId">displayId.</param>
        /// <param name="isEnabled">isEnabled.</param>
        /// <param name="itemAccessibility">itemAccessibility.</param>
        /// <param name="itemGeneralInfo">itemGeneralInfo.</param>
        /// <param name="itemId">itemId.</param>
        /// <param name="itemMetadata">itemMetadata.</param>
        /// <param name="itemName">itemName.</param>
        /// <param name="itemSize">itemSize.</param>
        /// <param name="itemState">ItemState defines the different states an Item can be in.</param>
        /// <param name="itemSubType">itemSubType.</param>
        /// <param name="itemTags">itemTags.</param>
        /// <param name="itemTargetsAssoc">itemTargetsAssoc.</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="itemVersions">itemVersions.</param>
        /// <param name="lastVersion">lastVersion.</param>
        /// <param name="modificationDate">modificationDate.</param>
        /// <param name="nextRotationDate">nextRotationDate.</param>
        /// <param name="protectionKeyName">protectionKeyName.</param>
        /// <param name="protectionKeyType">protectionKeyType.</param>
        /// <param name="publicValue">publicValue.</param>
        /// <param name="rotationInterval">rotationInterval.</param>
        /// <param name="sharedBy">sharedBy.</param>
        /// <param name="targetVersions">targetVersions.</param>
        /// <param name="usageDate">usageDate.</param>
        /// <param name="withCustomerFragment">withCustomerFragment.</param>
        public Item(bool autoRotate = default(bool), string certIssuerSignerKeyName = default(string), CertificateIssueInfo certificateIssueDetails = default(CertificateIssueInfo), string certificates = default(string), List<string> clientPermissions = default(List<string>), DateTime creationDate = default(DateTime), string customerFragmentId = default(string), bool deleteProtection = default(bool), DateTime deletionDate = default(DateTime), string displayId = default(string), bool isEnabled = default(bool), long itemAccessibility = default(long), ItemGeneralInfo itemGeneralInfo = default(ItemGeneralInfo), long itemId = default(long), string itemMetadata = default(string), string itemName = default(string), long itemSize = default(long), string itemState = default(string), string itemSubType = default(string), List<string> itemTags = default(List<string>), List<ItemTargetAssociation> itemTargetsAssoc = default(List<ItemTargetAssociation>), string itemType = default(string), List<ItemVersion> itemVersions = default(List<ItemVersion>), int lastVersion = default(int), DateTime modificationDate = default(DateTime), DateTime nextRotationDate = default(DateTime), string protectionKeyName = default(string), string protectionKeyType = default(string), string publicValue = default(string), long rotationInterval = default(long), RuleAssigner sharedBy = default(RuleAssigner), List<TargetItemVersion> targetVersions = default(List<TargetItemVersion>), DateTime usageDate = default(DateTime), bool withCustomerFragment = default(bool))
        {
            this.AutoRotate = autoRotate;
            this.CertIssuerSignerKeyName = certIssuerSignerKeyName;
            this.CertificateIssueDetails = certificateIssueDetails;
            this.Certificates = certificates;
            this.ClientPermissions = clientPermissions;
            this.CreationDate = creationDate;
            this.CustomerFragmentId = customerFragmentId;
            this.DeleteProtection = deleteProtection;
            this.DeletionDate = deletionDate;
            this.DisplayId = displayId;
            this.IsEnabled = isEnabled;
            this.ItemAccessibility = itemAccessibility;
            this.ItemGeneralInfo = itemGeneralInfo;
            this.ItemId = itemId;
            this.ItemMetadata = itemMetadata;
            this.ItemName = itemName;
            this.ItemSize = itemSize;
            this.ItemState = itemState;
            this.ItemSubType = itemSubType;
            this.ItemTags = itemTags;
            this.ItemTargetsAssoc = itemTargetsAssoc;
            this.ItemType = itemType;
            this.ItemVersions = itemVersions;
            this.LastVersion = lastVersion;
            this.ModificationDate = modificationDate;
            this.NextRotationDate = nextRotationDate;
            this.ProtectionKeyName = protectionKeyName;
            this.ProtectionKeyType = protectionKeyType;
            this.PublicValue = publicValue;
            this.RotationInterval = rotationInterval;
            this.SharedBy = sharedBy;
            this.TargetVersions = targetVersions;
            this.UsageDate = usageDate;
            this.WithCustomerFragment = withCustomerFragment;
        }

        /// <summary>
        /// Gets or Sets AutoRotate
        /// </summary>
        [DataMember(Name = "auto_rotate", EmitDefaultValue = true)]
        public bool AutoRotate { get; set; }

        /// <summary>
        /// Gets or Sets CertIssuerSignerKeyName
        /// </summary>
        [DataMember(Name = "cert_issuer_signer_key_name", EmitDefaultValue = false)]
        public string CertIssuerSignerKeyName { get; set; }

        /// <summary>
        /// Gets or Sets CertificateIssueDetails
        /// </summary>
        [DataMember(Name = "certificate_issue_details", EmitDefaultValue = false)]
        public CertificateIssueInfo CertificateIssueDetails { get; set; }

        /// <summary>
        /// Gets or Sets Certificates
        /// </summary>
        [DataMember(Name = "certificates", EmitDefaultValue = false)]
        public string Certificates { get; set; }

        /// <summary>
        /// Gets or Sets ClientPermissions
        /// </summary>
        [DataMember(Name = "client_permissions", EmitDefaultValue = false)]
        public List<string> ClientPermissions { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name = "creation_date", EmitDefaultValue = false)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomerFragmentId
        /// </summary>
        [DataMember(Name = "customer_fragment_id", EmitDefaultValue = false)]
        public string CustomerFragmentId { get; set; }

        /// <summary>
        /// Gets or Sets DeleteProtection
        /// </summary>
        [DataMember(Name = "delete_protection", EmitDefaultValue = true)]
        public bool DeleteProtection { get; set; }

        /// <summary>
        /// Gets or Sets DeletionDate
        /// </summary>
        [DataMember(Name = "deletion_date", EmitDefaultValue = false)]
        public DateTime DeletionDate { get; set; }

        /// <summary>
        /// Gets or Sets DisplayId
        /// </summary>
        [DataMember(Name = "display_id", EmitDefaultValue = false)]
        public string DisplayId { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name = "is_enabled", EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ItemAccessibility
        /// </summary>
        [DataMember(Name = "item_accessibility", EmitDefaultValue = false)]
        public long ItemAccessibility { get; set; }

        /// <summary>
        /// Gets or Sets ItemGeneralInfo
        /// </summary>
        [DataMember(Name = "item_general_info", EmitDefaultValue = false)]
        public ItemGeneralInfo ItemGeneralInfo { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name = "item_id", EmitDefaultValue = false)]
        public long ItemId { get; set; }

        /// <summary>
        /// Gets or Sets ItemMetadata
        /// </summary>
        [DataMember(Name = "item_metadata", EmitDefaultValue = false)]
        public string ItemMetadata { get; set; }

        /// <summary>
        /// Gets or Sets ItemName
        /// </summary>
        [DataMember(Name = "item_name", EmitDefaultValue = false)]
        public string ItemName { get; set; }

        /// <summary>
        /// Gets or Sets ItemSize
        /// </summary>
        [DataMember(Name = "item_size", EmitDefaultValue = false)]
        public long ItemSize { get; set; }

        /// <summary>
        /// ItemState defines the different states an Item can be in
        /// </summary>
        /// <value>ItemState defines the different states an Item can be in</value>
        [DataMember(Name = "item_state", EmitDefaultValue = false)]
        public string ItemState { get; set; }

        /// <summary>
        /// Gets or Sets ItemSubType
        /// </summary>
        [DataMember(Name = "item_sub_type", EmitDefaultValue = false)]
        public string ItemSubType { get; set; }

        /// <summary>
        /// Gets or Sets ItemTags
        /// </summary>
        [DataMember(Name = "item_tags", EmitDefaultValue = false)]
        public List<string> ItemTags { get; set; }

        /// <summary>
        /// Gets or Sets ItemTargetsAssoc
        /// </summary>
        [DataMember(Name = "item_targets_assoc", EmitDefaultValue = false)]
        public List<ItemTargetAssociation> ItemTargetsAssoc { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "item_type", EmitDefaultValue = false)]
        public string ItemType { get; set; }

        /// <summary>
        /// Gets or Sets ItemVersions
        /// </summary>
        [DataMember(Name = "item_versions", EmitDefaultValue = false)]
        public List<ItemVersion> ItemVersions { get; set; }

        /// <summary>
        /// Gets or Sets LastVersion
        /// </summary>
        [DataMember(Name = "last_version", EmitDefaultValue = false)]
        public int LastVersion { get; set; }

        /// <summary>
        /// Gets or Sets ModificationDate
        /// </summary>
        [DataMember(Name = "modification_date", EmitDefaultValue = false)]
        public DateTime ModificationDate { get; set; }

        /// <summary>
        /// Gets or Sets NextRotationDate
        /// </summary>
        [DataMember(Name = "next_rotation_date", EmitDefaultValue = false)]
        public DateTime NextRotationDate { get; set; }

        /// <summary>
        /// Gets or Sets ProtectionKeyName
        /// </summary>
        [DataMember(Name = "protection_key_name", EmitDefaultValue = false)]
        public string ProtectionKeyName { get; set; }

        /// <summary>
        /// Gets or Sets ProtectionKeyType
        /// </summary>
        [DataMember(Name = "protection_key_type", EmitDefaultValue = false)]
        public string ProtectionKeyType { get; set; }

        /// <summary>
        /// Gets or Sets PublicValue
        /// </summary>
        [DataMember(Name = "public_value", EmitDefaultValue = false)]
        public string PublicValue { get; set; }

        /// <summary>
        /// Gets or Sets RotationInterval
        /// </summary>
        [DataMember(Name = "rotation_interval", EmitDefaultValue = false)]
        public long RotationInterval { get; set; }

        /// <summary>
        /// Gets or Sets SharedBy
        /// </summary>
        [DataMember(Name = "shared_by", EmitDefaultValue = false)]
        public RuleAssigner SharedBy { get; set; }

        /// <summary>
        /// Gets or Sets TargetVersions
        /// </summary>
        [DataMember(Name = "target_versions", EmitDefaultValue = false)]
        public List<TargetItemVersion> TargetVersions { get; set; }

        /// <summary>
        /// Gets or Sets UsageDate
        /// </summary>
        [DataMember(Name = "usage_date", EmitDefaultValue = false)]
        public DateTime UsageDate { get; set; }

        /// <summary>
        /// Gets or Sets WithCustomerFragment
        /// </summary>
        [DataMember(Name = "with_customer_fragment", EmitDefaultValue = true)]
        public bool WithCustomerFragment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  AutoRotate: ").Append(AutoRotate).Append("\n");
            sb.Append("  CertIssuerSignerKeyName: ").Append(CertIssuerSignerKeyName).Append("\n");
            sb.Append("  CertificateIssueDetails: ").Append(CertificateIssueDetails).Append("\n");
            sb.Append("  Certificates: ").Append(Certificates).Append("\n");
            sb.Append("  ClientPermissions: ").Append(ClientPermissions).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  CustomerFragmentId: ").Append(CustomerFragmentId).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  DeletionDate: ").Append(DeletionDate).Append("\n");
            sb.Append("  DisplayId: ").Append(DisplayId).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  ItemAccessibility: ").Append(ItemAccessibility).Append("\n");
            sb.Append("  ItemGeneralInfo: ").Append(ItemGeneralInfo).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemMetadata: ").Append(ItemMetadata).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  ItemSize: ").Append(ItemSize).Append("\n");
            sb.Append("  ItemState: ").Append(ItemState).Append("\n");
            sb.Append("  ItemSubType: ").Append(ItemSubType).Append("\n");
            sb.Append("  ItemTags: ").Append(ItemTags).Append("\n");
            sb.Append("  ItemTargetsAssoc: ").Append(ItemTargetsAssoc).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  ItemVersions: ").Append(ItemVersions).Append("\n");
            sb.Append("  LastVersion: ").Append(LastVersion).Append("\n");
            sb.Append("  ModificationDate: ").Append(ModificationDate).Append("\n");
            sb.Append("  NextRotationDate: ").Append(NextRotationDate).Append("\n");
            sb.Append("  ProtectionKeyName: ").Append(ProtectionKeyName).Append("\n");
            sb.Append("  ProtectionKeyType: ").Append(ProtectionKeyType).Append("\n");
            sb.Append("  PublicValue: ").Append(PublicValue).Append("\n");
            sb.Append("  RotationInterval: ").Append(RotationInterval).Append("\n");
            sb.Append("  SharedBy: ").Append(SharedBy).Append("\n");
            sb.Append("  TargetVersions: ").Append(TargetVersions).Append("\n");
            sb.Append("  UsageDate: ").Append(UsageDate).Append("\n");
            sb.Append("  WithCustomerFragment: ").Append(WithCustomerFragment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Item);
        }

        /// <summary>
        /// Returns true if Item instances are equal
        /// </summary>
        /// <param name="input">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AutoRotate == input.AutoRotate ||
                    this.AutoRotate.Equals(input.AutoRotate)
                ) && 
                (
                    this.CertIssuerSignerKeyName == input.CertIssuerSignerKeyName ||
                    (this.CertIssuerSignerKeyName != null &&
                    this.CertIssuerSignerKeyName.Equals(input.CertIssuerSignerKeyName))
                ) && 
                (
                    this.CertificateIssueDetails == input.CertificateIssueDetails ||
                    (this.CertificateIssueDetails != null &&
                    this.CertificateIssueDetails.Equals(input.CertificateIssueDetails))
                ) && 
                (
                    this.Certificates == input.Certificates ||
                    (this.Certificates != null &&
                    this.Certificates.Equals(input.Certificates))
                ) && 
                (
                    this.ClientPermissions == input.ClientPermissions ||
                    this.ClientPermissions != null &&
                    input.ClientPermissions != null &&
                    this.ClientPermissions.SequenceEqual(input.ClientPermissions)
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.CustomerFragmentId == input.CustomerFragmentId ||
                    (this.CustomerFragmentId != null &&
                    this.CustomerFragmentId.Equals(input.CustomerFragmentId))
                ) && 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    this.DeleteProtection.Equals(input.DeleteProtection)
                ) && 
                (
                    this.DeletionDate == input.DeletionDate ||
                    (this.DeletionDate != null &&
                    this.DeletionDate.Equals(input.DeletionDate))
                ) && 
                (
                    this.DisplayId == input.DisplayId ||
                    (this.DisplayId != null &&
                    this.DisplayId.Equals(input.DisplayId))
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    this.IsEnabled.Equals(input.IsEnabled)
                ) && 
                (
                    this.ItemAccessibility == input.ItemAccessibility ||
                    this.ItemAccessibility.Equals(input.ItemAccessibility)
                ) && 
                (
                    this.ItemGeneralInfo == input.ItemGeneralInfo ||
                    (this.ItemGeneralInfo != null &&
                    this.ItemGeneralInfo.Equals(input.ItemGeneralInfo))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    this.ItemId.Equals(input.ItemId)
                ) && 
                (
                    this.ItemMetadata == input.ItemMetadata ||
                    (this.ItemMetadata != null &&
                    this.ItemMetadata.Equals(input.ItemMetadata))
                ) && 
                (
                    this.ItemName == input.ItemName ||
                    (this.ItemName != null &&
                    this.ItemName.Equals(input.ItemName))
                ) && 
                (
                    this.ItemSize == input.ItemSize ||
                    this.ItemSize.Equals(input.ItemSize)
                ) && 
                (
                    this.ItemState == input.ItemState ||
                    (this.ItemState != null &&
                    this.ItemState.Equals(input.ItemState))
                ) && 
                (
                    this.ItemSubType == input.ItemSubType ||
                    (this.ItemSubType != null &&
                    this.ItemSubType.Equals(input.ItemSubType))
                ) && 
                (
                    this.ItemTags == input.ItemTags ||
                    this.ItemTags != null &&
                    input.ItemTags != null &&
                    this.ItemTags.SequenceEqual(input.ItemTags)
                ) && 
                (
                    this.ItemTargetsAssoc == input.ItemTargetsAssoc ||
                    this.ItemTargetsAssoc != null &&
                    input.ItemTargetsAssoc != null &&
                    this.ItemTargetsAssoc.SequenceEqual(input.ItemTargetsAssoc)
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    (this.ItemType != null &&
                    this.ItemType.Equals(input.ItemType))
                ) && 
                (
                    this.ItemVersions == input.ItemVersions ||
                    this.ItemVersions != null &&
                    input.ItemVersions != null &&
                    this.ItemVersions.SequenceEqual(input.ItemVersions)
                ) && 
                (
                    this.LastVersion == input.LastVersion ||
                    this.LastVersion.Equals(input.LastVersion)
                ) && 
                (
                    this.ModificationDate == input.ModificationDate ||
                    (this.ModificationDate != null &&
                    this.ModificationDate.Equals(input.ModificationDate))
                ) && 
                (
                    this.NextRotationDate == input.NextRotationDate ||
                    (this.NextRotationDate != null &&
                    this.NextRotationDate.Equals(input.NextRotationDate))
                ) && 
                (
                    this.ProtectionKeyName == input.ProtectionKeyName ||
                    (this.ProtectionKeyName != null &&
                    this.ProtectionKeyName.Equals(input.ProtectionKeyName))
                ) && 
                (
                    this.ProtectionKeyType == input.ProtectionKeyType ||
                    (this.ProtectionKeyType != null &&
                    this.ProtectionKeyType.Equals(input.ProtectionKeyType))
                ) && 
                (
                    this.PublicValue == input.PublicValue ||
                    (this.PublicValue != null &&
                    this.PublicValue.Equals(input.PublicValue))
                ) && 
                (
                    this.RotationInterval == input.RotationInterval ||
                    this.RotationInterval.Equals(input.RotationInterval)
                ) && 
                (
                    this.SharedBy == input.SharedBy ||
                    (this.SharedBy != null &&
                    this.SharedBy.Equals(input.SharedBy))
                ) && 
                (
                    this.TargetVersions == input.TargetVersions ||
                    this.TargetVersions != null &&
                    input.TargetVersions != null &&
                    this.TargetVersions.SequenceEqual(input.TargetVersions)
                ) && 
                (
                    this.UsageDate == input.UsageDate ||
                    (this.UsageDate != null &&
                    this.UsageDate.Equals(input.UsageDate))
                ) && 
                (
                    this.WithCustomerFragment == input.WithCustomerFragment ||
                    this.WithCustomerFragment.Equals(input.WithCustomerFragment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AutoRotate.GetHashCode();
                if (this.CertIssuerSignerKeyName != null)
                    hashCode = hashCode * 59 + this.CertIssuerSignerKeyName.GetHashCode();
                if (this.CertificateIssueDetails != null)
                    hashCode = hashCode * 59 + this.CertificateIssueDetails.GetHashCode();
                if (this.Certificates != null)
                    hashCode = hashCode * 59 + this.Certificates.GetHashCode();
                if (this.ClientPermissions != null)
                    hashCode = hashCode * 59 + this.ClientPermissions.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.CustomerFragmentId != null)
                    hashCode = hashCode * 59 + this.CustomerFragmentId.GetHashCode();
                hashCode = hashCode * 59 + this.DeleteProtection.GetHashCode();
                if (this.DeletionDate != null)
                    hashCode = hashCode * 59 + this.DeletionDate.GetHashCode();
                if (this.DisplayId != null)
                    hashCode = hashCode * 59 + this.DisplayId.GetHashCode();
                hashCode = hashCode * 59 + this.IsEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.ItemAccessibility.GetHashCode();
                if (this.ItemGeneralInfo != null)
                    hashCode = hashCode * 59 + this.ItemGeneralInfo.GetHashCode();
                hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.ItemMetadata != null)
                    hashCode = hashCode * 59 + this.ItemMetadata.GetHashCode();
                if (this.ItemName != null)
                    hashCode = hashCode * 59 + this.ItemName.GetHashCode();
                hashCode = hashCode * 59 + this.ItemSize.GetHashCode();
                if (this.ItemState != null)
                    hashCode = hashCode * 59 + this.ItemState.GetHashCode();
                if (this.ItemSubType != null)
                    hashCode = hashCode * 59 + this.ItemSubType.GetHashCode();
                if (this.ItemTags != null)
                    hashCode = hashCode * 59 + this.ItemTags.GetHashCode();
                if (this.ItemTargetsAssoc != null)
                    hashCode = hashCode * 59 + this.ItemTargetsAssoc.GetHashCode();
                if (this.ItemType != null)
                    hashCode = hashCode * 59 + this.ItemType.GetHashCode();
                if (this.ItemVersions != null)
                    hashCode = hashCode * 59 + this.ItemVersions.GetHashCode();
                hashCode = hashCode * 59 + this.LastVersion.GetHashCode();
                if (this.ModificationDate != null)
                    hashCode = hashCode * 59 + this.ModificationDate.GetHashCode();
                if (this.NextRotationDate != null)
                    hashCode = hashCode * 59 + this.NextRotationDate.GetHashCode();
                if (this.ProtectionKeyName != null)
                    hashCode = hashCode * 59 + this.ProtectionKeyName.GetHashCode();
                if (this.ProtectionKeyType != null)
                    hashCode = hashCode * 59 + this.ProtectionKeyType.GetHashCode();
                if (this.PublicValue != null)
                    hashCode = hashCode * 59 + this.PublicValue.GetHashCode();
                hashCode = hashCode * 59 + this.RotationInterval.GetHashCode();
                if (this.SharedBy != null)
                    hashCode = hashCode * 59 + this.SharedBy.GetHashCode();
                if (this.TargetVersions != null)
                    hashCode = hashCode * 59 + this.TargetVersions.GetHashCode();
                if (this.UsageDate != null)
                    hashCode = hashCode * 59 + this.UsageDate.GetHashCode();
                hashCode = hashCode * 59 + this.WithCustomerFragment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
