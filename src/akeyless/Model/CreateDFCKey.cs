/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CreateDFCKey
    /// </summary>
    [DataContract(Name = "createDFCKey")]
    public partial class CreateDFCKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDFCKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateDFCKey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDFCKey" /> class.
        /// </summary>
        /// <param name="alg">DFCKey type; options: [AES128GCM, AES256GCM, AES128SIV, AES256SIV, AES128CBC, AES256CBC, RSA1024, RSA2048, RSA3072, RSA4096] (required).</param>
        /// <param name="autoRotate">Whether to automatically rotate every rotation_interval days, or disable existing automatic rotation [true/false].</param>
        /// <param name="certificateCommonName">Common name for the generated certificate. Relevant only for generate-self-signed-certificate..</param>
        /// <param name="certificateCountry">Country name for the generated certificate. Relevant only for generate-self-signed-certificate..</param>
        /// <param name="certificateDigestAlgo">Digest algorithm to be used for the certificate key signing. Currently, we support only \&quot;sha256\&quot; so we hide this option for CLI..</param>
        /// <param name="certificateFormat">certificateFormat.</param>
        /// <param name="certificateLocality">Locality for the generated certificate. Relevant only for generate-self-signed-certificate..</param>
        /// <param name="certificateOrganization">Organization name for the generated certificate. Relevant only for generate-self-signed-certificate..</param>
        /// <param name="certificateProvince">Province name for the generated certificate. Relevant only for generate-self-signed-certificate..</param>
        /// <param name="certificateTtl">TTL in days for the generated certificate. Required only for generate-self-signed-certificate..</param>
        /// <param name="confFileData">The csr config data in base64 encoding.</param>
        /// <param name="customerFrgId">The customer fragment ID that will be used to create the DFC key (if empty, the key will be created independently of a customer fragment).</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="expirationEventIn">How many days before the expiration of the certificate would you like to be notified..</param>
        /// <param name="generateSelfSignedCertificate">Whether to generate a self signed certificate with the key. If set, - -certificate-ttl must be provided..</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="metadata">Deprecated - use description.</param>
        /// <param name="name">DFCKey name (required).</param>
        /// <param name="rotationEventIn">How many days before the rotation of the item would you like to be notified.</param>
        /// <param name="rotationInterval">The number of days to wait between every automatic rotation (7-365).</param>
        /// <param name="splitLevel">The number of fragments that the item will be split into (not includes customer fragment) (default to 3).</param>
        /// <param name="tag">List of the tags attached to this DFC key.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public CreateDFCKey(string alg = default(string), string autoRotate = default(string), string certificateCommonName = default(string), string certificateCountry = default(string), string certificateDigestAlgo = default(string), string certificateFormat = default(string), string certificateLocality = default(string), string certificateOrganization = default(string), string certificateProvince = default(string), long certificateTtl = default(long), string confFileData = default(string), string customerFrgId = default(string), string deleteProtection = default(string), string description = default(string), List<string> expirationEventIn = default(List<string>), bool generateSelfSignedCertificate = default(bool), bool json = false, string metadata = default(string), string name = default(string), List<string> rotationEventIn = default(List<string>), string rotationInterval = default(string), long splitLevel = 3, List<string> tag = default(List<string>), string token = default(string), string uidToken = default(string))
        {
            // to ensure "alg" is required (not null)
            if (alg == null)
            {
                throw new ArgumentNullException("alg is a required property for CreateDFCKey and cannot be null");
            }
            this.Alg = alg;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateDFCKey and cannot be null");
            }
            this.Name = name;
            this.AutoRotate = autoRotate;
            this.CertificateCommonName = certificateCommonName;
            this.CertificateCountry = certificateCountry;
            this.CertificateDigestAlgo = certificateDigestAlgo;
            this.CertificateFormat = certificateFormat;
            this.CertificateLocality = certificateLocality;
            this.CertificateOrganization = certificateOrganization;
            this.CertificateProvince = certificateProvince;
            this.CertificateTtl = certificateTtl;
            this.ConfFileData = confFileData;
            this.CustomerFrgId = customerFrgId;
            this.DeleteProtection = deleteProtection;
            this.Description = description;
            this.ExpirationEventIn = expirationEventIn;
            this.GenerateSelfSignedCertificate = generateSelfSignedCertificate;
            this.Json = json;
            this.Metadata = metadata;
            this.RotationEventIn = rotationEventIn;
            this.RotationInterval = rotationInterval;
            this.SplitLevel = splitLevel;
            this.Tag = tag;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// DFCKey type; options: [AES128GCM, AES256GCM, AES128SIV, AES256SIV, AES128CBC, AES256CBC, RSA1024, RSA2048, RSA3072, RSA4096]
        /// </summary>
        /// <value>DFCKey type; options: [AES128GCM, AES256GCM, AES128SIV, AES256SIV, AES128CBC, AES256CBC, RSA1024, RSA2048, RSA3072, RSA4096]</value>
        [DataMember(Name = "alg", IsRequired = true, EmitDefaultValue = true)]
        public string Alg { get; set; }

        /// <summary>
        /// Whether to automatically rotate every rotation_interval days, or disable existing automatic rotation [true/false]
        /// </summary>
        /// <value>Whether to automatically rotate every rotation_interval days, or disable existing automatic rotation [true/false]</value>
        [DataMember(Name = "auto-rotate", EmitDefaultValue = false)]
        public string AutoRotate { get; set; }

        /// <summary>
        /// Common name for the generated certificate. Relevant only for generate-self-signed-certificate.
        /// </summary>
        /// <value>Common name for the generated certificate. Relevant only for generate-self-signed-certificate.</value>
        [DataMember(Name = "certificate-common-name", EmitDefaultValue = false)]
        public string CertificateCommonName { get; set; }

        /// <summary>
        /// Country name for the generated certificate. Relevant only for generate-self-signed-certificate.
        /// </summary>
        /// <value>Country name for the generated certificate. Relevant only for generate-self-signed-certificate.</value>
        [DataMember(Name = "certificate-country", EmitDefaultValue = false)]
        public string CertificateCountry { get; set; }

        /// <summary>
        /// Digest algorithm to be used for the certificate key signing. Currently, we support only \&quot;sha256\&quot; so we hide this option for CLI.
        /// </summary>
        /// <value>Digest algorithm to be used for the certificate key signing. Currently, we support only \&quot;sha256\&quot; so we hide this option for CLI.</value>
        [DataMember(Name = "certificate-digest-algo", EmitDefaultValue = false)]
        public string CertificateDigestAlgo { get; set; }

        /// <summary>
        /// Gets or Sets CertificateFormat
        /// </summary>
        [DataMember(Name = "certificate-format", EmitDefaultValue = false)]
        public string CertificateFormat { get; set; }

        /// <summary>
        /// Locality for the generated certificate. Relevant only for generate-self-signed-certificate.
        /// </summary>
        /// <value>Locality for the generated certificate. Relevant only for generate-self-signed-certificate.</value>
        [DataMember(Name = "certificate-locality", EmitDefaultValue = false)]
        public string CertificateLocality { get; set; }

        /// <summary>
        /// Organization name for the generated certificate. Relevant only for generate-self-signed-certificate.
        /// </summary>
        /// <value>Organization name for the generated certificate. Relevant only for generate-self-signed-certificate.</value>
        [DataMember(Name = "certificate-organization", EmitDefaultValue = false)]
        public string CertificateOrganization { get; set; }

        /// <summary>
        /// Province name for the generated certificate. Relevant only for generate-self-signed-certificate.
        /// </summary>
        /// <value>Province name for the generated certificate. Relevant only for generate-self-signed-certificate.</value>
        [DataMember(Name = "certificate-province", EmitDefaultValue = false)]
        public string CertificateProvince { get; set; }

        /// <summary>
        /// TTL in days for the generated certificate. Required only for generate-self-signed-certificate.
        /// </summary>
        /// <value>TTL in days for the generated certificate. Required only for generate-self-signed-certificate.</value>
        [DataMember(Name = "certificate-ttl", EmitDefaultValue = false)]
        public long CertificateTtl { get; set; }

        /// <summary>
        /// The csr config data in base64 encoding
        /// </summary>
        /// <value>The csr config data in base64 encoding</value>
        [DataMember(Name = "conf-file-data", EmitDefaultValue = false)]
        public string ConfFileData { get; set; }

        /// <summary>
        /// The customer fragment ID that will be used to create the DFC key (if empty, the key will be created independently of a customer fragment)
        /// </summary>
        /// <value>The customer fragment ID that will be used to create the DFC key (if empty, the key will be created independently of a customer fragment)</value>
        [DataMember(Name = "customer-frg-id", EmitDefaultValue = false)]
        public string CustomerFrgId { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// How many days before the expiration of the certificate would you like to be notified.
        /// </summary>
        /// <value>How many days before the expiration of the certificate would you like to be notified.</value>
        [DataMember(Name = "expiration-event-in", EmitDefaultValue = false)]
        public List<string> ExpirationEventIn { get; set; }

        /// <summary>
        /// Whether to generate a self signed certificate with the key. If set, - -certificate-ttl must be provided.
        /// </summary>
        /// <value>Whether to generate a self signed certificate with the key. If set, - -certificate-ttl must be provided.</value>
        [DataMember(Name = "generate-self-signed-certificate", EmitDefaultValue = true)]
        public bool GenerateSelfSignedCertificate { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Deprecated - use description
        /// </summary>
        /// <value>Deprecated - use description</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// DFCKey name
        /// </summary>
        /// <value>DFCKey name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// How many days before the rotation of the item would you like to be notified
        /// </summary>
        /// <value>How many days before the rotation of the item would you like to be notified</value>
        [DataMember(Name = "rotation-event-in", EmitDefaultValue = false)]
        public List<string> RotationEventIn { get; set; }

        /// <summary>
        /// The number of days to wait between every automatic rotation (7-365)
        /// </summary>
        /// <value>The number of days to wait between every automatic rotation (7-365)</value>
        [DataMember(Name = "rotation-interval", EmitDefaultValue = false)]
        public string RotationInterval { get; set; }

        /// <summary>
        /// The number of fragments that the item will be split into (not includes customer fragment)
        /// </summary>
        /// <value>The number of fragments that the item will be split into (not includes customer fragment)</value>
        [DataMember(Name = "split-level", EmitDefaultValue = false)]
        public long SplitLevel { get; set; }

        /// <summary>
        /// List of the tags attached to this DFC key
        /// </summary>
        /// <value>List of the tags attached to this DFC key</value>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public List<string> Tag { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDFCKey {\n");
            sb.Append("  Alg: ").Append(Alg).Append("\n");
            sb.Append("  AutoRotate: ").Append(AutoRotate).Append("\n");
            sb.Append("  CertificateCommonName: ").Append(CertificateCommonName).Append("\n");
            sb.Append("  CertificateCountry: ").Append(CertificateCountry).Append("\n");
            sb.Append("  CertificateDigestAlgo: ").Append(CertificateDigestAlgo).Append("\n");
            sb.Append("  CertificateFormat: ").Append(CertificateFormat).Append("\n");
            sb.Append("  CertificateLocality: ").Append(CertificateLocality).Append("\n");
            sb.Append("  CertificateOrganization: ").Append(CertificateOrganization).Append("\n");
            sb.Append("  CertificateProvince: ").Append(CertificateProvince).Append("\n");
            sb.Append("  CertificateTtl: ").Append(CertificateTtl).Append("\n");
            sb.Append("  ConfFileData: ").Append(ConfFileData).Append("\n");
            sb.Append("  CustomerFrgId: ").Append(CustomerFrgId).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpirationEventIn: ").Append(ExpirationEventIn).Append("\n");
            sb.Append("  GenerateSelfSignedCertificate: ").Append(GenerateSelfSignedCertificate).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RotationEventIn: ").Append(RotationEventIn).Append("\n");
            sb.Append("  RotationInterval: ").Append(RotationInterval).Append("\n");
            sb.Append("  SplitLevel: ").Append(SplitLevel).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
