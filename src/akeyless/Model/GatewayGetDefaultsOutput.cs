/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GatewayGetDefaultsOutput
    /// </summary>
    [DataContract(Name = "GatewayGetDefaultsOutput")]
    public partial class GatewayGetDefaultsOutput : IEquatable<GatewayGetDefaultsOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayGetDefaultsOutput" /> class.
        /// </summary>
        /// <param name="certificateAccessId">certificateAccessId.</param>
        /// <param name="defaultProtectionKeyId">defaultProtectionKeyId.</param>
        /// <param name="notifyOnStatusChange">notifyOnStatusChange.</param>
        /// <param name="oidcAccessId">oidcAccessId.</param>
        /// <param name="samlAccessId">samlAccessId.</param>
        public GatewayGetDefaultsOutput(string certificateAccessId = default(string), string defaultProtectionKeyId = default(string), bool notifyOnStatusChange = default(bool), string oidcAccessId = default(string), string samlAccessId = default(string))
        {
            this.CertificateAccessId = certificateAccessId;
            this.DefaultProtectionKeyId = defaultProtectionKeyId;
            this.NotifyOnStatusChange = notifyOnStatusChange;
            this.OidcAccessId = oidcAccessId;
            this.SamlAccessId = samlAccessId;
        }

        /// <summary>
        /// Gets or Sets CertificateAccessId
        /// </summary>
        [DataMember(Name = "certificate_access_id", EmitDefaultValue = false)]
        public string CertificateAccessId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultProtectionKeyId
        /// </summary>
        [DataMember(Name = "default_protection_key_id", EmitDefaultValue = false)]
        public string DefaultProtectionKeyId { get; set; }

        /// <summary>
        /// Gets or Sets NotifyOnStatusChange
        /// </summary>
        [DataMember(Name = "notify_on_status_change", EmitDefaultValue = true)]
        public bool NotifyOnStatusChange { get; set; }

        /// <summary>
        /// Gets or Sets OidcAccessId
        /// </summary>
        [DataMember(Name = "oidc_access_id", EmitDefaultValue = false)]
        public string OidcAccessId { get; set; }

        /// <summary>
        /// Gets or Sets SamlAccessId
        /// </summary>
        [DataMember(Name = "saml_access_id", EmitDefaultValue = false)]
        public string SamlAccessId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayGetDefaultsOutput {\n");
            sb.Append("  CertificateAccessId: ").Append(CertificateAccessId).Append("\n");
            sb.Append("  DefaultProtectionKeyId: ").Append(DefaultProtectionKeyId).Append("\n");
            sb.Append("  NotifyOnStatusChange: ").Append(NotifyOnStatusChange).Append("\n");
            sb.Append("  OidcAccessId: ").Append(OidcAccessId).Append("\n");
            sb.Append("  SamlAccessId: ").Append(SamlAccessId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayGetDefaultsOutput);
        }

        /// <summary>
        /// Returns true if GatewayGetDefaultsOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayGetDefaultsOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayGetDefaultsOutput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CertificateAccessId == input.CertificateAccessId ||
                    (this.CertificateAccessId != null &&
                    this.CertificateAccessId.Equals(input.CertificateAccessId))
                ) && 
                (
                    this.DefaultProtectionKeyId == input.DefaultProtectionKeyId ||
                    (this.DefaultProtectionKeyId != null &&
                    this.DefaultProtectionKeyId.Equals(input.DefaultProtectionKeyId))
                ) && 
                (
                    this.NotifyOnStatusChange == input.NotifyOnStatusChange ||
                    this.NotifyOnStatusChange.Equals(input.NotifyOnStatusChange)
                ) && 
                (
                    this.OidcAccessId == input.OidcAccessId ||
                    (this.OidcAccessId != null &&
                    this.OidcAccessId.Equals(input.OidcAccessId))
                ) && 
                (
                    this.SamlAccessId == input.SamlAccessId ||
                    (this.SamlAccessId != null &&
                    this.SamlAccessId.Equals(input.SamlAccessId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertificateAccessId != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateAccessId.GetHashCode();
                }
                if (this.DefaultProtectionKeyId != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultProtectionKeyId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotifyOnStatusChange.GetHashCode();
                if (this.OidcAccessId != null)
                {
                    hashCode = (hashCode * 59) + this.OidcAccessId.GetHashCode();
                }
                if (this.SamlAccessId != null)
                {
                    hashCode = (hashCode * 59) + this.SamlAccessId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
