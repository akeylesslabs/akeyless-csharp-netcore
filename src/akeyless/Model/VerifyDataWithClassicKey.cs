/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// VerifyDataWithClassicKey
    /// </summary>
    [DataContract(Name = "verifyDataWithClassicKey")]
    public partial class VerifyDataWithClassicKey : IEquatable<VerifyDataWithClassicKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyDataWithClassicKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VerifyDataWithClassicKey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyDataWithClassicKey" /> class.
        /// </summary>
        /// <param name="data">Data (required).</param>
        /// <param name="displayId">The display id of the key to use in the verification process.</param>
        /// <param name="hashed">Defines whether the data should be hashed as part of the signing. If true, the data will not be hashed (default to false).</param>
        /// <param name="hashingMethod">HashingMethod (default to &quot;SHA256&quot;).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="keyName">The name of the key to use in the verification process (required).</param>
        /// <param name="signature">The data&#39;s signature in a Base64 format. (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="version">classic key version (required).</param>
        public VerifyDataWithClassicKey(string data = default(string), string displayId = default(string), bool hashed = false, string hashingMethod = "SHA256", bool json = false, string keyName = default(string), string signature = default(string), string token = default(string), string uidToken = default(string), int version = default(int))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for VerifyDataWithClassicKey and cannot be null");
            }
            this.Data = data;
            // to ensure "keyName" is required (not null)
            if (keyName == null)
            {
                throw new ArgumentNullException("keyName is a required property for VerifyDataWithClassicKey and cannot be null");
            }
            this.KeyName = keyName;
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for VerifyDataWithClassicKey and cannot be null");
            }
            this.Signature = signature;
            this._Version = version;
            this.DisplayId = displayId;
            this.Hashed = hashed;
            // use default value if no "hashingMethod" provided
            this.HashingMethod = hashingMethod ?? "SHA256";
            this.Json = json;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Data
        /// </summary>
        /// <value>Data</value>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public string Data { get; set; }

        /// <summary>
        /// The display id of the key to use in the verification process
        /// </summary>
        /// <value>The display id of the key to use in the verification process</value>
        [DataMember(Name = "display-id", EmitDefaultValue = false)]
        public string DisplayId { get; set; }

        /// <summary>
        /// Defines whether the data should be hashed as part of the signing. If true, the data will not be hashed
        /// </summary>
        /// <value>Defines whether the data should be hashed as part of the signing. If true, the data will not be hashed</value>
        [DataMember(Name = "hashed", EmitDefaultValue = true)]
        public bool Hashed { get; set; }

        /// <summary>
        /// HashingMethod
        /// </summary>
        /// <value>HashingMethod</value>
        [DataMember(Name = "hashing-method", EmitDefaultValue = false)]
        public string HashingMethod { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The name of the key to use in the verification process
        /// </summary>
        /// <value>The name of the key to use in the verification process</value>
        [DataMember(Name = "key-name", IsRequired = true, EmitDefaultValue = true)]
        public string KeyName { get; set; }

        /// <summary>
        /// The data&#39;s signature in a Base64 format.
        /// </summary>
        /// <value>The data&#39;s signature in a Base64 format.</value>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public string Signature { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// classic key version
        /// </summary>
        /// <value>classic key version</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public int _Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyDataWithClassicKey {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DisplayId: ").Append(DisplayId).Append("\n");
            sb.Append("  Hashed: ").Append(Hashed).Append("\n");
            sb.Append("  HashingMethod: ").Append(HashingMethod).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeyName: ").Append(KeyName).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifyDataWithClassicKey);
        }

        /// <summary>
        /// Returns true if VerifyDataWithClassicKey instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifyDataWithClassicKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyDataWithClassicKey input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.DisplayId == input.DisplayId ||
                    (this.DisplayId != null &&
                    this.DisplayId.Equals(input.DisplayId))
                ) && 
                (
                    this.Hashed == input.Hashed ||
                    this.Hashed.Equals(input.Hashed)
                ) && 
                (
                    this.HashingMethod == input.HashingMethod ||
                    (this.HashingMethod != null &&
                    this.HashingMethod.Equals(input.HashingMethod))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.KeyName == input.KeyName ||
                    (this.KeyName != null &&
                    this.KeyName.Equals(input.KeyName))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this._Version == input._Version ||
                    this._Version.Equals(input._Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.DisplayId != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Hashed.GetHashCode();
                if (this.HashingMethod != null)
                {
                    hashCode = (hashCode * 59) + this.HashingMethod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.KeyName != null)
                {
                    hashCode = (hashCode * 59) + this.KeyName.GetHashCode();
                }
                if (this.Signature != null)
                {
                    hashCode = (hashCode * 59) + this.Signature.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this._Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
