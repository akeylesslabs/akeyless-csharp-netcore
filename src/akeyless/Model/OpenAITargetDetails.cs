/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// OpenAITargetDetails defines details related to connecting to an OpenAI provider
    /// </summary>
    [DataContract(Name = "OpenAITargetDetails")]
    public partial class OpenAITargetDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenAITargetDetails" /> class.
        /// </summary>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="apiKeyId">apiKeyId.</param>
        /// <param name="model">model.</param>
        /// <param name="openaiUrl">openaiUrl.</param>
        /// <param name="organizationId">organizationId.</param>
        public OpenAITargetDetails(string apiKey = default(string), string apiKeyId = default(string), string model = default(string), string openaiUrl = default(string), string organizationId = default(string))
        {
            this.ApiKey = apiKey;
            this.ApiKeyId = apiKeyId;
            this.Model = model;
            this.OpenaiUrl = openaiUrl;
            this.OrganizationId = organizationId;
        }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name = "api_key", EmitDefaultValue = false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets ApiKeyId
        /// </summary>
        [DataMember(Name = "api_key_id", EmitDefaultValue = false)]
        public string ApiKeyId { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets OpenaiUrl
        /// </summary>
        [DataMember(Name = "openai_url", EmitDefaultValue = false)]
        public string OpenaiUrl { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organization_id", EmitDefaultValue = false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenAITargetDetails {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  ApiKeyId: ").Append(ApiKeyId).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  OpenaiUrl: ").Append(OpenaiUrl).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
