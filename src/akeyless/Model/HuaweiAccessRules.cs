/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// HuaweiAccessRules
    /// </summary>
    [DataContract(Name = "HuaweiAccessRules")]
    public partial class HuaweiAccessRules : IEquatable<HuaweiAccessRules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HuaweiAccessRules" /> class.
        /// </summary>
        /// <param name="authEndpoint">The auth URL..</param>
        /// <param name="domainId">The list of domain ids that the login is restricted to..</param>
        /// <param name="domainName">The list of domainNames that the login is restricted to..</param>
        /// <param name="tenantId">The list of tenantIDs  that the login is restricted to..</param>
        /// <param name="tenantName">The list of tenantNames  that the login is restricted to..</param>
        /// <param name="userId">The list of user ids that the login is restricted to..</param>
        /// <param name="userName">The list of user names that the login is restricted to..</param>
        public HuaweiAccessRules(string authEndpoint = default(string), List<string> domainId = default(List<string>), List<string> domainName = default(List<string>), List<string> tenantId = default(List<string>), List<string> tenantName = default(List<string>), List<string> userId = default(List<string>), List<string> userName = default(List<string>))
        {
            this.AuthEndpoint = authEndpoint;
            this.DomainId = domainId;
            this.DomainName = domainName;
            this.TenantId = tenantId;
            this.TenantName = tenantName;
            this.UserId = userId;
            this.UserName = userName;
        }

        /// <summary>
        /// The auth URL.
        /// </summary>
        /// <value>The auth URL.</value>
        [DataMember(Name = "auth_endpoint", EmitDefaultValue = false)]
        public string AuthEndpoint { get; set; }

        /// <summary>
        /// The list of domain ids that the login is restricted to.
        /// </summary>
        /// <value>The list of domain ids that the login is restricted to.</value>
        [DataMember(Name = "domain_id", EmitDefaultValue = false)]
        public List<string> DomainId { get; set; }

        /// <summary>
        /// The list of domainNames that the login is restricted to.
        /// </summary>
        /// <value>The list of domainNames that the login is restricted to.</value>
        [DataMember(Name = "domain_name", EmitDefaultValue = false)]
        public List<string> DomainName { get; set; }

        /// <summary>
        /// The list of tenantIDs  that the login is restricted to.
        /// </summary>
        /// <value>The list of tenantIDs  that the login is restricted to.</value>
        [DataMember(Name = "tenant_id", EmitDefaultValue = false)]
        public List<string> TenantId { get; set; }

        /// <summary>
        /// The list of tenantNames  that the login is restricted to.
        /// </summary>
        /// <value>The list of tenantNames  that the login is restricted to.</value>
        [DataMember(Name = "tenant_name", EmitDefaultValue = false)]
        public List<string> TenantName { get; set; }

        /// <summary>
        /// The list of user ids that the login is restricted to.
        /// </summary>
        /// <value>The list of user ids that the login is restricted to.</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public List<string> UserId { get; set; }

        /// <summary>
        /// The list of user names that the login is restricted to.
        /// </summary>
        /// <value>The list of user names that the login is restricted to.</value>
        [DataMember(Name = "user_name", EmitDefaultValue = false)]
        public List<string> UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HuaweiAccessRules {\n");
            sb.Append("  AuthEndpoint: ").Append(AuthEndpoint).Append("\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  TenantName: ").Append(TenantName).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HuaweiAccessRules);
        }

        /// <summary>
        /// Returns true if HuaweiAccessRules instances are equal
        /// </summary>
        /// <param name="input">Instance of HuaweiAccessRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HuaweiAccessRules input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthEndpoint == input.AuthEndpoint ||
                    (this.AuthEndpoint != null &&
                    this.AuthEndpoint.Equals(input.AuthEndpoint))
                ) && 
                (
                    this.DomainId == input.DomainId ||
                    this.DomainId != null &&
                    input.DomainId != null &&
                    this.DomainId.SequenceEqual(input.DomainId)
                ) && 
                (
                    this.DomainName == input.DomainName ||
                    this.DomainName != null &&
                    input.DomainName != null &&
                    this.DomainName.SequenceEqual(input.DomainName)
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    this.TenantId != null &&
                    input.TenantId != null &&
                    this.TenantId.SequenceEqual(input.TenantId)
                ) && 
                (
                    this.TenantName == input.TenantName ||
                    this.TenantName != null &&
                    input.TenantName != null &&
                    this.TenantName.SequenceEqual(input.TenantName)
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId != null &&
                    input.UserId != null &&
                    this.UserId.SequenceEqual(input.UserId)
                ) && 
                (
                    this.UserName == input.UserName ||
                    this.UserName != null &&
                    input.UserName != null &&
                    this.UserName.SequenceEqual(input.UserName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthEndpoint != null)
                    hashCode = hashCode * 59 + this.AuthEndpoint.GetHashCode();
                if (this.DomainId != null)
                    hashCode = hashCode * 59 + this.DomainId.GetHashCode();
                if (this.DomainName != null)
                    hashCode = hashCode * 59 + this.DomainName.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.TenantName != null)
                    hashCode = hashCode * 59 + this.TenantName.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
