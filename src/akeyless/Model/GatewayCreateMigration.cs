/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateMigration is a command that create migration
    /// </summary>
    [DataContract(Name = "gatewayCreateMigration")]
    public partial class GatewayCreateMigration : IEquatable<GatewayCreateMigration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateMigration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateMigration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateMigration" /> class.
        /// </summary>
        /// <param name="awsKey">AWS Secret Access Key (relevant only for AWS migration).</param>
        /// <param name="awsKeyId">AWS Access Key ID with sufficient permissions to get all secrets, e.g. &#39;arn:aws:secretsmanager:[Region]:[AccountId]:secret:[/path/to/secrets/_*]&#39; (relevant only for AWS migration).</param>
        /// <param name="awsRegion">AWS region of the required Secrets Manager (relevant only for AWS migration).</param>
        /// <param name="azureClientId">Azure Key Vault Access client ID, should be Azure AD App with a service principal (relevant only for Azure Key Vault migration).</param>
        /// <param name="azureKvName">Azure Key Vault Name (relevant only for Azure Key Vault migration).</param>
        /// <param name="azureSecret">Azure Key Vault secret (relevant only for Azure Key Vault migration).</param>
        /// <param name="azureTenantId">Azure Key Vault Access tenant ID (relevant only for Azure Key Vault migration).</param>
        /// <param name="gcpKey">Base64-encoded GCP Service Account private key text with sufficient permissions to Secrets Manager, Minimum required permission is Secret Manager Secret Accessor, e.g. &#39;roles/secretmanager.secretAccessor&#39; (relevant only for GCP migration).</param>
        /// <param name="hashiJson">Import secret key as json value or independent secrets (relevant only for HasiCorp Vault migration).</param>
        /// <param name="hashiNs">HashiCorp Vault Namespaces is a comma-separated list of namespaces which need to be imported into Akeyless Vault. For every provided namespace, all its child namespaces are imported as well, e.g. nmsp/subnmsp1/subnmsp2,nmsp/anothernmsp. By default, import all namespaces (relevant only for HasiCorp Vault migration).</param>
        /// <param name="hashiToken">HashiCorp Vault access token with sufficient permissions to preform list &amp; read operations on secrets objects (relevant only for HasiCorp Vault migration).</param>
        /// <param name="hashiUrl">HashiCorp Vault API URL, e.g. https://vault-mgr01:8200 (relevant only for HasiCorp Vault migration).</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="k8sCaCertificate">For Certificate Authentication method K8s Cluster CA certificate (relevant only for K8s migration with Certificate Authentication method).</param>
        /// <param name="k8sClientCertificate">K8s Client certificate with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Certificate Authentication method).</param>
        /// <param name="k8sClientKey">K8s Client key (relevant only for K8s migration with Certificate Authentication method).</param>
        /// <param name="k8sNamespace">K8s Namespace, Use this field to import secrets from a particular namespace only. By default, the secrets are imported from all namespaces (relevant only for K8s migration).</param>
        /// <param name="k8sPassword">K8s Client password (relevant only for K8s migration with Password Authentication method).</param>
        /// <param name="k8sSkipSystem">K8s Skip Control Plane Secrets, This option allows to avoid importing secrets from system namespaces (relevant only for K8s migration).</param>
        /// <param name="k8sToken">For Token Authentication method K8s Bearer Token with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Token Authentication method).</param>
        /// <param name="k8sUrl">K8s API Server URL, e.g. https://k8s-api.mycompany.com:6443 (relevant only for K8s migration).</param>
        /// <param name="k8sUsername">For Password Authentication method K8s Client username with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Password Authentication method).</param>
        /// <param name="name">Migration name (required).</param>
        /// <param name="opEmail">1Password user email to connect to the API.</param>
        /// <param name="opPassword">1Password user password to connect to the API.</param>
        /// <param name="opSecretKey">1Password user secret key to connect to the API.</param>
        /// <param name="opUrl">1Password api container url.</param>
        /// <param name="opVaults">1Password list of vault to get the items from.</param>
        /// <param name="protectionKey">The name of the key that protects the classic key value (if empty, the account default key will be used).</param>
        /// <param name="targetLocation">Target location in Akeyless for imported secrets.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="type">Migration type (hashi/aws/gcp/k8s/azure_kv/1password).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GatewayCreateMigration(string awsKey = default(string), string awsKeyId = default(string), string awsRegion = default(string), string azureClientId = default(string), string azureKvName = default(string), string azureSecret = default(string), string azureTenantId = default(string), string gcpKey = default(string), string hashiJson = default(string), List<string> hashiNs = default(List<string>), string hashiToken = default(string), string hashiUrl = default(string), bool json = default(bool), List<int> k8sCaCertificate = default(List<int>), List<int> k8sClientCertificate = default(List<int>), List<int> k8sClientKey = default(List<int>), string k8sNamespace = default(string), string k8sPassword = default(string), bool k8sSkipSystem = default(bool), string k8sToken = default(string), string k8sUrl = default(string), string k8sUsername = default(string), string name = default(string), string opEmail = default(string), string opPassword = default(string), string opSecretKey = default(string), string opUrl = default(string), List<string> opVaults = default(List<string>), string protectionKey = default(string), string targetLocation = default(string), string token = default(string), string type = default(string), string uidToken = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for GatewayCreateMigration and cannot be null");
            }
            this.Name = name;
            this.AwsKey = awsKey;
            this.AwsKeyId = awsKeyId;
            this.AwsRegion = awsRegion;
            this.AzureClientId = azureClientId;
            this.AzureKvName = azureKvName;
            this.AzureSecret = azureSecret;
            this.AzureTenantId = azureTenantId;
            this.GcpKey = gcpKey;
            this.HashiJson = hashiJson;
            this.HashiNs = hashiNs;
            this.HashiToken = hashiToken;
            this.HashiUrl = hashiUrl;
            this.Json = json;
            this.K8sCaCertificate = k8sCaCertificate;
            this.K8sClientCertificate = k8sClientCertificate;
            this.K8sClientKey = k8sClientKey;
            this.K8sNamespace = k8sNamespace;
            this.K8sPassword = k8sPassword;
            this.K8sSkipSystem = k8sSkipSystem;
            this.K8sToken = k8sToken;
            this.K8sUrl = k8sUrl;
            this.K8sUsername = k8sUsername;
            this.OpEmail = opEmail;
            this.OpPassword = opPassword;
            this.OpSecretKey = opSecretKey;
            this.OpUrl = opUrl;
            this.OpVaults = opVaults;
            this.ProtectionKey = protectionKey;
            this.TargetLocation = targetLocation;
            this.Token = token;
            this.Type = type;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// AWS Secret Access Key (relevant only for AWS migration)
        /// </summary>
        /// <value>AWS Secret Access Key (relevant only for AWS migration)</value>
        [DataMember(Name = "aws-key", EmitDefaultValue = false)]
        public string AwsKey { get; set; }

        /// <summary>
        /// AWS Access Key ID with sufficient permissions to get all secrets, e.g. &#39;arn:aws:secretsmanager:[Region]:[AccountId]:secret:[/path/to/secrets/_*]&#39; (relevant only for AWS migration)
        /// </summary>
        /// <value>AWS Access Key ID with sufficient permissions to get all secrets, e.g. &#39;arn:aws:secretsmanager:[Region]:[AccountId]:secret:[/path/to/secrets/_*]&#39; (relevant only for AWS migration)</value>
        [DataMember(Name = "aws-key-id", EmitDefaultValue = false)]
        public string AwsKeyId { get; set; }

        /// <summary>
        /// AWS region of the required Secrets Manager (relevant only for AWS migration)
        /// </summary>
        /// <value>AWS region of the required Secrets Manager (relevant only for AWS migration)</value>
        [DataMember(Name = "aws-region", EmitDefaultValue = false)]
        public string AwsRegion { get; set; }

        /// <summary>
        /// Azure Key Vault Access client ID, should be Azure AD App with a service principal (relevant only for Azure Key Vault migration)
        /// </summary>
        /// <value>Azure Key Vault Access client ID, should be Azure AD App with a service principal (relevant only for Azure Key Vault migration)</value>
        [DataMember(Name = "azure-client-id", EmitDefaultValue = false)]
        public string AzureClientId { get; set; }

        /// <summary>
        /// Azure Key Vault Name (relevant only for Azure Key Vault migration)
        /// </summary>
        /// <value>Azure Key Vault Name (relevant only for Azure Key Vault migration)</value>
        [DataMember(Name = "azure-kv-name", EmitDefaultValue = false)]
        public string AzureKvName { get; set; }

        /// <summary>
        /// Azure Key Vault secret (relevant only for Azure Key Vault migration)
        /// </summary>
        /// <value>Azure Key Vault secret (relevant only for Azure Key Vault migration)</value>
        [DataMember(Name = "azure-secret", EmitDefaultValue = false)]
        public string AzureSecret { get; set; }

        /// <summary>
        /// Azure Key Vault Access tenant ID (relevant only for Azure Key Vault migration)
        /// </summary>
        /// <value>Azure Key Vault Access tenant ID (relevant only for Azure Key Vault migration)</value>
        [DataMember(Name = "azure-tenant-id", EmitDefaultValue = false)]
        public string AzureTenantId { get; set; }

        /// <summary>
        /// Base64-encoded GCP Service Account private key text with sufficient permissions to Secrets Manager, Minimum required permission is Secret Manager Secret Accessor, e.g. &#39;roles/secretmanager.secretAccessor&#39; (relevant only for GCP migration)
        /// </summary>
        /// <value>Base64-encoded GCP Service Account private key text with sufficient permissions to Secrets Manager, Minimum required permission is Secret Manager Secret Accessor, e.g. &#39;roles/secretmanager.secretAccessor&#39; (relevant only for GCP migration)</value>
        [DataMember(Name = "gcp-key", EmitDefaultValue = false)]
        public string GcpKey { get; set; }

        /// <summary>
        /// Import secret key as json value or independent secrets (relevant only for HasiCorp Vault migration)
        /// </summary>
        /// <value>Import secret key as json value or independent secrets (relevant only for HasiCorp Vault migration)</value>
        [DataMember(Name = "hashi-json", EmitDefaultValue = false)]
        public string HashiJson { get; set; }

        /// <summary>
        /// HashiCorp Vault Namespaces is a comma-separated list of namespaces which need to be imported into Akeyless Vault. For every provided namespace, all its child namespaces are imported as well, e.g. nmsp/subnmsp1/subnmsp2,nmsp/anothernmsp. By default, import all namespaces (relevant only for HasiCorp Vault migration)
        /// </summary>
        /// <value>HashiCorp Vault Namespaces is a comma-separated list of namespaces which need to be imported into Akeyless Vault. For every provided namespace, all its child namespaces are imported as well, e.g. nmsp/subnmsp1/subnmsp2,nmsp/anothernmsp. By default, import all namespaces (relevant only for HasiCorp Vault migration)</value>
        [DataMember(Name = "hashi-ns", EmitDefaultValue = false)]
        public List<string> HashiNs { get; set; }

        /// <summary>
        /// HashiCorp Vault access token with sufficient permissions to preform list &amp; read operations on secrets objects (relevant only for HasiCorp Vault migration)
        /// </summary>
        /// <value>HashiCorp Vault access token with sufficient permissions to preform list &amp; read operations on secrets objects (relevant only for HasiCorp Vault migration)</value>
        [DataMember(Name = "hashi-token", EmitDefaultValue = false)]
        public string HashiToken { get; set; }

        /// <summary>
        /// HashiCorp Vault API URL, e.g. https://vault-mgr01:8200 (relevant only for HasiCorp Vault migration)
        /// </summary>
        /// <value>HashiCorp Vault API URL, e.g. https://vault-mgr01:8200 (relevant only for HasiCorp Vault migration)</value>
        [DataMember(Name = "hashi-url", EmitDefaultValue = false)]
        public string HashiUrl { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// For Certificate Authentication method K8s Cluster CA certificate (relevant only for K8s migration with Certificate Authentication method)
        /// </summary>
        /// <value>For Certificate Authentication method K8s Cluster CA certificate (relevant only for K8s migration with Certificate Authentication method)</value>
        [DataMember(Name = "k8s-ca-certificate", EmitDefaultValue = false)]
        public List<int> K8sCaCertificate { get; set; }

        /// <summary>
        /// K8s Client certificate with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Certificate Authentication method)
        /// </summary>
        /// <value>K8s Client certificate with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Certificate Authentication method)</value>
        [DataMember(Name = "k8s-client-certificate", EmitDefaultValue = false)]
        public List<int> K8sClientCertificate { get; set; }

        /// <summary>
        /// K8s Client key (relevant only for K8s migration with Certificate Authentication method)
        /// </summary>
        /// <value>K8s Client key (relevant only for K8s migration with Certificate Authentication method)</value>
        [DataMember(Name = "k8s-client-key", EmitDefaultValue = false)]
        public List<int> K8sClientKey { get; set; }

        /// <summary>
        /// K8s Namespace, Use this field to import secrets from a particular namespace only. By default, the secrets are imported from all namespaces (relevant only for K8s migration)
        /// </summary>
        /// <value>K8s Namespace, Use this field to import secrets from a particular namespace only. By default, the secrets are imported from all namespaces (relevant only for K8s migration)</value>
        [DataMember(Name = "k8s-namespace", EmitDefaultValue = false)]
        public string K8sNamespace { get; set; }

        /// <summary>
        /// K8s Client password (relevant only for K8s migration with Password Authentication method)
        /// </summary>
        /// <value>K8s Client password (relevant only for K8s migration with Password Authentication method)</value>
        [DataMember(Name = "k8s-password", EmitDefaultValue = false)]
        public string K8sPassword { get; set; }

        /// <summary>
        /// K8s Skip Control Plane Secrets, This option allows to avoid importing secrets from system namespaces (relevant only for K8s migration)
        /// </summary>
        /// <value>K8s Skip Control Plane Secrets, This option allows to avoid importing secrets from system namespaces (relevant only for K8s migration)</value>
        [DataMember(Name = "k8s-skip-system", EmitDefaultValue = true)]
        public bool K8sSkipSystem { get; set; }

        /// <summary>
        /// For Token Authentication method K8s Bearer Token with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Token Authentication method)
        /// </summary>
        /// <value>For Token Authentication method K8s Bearer Token with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Token Authentication method)</value>
        [DataMember(Name = "k8s-token", EmitDefaultValue = false)]
        public string K8sToken { get; set; }

        /// <summary>
        /// K8s API Server URL, e.g. https://k8s-api.mycompany.com:6443 (relevant only for K8s migration)
        /// </summary>
        /// <value>K8s API Server URL, e.g. https://k8s-api.mycompany.com:6443 (relevant only for K8s migration)</value>
        [DataMember(Name = "k8s-url", EmitDefaultValue = false)]
        public string K8sUrl { get; set; }

        /// <summary>
        /// For Password Authentication method K8s Client username with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Password Authentication method)
        /// </summary>
        /// <value>For Password Authentication method K8s Client username with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Password Authentication method)</value>
        [DataMember(Name = "k8s-username", EmitDefaultValue = false)]
        public string K8sUsername { get; set; }

        /// <summary>
        /// Migration name
        /// </summary>
        /// <value>Migration name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// 1Password user email to connect to the API
        /// </summary>
        /// <value>1Password user email to connect to the API</value>
        [DataMember(Name = "op-email", EmitDefaultValue = false)]
        public string OpEmail { get; set; }

        /// <summary>
        /// 1Password user password to connect to the API
        /// </summary>
        /// <value>1Password user password to connect to the API</value>
        [DataMember(Name = "op-password", EmitDefaultValue = false)]
        public string OpPassword { get; set; }

        /// <summary>
        /// 1Password user secret key to connect to the API
        /// </summary>
        /// <value>1Password user secret key to connect to the API</value>
        [DataMember(Name = "op-secret-key", EmitDefaultValue = false)]
        public string OpSecretKey { get; set; }

        /// <summary>
        /// 1Password api container url
        /// </summary>
        /// <value>1Password api container url</value>
        [DataMember(Name = "op-url", EmitDefaultValue = false)]
        public string OpUrl { get; set; }

        /// <summary>
        /// 1Password list of vault to get the items from
        /// </summary>
        /// <value>1Password list of vault to get the items from</value>
        [DataMember(Name = "op-vaults", EmitDefaultValue = false)]
        public List<string> OpVaults { get; set; }

        /// <summary>
        /// The name of the key that protects the classic key value (if empty, the account default key will be used)
        /// </summary>
        /// <value>The name of the key that protects the classic key value (if empty, the account default key will be used)</value>
        [DataMember(Name = "protection-key", EmitDefaultValue = false)]
        public string ProtectionKey { get; set; }

        /// <summary>
        /// Target location in Akeyless for imported secrets
        /// </summary>
        /// <value>Target location in Akeyless for imported secrets</value>
        [DataMember(Name = "target-location", EmitDefaultValue = false)]
        public string TargetLocation { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Migration type (hashi/aws/gcp/k8s/azure_kv/1password)
        /// </summary>
        /// <value>Migration type (hashi/aws/gcp/k8s/azure_kv/1password)</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayCreateMigration {\n");
            sb.Append("  AwsKey: ").Append(AwsKey).Append("\n");
            sb.Append("  AwsKeyId: ").Append(AwsKeyId).Append("\n");
            sb.Append("  AwsRegion: ").Append(AwsRegion).Append("\n");
            sb.Append("  AzureClientId: ").Append(AzureClientId).Append("\n");
            sb.Append("  AzureKvName: ").Append(AzureKvName).Append("\n");
            sb.Append("  AzureSecret: ").Append(AzureSecret).Append("\n");
            sb.Append("  AzureTenantId: ").Append(AzureTenantId).Append("\n");
            sb.Append("  GcpKey: ").Append(GcpKey).Append("\n");
            sb.Append("  HashiJson: ").Append(HashiJson).Append("\n");
            sb.Append("  HashiNs: ").Append(HashiNs).Append("\n");
            sb.Append("  HashiToken: ").Append(HashiToken).Append("\n");
            sb.Append("  HashiUrl: ").Append(HashiUrl).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  K8sCaCertificate: ").Append(K8sCaCertificate).Append("\n");
            sb.Append("  K8sClientCertificate: ").Append(K8sClientCertificate).Append("\n");
            sb.Append("  K8sClientKey: ").Append(K8sClientKey).Append("\n");
            sb.Append("  K8sNamespace: ").Append(K8sNamespace).Append("\n");
            sb.Append("  K8sPassword: ").Append(K8sPassword).Append("\n");
            sb.Append("  K8sSkipSystem: ").Append(K8sSkipSystem).Append("\n");
            sb.Append("  K8sToken: ").Append(K8sToken).Append("\n");
            sb.Append("  K8sUrl: ").Append(K8sUrl).Append("\n");
            sb.Append("  K8sUsername: ").Append(K8sUsername).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OpEmail: ").Append(OpEmail).Append("\n");
            sb.Append("  OpPassword: ").Append(OpPassword).Append("\n");
            sb.Append("  OpSecretKey: ").Append(OpSecretKey).Append("\n");
            sb.Append("  OpUrl: ").Append(OpUrl).Append("\n");
            sb.Append("  OpVaults: ").Append(OpVaults).Append("\n");
            sb.Append("  ProtectionKey: ").Append(ProtectionKey).Append("\n");
            sb.Append("  TargetLocation: ").Append(TargetLocation).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayCreateMigration);
        }

        /// <summary>
        /// Returns true if GatewayCreateMigration instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayCreateMigration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayCreateMigration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AwsKey == input.AwsKey ||
                    (this.AwsKey != null &&
                    this.AwsKey.Equals(input.AwsKey))
                ) && 
                (
                    this.AwsKeyId == input.AwsKeyId ||
                    (this.AwsKeyId != null &&
                    this.AwsKeyId.Equals(input.AwsKeyId))
                ) && 
                (
                    this.AwsRegion == input.AwsRegion ||
                    (this.AwsRegion != null &&
                    this.AwsRegion.Equals(input.AwsRegion))
                ) && 
                (
                    this.AzureClientId == input.AzureClientId ||
                    (this.AzureClientId != null &&
                    this.AzureClientId.Equals(input.AzureClientId))
                ) && 
                (
                    this.AzureKvName == input.AzureKvName ||
                    (this.AzureKvName != null &&
                    this.AzureKvName.Equals(input.AzureKvName))
                ) && 
                (
                    this.AzureSecret == input.AzureSecret ||
                    (this.AzureSecret != null &&
                    this.AzureSecret.Equals(input.AzureSecret))
                ) && 
                (
                    this.AzureTenantId == input.AzureTenantId ||
                    (this.AzureTenantId != null &&
                    this.AzureTenantId.Equals(input.AzureTenantId))
                ) && 
                (
                    this.GcpKey == input.GcpKey ||
                    (this.GcpKey != null &&
                    this.GcpKey.Equals(input.GcpKey))
                ) && 
                (
                    this.HashiJson == input.HashiJson ||
                    (this.HashiJson != null &&
                    this.HashiJson.Equals(input.HashiJson))
                ) && 
                (
                    this.HashiNs == input.HashiNs ||
                    this.HashiNs != null &&
                    input.HashiNs != null &&
                    this.HashiNs.SequenceEqual(input.HashiNs)
                ) && 
                (
                    this.HashiToken == input.HashiToken ||
                    (this.HashiToken != null &&
                    this.HashiToken.Equals(input.HashiToken))
                ) && 
                (
                    this.HashiUrl == input.HashiUrl ||
                    (this.HashiUrl != null &&
                    this.HashiUrl.Equals(input.HashiUrl))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.K8sCaCertificate == input.K8sCaCertificate ||
                    this.K8sCaCertificate != null &&
                    input.K8sCaCertificate != null &&
                    this.K8sCaCertificate.SequenceEqual(input.K8sCaCertificate)
                ) && 
                (
                    this.K8sClientCertificate == input.K8sClientCertificate ||
                    this.K8sClientCertificate != null &&
                    input.K8sClientCertificate != null &&
                    this.K8sClientCertificate.SequenceEqual(input.K8sClientCertificate)
                ) && 
                (
                    this.K8sClientKey == input.K8sClientKey ||
                    this.K8sClientKey != null &&
                    input.K8sClientKey != null &&
                    this.K8sClientKey.SequenceEqual(input.K8sClientKey)
                ) && 
                (
                    this.K8sNamespace == input.K8sNamespace ||
                    (this.K8sNamespace != null &&
                    this.K8sNamespace.Equals(input.K8sNamespace))
                ) && 
                (
                    this.K8sPassword == input.K8sPassword ||
                    (this.K8sPassword != null &&
                    this.K8sPassword.Equals(input.K8sPassword))
                ) && 
                (
                    this.K8sSkipSystem == input.K8sSkipSystem ||
                    this.K8sSkipSystem.Equals(input.K8sSkipSystem)
                ) && 
                (
                    this.K8sToken == input.K8sToken ||
                    (this.K8sToken != null &&
                    this.K8sToken.Equals(input.K8sToken))
                ) && 
                (
                    this.K8sUrl == input.K8sUrl ||
                    (this.K8sUrl != null &&
                    this.K8sUrl.Equals(input.K8sUrl))
                ) && 
                (
                    this.K8sUsername == input.K8sUsername ||
                    (this.K8sUsername != null &&
                    this.K8sUsername.Equals(input.K8sUsername))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OpEmail == input.OpEmail ||
                    (this.OpEmail != null &&
                    this.OpEmail.Equals(input.OpEmail))
                ) && 
                (
                    this.OpPassword == input.OpPassword ||
                    (this.OpPassword != null &&
                    this.OpPassword.Equals(input.OpPassword))
                ) && 
                (
                    this.OpSecretKey == input.OpSecretKey ||
                    (this.OpSecretKey != null &&
                    this.OpSecretKey.Equals(input.OpSecretKey))
                ) && 
                (
                    this.OpUrl == input.OpUrl ||
                    (this.OpUrl != null &&
                    this.OpUrl.Equals(input.OpUrl))
                ) && 
                (
                    this.OpVaults == input.OpVaults ||
                    this.OpVaults != null &&
                    input.OpVaults != null &&
                    this.OpVaults.SequenceEqual(input.OpVaults)
                ) && 
                (
                    this.ProtectionKey == input.ProtectionKey ||
                    (this.ProtectionKey != null &&
                    this.ProtectionKey.Equals(input.ProtectionKey))
                ) && 
                (
                    this.TargetLocation == input.TargetLocation ||
                    (this.TargetLocation != null &&
                    this.TargetLocation.Equals(input.TargetLocation))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AwsKey != null)
                    hashCode = hashCode * 59 + this.AwsKey.GetHashCode();
                if (this.AwsKeyId != null)
                    hashCode = hashCode * 59 + this.AwsKeyId.GetHashCode();
                if (this.AwsRegion != null)
                    hashCode = hashCode * 59 + this.AwsRegion.GetHashCode();
                if (this.AzureClientId != null)
                    hashCode = hashCode * 59 + this.AzureClientId.GetHashCode();
                if (this.AzureKvName != null)
                    hashCode = hashCode * 59 + this.AzureKvName.GetHashCode();
                if (this.AzureSecret != null)
                    hashCode = hashCode * 59 + this.AzureSecret.GetHashCode();
                if (this.AzureTenantId != null)
                    hashCode = hashCode * 59 + this.AzureTenantId.GetHashCode();
                if (this.GcpKey != null)
                    hashCode = hashCode * 59 + this.GcpKey.GetHashCode();
                if (this.HashiJson != null)
                    hashCode = hashCode * 59 + this.HashiJson.GetHashCode();
                if (this.HashiNs != null)
                    hashCode = hashCode * 59 + this.HashiNs.GetHashCode();
                if (this.HashiToken != null)
                    hashCode = hashCode * 59 + this.HashiToken.GetHashCode();
                if (this.HashiUrl != null)
                    hashCode = hashCode * 59 + this.HashiUrl.GetHashCode();
                hashCode = hashCode * 59 + this.Json.GetHashCode();
                if (this.K8sCaCertificate != null)
                    hashCode = hashCode * 59 + this.K8sCaCertificate.GetHashCode();
                if (this.K8sClientCertificate != null)
                    hashCode = hashCode * 59 + this.K8sClientCertificate.GetHashCode();
                if (this.K8sClientKey != null)
                    hashCode = hashCode * 59 + this.K8sClientKey.GetHashCode();
                if (this.K8sNamespace != null)
                    hashCode = hashCode * 59 + this.K8sNamespace.GetHashCode();
                if (this.K8sPassword != null)
                    hashCode = hashCode * 59 + this.K8sPassword.GetHashCode();
                hashCode = hashCode * 59 + this.K8sSkipSystem.GetHashCode();
                if (this.K8sToken != null)
                    hashCode = hashCode * 59 + this.K8sToken.GetHashCode();
                if (this.K8sUrl != null)
                    hashCode = hashCode * 59 + this.K8sUrl.GetHashCode();
                if (this.K8sUsername != null)
                    hashCode = hashCode * 59 + this.K8sUsername.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OpEmail != null)
                    hashCode = hashCode * 59 + this.OpEmail.GetHashCode();
                if (this.OpPassword != null)
                    hashCode = hashCode * 59 + this.OpPassword.GetHashCode();
                if (this.OpSecretKey != null)
                    hashCode = hashCode * 59 + this.OpSecretKey.GetHashCode();
                if (this.OpUrl != null)
                    hashCode = hashCode * 59 + this.OpUrl.GetHashCode();
                if (this.OpVaults != null)
                    hashCode = hashCode * 59 + this.OpVaults.GetHashCode();
                if (this.ProtectionKey != null)
                    hashCode = hashCode * 59 + this.ProtectionKey.GetHashCode();
                if (this.TargetLocation != null)
                    hashCode = hashCode * 59 + this.TargetLocation.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
