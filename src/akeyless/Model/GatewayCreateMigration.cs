/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateMigration is a command that create migration
    /// </summary>
    [DataContract(Name = "gatewayCreateMigration")]
    public partial class GatewayCreateMigration : IEquatable<GatewayCreateMigration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateMigration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateMigration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateMigration" /> class.
        /// </summary>
        /// <param name="_1passwordEmail">1Password user email to connect to the API.</param>
        /// <param name="_1passwordPassword">1Password user password to connect to the API.</param>
        /// <param name="_1passwordSecretKey">1Password user secret key to connect to the API.</param>
        /// <param name="_1passwordUrl">1Password api container url.</param>
        /// <param name="_1passwordVaults">1Password list of vault to get the items from.</param>
        /// <param name="adAutoRotateBoolean">adAutoRotateBoolean.</param>
        /// <param name="adDiscoverLocalUsersBoolean">adDiscoverLocalUsersBoolean.</param>
        /// <param name="adLocalUsersIgnoreList">adLocalUsersIgnoreList.</param>
        /// <param name="adSRAEnableRDPBoolean">adSRAEnableRDPBoolean.</param>
        /// <param name="adAutoRotate">Enable/Disable automatic/recurrent rotation for migrated secrets. Default is false: only manual rotation is allowed for migrated secrets. If set to true, this command should be combined with - -ad-rotation-interval and - -ad-rotation-hour parameters (Relevant only for Active Directory migration).</param>
        /// <param name="adComputerBaseDn">Distinguished Name of Computer objects (servers) to search in Active Directory e.g.: CN&#x3D;Computers,DC&#x3D;example,DC&#x3D;com (Relevant only for Active Directory migration).</param>
        /// <param name="adDiscoverLocalUsers">Enable/Disable discovery of local users from each domain server and migrate them as SSH Rotated Secrets. Default is false: only domain users will be migrated. Discovery of local users might require further installation of SSH on the servers, based on the supplied computer base DN. This will be implemented automatically as part of the migration process (Relevant only for Active Directory migration).</param>
        /// <param name="adDomainName">Active Directory Domain Name (Relevant only for Active Directory migration).</param>
        /// <param name="adDomainUsersPathTemplate">Path location template for migrating domain users as Rotated Secrets e.g.: .../DomainUsers/{{USERNAME}} (Relevant only for Active Directory migration).</param>
        /// <param name="adLocalUsersIgnore">Comma-separated list of Local Users which should not be migrated (Relevant only for Active Directory migration).</param>
        /// <param name="adLocalUsersPathTemplate">Path location template for migrating domain users as Rotated Secrets e.g.: .../LocalUsers/{{COMPUTER_NAME}}/{{USERNAME}} (Relevant only for Active Directory migration).</param>
        /// <param name="adRotationHour">The hour of the scheduled rotation in UTC (Relevant only for Active Directory migration).</param>
        /// <param name="adRotationInterval">The number of days to wait between every automatic rotation [1-365] (Relevant only for Active Directory migration).</param>
        /// <param name="adSraEnableRdp">Enable/Disable RDP Secure Remote Access for the migrated local users rotated secrets. Default is false: rotated secrets will not be created with SRA (Relevant only for Active Directory migration).</param>
        /// <param name="adTargetName">Active Directory LDAP Target Name. Server type should be Active Directory (Relevant only for Active Directory migration).</param>
        /// <param name="adTargetsPathTemplate">Path location template for migrating domain servers as SSH Targets e.g.: .../Servers/{{COMPUTER_NAME}} (Relevant only for Active Directory migration).</param>
        /// <param name="adUserBaseDn">Distinguished Name of User objects to search in Active Directory, e.g.: CN&#x3D;Users,DC&#x3D;example,DC&#x3D;com (Relevant only for Active Directory migration).</param>
        /// <param name="adUserGroups">Comma-separated list of domain groups from which privileged domain users will be migrated (Relevant only for Active Directory migration).</param>
        /// <param name="asSshPort">Set the SSH Port for further connection to the domain servers. Default is port 22 (Relevant only for Active Directory migration).</param>
        /// <param name="awsKey">AWS Secret Access Key (relevant only for AWS migration).</param>
        /// <param name="awsKeyId">AWS Access Key ID with sufficient permissions to get all secrets, e.g. &#39;arn:aws:secretsmanager:[Region]:[AccountId]:secret:[/path/to/secrets/_*]&#39; (relevant only for AWS migration).</param>
        /// <param name="awsRegion">AWS region of the required Secrets Manager (relevant only for AWS migration).</param>
        /// <param name="azureClientId">Azure Key Vault Access client ID, should be Azure AD App with a service principal (relevant only for Azure Key Vault migration).</param>
        /// <param name="azureKvName">Azure Key Vault Name (relevant only for Azure Key Vault migration).</param>
        /// <param name="azureSecret">Azure Key Vault secret (relevant only for Azure Key Vault migration).</param>
        /// <param name="azureTenantId">Azure Key Vault Access tenant ID (relevant only for Azure Key Vault migration).</param>
        /// <param name="gcpKey">Base64-encoded GCP Service Account private key text with sufficient permissions to Secrets Manager, Minimum required permission is Secret Manager Secret Accessor, e.g. &#39;roles/secretmanager.secretAccessor&#39; (relevant only for GCP migration).</param>
        /// <param name="hashiJson">Import secret key as json value or independent secrets (relevant only for HasiCorp Vault migration).</param>
        /// <param name="hashiNs">HashiCorp Vault Namespaces is a comma-separated list of namespaces which need to be imported into Akeyless Vault. For every provided namespace, all its child namespaces are imported as well, e.g. nmsp/subnmsp1/subnmsp2,nmsp/anothernmsp. By default, import all namespaces (relevant only for HasiCorp Vault migration).</param>
        /// <param name="hashiToken">HashiCorp Vault access token with sufficient permissions to preform list &amp; read operations on secrets objects (relevant only for HasiCorp Vault migration).</param>
        /// <param name="hashiUrl">HashiCorp Vault API URL, e.g. https://vault-mgr01:8200 (relevant only for HasiCorp Vault migration).</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="k8sCaCertificate">For Certificate Authentication method K8s Cluster CA certificate (relevant only for K8s migration with Certificate Authentication method).</param>
        /// <param name="k8sClientCertificate">K8s Client certificate with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Certificate Authentication method).</param>
        /// <param name="k8sClientKey">K8s Client key (relevant only for K8s migration with Certificate Authentication method).</param>
        /// <param name="k8sNamespace">K8s Namespace, Use this field to import secrets from a particular namespace only. By default, the secrets are imported from all namespaces (relevant only for K8s migration).</param>
        /// <param name="k8sPassword">K8s Client password (relevant only for K8s migration with Password Authentication method).</param>
        /// <param name="k8sSkipSystem">K8s Skip Control Plane Secrets, This option allows to avoid importing secrets from system namespaces (relevant only for K8s migration).</param>
        /// <param name="k8sToken">For Token Authentication method K8s Bearer Token with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Token Authentication method).</param>
        /// <param name="k8sUrl">K8s API Server URL, e.g. https://k8s-api.mycompany.com:6443 (relevant only for K8s migration).</param>
        /// <param name="k8sUsername">For Password Authentication method K8s Client username with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Password Authentication method).</param>
        /// <param name="name">Migration name (required).</param>
        /// <param name="protectionKey">The name of the key that protects the classic key value (if empty, the account default key will be used).</param>
        /// <param name="targetLocation">Target location in Akeyless for imported secrets (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="type">Migration type (hashi/aws/gcp/k8s/azure_kv/1password/active_directory).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GatewayCreateMigration(string _1passwordEmail = default(string), string _1passwordPassword = default(string), string _1passwordSecretKey = default(string), string _1passwordUrl = default(string), List<string> _1passwordVaults = default(List<string>), bool adAutoRotateBoolean = default(bool), bool adDiscoverLocalUsersBoolean = default(bool), Dictionary<string, bool> adLocalUsersIgnoreList = default(Dictionary<string, bool>), bool adSRAEnableRDPBoolean = default(bool), string adAutoRotate = default(string), string adComputerBaseDn = default(string), string adDiscoverLocalUsers = default(string), string adDomainName = default(string), string adDomainUsersPathTemplate = default(string), string adLocalUsersIgnore = default(string), string adLocalUsersPathTemplate = default(string), int adRotationHour = default(int), int adRotationInterval = default(int), string adSraEnableRdp = default(string), string adTargetName = default(string), string adTargetsPathTemplate = default(string), string adUserBaseDn = default(string), string adUserGroups = default(string), string asSshPort = default(string), string awsKey = default(string), string awsKeyId = default(string), string awsRegion = default(string), string azureClientId = default(string), string azureKvName = default(string), string azureSecret = default(string), string azureTenantId = default(string), string gcpKey = default(string), string hashiJson = default(string), List<string> hashiNs = default(List<string>), string hashiToken = default(string), string hashiUrl = default(string), bool json = default(bool), List<int> k8sCaCertificate = default(List<int>), List<int> k8sClientCertificate = default(List<int>), List<int> k8sClientKey = default(List<int>), string k8sNamespace = default(string), string k8sPassword = default(string), bool k8sSkipSystem = default(bool), string k8sToken = default(string), string k8sUrl = default(string), string k8sUsername = default(string), string name = default(string), string protectionKey = default(string), string targetLocation = default(string), string token = default(string), string type = default(string), string uidToken = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for GatewayCreateMigration and cannot be null");
            }
            this.Name = name;
            // to ensure "targetLocation" is required (not null)
            if (targetLocation == null) {
                throw new ArgumentNullException("targetLocation is a required property for GatewayCreateMigration and cannot be null");
            }
            this.TargetLocation = targetLocation;
            this._1passwordEmail = _1passwordEmail;
            this._1passwordPassword = _1passwordPassword;
            this._1passwordSecretKey = _1passwordSecretKey;
            this._1passwordUrl = _1passwordUrl;
            this._1passwordVaults = _1passwordVaults;
            this.AdAutoRotateBoolean = adAutoRotateBoolean;
            this.AdDiscoverLocalUsersBoolean = adDiscoverLocalUsersBoolean;
            this.AdLocalUsersIgnoreList = adLocalUsersIgnoreList;
            this.AdSRAEnableRDPBoolean = adSRAEnableRDPBoolean;
            this.AdAutoRotate = adAutoRotate;
            this.AdComputerBaseDn = adComputerBaseDn;
            this.AdDiscoverLocalUsers = adDiscoverLocalUsers;
            this.AdDomainName = adDomainName;
            this.AdDomainUsersPathTemplate = adDomainUsersPathTemplate;
            this.AdLocalUsersIgnore = adLocalUsersIgnore;
            this.AdLocalUsersPathTemplate = adLocalUsersPathTemplate;
            this.AdRotationHour = adRotationHour;
            this.AdRotationInterval = adRotationInterval;
            this.AdSraEnableRdp = adSraEnableRdp;
            this.AdTargetName = adTargetName;
            this.AdTargetsPathTemplate = adTargetsPathTemplate;
            this.AdUserBaseDn = adUserBaseDn;
            this.AdUserGroups = adUserGroups;
            this.AsSshPort = asSshPort;
            this.AwsKey = awsKey;
            this.AwsKeyId = awsKeyId;
            this.AwsRegion = awsRegion;
            this.AzureClientId = azureClientId;
            this.AzureKvName = azureKvName;
            this.AzureSecret = azureSecret;
            this.AzureTenantId = azureTenantId;
            this.GcpKey = gcpKey;
            this.HashiJson = hashiJson;
            this.HashiNs = hashiNs;
            this.HashiToken = hashiToken;
            this.HashiUrl = hashiUrl;
            this.Json = json;
            this.K8sCaCertificate = k8sCaCertificate;
            this.K8sClientCertificate = k8sClientCertificate;
            this.K8sClientKey = k8sClientKey;
            this.K8sNamespace = k8sNamespace;
            this.K8sPassword = k8sPassword;
            this.K8sSkipSystem = k8sSkipSystem;
            this.K8sToken = k8sToken;
            this.K8sUrl = k8sUrl;
            this.K8sUsername = k8sUsername;
            this.ProtectionKey = protectionKey;
            this.Token = token;
            this.Type = type;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// 1Password user email to connect to the API
        /// </summary>
        /// <value>1Password user email to connect to the API</value>
        [DataMember(Name = "1password-email", EmitDefaultValue = false)]
        public string _1passwordEmail { get; set; }

        /// <summary>
        /// 1Password user password to connect to the API
        /// </summary>
        /// <value>1Password user password to connect to the API</value>
        [DataMember(Name = "1password-password", EmitDefaultValue = false)]
        public string _1passwordPassword { get; set; }

        /// <summary>
        /// 1Password user secret key to connect to the API
        /// </summary>
        /// <value>1Password user secret key to connect to the API</value>
        [DataMember(Name = "1password-secret-key", EmitDefaultValue = false)]
        public string _1passwordSecretKey { get; set; }

        /// <summary>
        /// 1Password api container url
        /// </summary>
        /// <value>1Password api container url</value>
        [DataMember(Name = "1password-url", EmitDefaultValue = false)]
        public string _1passwordUrl { get; set; }

        /// <summary>
        /// 1Password list of vault to get the items from
        /// </summary>
        /// <value>1Password list of vault to get the items from</value>
        [DataMember(Name = "1password-vaults", EmitDefaultValue = false)]
        public List<string> _1passwordVaults { get; set; }

        /// <summary>
        /// Gets or Sets AdAutoRotateBoolean
        /// </summary>
        [DataMember(Name = "AdAutoRotateBoolean", EmitDefaultValue = true)]
        public bool AdAutoRotateBoolean { get; set; }

        /// <summary>
        /// Gets or Sets AdDiscoverLocalUsersBoolean
        /// </summary>
        [DataMember(Name = "AdDiscoverLocalUsersBoolean", EmitDefaultValue = true)]
        public bool AdDiscoverLocalUsersBoolean { get; set; }

        /// <summary>
        /// Gets or Sets AdLocalUsersIgnoreList
        /// </summary>
        [DataMember(Name = "AdLocalUsersIgnoreList", EmitDefaultValue = false)]
        public Dictionary<string, bool> AdLocalUsersIgnoreList { get; set; }

        /// <summary>
        /// Gets or Sets AdSRAEnableRDPBoolean
        /// </summary>
        [DataMember(Name = "AdSRAEnableRDPBoolean", EmitDefaultValue = true)]
        public bool AdSRAEnableRDPBoolean { get; set; }

        /// <summary>
        /// Enable/Disable automatic/recurrent rotation for migrated secrets. Default is false: only manual rotation is allowed for migrated secrets. If set to true, this command should be combined with - -ad-rotation-interval and - -ad-rotation-hour parameters (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>Enable/Disable automatic/recurrent rotation for migrated secrets. Default is false: only manual rotation is allowed for migrated secrets. If set to true, this command should be combined with - -ad-rotation-interval and - -ad-rotation-hour parameters (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "ad_auto_rotate", EmitDefaultValue = false)]
        public string AdAutoRotate { get; set; }

        /// <summary>
        /// Distinguished Name of Computer objects (servers) to search in Active Directory e.g.: CN&#x3D;Computers,DC&#x3D;example,DC&#x3D;com (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>Distinguished Name of Computer objects (servers) to search in Active Directory e.g.: CN&#x3D;Computers,DC&#x3D;example,DC&#x3D;com (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "ad_computer_base_dn", EmitDefaultValue = false)]
        public string AdComputerBaseDn { get; set; }

        /// <summary>
        /// Enable/Disable discovery of local users from each domain server and migrate them as SSH Rotated Secrets. Default is false: only domain users will be migrated. Discovery of local users might require further installation of SSH on the servers, based on the supplied computer base DN. This will be implemented automatically as part of the migration process (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>Enable/Disable discovery of local users from each domain server and migrate them as SSH Rotated Secrets. Default is false: only domain users will be migrated. Discovery of local users might require further installation of SSH on the servers, based on the supplied computer base DN. This will be implemented automatically as part of the migration process (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "ad_discover_local_users", EmitDefaultValue = false)]
        public string AdDiscoverLocalUsers { get; set; }

        /// <summary>
        /// Active Directory Domain Name (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>Active Directory Domain Name (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "ad_domain_name", EmitDefaultValue = false)]
        public string AdDomainName { get; set; }

        /// <summary>
        /// Path location template for migrating domain users as Rotated Secrets e.g.: .../DomainUsers/{{USERNAME}} (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>Path location template for migrating domain users as Rotated Secrets e.g.: .../DomainUsers/{{USERNAME}} (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "ad_domain_users_path_template", EmitDefaultValue = false)]
        public string AdDomainUsersPathTemplate { get; set; }

        /// <summary>
        /// Comma-separated list of Local Users which should not be migrated (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>Comma-separated list of Local Users which should not be migrated (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "ad_local_users_ignore", EmitDefaultValue = false)]
        public string AdLocalUsersIgnore { get; set; }

        /// <summary>
        /// Path location template for migrating domain users as Rotated Secrets e.g.: .../LocalUsers/{{COMPUTER_NAME}}/{{USERNAME}} (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>Path location template for migrating domain users as Rotated Secrets e.g.: .../LocalUsers/{{COMPUTER_NAME}}/{{USERNAME}} (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "ad_local_users_path_template", EmitDefaultValue = false)]
        public string AdLocalUsersPathTemplate { get; set; }

        /// <summary>
        /// The hour of the scheduled rotation in UTC (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>The hour of the scheduled rotation in UTC (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "ad_rotation_hour", EmitDefaultValue = false)]
        public int AdRotationHour { get; set; }

        /// <summary>
        /// The number of days to wait between every automatic rotation [1-365] (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>The number of days to wait between every automatic rotation [1-365] (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "ad_rotation_interval", EmitDefaultValue = false)]
        public int AdRotationInterval { get; set; }

        /// <summary>
        /// Enable/Disable RDP Secure Remote Access for the migrated local users rotated secrets. Default is false: rotated secrets will not be created with SRA (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>Enable/Disable RDP Secure Remote Access for the migrated local users rotated secrets. Default is false: rotated secrets will not be created with SRA (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "ad_sra_enable_rdp", EmitDefaultValue = false)]
        public string AdSraEnableRdp { get; set; }

        /// <summary>
        /// Active Directory LDAP Target Name. Server type should be Active Directory (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>Active Directory LDAP Target Name. Server type should be Active Directory (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "ad_target_name", EmitDefaultValue = false)]
        public string AdTargetName { get; set; }

        /// <summary>
        /// Path location template for migrating domain servers as SSH Targets e.g.: .../Servers/{{COMPUTER_NAME}} (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>Path location template for migrating domain servers as SSH Targets e.g.: .../Servers/{{COMPUTER_NAME}} (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "ad_targets_path_template", EmitDefaultValue = false)]
        public string AdTargetsPathTemplate { get; set; }

        /// <summary>
        /// Distinguished Name of User objects to search in Active Directory, e.g.: CN&#x3D;Users,DC&#x3D;example,DC&#x3D;com (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>Distinguished Name of User objects to search in Active Directory, e.g.: CN&#x3D;Users,DC&#x3D;example,DC&#x3D;com (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "ad_user_base_dn", EmitDefaultValue = false)]
        public string AdUserBaseDn { get; set; }

        /// <summary>
        /// Comma-separated list of domain groups from which privileged domain users will be migrated (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>Comma-separated list of domain groups from which privileged domain users will be migrated (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "ad_user_groups", EmitDefaultValue = false)]
        public string AdUserGroups { get; set; }

        /// <summary>
        /// Set the SSH Port for further connection to the domain servers. Default is port 22 (Relevant only for Active Directory migration)
        /// </summary>
        /// <value>Set the SSH Port for further connection to the domain servers. Default is port 22 (Relevant only for Active Directory migration)</value>
        [DataMember(Name = "as_ssh_port", EmitDefaultValue = false)]
        public string AsSshPort { get; set; }

        /// <summary>
        /// AWS Secret Access Key (relevant only for AWS migration)
        /// </summary>
        /// <value>AWS Secret Access Key (relevant only for AWS migration)</value>
        [DataMember(Name = "aws-key", EmitDefaultValue = false)]
        public string AwsKey { get; set; }

        /// <summary>
        /// AWS Access Key ID with sufficient permissions to get all secrets, e.g. &#39;arn:aws:secretsmanager:[Region]:[AccountId]:secret:[/path/to/secrets/_*]&#39; (relevant only for AWS migration)
        /// </summary>
        /// <value>AWS Access Key ID with sufficient permissions to get all secrets, e.g. &#39;arn:aws:secretsmanager:[Region]:[AccountId]:secret:[/path/to/secrets/_*]&#39; (relevant only for AWS migration)</value>
        [DataMember(Name = "aws-key-id", EmitDefaultValue = false)]
        public string AwsKeyId { get; set; }

        /// <summary>
        /// AWS region of the required Secrets Manager (relevant only for AWS migration)
        /// </summary>
        /// <value>AWS region of the required Secrets Manager (relevant only for AWS migration)</value>
        [DataMember(Name = "aws-region", EmitDefaultValue = false)]
        public string AwsRegion { get; set; }

        /// <summary>
        /// Azure Key Vault Access client ID, should be Azure AD App with a service principal (relevant only for Azure Key Vault migration)
        /// </summary>
        /// <value>Azure Key Vault Access client ID, should be Azure AD App with a service principal (relevant only for Azure Key Vault migration)</value>
        [DataMember(Name = "azure-client-id", EmitDefaultValue = false)]
        public string AzureClientId { get; set; }

        /// <summary>
        /// Azure Key Vault Name (relevant only for Azure Key Vault migration)
        /// </summary>
        /// <value>Azure Key Vault Name (relevant only for Azure Key Vault migration)</value>
        [DataMember(Name = "azure-kv-name", EmitDefaultValue = false)]
        public string AzureKvName { get; set; }

        /// <summary>
        /// Azure Key Vault secret (relevant only for Azure Key Vault migration)
        /// </summary>
        /// <value>Azure Key Vault secret (relevant only for Azure Key Vault migration)</value>
        [DataMember(Name = "azure-secret", EmitDefaultValue = false)]
        public string AzureSecret { get; set; }

        /// <summary>
        /// Azure Key Vault Access tenant ID (relevant only for Azure Key Vault migration)
        /// </summary>
        /// <value>Azure Key Vault Access tenant ID (relevant only for Azure Key Vault migration)</value>
        [DataMember(Name = "azure-tenant-id", EmitDefaultValue = false)]
        public string AzureTenantId { get; set; }

        /// <summary>
        /// Base64-encoded GCP Service Account private key text with sufficient permissions to Secrets Manager, Minimum required permission is Secret Manager Secret Accessor, e.g. &#39;roles/secretmanager.secretAccessor&#39; (relevant only for GCP migration)
        /// </summary>
        /// <value>Base64-encoded GCP Service Account private key text with sufficient permissions to Secrets Manager, Minimum required permission is Secret Manager Secret Accessor, e.g. &#39;roles/secretmanager.secretAccessor&#39; (relevant only for GCP migration)</value>
        [DataMember(Name = "gcp-key", EmitDefaultValue = false)]
        public string GcpKey { get; set; }

        /// <summary>
        /// Import secret key as json value or independent secrets (relevant only for HasiCorp Vault migration)
        /// </summary>
        /// <value>Import secret key as json value or independent secrets (relevant only for HasiCorp Vault migration)</value>
        [DataMember(Name = "hashi-json", EmitDefaultValue = false)]
        public string HashiJson { get; set; }

        /// <summary>
        /// HashiCorp Vault Namespaces is a comma-separated list of namespaces which need to be imported into Akeyless Vault. For every provided namespace, all its child namespaces are imported as well, e.g. nmsp/subnmsp1/subnmsp2,nmsp/anothernmsp. By default, import all namespaces (relevant only for HasiCorp Vault migration)
        /// </summary>
        /// <value>HashiCorp Vault Namespaces is a comma-separated list of namespaces which need to be imported into Akeyless Vault. For every provided namespace, all its child namespaces are imported as well, e.g. nmsp/subnmsp1/subnmsp2,nmsp/anothernmsp. By default, import all namespaces (relevant only for HasiCorp Vault migration)</value>
        [DataMember(Name = "hashi-ns", EmitDefaultValue = false)]
        public List<string> HashiNs { get; set; }

        /// <summary>
        /// HashiCorp Vault access token with sufficient permissions to preform list &amp; read operations on secrets objects (relevant only for HasiCorp Vault migration)
        /// </summary>
        /// <value>HashiCorp Vault access token with sufficient permissions to preform list &amp; read operations on secrets objects (relevant only for HasiCorp Vault migration)</value>
        [DataMember(Name = "hashi-token", EmitDefaultValue = false)]
        public string HashiToken { get; set; }

        /// <summary>
        /// HashiCorp Vault API URL, e.g. https://vault-mgr01:8200 (relevant only for HasiCorp Vault migration)
        /// </summary>
        /// <value>HashiCorp Vault API URL, e.g. https://vault-mgr01:8200 (relevant only for HasiCorp Vault migration)</value>
        [DataMember(Name = "hashi-url", EmitDefaultValue = false)]
        public string HashiUrl { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// For Certificate Authentication method K8s Cluster CA certificate (relevant only for K8s migration with Certificate Authentication method)
        /// </summary>
        /// <value>For Certificate Authentication method K8s Cluster CA certificate (relevant only for K8s migration with Certificate Authentication method)</value>
        [DataMember(Name = "k8s-ca-certificate", EmitDefaultValue = false)]
        public List<int> K8sCaCertificate { get; set; }

        /// <summary>
        /// K8s Client certificate with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Certificate Authentication method)
        /// </summary>
        /// <value>K8s Client certificate with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Certificate Authentication method)</value>
        [DataMember(Name = "k8s-client-certificate", EmitDefaultValue = false)]
        public List<int> K8sClientCertificate { get; set; }

        /// <summary>
        /// K8s Client key (relevant only for K8s migration with Certificate Authentication method)
        /// </summary>
        /// <value>K8s Client key (relevant only for K8s migration with Certificate Authentication method)</value>
        [DataMember(Name = "k8s-client-key", EmitDefaultValue = false)]
        public List<int> K8sClientKey { get; set; }

        /// <summary>
        /// K8s Namespace, Use this field to import secrets from a particular namespace only. By default, the secrets are imported from all namespaces (relevant only for K8s migration)
        /// </summary>
        /// <value>K8s Namespace, Use this field to import secrets from a particular namespace only. By default, the secrets are imported from all namespaces (relevant only for K8s migration)</value>
        [DataMember(Name = "k8s-namespace", EmitDefaultValue = false)]
        public string K8sNamespace { get; set; }

        /// <summary>
        /// K8s Client password (relevant only for K8s migration with Password Authentication method)
        /// </summary>
        /// <value>K8s Client password (relevant only for K8s migration with Password Authentication method)</value>
        [DataMember(Name = "k8s-password", EmitDefaultValue = false)]
        public string K8sPassword { get; set; }

        /// <summary>
        /// K8s Skip Control Plane Secrets, This option allows to avoid importing secrets from system namespaces (relevant only for K8s migration)
        /// </summary>
        /// <value>K8s Skip Control Plane Secrets, This option allows to avoid importing secrets from system namespaces (relevant only for K8s migration)</value>
        [DataMember(Name = "k8s-skip-system", EmitDefaultValue = true)]
        public bool K8sSkipSystem { get; set; }

        /// <summary>
        /// For Token Authentication method K8s Bearer Token with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Token Authentication method)
        /// </summary>
        /// <value>For Token Authentication method K8s Bearer Token with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Token Authentication method)</value>
        [DataMember(Name = "k8s-token", EmitDefaultValue = false)]
        public string K8sToken { get; set; }

        /// <summary>
        /// K8s API Server URL, e.g. https://k8s-api.mycompany.com:6443 (relevant only for K8s migration)
        /// </summary>
        /// <value>K8s API Server URL, e.g. https://k8s-api.mycompany.com:6443 (relevant only for K8s migration)</value>
        [DataMember(Name = "k8s-url", EmitDefaultValue = false)]
        public string K8sUrl { get; set; }

        /// <summary>
        /// For Password Authentication method K8s Client username with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Password Authentication method)
        /// </summary>
        /// <value>For Password Authentication method K8s Client username with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Password Authentication method)</value>
        [DataMember(Name = "k8s-username", EmitDefaultValue = false)]
        public string K8sUsername { get; set; }

        /// <summary>
        /// Migration name
        /// </summary>
        /// <value>Migration name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The name of the key that protects the classic key value (if empty, the account default key will be used)
        /// </summary>
        /// <value>The name of the key that protects the classic key value (if empty, the account default key will be used)</value>
        [DataMember(Name = "protection-key", EmitDefaultValue = false)]
        public string ProtectionKey { get; set; }

        /// <summary>
        /// Target location in Akeyless for imported secrets
        /// </summary>
        /// <value>Target location in Akeyless for imported secrets</value>
        [DataMember(Name = "target-location", IsRequired = true, EmitDefaultValue = false)]
        public string TargetLocation { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Migration type (hashi/aws/gcp/k8s/azure_kv/1password/active_directory)
        /// </summary>
        /// <value>Migration type (hashi/aws/gcp/k8s/azure_kv/1password/active_directory)</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayCreateMigration {\n");
            sb.Append("  _1passwordEmail: ").Append(_1passwordEmail).Append("\n");
            sb.Append("  _1passwordPassword: ").Append(_1passwordPassword).Append("\n");
            sb.Append("  _1passwordSecretKey: ").Append(_1passwordSecretKey).Append("\n");
            sb.Append("  _1passwordUrl: ").Append(_1passwordUrl).Append("\n");
            sb.Append("  _1passwordVaults: ").Append(_1passwordVaults).Append("\n");
            sb.Append("  AdAutoRotateBoolean: ").Append(AdAutoRotateBoolean).Append("\n");
            sb.Append("  AdDiscoverLocalUsersBoolean: ").Append(AdDiscoverLocalUsersBoolean).Append("\n");
            sb.Append("  AdLocalUsersIgnoreList: ").Append(AdLocalUsersIgnoreList).Append("\n");
            sb.Append("  AdSRAEnableRDPBoolean: ").Append(AdSRAEnableRDPBoolean).Append("\n");
            sb.Append("  AdAutoRotate: ").Append(AdAutoRotate).Append("\n");
            sb.Append("  AdComputerBaseDn: ").Append(AdComputerBaseDn).Append("\n");
            sb.Append("  AdDiscoverLocalUsers: ").Append(AdDiscoverLocalUsers).Append("\n");
            sb.Append("  AdDomainName: ").Append(AdDomainName).Append("\n");
            sb.Append("  AdDomainUsersPathTemplate: ").Append(AdDomainUsersPathTemplate).Append("\n");
            sb.Append("  AdLocalUsersIgnore: ").Append(AdLocalUsersIgnore).Append("\n");
            sb.Append("  AdLocalUsersPathTemplate: ").Append(AdLocalUsersPathTemplate).Append("\n");
            sb.Append("  AdRotationHour: ").Append(AdRotationHour).Append("\n");
            sb.Append("  AdRotationInterval: ").Append(AdRotationInterval).Append("\n");
            sb.Append("  AdSraEnableRdp: ").Append(AdSraEnableRdp).Append("\n");
            sb.Append("  AdTargetName: ").Append(AdTargetName).Append("\n");
            sb.Append("  AdTargetsPathTemplate: ").Append(AdTargetsPathTemplate).Append("\n");
            sb.Append("  AdUserBaseDn: ").Append(AdUserBaseDn).Append("\n");
            sb.Append("  AdUserGroups: ").Append(AdUserGroups).Append("\n");
            sb.Append("  AsSshPort: ").Append(AsSshPort).Append("\n");
            sb.Append("  AwsKey: ").Append(AwsKey).Append("\n");
            sb.Append("  AwsKeyId: ").Append(AwsKeyId).Append("\n");
            sb.Append("  AwsRegion: ").Append(AwsRegion).Append("\n");
            sb.Append("  AzureClientId: ").Append(AzureClientId).Append("\n");
            sb.Append("  AzureKvName: ").Append(AzureKvName).Append("\n");
            sb.Append("  AzureSecret: ").Append(AzureSecret).Append("\n");
            sb.Append("  AzureTenantId: ").Append(AzureTenantId).Append("\n");
            sb.Append("  GcpKey: ").Append(GcpKey).Append("\n");
            sb.Append("  HashiJson: ").Append(HashiJson).Append("\n");
            sb.Append("  HashiNs: ").Append(HashiNs).Append("\n");
            sb.Append("  HashiToken: ").Append(HashiToken).Append("\n");
            sb.Append("  HashiUrl: ").Append(HashiUrl).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  K8sCaCertificate: ").Append(K8sCaCertificate).Append("\n");
            sb.Append("  K8sClientCertificate: ").Append(K8sClientCertificate).Append("\n");
            sb.Append("  K8sClientKey: ").Append(K8sClientKey).Append("\n");
            sb.Append("  K8sNamespace: ").Append(K8sNamespace).Append("\n");
            sb.Append("  K8sPassword: ").Append(K8sPassword).Append("\n");
            sb.Append("  K8sSkipSystem: ").Append(K8sSkipSystem).Append("\n");
            sb.Append("  K8sToken: ").Append(K8sToken).Append("\n");
            sb.Append("  K8sUrl: ").Append(K8sUrl).Append("\n");
            sb.Append("  K8sUsername: ").Append(K8sUsername).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProtectionKey: ").Append(ProtectionKey).Append("\n");
            sb.Append("  TargetLocation: ").Append(TargetLocation).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayCreateMigration);
        }

        /// <summary>
        /// Returns true if GatewayCreateMigration instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayCreateMigration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayCreateMigration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._1passwordEmail == input._1passwordEmail ||
                    (this._1passwordEmail != null &&
                    this._1passwordEmail.Equals(input._1passwordEmail))
                ) && 
                (
                    this._1passwordPassword == input._1passwordPassword ||
                    (this._1passwordPassword != null &&
                    this._1passwordPassword.Equals(input._1passwordPassword))
                ) && 
                (
                    this._1passwordSecretKey == input._1passwordSecretKey ||
                    (this._1passwordSecretKey != null &&
                    this._1passwordSecretKey.Equals(input._1passwordSecretKey))
                ) && 
                (
                    this._1passwordUrl == input._1passwordUrl ||
                    (this._1passwordUrl != null &&
                    this._1passwordUrl.Equals(input._1passwordUrl))
                ) && 
                (
                    this._1passwordVaults == input._1passwordVaults ||
                    this._1passwordVaults != null &&
                    input._1passwordVaults != null &&
                    this._1passwordVaults.SequenceEqual(input._1passwordVaults)
                ) && 
                (
                    this.AdAutoRotateBoolean == input.AdAutoRotateBoolean ||
                    this.AdAutoRotateBoolean.Equals(input.AdAutoRotateBoolean)
                ) && 
                (
                    this.AdDiscoverLocalUsersBoolean == input.AdDiscoverLocalUsersBoolean ||
                    this.AdDiscoverLocalUsersBoolean.Equals(input.AdDiscoverLocalUsersBoolean)
                ) && 
                (
                    this.AdLocalUsersIgnoreList == input.AdLocalUsersIgnoreList ||
                    this.AdLocalUsersIgnoreList != null &&
                    input.AdLocalUsersIgnoreList != null &&
                    this.AdLocalUsersIgnoreList.SequenceEqual(input.AdLocalUsersIgnoreList)
                ) && 
                (
                    this.AdSRAEnableRDPBoolean == input.AdSRAEnableRDPBoolean ||
                    this.AdSRAEnableRDPBoolean.Equals(input.AdSRAEnableRDPBoolean)
                ) && 
                (
                    this.AdAutoRotate == input.AdAutoRotate ||
                    (this.AdAutoRotate != null &&
                    this.AdAutoRotate.Equals(input.AdAutoRotate))
                ) && 
                (
                    this.AdComputerBaseDn == input.AdComputerBaseDn ||
                    (this.AdComputerBaseDn != null &&
                    this.AdComputerBaseDn.Equals(input.AdComputerBaseDn))
                ) && 
                (
                    this.AdDiscoverLocalUsers == input.AdDiscoverLocalUsers ||
                    (this.AdDiscoverLocalUsers != null &&
                    this.AdDiscoverLocalUsers.Equals(input.AdDiscoverLocalUsers))
                ) && 
                (
                    this.AdDomainName == input.AdDomainName ||
                    (this.AdDomainName != null &&
                    this.AdDomainName.Equals(input.AdDomainName))
                ) && 
                (
                    this.AdDomainUsersPathTemplate == input.AdDomainUsersPathTemplate ||
                    (this.AdDomainUsersPathTemplate != null &&
                    this.AdDomainUsersPathTemplate.Equals(input.AdDomainUsersPathTemplate))
                ) && 
                (
                    this.AdLocalUsersIgnore == input.AdLocalUsersIgnore ||
                    (this.AdLocalUsersIgnore != null &&
                    this.AdLocalUsersIgnore.Equals(input.AdLocalUsersIgnore))
                ) && 
                (
                    this.AdLocalUsersPathTemplate == input.AdLocalUsersPathTemplate ||
                    (this.AdLocalUsersPathTemplate != null &&
                    this.AdLocalUsersPathTemplate.Equals(input.AdLocalUsersPathTemplate))
                ) && 
                (
                    this.AdRotationHour == input.AdRotationHour ||
                    this.AdRotationHour.Equals(input.AdRotationHour)
                ) && 
                (
                    this.AdRotationInterval == input.AdRotationInterval ||
                    this.AdRotationInterval.Equals(input.AdRotationInterval)
                ) && 
                (
                    this.AdSraEnableRdp == input.AdSraEnableRdp ||
                    (this.AdSraEnableRdp != null &&
                    this.AdSraEnableRdp.Equals(input.AdSraEnableRdp))
                ) && 
                (
                    this.AdTargetName == input.AdTargetName ||
                    (this.AdTargetName != null &&
                    this.AdTargetName.Equals(input.AdTargetName))
                ) && 
                (
                    this.AdTargetsPathTemplate == input.AdTargetsPathTemplate ||
                    (this.AdTargetsPathTemplate != null &&
                    this.AdTargetsPathTemplate.Equals(input.AdTargetsPathTemplate))
                ) && 
                (
                    this.AdUserBaseDn == input.AdUserBaseDn ||
                    (this.AdUserBaseDn != null &&
                    this.AdUserBaseDn.Equals(input.AdUserBaseDn))
                ) && 
                (
                    this.AdUserGroups == input.AdUserGroups ||
                    (this.AdUserGroups != null &&
                    this.AdUserGroups.Equals(input.AdUserGroups))
                ) && 
                (
                    this.AsSshPort == input.AsSshPort ||
                    (this.AsSshPort != null &&
                    this.AsSshPort.Equals(input.AsSshPort))
                ) && 
                (
                    this.AwsKey == input.AwsKey ||
                    (this.AwsKey != null &&
                    this.AwsKey.Equals(input.AwsKey))
                ) && 
                (
                    this.AwsKeyId == input.AwsKeyId ||
                    (this.AwsKeyId != null &&
                    this.AwsKeyId.Equals(input.AwsKeyId))
                ) && 
                (
                    this.AwsRegion == input.AwsRegion ||
                    (this.AwsRegion != null &&
                    this.AwsRegion.Equals(input.AwsRegion))
                ) && 
                (
                    this.AzureClientId == input.AzureClientId ||
                    (this.AzureClientId != null &&
                    this.AzureClientId.Equals(input.AzureClientId))
                ) && 
                (
                    this.AzureKvName == input.AzureKvName ||
                    (this.AzureKvName != null &&
                    this.AzureKvName.Equals(input.AzureKvName))
                ) && 
                (
                    this.AzureSecret == input.AzureSecret ||
                    (this.AzureSecret != null &&
                    this.AzureSecret.Equals(input.AzureSecret))
                ) && 
                (
                    this.AzureTenantId == input.AzureTenantId ||
                    (this.AzureTenantId != null &&
                    this.AzureTenantId.Equals(input.AzureTenantId))
                ) && 
                (
                    this.GcpKey == input.GcpKey ||
                    (this.GcpKey != null &&
                    this.GcpKey.Equals(input.GcpKey))
                ) && 
                (
                    this.HashiJson == input.HashiJson ||
                    (this.HashiJson != null &&
                    this.HashiJson.Equals(input.HashiJson))
                ) && 
                (
                    this.HashiNs == input.HashiNs ||
                    this.HashiNs != null &&
                    input.HashiNs != null &&
                    this.HashiNs.SequenceEqual(input.HashiNs)
                ) && 
                (
                    this.HashiToken == input.HashiToken ||
                    (this.HashiToken != null &&
                    this.HashiToken.Equals(input.HashiToken))
                ) && 
                (
                    this.HashiUrl == input.HashiUrl ||
                    (this.HashiUrl != null &&
                    this.HashiUrl.Equals(input.HashiUrl))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.K8sCaCertificate == input.K8sCaCertificate ||
                    this.K8sCaCertificate != null &&
                    input.K8sCaCertificate != null &&
                    this.K8sCaCertificate.SequenceEqual(input.K8sCaCertificate)
                ) && 
                (
                    this.K8sClientCertificate == input.K8sClientCertificate ||
                    this.K8sClientCertificate != null &&
                    input.K8sClientCertificate != null &&
                    this.K8sClientCertificate.SequenceEqual(input.K8sClientCertificate)
                ) && 
                (
                    this.K8sClientKey == input.K8sClientKey ||
                    this.K8sClientKey != null &&
                    input.K8sClientKey != null &&
                    this.K8sClientKey.SequenceEqual(input.K8sClientKey)
                ) && 
                (
                    this.K8sNamespace == input.K8sNamespace ||
                    (this.K8sNamespace != null &&
                    this.K8sNamespace.Equals(input.K8sNamespace))
                ) && 
                (
                    this.K8sPassword == input.K8sPassword ||
                    (this.K8sPassword != null &&
                    this.K8sPassword.Equals(input.K8sPassword))
                ) && 
                (
                    this.K8sSkipSystem == input.K8sSkipSystem ||
                    this.K8sSkipSystem.Equals(input.K8sSkipSystem)
                ) && 
                (
                    this.K8sToken == input.K8sToken ||
                    (this.K8sToken != null &&
                    this.K8sToken.Equals(input.K8sToken))
                ) && 
                (
                    this.K8sUrl == input.K8sUrl ||
                    (this.K8sUrl != null &&
                    this.K8sUrl.Equals(input.K8sUrl))
                ) && 
                (
                    this.K8sUsername == input.K8sUsername ||
                    (this.K8sUsername != null &&
                    this.K8sUsername.Equals(input.K8sUsername))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProtectionKey == input.ProtectionKey ||
                    (this.ProtectionKey != null &&
                    this.ProtectionKey.Equals(input.ProtectionKey))
                ) && 
                (
                    this.TargetLocation == input.TargetLocation ||
                    (this.TargetLocation != null &&
                    this.TargetLocation.Equals(input.TargetLocation))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._1passwordEmail != null)
                    hashCode = hashCode * 59 + this._1passwordEmail.GetHashCode();
                if (this._1passwordPassword != null)
                    hashCode = hashCode * 59 + this._1passwordPassword.GetHashCode();
                if (this._1passwordSecretKey != null)
                    hashCode = hashCode * 59 + this._1passwordSecretKey.GetHashCode();
                if (this._1passwordUrl != null)
                    hashCode = hashCode * 59 + this._1passwordUrl.GetHashCode();
                if (this._1passwordVaults != null)
                    hashCode = hashCode * 59 + this._1passwordVaults.GetHashCode();
                hashCode = hashCode * 59 + this.AdAutoRotateBoolean.GetHashCode();
                hashCode = hashCode * 59 + this.AdDiscoverLocalUsersBoolean.GetHashCode();
                if (this.AdLocalUsersIgnoreList != null)
                    hashCode = hashCode * 59 + this.AdLocalUsersIgnoreList.GetHashCode();
                hashCode = hashCode * 59 + this.AdSRAEnableRDPBoolean.GetHashCode();
                if (this.AdAutoRotate != null)
                    hashCode = hashCode * 59 + this.AdAutoRotate.GetHashCode();
                if (this.AdComputerBaseDn != null)
                    hashCode = hashCode * 59 + this.AdComputerBaseDn.GetHashCode();
                if (this.AdDiscoverLocalUsers != null)
                    hashCode = hashCode * 59 + this.AdDiscoverLocalUsers.GetHashCode();
                if (this.AdDomainName != null)
                    hashCode = hashCode * 59 + this.AdDomainName.GetHashCode();
                if (this.AdDomainUsersPathTemplate != null)
                    hashCode = hashCode * 59 + this.AdDomainUsersPathTemplate.GetHashCode();
                if (this.AdLocalUsersIgnore != null)
                    hashCode = hashCode * 59 + this.AdLocalUsersIgnore.GetHashCode();
                if (this.AdLocalUsersPathTemplate != null)
                    hashCode = hashCode * 59 + this.AdLocalUsersPathTemplate.GetHashCode();
                hashCode = hashCode * 59 + this.AdRotationHour.GetHashCode();
                hashCode = hashCode * 59 + this.AdRotationInterval.GetHashCode();
                if (this.AdSraEnableRdp != null)
                    hashCode = hashCode * 59 + this.AdSraEnableRdp.GetHashCode();
                if (this.AdTargetName != null)
                    hashCode = hashCode * 59 + this.AdTargetName.GetHashCode();
                if (this.AdTargetsPathTemplate != null)
                    hashCode = hashCode * 59 + this.AdTargetsPathTemplate.GetHashCode();
                if (this.AdUserBaseDn != null)
                    hashCode = hashCode * 59 + this.AdUserBaseDn.GetHashCode();
                if (this.AdUserGroups != null)
                    hashCode = hashCode * 59 + this.AdUserGroups.GetHashCode();
                if (this.AsSshPort != null)
                    hashCode = hashCode * 59 + this.AsSshPort.GetHashCode();
                if (this.AwsKey != null)
                    hashCode = hashCode * 59 + this.AwsKey.GetHashCode();
                if (this.AwsKeyId != null)
                    hashCode = hashCode * 59 + this.AwsKeyId.GetHashCode();
                if (this.AwsRegion != null)
                    hashCode = hashCode * 59 + this.AwsRegion.GetHashCode();
                if (this.AzureClientId != null)
                    hashCode = hashCode * 59 + this.AzureClientId.GetHashCode();
                if (this.AzureKvName != null)
                    hashCode = hashCode * 59 + this.AzureKvName.GetHashCode();
                if (this.AzureSecret != null)
                    hashCode = hashCode * 59 + this.AzureSecret.GetHashCode();
                if (this.AzureTenantId != null)
                    hashCode = hashCode * 59 + this.AzureTenantId.GetHashCode();
                if (this.GcpKey != null)
                    hashCode = hashCode * 59 + this.GcpKey.GetHashCode();
                if (this.HashiJson != null)
                    hashCode = hashCode * 59 + this.HashiJson.GetHashCode();
                if (this.HashiNs != null)
                    hashCode = hashCode * 59 + this.HashiNs.GetHashCode();
                if (this.HashiToken != null)
                    hashCode = hashCode * 59 + this.HashiToken.GetHashCode();
                if (this.HashiUrl != null)
                    hashCode = hashCode * 59 + this.HashiUrl.GetHashCode();
                hashCode = hashCode * 59 + this.Json.GetHashCode();
                if (this.K8sCaCertificate != null)
                    hashCode = hashCode * 59 + this.K8sCaCertificate.GetHashCode();
                if (this.K8sClientCertificate != null)
                    hashCode = hashCode * 59 + this.K8sClientCertificate.GetHashCode();
                if (this.K8sClientKey != null)
                    hashCode = hashCode * 59 + this.K8sClientKey.GetHashCode();
                if (this.K8sNamespace != null)
                    hashCode = hashCode * 59 + this.K8sNamespace.GetHashCode();
                if (this.K8sPassword != null)
                    hashCode = hashCode * 59 + this.K8sPassword.GetHashCode();
                hashCode = hashCode * 59 + this.K8sSkipSystem.GetHashCode();
                if (this.K8sToken != null)
                    hashCode = hashCode * 59 + this.K8sToken.GetHashCode();
                if (this.K8sUrl != null)
                    hashCode = hashCode * 59 + this.K8sUrl.GetHashCode();
                if (this.K8sUsername != null)
                    hashCode = hashCode * 59 + this.K8sUsername.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ProtectionKey != null)
                    hashCode = hashCode * 59 + this.ProtectionKey.GetHashCode();
                if (this.TargetLocation != null)
                    hashCode = hashCode * 59 + this.TargetLocation.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
