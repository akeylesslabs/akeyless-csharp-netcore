/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// createAuthMethodSAML is a command that creates a new auth method that will be available to authenticate using SAML.
    /// </summary>
    [DataContract(Name = "createAuthMethodSAML")]
    public partial class CreateAuthMethodSAML : IEquatable<CreateAuthMethodSAML>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAuthMethodSAML" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAuthMethodSAML() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAuthMethodSAML" /> class.
        /// </summary>
        /// <param name="accessExpires">Access expiration date in Unix timestamp (select 0 for access without expiry date) (default to 0).</param>
        /// <param name="allowedRedirectUri">Allowed redirect URIs after the authentication.</param>
        /// <param name="boundIps">A CIDR whitelist with the IPs that the access is restricted to.</param>
        /// <param name="forceSubClaims">if true: enforce role-association must include sub claims.</param>
        /// <param name="idpMetadataUrl">IDP metadata url.</param>
        /// <param name="idpMetadataXmlData">IDP metadata xml data.</param>
        /// <param name="jwtTtl">Jwt TTL (default to 0).</param>
        /// <param name="name">Auth Method name (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="uniqueIdentifier">A unique identifier (ID) value should be configured for OAuth2, LDAP and SAML authentication method types and is usually a value such as the email, username, or upn for example. Whenever a user logs in with a token, these authentication types issue a \&quot;sub claim\&quot; that contains details uniquely identifying that user. This sub claim includes a key containing the ID value that you configured, and is used to distinguish between different users from within the same organization. (required).</param>
        public CreateAuthMethodSAML(long accessExpires = 0, List<string> allowedRedirectUri = default(List<string>), List<string> boundIps = default(List<string>), bool forceSubClaims = default(bool), string idpMetadataUrl = default(string), string idpMetadataXmlData = default(string), long jwtTtl = 0, string name = default(string), string token = default(string), string uidToken = default(string), string uniqueIdentifier = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for CreateAuthMethodSAML and cannot be null");
            }
            this.Name = name;
            // to ensure "uniqueIdentifier" is required (not null)
            if (uniqueIdentifier == null) {
                throw new ArgumentNullException("uniqueIdentifier is a required property for CreateAuthMethodSAML and cannot be null");
            }
            this.UniqueIdentifier = uniqueIdentifier;
            this.AccessExpires = accessExpires;
            this.AllowedRedirectUri = allowedRedirectUri;
            this.BoundIps = boundIps;
            this.ForceSubClaims = forceSubClaims;
            this.IdpMetadataUrl = idpMetadataUrl;
            this.IdpMetadataXmlData = idpMetadataXmlData;
            this.JwtTtl = jwtTtl;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Access expiration date in Unix timestamp (select 0 for access without expiry date)
        /// </summary>
        /// <value>Access expiration date in Unix timestamp (select 0 for access without expiry date)</value>
        [DataMember(Name = "access-expires", EmitDefaultValue = false)]
        public long AccessExpires { get; set; }

        /// <summary>
        /// Allowed redirect URIs after the authentication
        /// </summary>
        /// <value>Allowed redirect URIs after the authentication</value>
        [DataMember(Name = "allowed-redirect-uri", EmitDefaultValue = false)]
        public List<string> AllowedRedirectUri { get; set; }

        /// <summary>
        /// A CIDR whitelist with the IPs that the access is restricted to
        /// </summary>
        /// <value>A CIDR whitelist with the IPs that the access is restricted to</value>
        [DataMember(Name = "bound-ips", EmitDefaultValue = false)]
        public List<string> BoundIps { get; set; }

        /// <summary>
        /// if true: enforce role-association must include sub claims
        /// </summary>
        /// <value>if true: enforce role-association must include sub claims</value>
        [DataMember(Name = "force-sub-claims", EmitDefaultValue = true)]
        public bool ForceSubClaims { get; set; }

        /// <summary>
        /// IDP metadata url
        /// </summary>
        /// <value>IDP metadata url</value>
        [DataMember(Name = "idp-metadata-url", EmitDefaultValue = false)]
        public string IdpMetadataUrl { get; set; }

        /// <summary>
        /// IDP metadata xml data
        /// </summary>
        /// <value>IDP metadata xml data</value>
        [DataMember(Name = "idp-metadata-xml-data", EmitDefaultValue = false)]
        public string IdpMetadataXmlData { get; set; }

        /// <summary>
        /// Jwt TTL
        /// </summary>
        /// <value>Jwt TTL</value>
        [DataMember(Name = "jwt-ttl", EmitDefaultValue = false)]
        public long JwtTtl { get; set; }

        /// <summary>
        /// Auth Method name
        /// </summary>
        /// <value>Auth Method name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// A unique identifier (ID) value should be configured for OAuth2, LDAP and SAML authentication method types and is usually a value such as the email, username, or upn for example. Whenever a user logs in with a token, these authentication types issue a \&quot;sub claim\&quot; that contains details uniquely identifying that user. This sub claim includes a key containing the ID value that you configured, and is used to distinguish between different users from within the same organization.
        /// </summary>
        /// <value>A unique identifier (ID) value should be configured for OAuth2, LDAP and SAML authentication method types and is usually a value such as the email, username, or upn for example. Whenever a user logs in with a token, these authentication types issue a \&quot;sub claim\&quot; that contains details uniquely identifying that user. This sub claim includes a key containing the ID value that you configured, and is used to distinguish between different users from within the same organization.</value>
        [DataMember(Name = "unique-identifier", IsRequired = true, EmitDefaultValue = false)]
        public string UniqueIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAuthMethodSAML {\n");
            sb.Append("  AccessExpires: ").Append(AccessExpires).Append("\n");
            sb.Append("  AllowedRedirectUri: ").Append(AllowedRedirectUri).Append("\n");
            sb.Append("  BoundIps: ").Append(BoundIps).Append("\n");
            sb.Append("  ForceSubClaims: ").Append(ForceSubClaims).Append("\n");
            sb.Append("  IdpMetadataUrl: ").Append(IdpMetadataUrl).Append("\n");
            sb.Append("  IdpMetadataXmlData: ").Append(IdpMetadataXmlData).Append("\n");
            sb.Append("  JwtTtl: ").Append(JwtTtl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UniqueIdentifier: ").Append(UniqueIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAuthMethodSAML);
        }

        /// <summary>
        /// Returns true if CreateAuthMethodSAML instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAuthMethodSAML to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAuthMethodSAML input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessExpires == input.AccessExpires ||
                    this.AccessExpires.Equals(input.AccessExpires)
                ) && 
                (
                    this.AllowedRedirectUri == input.AllowedRedirectUri ||
                    this.AllowedRedirectUri != null &&
                    input.AllowedRedirectUri != null &&
                    this.AllowedRedirectUri.SequenceEqual(input.AllowedRedirectUri)
                ) && 
                (
                    this.BoundIps == input.BoundIps ||
                    this.BoundIps != null &&
                    input.BoundIps != null &&
                    this.BoundIps.SequenceEqual(input.BoundIps)
                ) && 
                (
                    this.ForceSubClaims == input.ForceSubClaims ||
                    this.ForceSubClaims.Equals(input.ForceSubClaims)
                ) && 
                (
                    this.IdpMetadataUrl == input.IdpMetadataUrl ||
                    (this.IdpMetadataUrl != null &&
                    this.IdpMetadataUrl.Equals(input.IdpMetadataUrl))
                ) && 
                (
                    this.IdpMetadataXmlData == input.IdpMetadataXmlData ||
                    (this.IdpMetadataXmlData != null &&
                    this.IdpMetadataXmlData.Equals(input.IdpMetadataXmlData))
                ) && 
                (
                    this.JwtTtl == input.JwtTtl ||
                    this.JwtTtl.Equals(input.JwtTtl)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UniqueIdentifier == input.UniqueIdentifier ||
                    (this.UniqueIdentifier != null &&
                    this.UniqueIdentifier.Equals(input.UniqueIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AccessExpires.GetHashCode();
                if (this.AllowedRedirectUri != null)
                    hashCode = hashCode * 59 + this.AllowedRedirectUri.GetHashCode();
                if (this.BoundIps != null)
                    hashCode = hashCode * 59 + this.BoundIps.GetHashCode();
                hashCode = hashCode * 59 + this.ForceSubClaims.GetHashCode();
                if (this.IdpMetadataUrl != null)
                    hashCode = hashCode * 59 + this.IdpMetadataUrl.GetHashCode();
                if (this.IdpMetadataXmlData != null)
                    hashCode = hashCode * 59 + this.IdpMetadataXmlData.GetHashCode();
                hashCode = hashCode * 59 + this.JwtTtl.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.UniqueIdentifier != null)
                    hashCode = hashCode * 59 + this.UniqueIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
