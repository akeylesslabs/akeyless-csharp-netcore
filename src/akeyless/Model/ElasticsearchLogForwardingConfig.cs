/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ElasticsearchLogForwardingConfig
    /// </summary>
    [DataContract(Name = "ElasticsearchLogForwardingConfig")]
    public partial class ElasticsearchLogForwardingConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ElasticsearchLogForwardingConfig" /> class.
        /// </summary>
        /// <param name="elasticsearchApiKey">elasticsearchApiKey.</param>
        /// <param name="elasticsearchAuthType">elasticsearchAuthType.</param>
        /// <param name="elasticsearchCloudId">elasticsearchCloudId.</param>
        /// <param name="elasticsearchEnableTls">elasticsearchEnableTls.</param>
        /// <param name="elasticsearchIndex">elasticsearchIndex.</param>
        /// <param name="elasticsearchNodes">elasticsearchNodes.</param>
        /// <param name="elasticsearchPassword">elasticsearchPassword.</param>
        /// <param name="elasticsearchServerType">elasticsearchServerType.</param>
        /// <param name="elasticsearchTlsCertificate">elasticsearchTlsCertificate.</param>
        /// <param name="elasticsearchUserName">elasticsearchUserName.</param>
        public ElasticsearchLogForwardingConfig(string elasticsearchApiKey = default(string), string elasticsearchAuthType = default(string), string elasticsearchCloudId = default(string), bool elasticsearchEnableTls = default(bool), string elasticsearchIndex = default(string), string elasticsearchNodes = default(string), string elasticsearchPassword = default(string), string elasticsearchServerType = default(string), string elasticsearchTlsCertificate = default(string), string elasticsearchUserName = default(string))
        {
            this.ElasticsearchApiKey = elasticsearchApiKey;
            this.ElasticsearchAuthType = elasticsearchAuthType;
            this.ElasticsearchCloudId = elasticsearchCloudId;
            this.ElasticsearchEnableTls = elasticsearchEnableTls;
            this.ElasticsearchIndex = elasticsearchIndex;
            this.ElasticsearchNodes = elasticsearchNodes;
            this.ElasticsearchPassword = elasticsearchPassword;
            this.ElasticsearchServerType = elasticsearchServerType;
            this.ElasticsearchTlsCertificate = elasticsearchTlsCertificate;
            this.ElasticsearchUserName = elasticsearchUserName;
        }

        /// <summary>
        /// Gets or Sets ElasticsearchApiKey
        /// </summary>
        [DataMember(Name = "elasticsearch_api_key", EmitDefaultValue = false)]
        public string ElasticsearchApiKey { get; set; }

        /// <summary>
        /// Gets or Sets ElasticsearchAuthType
        /// </summary>
        [DataMember(Name = "elasticsearch_auth_type", EmitDefaultValue = false)]
        public string ElasticsearchAuthType { get; set; }

        /// <summary>
        /// Gets or Sets ElasticsearchCloudId
        /// </summary>
        [DataMember(Name = "elasticsearch_cloud_id", EmitDefaultValue = false)]
        public string ElasticsearchCloudId { get; set; }

        /// <summary>
        /// Gets or Sets ElasticsearchEnableTls
        /// </summary>
        [DataMember(Name = "elasticsearch_enable_tls", EmitDefaultValue = true)]
        public bool ElasticsearchEnableTls { get; set; }

        /// <summary>
        /// Gets or Sets ElasticsearchIndex
        /// </summary>
        [DataMember(Name = "elasticsearch_index", EmitDefaultValue = false)]
        public string ElasticsearchIndex { get; set; }

        /// <summary>
        /// Gets or Sets ElasticsearchNodes
        /// </summary>
        [DataMember(Name = "elasticsearch_nodes", EmitDefaultValue = false)]
        public string ElasticsearchNodes { get; set; }

        /// <summary>
        /// Gets or Sets ElasticsearchPassword
        /// </summary>
        [DataMember(Name = "elasticsearch_password", EmitDefaultValue = false)]
        public string ElasticsearchPassword { get; set; }

        /// <summary>
        /// Gets or Sets ElasticsearchServerType
        /// </summary>
        [DataMember(Name = "elasticsearch_server_type", EmitDefaultValue = false)]
        public string ElasticsearchServerType { get; set; }

        /// <summary>
        /// Gets or Sets ElasticsearchTlsCertificate
        /// </summary>
        [DataMember(Name = "elasticsearch_tls_certificate", EmitDefaultValue = false)]
        public string ElasticsearchTlsCertificate { get; set; }

        /// <summary>
        /// Gets or Sets ElasticsearchUserName
        /// </summary>
        [DataMember(Name = "elasticsearch_user_name", EmitDefaultValue = false)]
        public string ElasticsearchUserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ElasticsearchLogForwardingConfig {\n");
            sb.Append("  ElasticsearchApiKey: ").Append(ElasticsearchApiKey).Append("\n");
            sb.Append("  ElasticsearchAuthType: ").Append(ElasticsearchAuthType).Append("\n");
            sb.Append("  ElasticsearchCloudId: ").Append(ElasticsearchCloudId).Append("\n");
            sb.Append("  ElasticsearchEnableTls: ").Append(ElasticsearchEnableTls).Append("\n");
            sb.Append("  ElasticsearchIndex: ").Append(ElasticsearchIndex).Append("\n");
            sb.Append("  ElasticsearchNodes: ").Append(ElasticsearchNodes).Append("\n");
            sb.Append("  ElasticsearchPassword: ").Append(ElasticsearchPassword).Append("\n");
            sb.Append("  ElasticsearchServerType: ").Append(ElasticsearchServerType).Append("\n");
            sb.Append("  ElasticsearchTlsCertificate: ").Append(ElasticsearchTlsCertificate).Append("\n");
            sb.Append("  ElasticsearchUserName: ").Append(ElasticsearchUserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
