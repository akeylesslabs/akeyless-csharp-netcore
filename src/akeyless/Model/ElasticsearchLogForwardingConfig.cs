/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ElasticsearchLogForwardingConfig
    /// </summary>
    [DataContract]
    public partial class ElasticsearchLogForwardingConfig :  IEquatable<ElasticsearchLogForwardingConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ElasticsearchLogForwardingConfig" /> class.
        /// </summary>
        /// <param name="elasticsearchHost">elasticsearchHost.</param>
        /// <param name="elasticsearchIndex">elasticsearchIndex.</param>
        /// <param name="elasticsearchNodes">elasticsearchNodes.</param>
        public ElasticsearchLogForwardingConfig(string elasticsearchHost = default(string), string elasticsearchIndex = default(string), string elasticsearchNodes = default(string))
        {
            this.ElasticsearchHost = elasticsearchHost;
            this.ElasticsearchIndex = elasticsearchIndex;
            this.ElasticsearchNodes = elasticsearchNodes;
        }
        
        /// <summary>
        /// Gets or Sets ElasticsearchHost
        /// </summary>
        [DataMember(Name="elasticsearch_host", EmitDefaultValue=false)]
        public string ElasticsearchHost { get; set; }

        /// <summary>
        /// Gets or Sets ElasticsearchIndex
        /// </summary>
        [DataMember(Name="elasticsearch_index", EmitDefaultValue=false)]
        public string ElasticsearchIndex { get; set; }

        /// <summary>
        /// Gets or Sets ElasticsearchNodes
        /// </summary>
        [DataMember(Name="elasticsearch_nodes", EmitDefaultValue=false)]
        public string ElasticsearchNodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElasticsearchLogForwardingConfig {\n");
            sb.Append("  ElasticsearchHost: ").Append(ElasticsearchHost).Append("\n");
            sb.Append("  ElasticsearchIndex: ").Append(ElasticsearchIndex).Append("\n");
            sb.Append("  ElasticsearchNodes: ").Append(ElasticsearchNodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElasticsearchLogForwardingConfig);
        }

        /// <summary>
        /// Returns true if ElasticsearchLogForwardingConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of ElasticsearchLogForwardingConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElasticsearchLogForwardingConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ElasticsearchHost == input.ElasticsearchHost ||
                    (this.ElasticsearchHost != null &&
                    this.ElasticsearchHost.Equals(input.ElasticsearchHost))
                ) && 
                (
                    this.ElasticsearchIndex == input.ElasticsearchIndex ||
                    (this.ElasticsearchIndex != null &&
                    this.ElasticsearchIndex.Equals(input.ElasticsearchIndex))
                ) && 
                (
                    this.ElasticsearchNodes == input.ElasticsearchNodes ||
                    (this.ElasticsearchNodes != null &&
                    this.ElasticsearchNodes.Equals(input.ElasticsearchNodes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ElasticsearchHost != null)
                    hashCode = hashCode * 59 + this.ElasticsearchHost.GetHashCode();
                if (this.ElasticsearchIndex != null)
                    hashCode = hashCode * 59 + this.ElasticsearchIndex.GetHashCode();
                if (this.ElasticsearchNodes != null)
                    hashCode = hashCode * 59 + this.ElasticsearchNodes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
