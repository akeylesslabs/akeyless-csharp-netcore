/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CreatePasskey is a command that creates a new passkey
    /// </summary>
    [DataContract(Name = "CreatePasskey")]
    public partial class CreatePasskey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePasskey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreatePasskey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePasskey" /> class.
        /// </summary>
        /// <param name="accessibility">for personal password manager (default to &quot;regular&quot;).</param>
        /// <param name="alg">Passkey type; options: [EC256, EC384, EC512] (required) (default to &quot;EC256&quot;).</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">ClassicKey name (required).</param>
        /// <param name="originUrl">Originating websites for this passkey.</param>
        /// <param name="protectionKeyName">The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="username">For Password Management use.</param>
        public CreatePasskey(string accessibility = @"regular", string alg = @"EC256", string deleteProtection = default(string), string description = default(string), bool json = false, string name = default(string), List<string> originUrl = default(List<string>), string protectionKeyName = default(string), List<string> tags = default(List<string>), string token = default(string), string uidToken = default(string), string username = default(string))
        {
            // to ensure "alg" is required (not null)
            if (alg == null)
            {
                throw new ArgumentNullException("alg is a required property for CreatePasskey and cannot be null");
            }
            this.Alg = alg;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreatePasskey and cannot be null");
            }
            this.Name = name;
            // use default value if no "accessibility" provided
            this.Accessibility = accessibility ?? @"regular";
            this.DeleteProtection = deleteProtection;
            this.Description = description;
            this.Json = json;
            this.OriginUrl = originUrl;
            this.ProtectionKeyName = protectionKeyName;
            this.Tags = tags;
            this.Token = token;
            this.UidToken = uidToken;
            this.Username = username;
        }

        /// <summary>
        /// for personal password manager
        /// </summary>
        /// <value>for personal password manager</value>
        [DataMember(Name = "accessibility", EmitDefaultValue = false)]
        public string Accessibility { get; set; }

        /// <summary>
        /// Passkey type; options: [EC256, EC384, EC512]
        /// </summary>
        /// <value>Passkey type; options: [EC256, EC384, EC512]</value>
        [DataMember(Name = "alg", IsRequired = true, EmitDefaultValue = true)]
        public string Alg { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// ClassicKey name
        /// </summary>
        /// <value>ClassicKey name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Originating websites for this passkey
        /// </summary>
        /// <value>Originating websites for this passkey</value>
        [DataMember(Name = "origin-url", EmitDefaultValue = false)]
        public List<string> OriginUrl { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "protection-key-name", EmitDefaultValue = false)]
        public string ProtectionKeyName { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// For Password Management use
        /// </summary>
        /// <value>For Password Management use</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePasskey {\n");
            sb.Append("  Accessibility: ").Append(Accessibility).Append("\n");
            sb.Append("  Alg: ").Append(Alg).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OriginUrl: ").Append(OriginUrl).Append("\n");
            sb.Append("  ProtectionKeyName: ").Append(ProtectionKeyName).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
