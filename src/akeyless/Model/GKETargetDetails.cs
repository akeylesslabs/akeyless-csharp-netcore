/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GKETargetDetails defines details related to connecting to a GKE (Google Kubernetes Engine) target
    /// </summary>
    [DataContract(Name = "GKETargetDetails")]
    public partial class GKETargetDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GKETargetDetails" /> class.
        /// </summary>
        /// <param name="gkeClusterCaCertificate">gkeClusterCaCertificate.</param>
        /// <param name="gkeClusterEndpoint">gkeClusterEndpoint.</param>
        /// <param name="gkeClusterName">gkeClusterName.</param>
        /// <param name="gkeServiceAccountKey">gkeServiceAccountKey.</param>
        /// <param name="gkeServiceAccountName">gkeServiceAccountName.</param>
        /// <param name="useGwCloudIdentity">useGwCloudIdentity.</param>
        public GKETargetDetails(string gkeClusterCaCertificate = default(string), string gkeClusterEndpoint = default(string), string gkeClusterName = default(string), string gkeServiceAccountKey = default(string), string gkeServiceAccountName = default(string), bool useGwCloudIdentity = default(bool))
        {
            this.GkeClusterCaCertificate = gkeClusterCaCertificate;
            this.GkeClusterEndpoint = gkeClusterEndpoint;
            this.GkeClusterName = gkeClusterName;
            this.GkeServiceAccountKey = gkeServiceAccountKey;
            this.GkeServiceAccountName = gkeServiceAccountName;
            this.UseGwCloudIdentity = useGwCloudIdentity;
        }

        /// <summary>
        /// Gets or Sets GkeClusterCaCertificate
        /// </summary>
        [DataMember(Name = "gke_cluster_ca_certificate", EmitDefaultValue = false)]
        public string GkeClusterCaCertificate { get; set; }

        /// <summary>
        /// Gets or Sets GkeClusterEndpoint
        /// </summary>
        [DataMember(Name = "gke_cluster_endpoint", EmitDefaultValue = false)]
        public string GkeClusterEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets GkeClusterName
        /// </summary>
        [DataMember(Name = "gke_cluster_name", EmitDefaultValue = false)]
        public string GkeClusterName { get; set; }

        /// <summary>
        /// Gets or Sets GkeServiceAccountKey
        /// </summary>
        [DataMember(Name = "gke_service_account_key", EmitDefaultValue = false)]
        public string GkeServiceAccountKey { get; set; }

        /// <summary>
        /// Gets or Sets GkeServiceAccountName
        /// </summary>
        [DataMember(Name = "gke_service_account_name", EmitDefaultValue = false)]
        public string GkeServiceAccountName { get; set; }

        /// <summary>
        /// Gets or Sets UseGwCloudIdentity
        /// </summary>
        [DataMember(Name = "use_gw_cloud_identity", EmitDefaultValue = true)]
        public bool UseGwCloudIdentity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GKETargetDetails {\n");
            sb.Append("  GkeClusterCaCertificate: ").Append(GkeClusterCaCertificate).Append("\n");
            sb.Append("  GkeClusterEndpoint: ").Append(GkeClusterEndpoint).Append("\n");
            sb.Append("  GkeClusterName: ").Append(GkeClusterName).Append("\n");
            sb.Append("  GkeServiceAccountKey: ").Append(GkeServiceAccountKey).Append("\n");
            sb.Append("  GkeServiceAccountName: ").Append(GkeServiceAccountName).Append("\n");
            sb.Append("  UseGwCloudIdentity: ").Append(UseGwCloudIdentity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
