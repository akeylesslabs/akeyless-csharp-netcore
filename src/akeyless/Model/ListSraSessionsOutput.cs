/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ListSraSessionsOutput
    /// </summary>
    [DataContract(Name = "ListSraSessionsOutput")]
    public partial class ListSraSessionsOutput : IEquatable<ListSraSessionsOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListSraSessionsOutput" /> class.
        /// </summary>
        /// <param name="allowedGateways">allowedGateways.</param>
        /// <param name="nextPage">nextPage.</param>
        /// <param name="sessions">sessions.</param>
        public ListSraSessionsOutput(List<string> allowedGateways = default(List<string>), string nextPage = default(string), List<SraSessionEntryOut> sessions = default(List<SraSessionEntryOut>))
        {
            this.AllowedGateways = allowedGateways;
            this.NextPage = nextPage;
            this.Sessions = sessions;
        }

        /// <summary>
        /// Gets or Sets AllowedGateways
        /// </summary>
        [DataMember(Name = "allowed_gateways", EmitDefaultValue = false)]
        public List<string> AllowedGateways { get; set; }

        /// <summary>
        /// Gets or Sets NextPage
        /// </summary>
        [DataMember(Name = "next_page", EmitDefaultValue = false)]
        public string NextPage { get; set; }

        /// <summary>
        /// Gets or Sets Sessions
        /// </summary>
        [DataMember(Name = "sessions", EmitDefaultValue = false)]
        public List<SraSessionEntryOut> Sessions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListSraSessionsOutput {\n");
            sb.Append("  AllowedGateways: ").Append(AllowedGateways).Append("\n");
            sb.Append("  NextPage: ").Append(NextPage).Append("\n");
            sb.Append("  Sessions: ").Append(Sessions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListSraSessionsOutput);
        }

        /// <summary>
        /// Returns true if ListSraSessionsOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of ListSraSessionsOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListSraSessionsOutput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllowedGateways == input.AllowedGateways ||
                    this.AllowedGateways != null &&
                    input.AllowedGateways != null &&
                    this.AllowedGateways.SequenceEqual(input.AllowedGateways)
                ) && 
                (
                    this.NextPage == input.NextPage ||
                    (this.NextPage != null &&
                    this.NextPage.Equals(input.NextPage))
                ) && 
                (
                    this.Sessions == input.Sessions ||
                    this.Sessions != null &&
                    input.Sessions != null &&
                    this.Sessions.SequenceEqual(input.Sessions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowedGateways != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedGateways.GetHashCode();
                }
                if (this.NextPage != null)
                {
                    hashCode = (hashCode * 59) + this.NextPage.GetHashCode();
                }
                if (this.Sessions != null)
                {
                    hashCode = (hashCode * 59) + this.Sessions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
