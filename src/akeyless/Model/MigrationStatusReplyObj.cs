/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// MigrationStatusReplyObj
    /// </summary>
    [DataContract(Name = "MigrationStatusReplyObj")]
    public partial class MigrationStatusReplyObj : IEquatable<MigrationStatusReplyObj>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MigrationStatusReplyObj" /> class.
        /// </summary>
        /// <param name="durationTime">durationTime.</param>
        /// <param name="error">error.</param>
        /// <param name="lastStatusMessage">lastStatusMessage.</param>
        /// <param name="maxNameLength">maxNameLength.</param>
        /// <param name="maxValueLength">maxValueLength.</param>
        /// <param name="migrationId">migrationId.</param>
        /// <param name="migrationItems">migrationItems.</param>
        /// <param name="migrationName">migrationName.</param>
        /// <param name="migrationState">migrationState.</param>
        /// <param name="migrationType">migrationType.</param>
        /// <param name="migrationTypeName">migrationTypeName.</param>
        /// <param name="rotatedSecrets">rotatedSecrets.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="targets">targets.</param>
        public MigrationStatusReplyObj(string durationTime = default(string), string error = default(string), string lastStatusMessage = default(string), long maxNameLength = default(long), long maxValueLength = default(long), string migrationId = default(string), MigrationItems migrationItems = default(MigrationItems), string migrationName = default(string), string migrationState = default(string), string migrationType = default(string), string migrationTypeName = default(string), MigrationItems rotatedSecrets = default(MigrationItems), string startTime = default(string), MigrationItems targets = default(MigrationItems))
        {
            this.DurationTime = durationTime;
            this.Error = error;
            this.LastStatusMessage = lastStatusMessage;
            this.MaxNameLength = maxNameLength;
            this.MaxValueLength = maxValueLength;
            this.MigrationId = migrationId;
            this.MigrationItems = migrationItems;
            this.MigrationName = migrationName;
            this.MigrationState = migrationState;
            this.MigrationType = migrationType;
            this.MigrationTypeName = migrationTypeName;
            this.RotatedSecrets = rotatedSecrets;
            this.StartTime = startTime;
            this.Targets = targets;
        }

        /// <summary>
        /// Gets or Sets DurationTime
        /// </summary>
        [DataMember(Name = "duration_time", EmitDefaultValue = false)]
        public string DurationTime { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; set; }

        /// <summary>
        /// Gets or Sets LastStatusMessage
        /// </summary>
        [DataMember(Name = "last_status_message", EmitDefaultValue = false)]
        public string LastStatusMessage { get; set; }

        /// <summary>
        /// Gets or Sets MaxNameLength
        /// </summary>
        [DataMember(Name = "max_name_length", EmitDefaultValue = false)]
        public long MaxNameLength { get; set; }

        /// <summary>
        /// Gets or Sets MaxValueLength
        /// </summary>
        [DataMember(Name = "max_value_length", EmitDefaultValue = false)]
        public long MaxValueLength { get; set; }

        /// <summary>
        /// Gets or Sets MigrationId
        /// </summary>
        [DataMember(Name = "migration_id", EmitDefaultValue = false)]
        public string MigrationId { get; set; }

        /// <summary>
        /// Gets or Sets MigrationItems
        /// </summary>
        [DataMember(Name = "migration_items", EmitDefaultValue = false)]
        public MigrationItems MigrationItems { get; set; }

        /// <summary>
        /// Gets or Sets MigrationName
        /// </summary>
        [DataMember(Name = "migration_name", EmitDefaultValue = false)]
        public string MigrationName { get; set; }

        /// <summary>
        /// Gets or Sets MigrationState
        /// </summary>
        [DataMember(Name = "migration_state", EmitDefaultValue = false)]
        public string MigrationState { get; set; }

        /// <summary>
        /// Gets or Sets MigrationType
        /// </summary>
        [DataMember(Name = "migration_type", EmitDefaultValue = false)]
        public string MigrationType { get; set; }

        /// <summary>
        /// Gets or Sets MigrationTypeName
        /// </summary>
        [DataMember(Name = "migration_type_name", EmitDefaultValue = false)]
        public string MigrationTypeName { get; set; }

        /// <summary>
        /// Gets or Sets RotatedSecrets
        /// </summary>
        [DataMember(Name = "rotated_secrets", EmitDefaultValue = false)]
        public MigrationItems RotatedSecrets { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "start_time", EmitDefaultValue = false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Targets
        /// </summary>
        [DataMember(Name = "targets", EmitDefaultValue = false)]
        public MigrationItems Targets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MigrationStatusReplyObj {\n");
            sb.Append("  DurationTime: ").Append(DurationTime).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  LastStatusMessage: ").Append(LastStatusMessage).Append("\n");
            sb.Append("  MaxNameLength: ").Append(MaxNameLength).Append("\n");
            sb.Append("  MaxValueLength: ").Append(MaxValueLength).Append("\n");
            sb.Append("  MigrationId: ").Append(MigrationId).Append("\n");
            sb.Append("  MigrationItems: ").Append(MigrationItems).Append("\n");
            sb.Append("  MigrationName: ").Append(MigrationName).Append("\n");
            sb.Append("  MigrationState: ").Append(MigrationState).Append("\n");
            sb.Append("  MigrationType: ").Append(MigrationType).Append("\n");
            sb.Append("  MigrationTypeName: ").Append(MigrationTypeName).Append("\n");
            sb.Append("  RotatedSecrets: ").Append(RotatedSecrets).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MigrationStatusReplyObj);
        }

        /// <summary>
        /// Returns true if MigrationStatusReplyObj instances are equal
        /// </summary>
        /// <param name="input">Instance of MigrationStatusReplyObj to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MigrationStatusReplyObj input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DurationTime == input.DurationTime ||
                    (this.DurationTime != null &&
                    this.DurationTime.Equals(input.DurationTime))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.LastStatusMessage == input.LastStatusMessage ||
                    (this.LastStatusMessage != null &&
                    this.LastStatusMessage.Equals(input.LastStatusMessage))
                ) && 
                (
                    this.MaxNameLength == input.MaxNameLength ||
                    this.MaxNameLength.Equals(input.MaxNameLength)
                ) && 
                (
                    this.MaxValueLength == input.MaxValueLength ||
                    this.MaxValueLength.Equals(input.MaxValueLength)
                ) && 
                (
                    this.MigrationId == input.MigrationId ||
                    (this.MigrationId != null &&
                    this.MigrationId.Equals(input.MigrationId))
                ) && 
                (
                    this.MigrationItems == input.MigrationItems ||
                    (this.MigrationItems != null &&
                    this.MigrationItems.Equals(input.MigrationItems))
                ) && 
                (
                    this.MigrationName == input.MigrationName ||
                    (this.MigrationName != null &&
                    this.MigrationName.Equals(input.MigrationName))
                ) && 
                (
                    this.MigrationState == input.MigrationState ||
                    (this.MigrationState != null &&
                    this.MigrationState.Equals(input.MigrationState))
                ) && 
                (
                    this.MigrationType == input.MigrationType ||
                    (this.MigrationType != null &&
                    this.MigrationType.Equals(input.MigrationType))
                ) && 
                (
                    this.MigrationTypeName == input.MigrationTypeName ||
                    (this.MigrationTypeName != null &&
                    this.MigrationTypeName.Equals(input.MigrationTypeName))
                ) && 
                (
                    this.RotatedSecrets == input.RotatedSecrets ||
                    (this.RotatedSecrets != null &&
                    this.RotatedSecrets.Equals(input.RotatedSecrets))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Targets == input.Targets ||
                    (this.Targets != null &&
                    this.Targets.Equals(input.Targets))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DurationTime != null)
                {
                    hashCode = (hashCode * 59) + this.DurationTime.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.LastStatusMessage != null)
                {
                    hashCode = (hashCode * 59) + this.LastStatusMessage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxNameLength.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxValueLength.GetHashCode();
                if (this.MigrationId != null)
                {
                    hashCode = (hashCode * 59) + this.MigrationId.GetHashCode();
                }
                if (this.MigrationItems != null)
                {
                    hashCode = (hashCode * 59) + this.MigrationItems.GetHashCode();
                }
                if (this.MigrationName != null)
                {
                    hashCode = (hashCode * 59) + this.MigrationName.GetHashCode();
                }
                if (this.MigrationState != null)
                {
                    hashCode = (hashCode * 59) + this.MigrationState.GetHashCode();
                }
                if (this.MigrationType != null)
                {
                    hashCode = (hashCode * 59) + this.MigrationType.GetHashCode();
                }
                if (this.MigrationTypeName != null)
                {
                    hashCode = (hashCode * 59) + this.MigrationTypeName.GetHashCode();
                }
                if (this.RotatedSecrets != null)
                {
                    hashCode = (hashCode * 59) + this.RotatedSecrets.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.Targets != null)
                {
                    hashCode = (hashCode * 59) + this.Targets.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
