/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ReverseRBACClient
    /// </summary>
    [DataContract]
    public partial class ReverseRBACClient :  IEquatable<ReverseRBACClient>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReverseRBACClient" /> class.
        /// </summary>
        /// <param name="allowedOps">allowedOps.</param>
        /// <param name="assocs">assocs.</param>
        /// <param name="authMethodName">authMethodName.</param>
        public ReverseRBACClient(List<string> allowedOps = default(List<string>), List<AuthMethodRoleAssociation> assocs = default(List<AuthMethodRoleAssociation>), string authMethodName = default(string))
        {
            this.AllowedOps = allowedOps;
            this.Assocs = assocs;
            this.AuthMethodName = authMethodName;
        }
        
        /// <summary>
        /// Gets or Sets AllowedOps
        /// </summary>
        [DataMember(Name="allowed_ops", EmitDefaultValue=false)]
        public List<string> AllowedOps { get; set; }

        /// <summary>
        /// Gets or Sets Assocs
        /// </summary>
        [DataMember(Name="assocs", EmitDefaultValue=false)]
        public List<AuthMethodRoleAssociation> Assocs { get; set; }

        /// <summary>
        /// Gets or Sets AuthMethodName
        /// </summary>
        [DataMember(Name="auth_method_name", EmitDefaultValue=false)]
        public string AuthMethodName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReverseRBACClient {\n");
            sb.Append("  AllowedOps: ").Append(AllowedOps).Append("\n");
            sb.Append("  Assocs: ").Append(Assocs).Append("\n");
            sb.Append("  AuthMethodName: ").Append(AuthMethodName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReverseRBACClient);
        }

        /// <summary>
        /// Returns true if ReverseRBACClient instances are equal
        /// </summary>
        /// <param name="input">Instance of ReverseRBACClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReverseRBACClient input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowedOps == input.AllowedOps ||
                    this.AllowedOps != null &&
                    input.AllowedOps != null &&
                    this.AllowedOps.SequenceEqual(input.AllowedOps)
                ) && 
                (
                    this.Assocs == input.Assocs ||
                    this.Assocs != null &&
                    input.Assocs != null &&
                    this.Assocs.SequenceEqual(input.Assocs)
                ) && 
                (
                    this.AuthMethodName == input.AuthMethodName ||
                    (this.AuthMethodName != null &&
                    this.AuthMethodName.Equals(input.AuthMethodName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowedOps != null)
                    hashCode = hashCode * 59 + this.AllowedOps.GetHashCode();
                if (this.Assocs != null)
                    hashCode = hashCode * 59 + this.Assocs.GetHashCode();
                if (this.AuthMethodName != null)
                    hashCode = hashCode * 59 + this.AuthMethodName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
