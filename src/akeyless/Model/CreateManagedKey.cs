/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CreateManagedKey is a command that creates managed key
    /// </summary>
    [DataContract]
    public partial class CreateManagedKey :  IEquatable<CreateManagedKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateManagedKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateManagedKey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateManagedKey" /> class.
        /// </summary>
        /// <param name="alg">Managed Key type; options: [AES256GCM, RSA2048] (required).</param>
        /// <param name="managedKeyValue">Base64-encoded managed key value.</param>
        /// <param name="metadata">Metadata about the managed key.</param>
        /// <param name="name">ManagedKey name (required).</param>
        /// <param name="protectionKey">The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="tags">List of the tags attached to this managed key.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public CreateManagedKey(string alg = default(string), string managedKeyValue = default(string), string metadata = default(string), string name = default(string), string protectionKey = default(string), List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string))
        {
            // to ensure "alg" is required (not null)
            this.Alg = alg ?? throw new ArgumentNullException("alg is a required property for CreateManagedKey and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for CreateManagedKey and cannot be null");
            this.ManagedKeyValue = managedKeyValue;
            this.Metadata = metadata;
            this.ProtectionKey = protectionKey;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
        }
        
        /// <summary>
        /// Managed Key type; options: [AES256GCM, RSA2048]
        /// </summary>
        /// <value>Managed Key type; options: [AES256GCM, RSA2048]</value>
        [DataMember(Name="alg", EmitDefaultValue=false)]
        public string Alg { get; set; }

        /// <summary>
        /// Base64-encoded managed key value
        /// </summary>
        /// <value>Base64-encoded managed key value</value>
        [DataMember(Name="managed-key-value", EmitDefaultValue=false)]
        public string ManagedKeyValue { get; set; }

        /// <summary>
        /// Metadata about the managed key
        /// </summary>
        /// <value>Metadata about the managed key</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }

        /// <summary>
        /// ManagedKey name
        /// </summary>
        /// <value>ManagedKey name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name="protection_key", EmitDefaultValue=false)]
        public string ProtectionKey { get; set; }

        /// <summary>
        /// List of the tags attached to this managed key
        /// </summary>
        /// <value>List of the tags attached to this managed key</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name="target-name", EmitDefaultValue=false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateManagedKey {\n");
            sb.Append("  Alg: ").Append(Alg).Append("\n");
            sb.Append("  ManagedKeyValue: ").Append(ManagedKeyValue).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProtectionKey: ").Append(ProtectionKey).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateManagedKey);
        }

        /// <summary>
        /// Returns true if CreateManagedKey instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateManagedKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateManagedKey input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Alg == input.Alg ||
                    (this.Alg != null &&
                    this.Alg.Equals(input.Alg))
                ) && 
                (
                    this.ManagedKeyValue == input.ManagedKeyValue ||
                    (this.ManagedKeyValue != null &&
                    this.ManagedKeyValue.Equals(input.ManagedKeyValue))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProtectionKey == input.ProtectionKey ||
                    (this.ProtectionKey != null &&
                    this.ProtectionKey.Equals(input.ProtectionKey))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alg != null)
                    hashCode = hashCode * 59 + this.Alg.GetHashCode();
                if (this.ManagedKeyValue != null)
                    hashCode = hashCode * 59 + this.ManagedKeyValue.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ProtectionKey != null)
                    hashCode = hashCode * 59 + this.ProtectionKey.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.TargetName != null)
                    hashCode = hashCode * 59 + this.TargetName.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
