/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// targetCreateOpenAI is a command that creates a new openai target
    /// </summary>
    [DataContract(Name = "targetCreateOpenAI")]
    public partial class TargetCreateOpenAI : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetCreateOpenAI" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TargetCreateOpenAI() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetCreateOpenAI" /> class.
        /// </summary>
        /// <param name="apiKey">API key for OpenAI.</param>
        /// <param name="apiKeyId">API key ID.</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="key">The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="maxVersions">Set the maximum number of versions, limited by the account settings defaults..</param>
        /// <param name="model">Default model to use with OpenAI.</param>
        /// <param name="name">Target name (required).</param>
        /// <param name="openaiUrl">Base URL of the OpenAI API (default to &quot;https://api.openai.com/v1&quot;).</param>
        /// <param name="organizationId">Organization ID.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public TargetCreateOpenAI(string apiKey = default(string), string apiKeyId = default(string), string description = default(string), bool json = false, string key = default(string), string maxVersions = default(string), string model = default(string), string name = default(string), string openaiUrl = @"https://api.openai.com/v1", string organizationId = default(string), string token = default(string), string uidToken = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TargetCreateOpenAI and cannot be null");
            }
            this.Name = name;
            this.ApiKey = apiKey;
            this.ApiKeyId = apiKeyId;
            this.Description = description;
            this.Json = json;
            this.Key = key;
            this.MaxVersions = maxVersions;
            this.Model = model;
            // use default value if no "openaiUrl" provided
            this.OpenaiUrl = openaiUrl ?? @"https://api.openai.com/v1";
            this.OrganizationId = organizationId;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// API key for OpenAI
        /// </summary>
        /// <value>API key for OpenAI</value>
        [DataMember(Name = "api-key", EmitDefaultValue = false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// API key ID
        /// </summary>
        /// <value>API key ID</value>
        [DataMember(Name = "api-key-id", EmitDefaultValue = false)]
        public string ApiKeyId { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Set the maximum number of versions, limited by the account settings defaults.
        /// </summary>
        /// <value>Set the maximum number of versions, limited by the account settings defaults.</value>
        [DataMember(Name = "max-versions", EmitDefaultValue = false)]
        public string MaxVersions { get; set; }

        /// <summary>
        /// Default model to use with OpenAI
        /// </summary>
        /// <value>Default model to use with OpenAI</value>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Base URL of the OpenAI API
        /// </summary>
        /// <value>Base URL of the OpenAI API</value>
        [DataMember(Name = "openai-url", EmitDefaultValue = false)]
        public string OpenaiUrl { get; set; }

        /// <summary>
        /// Organization ID
        /// </summary>
        /// <value>Organization ID</value>
        [DataMember(Name = "organization-id", EmitDefaultValue = false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TargetCreateOpenAI {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  ApiKeyId: ").Append(ApiKeyId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  MaxVersions: ").Append(MaxVersions).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OpenaiUrl: ").Append(OpenaiUrl).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
