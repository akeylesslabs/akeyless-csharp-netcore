/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ShareItemOutput
    /// </summary>
    [DataContract(Name = "shareItemOutput")]
    public partial class ShareItemOutput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareItemOutput" /> class.
        /// </summary>
        /// <param name="emailError">emailError.</param>
        /// <param name="itemsError">itemsError.</param>
        /// <param name="sToken">sToken.</param>
        /// <param name="sharedUsers">sharedUsers.</param>
        /// <param name="sharedUsersFullInfo">sharedUsersFullInfo.</param>
        /// <param name="sharingUrl">sharingUrl.</param>
        public ShareItemOutput(Dictionary<string, string> emailError = default(Dictionary<string, string>), List<ResponseStopShareItem> itemsError = default(List<ResponseStopShareItem>), string sToken = default(string), List<string> sharedUsers = default(List<string>), List<SharingItemFullInfo> sharedUsersFullInfo = default(List<SharingItemFullInfo>), string sharingUrl = default(string))
        {
            this.EmailError = emailError;
            this.ItemsError = itemsError;
            this.SToken = sToken;
            this.SharedUsers = sharedUsers;
            this.SharedUsersFullInfo = sharedUsersFullInfo;
            this.SharingUrl = sharingUrl;
        }

        /// <summary>
        /// Gets or Sets EmailError
        /// </summary>
        [DataMember(Name = "email_error", EmitDefaultValue = false)]
        public Dictionary<string, string> EmailError { get; set; }

        /// <summary>
        /// Gets or Sets ItemsError
        /// </summary>
        [DataMember(Name = "items_error", EmitDefaultValue = false)]
        public List<ResponseStopShareItem> ItemsError { get; set; }

        /// <summary>
        /// Gets or Sets SToken
        /// </summary>
        [DataMember(Name = "s_token", EmitDefaultValue = false)]
        public string SToken { get; set; }

        /// <summary>
        /// Gets or Sets SharedUsers
        /// </summary>
        [DataMember(Name = "shared_users", EmitDefaultValue = false)]
        public List<string> SharedUsers { get; set; }

        /// <summary>
        /// Gets or Sets SharedUsersFullInfo
        /// </summary>
        [DataMember(Name = "shared_users_full_info", EmitDefaultValue = false)]
        public List<SharingItemFullInfo> SharedUsersFullInfo { get; set; }

        /// <summary>
        /// Gets or Sets SharingUrl
        /// </summary>
        [DataMember(Name = "sharing_url", EmitDefaultValue = false)]
        public string SharingUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShareItemOutput {\n");
            sb.Append("  EmailError: ").Append(EmailError).Append("\n");
            sb.Append("  ItemsError: ").Append(ItemsError).Append("\n");
            sb.Append("  SToken: ").Append(SToken).Append("\n");
            sb.Append("  SharedUsers: ").Append(SharedUsers).Append("\n");
            sb.Append("  SharedUsersFullInfo: ").Append(SharedUsersFullInfo).Append("\n");
            sb.Append("  SharingUrl: ").Append(SharingUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
