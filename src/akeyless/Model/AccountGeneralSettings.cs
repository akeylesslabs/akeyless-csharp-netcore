/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// AccountGeneralSettings describes general settings for an account
    /// </summary>
    [DataContract(Name = "AccountGeneralSettings")]
    public partial class AccountGeneralSettings : IEquatable<AccountGeneralSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountGeneralSettings" /> class.
        /// </summary>
        /// <param name="accountDefaultKeyItemId">AccountDefaultKeyItemID is the item ID of the DFC key item configured as the default protection key.</param>
        /// <param name="accountDefaultKeyName">AccountDefaultKeyName is the name of the DFC key item configured as the default key This is here simply for the response to include the item name in addition to the display ID so the client can properly show this to the user. It will not be saved to the DB, only the AccountDefaultKeyItemID will..</param>
        /// <param name="authUsageEvent">authUsageEvent.</param>
        /// <param name="dataProtectionSection">dataProtectionSection.</param>
        /// <param name="enableRequestForAccess">enableRequestForAccess.</param>
        /// <param name="invalidCharacters">InvalidCharacters is the invalid characters for items/targets/roles/auths/notifier_forwarder naming convention.</param>
        /// <param name="itemUsageEvent">itemUsageEvent.</param>
        /// <param name="lockDefaultKey">LockDefaultKey determines whether the configured default key can be updated by end-users on a per-request basis true - all requests use the configured default key false - every request can determine its protection key (default) nil - change nothing (every request can determine its protection key (default)) This parameter is only relevant if AccountDefaultKeyItemID is not empty.</param>
        /// <param name="passwordPolicy">passwordPolicy.</param>
        /// <param name="protectItemsByDefault">protectItemsByDefault.</param>
        /// <param name="sharingPolicy">sharingPolicy.</param>
        public AccountGeneralSettings(long accountDefaultKeyItemId = default(long), string accountDefaultKeyName = default(string), UsageEventSetting authUsageEvent = default(UsageEventSetting), DataProtectionSection dataProtectionSection = default(DataProtectionSection), bool enableRequestForAccess = default(bool), string invalidCharacters = default(string), UsageEventSetting itemUsageEvent = default(UsageEventSetting), bool lockDefaultKey = default(bool), PasswordPolicyInfo passwordPolicy = default(PasswordPolicyInfo), bool protectItemsByDefault = default(bool), SharingPolicyInfo sharingPolicy = default(SharingPolicyInfo))
        {
            this.AccountDefaultKeyItemId = accountDefaultKeyItemId;
            this.AccountDefaultKeyName = accountDefaultKeyName;
            this.AuthUsageEvent = authUsageEvent;
            this.DataProtectionSection = dataProtectionSection;
            this.EnableRequestForAccess = enableRequestForAccess;
            this.InvalidCharacters = invalidCharacters;
            this.ItemUsageEvent = itemUsageEvent;
            this.LockDefaultKey = lockDefaultKey;
            this.PasswordPolicy = passwordPolicy;
            this.ProtectItemsByDefault = protectItemsByDefault;
            this.SharingPolicy = sharingPolicy;
        }

        /// <summary>
        /// AccountDefaultKeyItemID is the item ID of the DFC key item configured as the default protection key
        /// </summary>
        /// <value>AccountDefaultKeyItemID is the item ID of the DFC key item configured as the default protection key</value>
        [DataMember(Name = "account_default_key_item_id", EmitDefaultValue = false)]
        public long AccountDefaultKeyItemId { get; set; }

        /// <summary>
        /// AccountDefaultKeyName is the name of the DFC key item configured as the default key This is here simply for the response to include the item name in addition to the display ID so the client can properly show this to the user. It will not be saved to the DB, only the AccountDefaultKeyItemID will.
        /// </summary>
        /// <value>AccountDefaultKeyName is the name of the DFC key item configured as the default key This is here simply for the response to include the item name in addition to the display ID so the client can properly show this to the user. It will not be saved to the DB, only the AccountDefaultKeyItemID will.</value>
        [DataMember(Name = "account_default_key_name", EmitDefaultValue = false)]
        public string AccountDefaultKeyName { get; set; }

        /// <summary>
        /// Gets or Sets AuthUsageEvent
        /// </summary>
        [DataMember(Name = "auth_usage_event", EmitDefaultValue = false)]
        public UsageEventSetting AuthUsageEvent { get; set; }

        /// <summary>
        /// Gets or Sets DataProtectionSection
        /// </summary>
        [DataMember(Name = "data_protection_section", EmitDefaultValue = false)]
        public DataProtectionSection DataProtectionSection { get; set; }

        /// <summary>
        /// Gets or Sets EnableRequestForAccess
        /// </summary>
        [DataMember(Name = "enable_request_for_access", EmitDefaultValue = true)]
        public bool EnableRequestForAccess { get; set; }

        /// <summary>
        /// InvalidCharacters is the invalid characters for items/targets/roles/auths/notifier_forwarder naming convention
        /// </summary>
        /// <value>InvalidCharacters is the invalid characters for items/targets/roles/auths/notifier_forwarder naming convention</value>
        [DataMember(Name = "invalid_characters", EmitDefaultValue = false)]
        public string InvalidCharacters { get; set; }

        /// <summary>
        /// Gets or Sets ItemUsageEvent
        /// </summary>
        [DataMember(Name = "item_usage_event", EmitDefaultValue = false)]
        public UsageEventSetting ItemUsageEvent { get; set; }

        /// <summary>
        /// LockDefaultKey determines whether the configured default key can be updated by end-users on a per-request basis true - all requests use the configured default key false - every request can determine its protection key (default) nil - change nothing (every request can determine its protection key (default)) This parameter is only relevant if AccountDefaultKeyItemID is not empty
        /// </summary>
        /// <value>LockDefaultKey determines whether the configured default key can be updated by end-users on a per-request basis true - all requests use the configured default key false - every request can determine its protection key (default) nil - change nothing (every request can determine its protection key (default)) This parameter is only relevant if AccountDefaultKeyItemID is not empty</value>
        [DataMember(Name = "lock_default_key", EmitDefaultValue = true)]
        public bool LockDefaultKey { get; set; }

        /// <summary>
        /// Gets or Sets PasswordPolicy
        /// </summary>
        [DataMember(Name = "password_policy", EmitDefaultValue = false)]
        public PasswordPolicyInfo PasswordPolicy { get; set; }

        /// <summary>
        /// Gets or Sets ProtectItemsByDefault
        /// </summary>
        [DataMember(Name = "protect_items_by_default", EmitDefaultValue = true)]
        public bool ProtectItemsByDefault { get; set; }

        /// <summary>
        /// Gets or Sets SharingPolicy
        /// </summary>
        [DataMember(Name = "sharing_policy", EmitDefaultValue = false)]
        public SharingPolicyInfo SharingPolicy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountGeneralSettings {\n");
            sb.Append("  AccountDefaultKeyItemId: ").Append(AccountDefaultKeyItemId).Append("\n");
            sb.Append("  AccountDefaultKeyName: ").Append(AccountDefaultKeyName).Append("\n");
            sb.Append("  AuthUsageEvent: ").Append(AuthUsageEvent).Append("\n");
            sb.Append("  DataProtectionSection: ").Append(DataProtectionSection).Append("\n");
            sb.Append("  EnableRequestForAccess: ").Append(EnableRequestForAccess).Append("\n");
            sb.Append("  InvalidCharacters: ").Append(InvalidCharacters).Append("\n");
            sb.Append("  ItemUsageEvent: ").Append(ItemUsageEvent).Append("\n");
            sb.Append("  LockDefaultKey: ").Append(LockDefaultKey).Append("\n");
            sb.Append("  PasswordPolicy: ").Append(PasswordPolicy).Append("\n");
            sb.Append("  ProtectItemsByDefault: ").Append(ProtectItemsByDefault).Append("\n");
            sb.Append("  SharingPolicy: ").Append(SharingPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountGeneralSettings);
        }

        /// <summary>
        /// Returns true if AccountGeneralSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountGeneralSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountGeneralSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountDefaultKeyItemId == input.AccountDefaultKeyItemId ||
                    this.AccountDefaultKeyItemId.Equals(input.AccountDefaultKeyItemId)
                ) && 
                (
                    this.AccountDefaultKeyName == input.AccountDefaultKeyName ||
                    (this.AccountDefaultKeyName != null &&
                    this.AccountDefaultKeyName.Equals(input.AccountDefaultKeyName))
                ) && 
                (
                    this.AuthUsageEvent == input.AuthUsageEvent ||
                    (this.AuthUsageEvent != null &&
                    this.AuthUsageEvent.Equals(input.AuthUsageEvent))
                ) && 
                (
                    this.DataProtectionSection == input.DataProtectionSection ||
                    (this.DataProtectionSection != null &&
                    this.DataProtectionSection.Equals(input.DataProtectionSection))
                ) && 
                (
                    this.EnableRequestForAccess == input.EnableRequestForAccess ||
                    this.EnableRequestForAccess.Equals(input.EnableRequestForAccess)
                ) && 
                (
                    this.InvalidCharacters == input.InvalidCharacters ||
                    (this.InvalidCharacters != null &&
                    this.InvalidCharacters.Equals(input.InvalidCharacters))
                ) && 
                (
                    this.ItemUsageEvent == input.ItemUsageEvent ||
                    (this.ItemUsageEvent != null &&
                    this.ItemUsageEvent.Equals(input.ItemUsageEvent))
                ) && 
                (
                    this.LockDefaultKey == input.LockDefaultKey ||
                    this.LockDefaultKey.Equals(input.LockDefaultKey)
                ) && 
                (
                    this.PasswordPolicy == input.PasswordPolicy ||
                    (this.PasswordPolicy != null &&
                    this.PasswordPolicy.Equals(input.PasswordPolicy))
                ) && 
                (
                    this.ProtectItemsByDefault == input.ProtectItemsByDefault ||
                    this.ProtectItemsByDefault.Equals(input.ProtectItemsByDefault)
                ) && 
                (
                    this.SharingPolicy == input.SharingPolicy ||
                    (this.SharingPolicy != null &&
                    this.SharingPolicy.Equals(input.SharingPolicy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AccountDefaultKeyItemId.GetHashCode();
                if (this.AccountDefaultKeyName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountDefaultKeyName.GetHashCode();
                }
                if (this.AuthUsageEvent != null)
                {
                    hashCode = (hashCode * 59) + this.AuthUsageEvent.GetHashCode();
                }
                if (this.DataProtectionSection != null)
                {
                    hashCode = (hashCode * 59) + this.DataProtectionSection.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableRequestForAccess.GetHashCode();
                if (this.InvalidCharacters != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidCharacters.GetHashCode();
                }
                if (this.ItemUsageEvent != null)
                {
                    hashCode = (hashCode * 59) + this.ItemUsageEvent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LockDefaultKey.GetHashCode();
                if (this.PasswordPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordPolicy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProtectItemsByDefault.GetHashCode();
                if (this.SharingPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.SharingPolicy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
