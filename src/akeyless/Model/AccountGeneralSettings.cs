/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// AccountGeneralSettings describes general settings for an account
    /// </summary>
    [DataContract(Name = "AccountGeneralSettings")]
    public partial class AccountGeneralSettings : IEquatable<AccountGeneralSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountGeneralSettings" /> class.
        /// </summary>
        /// <param name="dataProtectionSection">dataProtectionSection.</param>
        /// <param name="enableRequestForAccess">enableRequestForAccess.</param>
        /// <param name="passwordPolicy">passwordPolicy.</param>
        public AccountGeneralSettings(DataProtectionSection dataProtectionSection = default(DataProtectionSection), bool enableRequestForAccess = default(bool), PasswordPolicyInfo passwordPolicy = default(PasswordPolicyInfo))
        {
            this.DataProtectionSection = dataProtectionSection;
            this.EnableRequestForAccess = enableRequestForAccess;
            this.PasswordPolicy = passwordPolicy;
        }

        /// <summary>
        /// Gets or Sets DataProtectionSection
        /// </summary>
        [DataMember(Name = "data_protection_section", EmitDefaultValue = false)]
        public DataProtectionSection DataProtectionSection { get; set; }

        /// <summary>
        /// Gets or Sets EnableRequestForAccess
        /// </summary>
        [DataMember(Name = "enable_request_for_access", EmitDefaultValue = true)]
        public bool EnableRequestForAccess { get; set; }

        /// <summary>
        /// Gets or Sets PasswordPolicy
        /// </summary>
        [DataMember(Name = "password_policy", EmitDefaultValue = false)]
        public PasswordPolicyInfo PasswordPolicy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountGeneralSettings {\n");
            sb.Append("  DataProtectionSection: ").Append(DataProtectionSection).Append("\n");
            sb.Append("  EnableRequestForAccess: ").Append(EnableRequestForAccess).Append("\n");
            sb.Append("  PasswordPolicy: ").Append(PasswordPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountGeneralSettings);
        }

        /// <summary>
        /// Returns true if AccountGeneralSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountGeneralSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountGeneralSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataProtectionSection == input.DataProtectionSection ||
                    (this.DataProtectionSection != null &&
                    this.DataProtectionSection.Equals(input.DataProtectionSection))
                ) && 
                (
                    this.EnableRequestForAccess == input.EnableRequestForAccess ||
                    this.EnableRequestForAccess.Equals(input.EnableRequestForAccess)
                ) && 
                (
                    this.PasswordPolicy == input.PasswordPolicy ||
                    (this.PasswordPolicy != null &&
                    this.PasswordPolicy.Equals(input.PasswordPolicy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataProtectionSection != null)
                    hashCode = hashCode * 59 + this.DataProtectionSection.GetHashCode();
                hashCode = hashCode * 59 + this.EnableRequestForAccess.GetHashCode();
                if (this.PasswordPolicy != null)
                    hashCode = hashCode * 59 + this.PasswordPolicy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
