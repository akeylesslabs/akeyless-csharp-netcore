/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UpdateRotatedSecret
    /// </summary>
    [DataContract]
    public partial class UpdateRotatedSecret :  IEquatable<UpdateRotatedSecret>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRotatedSecret" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateRotatedSecret() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRotatedSecret" /> class.
        /// </summary>
        /// <param name="addTag">List of the new tags that will be attached to this item.</param>
        /// <param name="autoRotate">Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation.</param>
        /// <param name="gatewayUrl">Gateway url (default to &quot;http://localhost:8000&quot;).</param>
        /// <param name="key">The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="name">Secret name (required).</param>
        /// <param name="newMetadata">New item metadata (default to &quot;default_metadata&quot;).</param>
        /// <param name="newName">New item name.</param>
        /// <param name="newVersion">Whether to create a new version of not (default to false).</param>
        /// <param name="rmTag">List of the existent tags that will be removed from this item.</param>
        /// <param name="rotationInterval">The number of days to wait between every automatic key rotation (7-365).</param>
        /// <param name="rotationHour">rotationHour.</param>
        /// <param name="rotatorCredsType">rotatorCredsType.</param>
        /// <param name="sshPassword">sshPassword.</param>
        /// <param name="sshUsername">sshUsername.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public UpdateRotatedSecret(List<string> addTag = default(List<string>), string autoRotate = default(string), string gatewayUrl = "http://localhost:8000", string key = default(string), string name = default(string), string newMetadata = "default_metadata", string newName = default(string), bool newVersion = false, List<string> rmTag = default(List<string>), string rotationInterval = default(string), int rotationHour = default(int), string rotatorCredsType = default(string), string sshPassword = default(string), string sshUsername = default(string), string token = default(string), string uidToken = default(string))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for UpdateRotatedSecret and cannot be null");
            this.AddTag = addTag;
            this.AutoRotate = autoRotate;
            // use default value if no "gatewayUrl" provided
            this.GatewayUrl = gatewayUrl ?? "http://localhost:8000";
            this.Key = key;
            // use default value if no "newMetadata" provided
            this.NewMetadata = newMetadata ?? "default_metadata";
            this.NewName = newName;
            this.NewVersion = newVersion;
            this.RmTag = rmTag;
            this.RotationInterval = rotationInterval;
            this.RotationHour = rotationHour;
            this.RotatorCredsType = rotatorCredsType;
            this.SshPassword = sshPassword;
            this.SshUsername = sshUsername;
            this.Token = token;
            this.UidToken = uidToken;
        }
        
        /// <summary>
        /// List of the new tags that will be attached to this item
        /// </summary>
        /// <value>List of the new tags that will be attached to this item</value>
        [DataMember(Name="add-tag", EmitDefaultValue=false)]
        public List<string> AddTag { get; set; }

        /// <summary>
        /// Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation
        /// </summary>
        /// <value>Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation</value>
        [DataMember(Name="auto-rotate", EmitDefaultValue=false)]
        public string AutoRotate { get; set; }

        /// <summary>
        /// Gateway url
        /// </summary>
        /// <value>Gateway url</value>
        [DataMember(Name="gateway-url", EmitDefaultValue=false)]
        public string GatewayUrl { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Secret name
        /// </summary>
        /// <value>Secret name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// New item metadata
        /// </summary>
        /// <value>New item metadata</value>
        [DataMember(Name="new-metadata", EmitDefaultValue=false)]
        public string NewMetadata { get; set; }

        /// <summary>
        /// New item name
        /// </summary>
        /// <value>New item name</value>
        [DataMember(Name="new-name", EmitDefaultValue=false)]
        public string NewName { get; set; }

        /// <summary>
        /// Whether to create a new version of not
        /// </summary>
        /// <value>Whether to create a new version of not</value>
        [DataMember(Name="new-version", EmitDefaultValue=false)]
        public bool NewVersion { get; set; }

        /// <summary>
        /// List of the existent tags that will be removed from this item
        /// </summary>
        /// <value>List of the existent tags that will be removed from this item</value>
        [DataMember(Name="rm-tag", EmitDefaultValue=false)]
        public List<string> RmTag { get; set; }

        /// <summary>
        /// The number of days to wait between every automatic key rotation (7-365)
        /// </summary>
        /// <value>The number of days to wait between every automatic key rotation (7-365)</value>
        [DataMember(Name="rotation-interval", EmitDefaultValue=false)]
        public string RotationInterval { get; set; }

        /// <summary>
        /// Gets or Sets RotationHour
        /// </summary>
        [DataMember(Name="rotation_hour", EmitDefaultValue=false)]
        public int RotationHour { get; set; }

        /// <summary>
        /// Gets or Sets RotatorCredsType
        /// </summary>
        [DataMember(Name="rotator_creds_type", EmitDefaultValue=false)]
        public string RotatorCredsType { get; set; }

        /// <summary>
        /// Gets or Sets SshPassword
        /// </summary>
        [DataMember(Name="ssh-password", EmitDefaultValue=false)]
        public string SshPassword { get; set; }

        /// <summary>
        /// Gets or Sets SshUsername
        /// </summary>
        [DataMember(Name="ssh-username", EmitDefaultValue=false)]
        public string SshUsername { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateRotatedSecret {\n");
            sb.Append("  AddTag: ").Append(AddTag).Append("\n");
            sb.Append("  AutoRotate: ").Append(AutoRotate).Append("\n");
            sb.Append("  GatewayUrl: ").Append(GatewayUrl).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewMetadata: ").Append(NewMetadata).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  NewVersion: ").Append(NewVersion).Append("\n");
            sb.Append("  RmTag: ").Append(RmTag).Append("\n");
            sb.Append("  RotationInterval: ").Append(RotationInterval).Append("\n");
            sb.Append("  RotationHour: ").Append(RotationHour).Append("\n");
            sb.Append("  RotatorCredsType: ").Append(RotatorCredsType).Append("\n");
            sb.Append("  SshPassword: ").Append(SshPassword).Append("\n");
            sb.Append("  SshUsername: ").Append(SshUsername).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateRotatedSecret);
        }

        /// <summary>
        /// Returns true if UpdateRotatedSecret instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateRotatedSecret to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateRotatedSecret input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddTag == input.AddTag ||
                    this.AddTag != null &&
                    input.AddTag != null &&
                    this.AddTag.SequenceEqual(input.AddTag)
                ) && 
                (
                    this.AutoRotate == input.AutoRotate ||
                    (this.AutoRotate != null &&
                    this.AutoRotate.Equals(input.AutoRotate))
                ) && 
                (
                    this.GatewayUrl == input.GatewayUrl ||
                    (this.GatewayUrl != null &&
                    this.GatewayUrl.Equals(input.GatewayUrl))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewMetadata == input.NewMetadata ||
                    (this.NewMetadata != null &&
                    this.NewMetadata.Equals(input.NewMetadata))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                ) && 
                (
                    this.NewVersion == input.NewVersion ||
                    this.NewVersion.Equals(input.NewVersion)
                ) && 
                (
                    this.RmTag == input.RmTag ||
                    this.RmTag != null &&
                    input.RmTag != null &&
                    this.RmTag.SequenceEqual(input.RmTag)
                ) && 
                (
                    this.RotationInterval == input.RotationInterval ||
                    (this.RotationInterval != null &&
                    this.RotationInterval.Equals(input.RotationInterval))
                ) && 
                (
                    this.RotationHour == input.RotationHour ||
                    this.RotationHour.Equals(input.RotationHour)
                ) && 
                (
                    this.RotatorCredsType == input.RotatorCredsType ||
                    (this.RotatorCredsType != null &&
                    this.RotatorCredsType.Equals(input.RotatorCredsType))
                ) && 
                (
                    this.SshPassword == input.SshPassword ||
                    (this.SshPassword != null &&
                    this.SshPassword.Equals(input.SshPassword))
                ) && 
                (
                    this.SshUsername == input.SshUsername ||
                    (this.SshUsername != null &&
                    this.SshUsername.Equals(input.SshUsername))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddTag != null)
                    hashCode = hashCode * 59 + this.AddTag.GetHashCode();
                if (this.AutoRotate != null)
                    hashCode = hashCode * 59 + this.AutoRotate.GetHashCode();
                if (this.GatewayUrl != null)
                    hashCode = hashCode * 59 + this.GatewayUrl.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NewMetadata != null)
                    hashCode = hashCode * 59 + this.NewMetadata.GetHashCode();
                if (this.NewName != null)
                    hashCode = hashCode * 59 + this.NewName.GetHashCode();
                hashCode = hashCode * 59 + this.NewVersion.GetHashCode();
                if (this.RmTag != null)
                    hashCode = hashCode * 59 + this.RmTag.GetHashCode();
                if (this.RotationInterval != null)
                    hashCode = hashCode * 59 + this.RotationInterval.GetHashCode();
                hashCode = hashCode * 59 + this.RotationHour.GetHashCode();
                if (this.RotatorCredsType != null)
                    hashCode = hashCode * 59 + this.RotatorCredsType.GetHashCode();
                if (this.SshPassword != null)
                    hashCode = hashCode * 59 + this.SshPassword.GetHashCode();
                if (this.SshUsername != null)
                    hashCode = hashCode * 59 + this.SshUsername.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
