/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ItemVersion
    /// </summary>
    [DataContract(Name = "ItemVersion")]
    public partial class ItemVersion : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemVersion" /> class.
        /// </summary>
        /// <param name="accessDate">accessDate.</param>
        /// <param name="accessDateDisplay">accessDateDisplay.</param>
        /// <param name="certificateVersionInfo">certificateVersionInfo.</param>
        /// <param name="creationDate">creationDate.</param>
        /// <param name="customerFragmentId">customerFragmentId.</param>
        /// <param name="deletionDate">deletionDate.</param>
        /// <param name="itemVersionState">ItemState defines the different states an Item can be in.</param>
        /// <param name="modificationDate">modificationDate.</param>
        /// <param name="protectionKeyName">protectionKeyName.</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="withCustomerFragment">withCustomerFragment.</param>
        public ItemVersion(DateTime accessDate = default(DateTime), string accessDateDisplay = default(string), CertificateVersionInfo certificateVersionInfo = default(CertificateVersionInfo), DateTime creationDate = default(DateTime), string customerFragmentId = default(string), DateTime deletionDate = default(DateTime), string itemVersionState = default(string), DateTime modificationDate = default(DateTime), string protectionKeyName = default(string), int varVersion = default(int), bool withCustomerFragment = default(bool))
        {
            this.AccessDate = accessDate;
            this.AccessDateDisplay = accessDateDisplay;
            this.CertificateVersionInfo = certificateVersionInfo;
            this.CreationDate = creationDate;
            this.CustomerFragmentId = customerFragmentId;
            this.DeletionDate = deletionDate;
            this.ItemVersionState = itemVersionState;
            this.ModificationDate = modificationDate;
            this.ProtectionKeyName = protectionKeyName;
            this.VarVersion = varVersion;
            this.WithCustomerFragment = withCustomerFragment;
        }

        /// <summary>
        /// Gets or Sets AccessDate
        /// </summary>
        [DataMember(Name = "access_date", EmitDefaultValue = false)]
        public DateTime AccessDate { get; set; }

        /// <summary>
        /// Gets or Sets AccessDateDisplay
        /// </summary>
        [DataMember(Name = "access_date_display", EmitDefaultValue = false)]
        public string AccessDateDisplay { get; set; }

        /// <summary>
        /// Gets or Sets CertificateVersionInfo
        /// </summary>
        [DataMember(Name = "certificate_version_info", EmitDefaultValue = false)]
        public CertificateVersionInfo CertificateVersionInfo { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name = "creation_date", EmitDefaultValue = false)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomerFragmentId
        /// </summary>
        [DataMember(Name = "customer_fragment_id", EmitDefaultValue = false)]
        public string CustomerFragmentId { get; set; }

        /// <summary>
        /// Gets or Sets DeletionDate
        /// </summary>
        [DataMember(Name = "deletion_date", EmitDefaultValue = false)]
        public DateTime DeletionDate { get; set; }

        /// <summary>
        /// ItemState defines the different states an Item can be in
        /// </summary>
        /// <value>ItemState defines the different states an Item can be in</value>
        [DataMember(Name = "item_version_state", EmitDefaultValue = false)]
        public string ItemVersionState { get; set; }

        /// <summary>
        /// Gets or Sets ModificationDate
        /// </summary>
        [DataMember(Name = "modification_date", EmitDefaultValue = false)]
        public DateTime ModificationDate { get; set; }

        /// <summary>
        /// Gets or Sets ProtectionKeyName
        /// </summary>
        [DataMember(Name = "protection_key_name", EmitDefaultValue = false)]
        public string ProtectionKeyName { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets WithCustomerFragment
        /// </summary>
        [DataMember(Name = "with_customer_fragment", EmitDefaultValue = true)]
        public bool WithCustomerFragment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemVersion {\n");
            sb.Append("  AccessDate: ").Append(AccessDate).Append("\n");
            sb.Append("  AccessDateDisplay: ").Append(AccessDateDisplay).Append("\n");
            sb.Append("  CertificateVersionInfo: ").Append(CertificateVersionInfo).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  CustomerFragmentId: ").Append(CustomerFragmentId).Append("\n");
            sb.Append("  DeletionDate: ").Append(DeletionDate).Append("\n");
            sb.Append("  ItemVersionState: ").Append(ItemVersionState).Append("\n");
            sb.Append("  ModificationDate: ").Append(ModificationDate).Append("\n");
            sb.Append("  ProtectionKeyName: ").Append(ProtectionKeyName).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  WithCustomerFragment: ").Append(WithCustomerFragment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
