/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// verifyEcDsa is a command that verifies an ECDSA signature using a sha hash algorithm matching the key size
    /// </summary>
    [DataContract(Name = "verifyEcDsa")]
    public partial class VerifyEcDsa : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyEcDsa" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VerifyEcDsa() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyEcDsa" /> class.
        /// </summary>
        /// <param name="displayId">The display id of the EC key to use for the verification process.</param>
        /// <param name="itemId">The item id of the EC key to use for the verification process.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="keyName">The name of the EC key to use for the verification process.</param>
        /// <param name="message">The message to be verified in a base64 format (required).</param>
        /// <param name="prehashed">Markes that the message is already hashed.</param>
        /// <param name="signature">The message&#39;s signature (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="varVersion">The version of the key to use for verification.</param>
        public VerifyEcDsa(string displayId = default(string), long itemId = default(long), bool json = false, string keyName = default(string), string message = default(string), bool prehashed = default(bool), string signature = default(string), string token = default(string), string uidToken = default(string), int varVersion = default(int))
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for VerifyEcDsa and cannot be null");
            }
            this.Message = message;
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for VerifyEcDsa and cannot be null");
            }
            this.Signature = signature;
            this.DisplayId = displayId;
            this.ItemId = itemId;
            this.Json = json;
            this.KeyName = keyName;
            this.Prehashed = prehashed;
            this.Token = token;
            this.UidToken = uidToken;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// The display id of the EC key to use for the verification process
        /// </summary>
        /// <value>The display id of the EC key to use for the verification process</value>
        [DataMember(Name = "display-id", EmitDefaultValue = false)]
        public string DisplayId { get; set; }

        /// <summary>
        /// The item id of the EC key to use for the verification process
        /// </summary>
        /// <value>The item id of the EC key to use for the verification process</value>
        [DataMember(Name = "item-id", EmitDefaultValue = false)]
        public long ItemId { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The name of the EC key to use for the verification process
        /// </summary>
        /// <value>The name of the EC key to use for the verification process</value>
        [DataMember(Name = "key-name", EmitDefaultValue = false)]
        public string KeyName { get; set; }

        /// <summary>
        /// The message to be verified in a base64 format
        /// </summary>
        /// <value>The message to be verified in a base64 format</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Markes that the message is already hashed
        /// </summary>
        /// <value>Markes that the message is already hashed</value>
        [DataMember(Name = "prehashed", EmitDefaultValue = true)]
        public bool Prehashed { get; set; }

        /// <summary>
        /// The message&#39;s signature
        /// </summary>
        /// <value>The message&#39;s signature</value>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public string Signature { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// The version of the key to use for verification
        /// </summary>
        /// <value>The version of the key to use for verification</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyEcDsa {\n");
            sb.Append("  DisplayId: ").Append(DisplayId).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeyName: ").Append(KeyName).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Prehashed: ").Append(Prehashed).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
