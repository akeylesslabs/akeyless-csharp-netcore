/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// dynamicSecretUpdateK8s is a command that updates k8s dynamic secret
    /// </summary>
    [DataContract(Name = "dynamicSecretUpdateK8s")]
    public partial class DynamicSecretUpdateK8s : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicSecretUpdateK8s" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DynamicSecretUpdateK8s() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicSecretUpdateK8s" /> class.
        /// </summary>
        /// <param name="customUsernameTemplate">Customize how temporary usernames are generated using go template.</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="k8sAllowedNamespaces">Comma-separated list of allowed K8S namespaces for the generated ServiceAccount (relevant only for k8s-service-account-type&#x3D;dynamic).</param>
        /// <param name="k8sClusterCaCert">K8S cluster CA certificate.</param>
        /// <param name="k8sClusterEndpoint">K8S cluster URL endpoint.</param>
        /// <param name="k8sClusterName">K8S cluster name.</param>
        /// <param name="k8sClusterToken">K8S cluster Bearer token.</param>
        /// <param name="k8sNamespace">K8S Namespace where the ServiceAccount exists..</param>
        /// <param name="k8sPredefinedRoleName">The pre-existing Role or ClusterRole name to bind the generated ServiceAccount to (relevant only for k8s-service-account-type&#x3D;dynamic).</param>
        /// <param name="k8sPredefinedRoleType">Specifies the type of the pre-existing K8S role [Role, ClusterRole] (relevant only for k8s-service-account-type&#x3D;dynamic).</param>
        /// <param name="k8sRolebindingYamlData">Content of the yaml in a Base64 format..</param>
        /// <param name="k8sRolebindingYamlDef">Path to yaml file that contains definitions of K8S role and role binding (relevant only for k8s-service-account-type&#x3D;dynamic).</param>
        /// <param name="k8sServiceAccount">K8S ServiceAccount to extract token from..</param>
        /// <param name="k8sServiceAccountType">K8S ServiceAccount type [fixed, dynamic]..</param>
        /// <param name="name">Dynamic secret name (required).</param>
        /// <param name="newName">Dynamic secret name.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="secureAccessAllowPortForwading">Enable Port forwarding while using CLI access.</param>
        /// <param name="secureAccessBastionIssuer">Deprecated. use secure-access-certificate-issuer.</param>
        /// <param name="secureAccessCertificateIssuer">Path to the SSH Certificate Issuer for your Akeyless Secure Access.</param>
        /// <param name="secureAccessClusterEndpoint">The K8s cluster endpoint URL.</param>
        /// <param name="secureAccessDashboardUrl">The K8s dashboard url.</param>
        /// <param name="secureAccessDelay">The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds.</param>
        /// <param name="secureAccessEnable">Enable/Disable secure remote access [true/false].</param>
        /// <param name="secureAccessWeb">Enable Web Secure Remote Access (default to false).</param>
        /// <param name="secureAccessWebBrowsing">Secure browser via Akeyless&#39;s Secure Remote Access (SRA) (default to false).</param>
        /// <param name="secureAccessWebProxy">Web-Proxy via Akeyless&#39;s Secure Remote Access (SRA) (default to false).</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="useGwServiceAccount">Use the GW&#39;s service account.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public DynamicSecretUpdateK8s(string customUsernameTemplate = default(string), string deleteProtection = default(string), string description = default(string), bool json = false, string k8sAllowedNamespaces = default(string), string k8sClusterCaCert = default(string), string k8sClusterEndpoint = default(string), string k8sClusterName = default(string), string k8sClusterToken = default(string), string k8sNamespace = default(string), string k8sPredefinedRoleName = default(string), string k8sPredefinedRoleType = default(string), string k8sRolebindingYamlData = default(string), string k8sRolebindingYamlDef = default(string), string k8sServiceAccount = default(string), string k8sServiceAccountType = default(string), string name = default(string), string newName = default(string), string producerEncryptionKeyName = default(string), bool secureAccessAllowPortForwading = default(bool), string secureAccessBastionIssuer = default(string), string secureAccessCertificateIssuer = default(string), string secureAccessClusterEndpoint = default(string), string secureAccessDashboardUrl = default(string), long secureAccessDelay = default(long), string secureAccessEnable = default(string), bool secureAccessWeb = false, bool secureAccessWebBrowsing = false, bool secureAccessWebProxy = false, List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), bool useGwServiceAccount = default(bool), string userTtl = @"60m")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DynamicSecretUpdateK8s and cannot be null");
            }
            this.Name = name;
            this.CustomUsernameTemplate = customUsernameTemplate;
            this.DeleteProtection = deleteProtection;
            this.Description = description;
            this.Json = json;
            this.K8sAllowedNamespaces = k8sAllowedNamespaces;
            this.K8sClusterCaCert = k8sClusterCaCert;
            this.K8sClusterEndpoint = k8sClusterEndpoint;
            this.K8sClusterName = k8sClusterName;
            this.K8sClusterToken = k8sClusterToken;
            this.K8sNamespace = k8sNamespace;
            this.K8sPredefinedRoleName = k8sPredefinedRoleName;
            this.K8sPredefinedRoleType = k8sPredefinedRoleType;
            this.K8sRolebindingYamlData = k8sRolebindingYamlData;
            this.K8sRolebindingYamlDef = k8sRolebindingYamlDef;
            this.K8sServiceAccount = k8sServiceAccount;
            this.K8sServiceAccountType = k8sServiceAccountType;
            this.NewName = newName;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.SecureAccessAllowPortForwading = secureAccessAllowPortForwading;
            this.SecureAccessBastionIssuer = secureAccessBastionIssuer;
            this.SecureAccessCertificateIssuer = secureAccessCertificateIssuer;
            this.SecureAccessClusterEndpoint = secureAccessClusterEndpoint;
            this.SecureAccessDashboardUrl = secureAccessDashboardUrl;
            this.SecureAccessDelay = secureAccessDelay;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessWeb = secureAccessWeb;
            this.SecureAccessWebBrowsing = secureAccessWebBrowsing;
            this.SecureAccessWebProxy = secureAccessWebProxy;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            this.UseGwServiceAccount = useGwServiceAccount;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? @"60m";
        }

        /// <summary>
        /// Customize how temporary usernames are generated using go template
        /// </summary>
        /// <value>Customize how temporary usernames are generated using go template</value>
        [DataMember(Name = "custom-username-template", EmitDefaultValue = false)]
        public string CustomUsernameTemplate { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Comma-separated list of allowed K8S namespaces for the generated ServiceAccount (relevant only for k8s-service-account-type&#x3D;dynamic)
        /// </summary>
        /// <value>Comma-separated list of allowed K8S namespaces for the generated ServiceAccount (relevant only for k8s-service-account-type&#x3D;dynamic)</value>
        [DataMember(Name = "k8s-allowed-namespaces", EmitDefaultValue = false)]
        public string K8sAllowedNamespaces { get; set; }

        /// <summary>
        /// K8S cluster CA certificate
        /// </summary>
        /// <value>K8S cluster CA certificate</value>
        [DataMember(Name = "k8s-cluster-ca-cert", EmitDefaultValue = false)]
        public string K8sClusterCaCert { get; set; }

        /// <summary>
        /// K8S cluster URL endpoint
        /// </summary>
        /// <value>K8S cluster URL endpoint</value>
        [DataMember(Name = "k8s-cluster-endpoint", EmitDefaultValue = false)]
        public string K8sClusterEndpoint { get; set; }

        /// <summary>
        /// K8S cluster name
        /// </summary>
        /// <value>K8S cluster name</value>
        [DataMember(Name = "k8s-cluster-name", EmitDefaultValue = false)]
        public string K8sClusterName { get; set; }

        /// <summary>
        /// K8S cluster Bearer token
        /// </summary>
        /// <value>K8S cluster Bearer token</value>
        [DataMember(Name = "k8s-cluster-token", EmitDefaultValue = false)]
        public string K8sClusterToken { get; set; }

        /// <summary>
        /// K8S Namespace where the ServiceAccount exists.
        /// </summary>
        /// <value>K8S Namespace where the ServiceAccount exists.</value>
        [DataMember(Name = "k8s-namespace", EmitDefaultValue = false)]
        public string K8sNamespace { get; set; }

        /// <summary>
        /// The pre-existing Role or ClusterRole name to bind the generated ServiceAccount to (relevant only for k8s-service-account-type&#x3D;dynamic)
        /// </summary>
        /// <value>The pre-existing Role or ClusterRole name to bind the generated ServiceAccount to (relevant only for k8s-service-account-type&#x3D;dynamic)</value>
        [DataMember(Name = "k8s-predefined-role-name", EmitDefaultValue = false)]
        public string K8sPredefinedRoleName { get; set; }

        /// <summary>
        /// Specifies the type of the pre-existing K8S role [Role, ClusterRole] (relevant only for k8s-service-account-type&#x3D;dynamic)
        /// </summary>
        /// <value>Specifies the type of the pre-existing K8S role [Role, ClusterRole] (relevant only for k8s-service-account-type&#x3D;dynamic)</value>
        [DataMember(Name = "k8s-predefined-role-type", EmitDefaultValue = false)]
        public string K8sPredefinedRoleType { get; set; }

        /// <summary>
        /// Content of the yaml in a Base64 format.
        /// </summary>
        /// <value>Content of the yaml in a Base64 format.</value>
        [DataMember(Name = "k8s-rolebinding-yaml-data", EmitDefaultValue = false)]
        public string K8sRolebindingYamlData { get; set; }

        /// <summary>
        /// Path to yaml file that contains definitions of K8S role and role binding (relevant only for k8s-service-account-type&#x3D;dynamic)
        /// </summary>
        /// <value>Path to yaml file that contains definitions of K8S role and role binding (relevant only for k8s-service-account-type&#x3D;dynamic)</value>
        [DataMember(Name = "k8s-rolebinding-yaml-def", EmitDefaultValue = false)]
        public string K8sRolebindingYamlDef { get; set; }

        /// <summary>
        /// K8S ServiceAccount to extract token from.
        /// </summary>
        /// <value>K8S ServiceAccount to extract token from.</value>
        [DataMember(Name = "k8s-service-account", EmitDefaultValue = false)]
        public string K8sServiceAccount { get; set; }

        /// <summary>
        /// K8S ServiceAccount type [fixed, dynamic].
        /// </summary>
        /// <value>K8S ServiceAccount type [fixed, dynamic].</value>
        [DataMember(Name = "k8s-service-account-type", EmitDefaultValue = false)]
        public string K8sServiceAccountType { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Enable Port forwarding while using CLI access
        /// </summary>
        /// <value>Enable Port forwarding while using CLI access</value>
        [DataMember(Name = "secure-access-allow-port-forwading", EmitDefaultValue = true)]
        public bool SecureAccessAllowPortForwading { get; set; }

        /// <summary>
        /// Deprecated. use secure-access-certificate-issuer
        /// </summary>
        /// <value>Deprecated. use secure-access-certificate-issuer</value>
        [DataMember(Name = "secure-access-bastion-issuer", EmitDefaultValue = false)]
        public string SecureAccessBastionIssuer { get; set; }

        /// <summary>
        /// Path to the SSH Certificate Issuer for your Akeyless Secure Access
        /// </summary>
        /// <value>Path to the SSH Certificate Issuer for your Akeyless Secure Access</value>
        [DataMember(Name = "secure-access-certificate-issuer", EmitDefaultValue = false)]
        public string SecureAccessCertificateIssuer { get; set; }

        /// <summary>
        /// The K8s cluster endpoint URL
        /// </summary>
        /// <value>The K8s cluster endpoint URL</value>
        [DataMember(Name = "secure-access-cluster-endpoint", EmitDefaultValue = false)]
        public string SecureAccessClusterEndpoint { get; set; }

        /// <summary>
        /// The K8s dashboard url
        /// </summary>
        /// <value>The K8s dashboard url</value>
        [DataMember(Name = "secure-access-dashboard-url", EmitDefaultValue = false)]
        public string SecureAccessDashboardUrl { get; set; }

        /// <summary>
        /// The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds
        /// </summary>
        /// <value>The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds</value>
        [DataMember(Name = "secure-access-delay", EmitDefaultValue = false)]
        public long SecureAccessDelay { get; set; }

        /// <summary>
        /// Enable/Disable secure remote access [true/false]
        /// </summary>
        /// <value>Enable/Disable secure remote access [true/false]</value>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Enable Web Secure Remote Access
        /// </summary>
        /// <value>Enable Web Secure Remote Access</value>
        [DataMember(Name = "secure-access-web", EmitDefaultValue = true)]
        public bool SecureAccessWeb { get; set; }

        /// <summary>
        /// Secure browser via Akeyless&#39;s Secure Remote Access (SRA)
        /// </summary>
        /// <value>Secure browser via Akeyless&#39;s Secure Remote Access (SRA)</value>
        [DataMember(Name = "secure-access-web-browsing", EmitDefaultValue = true)]
        public bool SecureAccessWebBrowsing { get; set; }

        /// <summary>
        /// Web-Proxy via Akeyless&#39;s Secure Remote Access (SRA)
        /// </summary>
        /// <value>Web-Proxy via Akeyless&#39;s Secure Remote Access (SRA)</value>
        [DataMember(Name = "secure-access-web-proxy", EmitDefaultValue = true)]
        public bool SecureAccessWebProxy { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Use the GW&#39;s service account
        /// </summary>
        /// <value>Use the GW&#39;s service account</value>
        [DataMember(Name = "use-gw-service-account", EmitDefaultValue = true)]
        public bool UseGwServiceAccount { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DynamicSecretUpdateK8s {\n");
            sb.Append("  CustomUsernameTemplate: ").Append(CustomUsernameTemplate).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  K8sAllowedNamespaces: ").Append(K8sAllowedNamespaces).Append("\n");
            sb.Append("  K8sClusterCaCert: ").Append(K8sClusterCaCert).Append("\n");
            sb.Append("  K8sClusterEndpoint: ").Append(K8sClusterEndpoint).Append("\n");
            sb.Append("  K8sClusterName: ").Append(K8sClusterName).Append("\n");
            sb.Append("  K8sClusterToken: ").Append(K8sClusterToken).Append("\n");
            sb.Append("  K8sNamespace: ").Append(K8sNamespace).Append("\n");
            sb.Append("  K8sPredefinedRoleName: ").Append(K8sPredefinedRoleName).Append("\n");
            sb.Append("  K8sPredefinedRoleType: ").Append(K8sPredefinedRoleType).Append("\n");
            sb.Append("  K8sRolebindingYamlData: ").Append(K8sRolebindingYamlData).Append("\n");
            sb.Append("  K8sRolebindingYamlDef: ").Append(K8sRolebindingYamlDef).Append("\n");
            sb.Append("  K8sServiceAccount: ").Append(K8sServiceAccount).Append("\n");
            sb.Append("  K8sServiceAccountType: ").Append(K8sServiceAccountType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  SecureAccessAllowPortForwading: ").Append(SecureAccessAllowPortForwading).Append("\n");
            sb.Append("  SecureAccessBastionIssuer: ").Append(SecureAccessBastionIssuer).Append("\n");
            sb.Append("  SecureAccessCertificateIssuer: ").Append(SecureAccessCertificateIssuer).Append("\n");
            sb.Append("  SecureAccessClusterEndpoint: ").Append(SecureAccessClusterEndpoint).Append("\n");
            sb.Append("  SecureAccessDashboardUrl: ").Append(SecureAccessDashboardUrl).Append("\n");
            sb.Append("  SecureAccessDelay: ").Append(SecureAccessDelay).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessWeb: ").Append(SecureAccessWeb).Append("\n");
            sb.Append("  SecureAccessWebBrowsing: ").Append(SecureAccessWebBrowsing).Append("\n");
            sb.Append("  SecureAccessWebProxy: ").Append(SecureAccessWebProxy).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UseGwServiceAccount: ").Append(UseGwServiceAccount).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
