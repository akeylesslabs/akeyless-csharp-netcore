/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// VaultlessTokenizerInfo
    /// </summary>
    [DataContract(Name = "VaultlessTokenizerInfo")]
    public partial class VaultlessTokenizerInfo : IEquatable<VaultlessTokenizerInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VaultlessTokenizerInfo" /> class.
        /// </summary>
        /// <param name="emailTokenizerInfo">emailTokenizerInfo.</param>
        /// <param name="keyName">keyName.</param>
        /// <param name="regexpTokenizerInfo">regexpTokenizerInfo.</param>
        /// <param name="templateType">templateType.</param>
        /// <param name="tweak">Tweak used in the case of internal tweak type.</param>
        /// <param name="tweakType">tweakType.</param>
        public VaultlessTokenizerInfo(EmailTokenizerInfo emailTokenizerInfo = default(EmailTokenizerInfo), string keyName = default(string), RegexpTokenizerInfo regexpTokenizerInfo = default(RegexpTokenizerInfo), string templateType = default(string), string tweak = default(string), string tweakType = default(string))
        {
            this.EmailTokenizerInfo = emailTokenizerInfo;
            this.KeyName = keyName;
            this.RegexpTokenizerInfo = regexpTokenizerInfo;
            this.TemplateType = templateType;
            this.Tweak = tweak;
            this.TweakType = tweakType;
        }

        /// <summary>
        /// Gets or Sets EmailTokenizerInfo
        /// </summary>
        [DataMember(Name = "email_tokenizer_info", EmitDefaultValue = false)]
        public EmailTokenizerInfo EmailTokenizerInfo { get; set; }

        /// <summary>
        /// Gets or Sets KeyName
        /// </summary>
        [DataMember(Name = "key_name", EmitDefaultValue = false)]
        public string KeyName { get; set; }

        /// <summary>
        /// Gets or Sets RegexpTokenizerInfo
        /// </summary>
        [DataMember(Name = "regexp_tokenizer_info", EmitDefaultValue = false)]
        public RegexpTokenizerInfo RegexpTokenizerInfo { get; set; }

        /// <summary>
        /// Gets or Sets TemplateType
        /// </summary>
        [DataMember(Name = "template_type", EmitDefaultValue = false)]
        public string TemplateType { get; set; }

        /// <summary>
        /// Tweak used in the case of internal tweak type
        /// </summary>
        /// <value>Tweak used in the case of internal tweak type</value>
        [DataMember(Name = "tweak", EmitDefaultValue = false)]
        public string Tweak { get; set; }

        /// <summary>
        /// Gets or Sets TweakType
        /// </summary>
        [DataMember(Name = "tweak_type", EmitDefaultValue = false)]
        public string TweakType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VaultlessTokenizerInfo {\n");
            sb.Append("  EmailTokenizerInfo: ").Append(EmailTokenizerInfo).Append("\n");
            sb.Append("  KeyName: ").Append(KeyName).Append("\n");
            sb.Append("  RegexpTokenizerInfo: ").Append(RegexpTokenizerInfo).Append("\n");
            sb.Append("  TemplateType: ").Append(TemplateType).Append("\n");
            sb.Append("  Tweak: ").Append(Tweak).Append("\n");
            sb.Append("  TweakType: ").Append(TweakType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VaultlessTokenizerInfo);
        }

        /// <summary>
        /// Returns true if VaultlessTokenizerInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of VaultlessTokenizerInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VaultlessTokenizerInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmailTokenizerInfo == input.EmailTokenizerInfo ||
                    (this.EmailTokenizerInfo != null &&
                    this.EmailTokenizerInfo.Equals(input.EmailTokenizerInfo))
                ) && 
                (
                    this.KeyName == input.KeyName ||
                    (this.KeyName != null &&
                    this.KeyName.Equals(input.KeyName))
                ) && 
                (
                    this.RegexpTokenizerInfo == input.RegexpTokenizerInfo ||
                    (this.RegexpTokenizerInfo != null &&
                    this.RegexpTokenizerInfo.Equals(input.RegexpTokenizerInfo))
                ) && 
                (
                    this.TemplateType == input.TemplateType ||
                    (this.TemplateType != null &&
                    this.TemplateType.Equals(input.TemplateType))
                ) && 
                (
                    this.Tweak == input.Tweak ||
                    (this.Tweak != null &&
                    this.Tweak.Equals(input.Tweak))
                ) && 
                (
                    this.TweakType == input.TweakType ||
                    (this.TweakType != null &&
                    this.TweakType.Equals(input.TweakType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailTokenizerInfo != null)
                    hashCode = hashCode * 59 + this.EmailTokenizerInfo.GetHashCode();
                if (this.KeyName != null)
                    hashCode = hashCode * 59 + this.KeyName.GetHashCode();
                if (this.RegexpTokenizerInfo != null)
                    hashCode = hashCode * 59 + this.RegexpTokenizerInfo.GetHashCode();
                if (this.TemplateType != null)
                    hashCode = hashCode * 59 + this.TemplateType.GetHashCode();
                if (this.Tweak != null)
                    hashCode = hashCode * 59 + this.Tweak.GetHashCode();
                if (this.TweakType != null)
                    hashCode = hashCode * 59 + this.TweakType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
