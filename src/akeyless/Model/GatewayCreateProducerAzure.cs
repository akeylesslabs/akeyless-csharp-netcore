/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateProducerAzure is a command that creates azure producer
    /// </summary>
    [DataContract]
    public partial class GatewayCreateProducerAzure :  IEquatable<GatewayCreateProducerAzure>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerAzure" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerAzure() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerAzure" /> class.
        /// </summary>
        /// <param name="appObjId">Azure App Object Id.</param>
        /// <param name="azureClientId">Azure Client ID (required).</param>
        /// <param name="azureClientSecret">Azure Client Secret (required).</param>
        /// <param name="azureTenantId">Azure Tenant ID (required).</param>
        /// <param name="name">Producer name (required).</param>
        /// <param name="password">Required only when the authentication process requires a username and password.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="secureAccessEnable">secureAccessEnable.</param>
        /// <param name="secureAccessWebBrowsing">secureAccessWebBrowsing.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userGroupObjId">User Group Object Id.</param>
        /// <param name="userPortalAccess">Azure User portal access (default to false).</param>
        /// <param name="userPrincipalName">User Principal Name.</param>
        /// <param name="userProgrammaticAccess">Azure User programmatic access (default to true).</param>
        /// <param name="userRoleTemplateId">User Role Template Id.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        /// <param name="username">Required only when the authentication process requires a username and password.</param>
        public GatewayCreateProducerAzure(string appObjId = default(string), string azureClientId = default(string), string azureClientSecret = default(string), string azureTenantId = default(string), string name = default(string), string password = default(string), string producerEncryptionKeyName = default(string), string secureAccessEnable = default(string), bool secureAccessWebBrowsing = default(bool), string token = default(string), string uidToken = default(string), string userGroupObjId = default(string), bool userPortalAccess = false, string userPrincipalName = default(string), bool userProgrammaticAccess = true, string userRoleTemplateId = default(string), string userTtl = "60m", string username = default(string))
        {
            // to ensure "azureClientId" is required (not null)
            this.AzureClientId = azureClientId ?? throw new ArgumentNullException("azureClientId is a required property for GatewayCreateProducerAzure and cannot be null");
            // to ensure "azureClientSecret" is required (not null)
            this.AzureClientSecret = azureClientSecret ?? throw new ArgumentNullException("azureClientSecret is a required property for GatewayCreateProducerAzure and cannot be null");
            // to ensure "azureTenantId" is required (not null)
            this.AzureTenantId = azureTenantId ?? throw new ArgumentNullException("azureTenantId is a required property for GatewayCreateProducerAzure and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for GatewayCreateProducerAzure and cannot be null");
            this.AppObjId = appObjId;
            this.Password = password;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessWebBrowsing = secureAccessWebBrowsing;
            this.Token = token;
            this.UidToken = uidToken;
            this.UserGroupObjId = userGroupObjId;
            this.UserPortalAccess = userPortalAccess;
            this.UserPrincipalName = userPrincipalName;
            this.UserProgrammaticAccess = userProgrammaticAccess;
            this.UserRoleTemplateId = userRoleTemplateId;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "60m";
            this.Username = username;
        }
        
        /// <summary>
        /// Azure App Object Id
        /// </summary>
        /// <value>Azure App Object Id</value>
        [DataMember(Name="app-obj-id", EmitDefaultValue=false)]
        public string AppObjId { get; set; }

        /// <summary>
        /// Azure Client ID
        /// </summary>
        /// <value>Azure Client ID</value>
        [DataMember(Name="azure-client-id", EmitDefaultValue=false)]
        public string AzureClientId { get; set; }

        /// <summary>
        /// Azure Client Secret
        /// </summary>
        /// <value>Azure Client Secret</value>
        [DataMember(Name="azure-client-secret", EmitDefaultValue=false)]
        public string AzureClientSecret { get; set; }

        /// <summary>
        /// Azure Tenant ID
        /// </summary>
        /// <value>Azure Tenant ID</value>
        [DataMember(Name="azure-tenant-id", EmitDefaultValue=false)]
        public string AzureTenantId { get; set; }

        /// <summary>
        /// Producer name
        /// </summary>
        /// <value>Producer name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name="producer-encryption-key-name", EmitDefaultValue=false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessEnable
        /// </summary>
        [DataMember(Name="secure-access-enable", EmitDefaultValue=false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessWebBrowsing
        /// </summary>
        [DataMember(Name="secure-access-web-browsing", EmitDefaultValue=false)]
        public bool SecureAccessWebBrowsing { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User Group Object Id
        /// </summary>
        /// <value>User Group Object Id</value>
        [DataMember(Name="user-group-obj-id", EmitDefaultValue=false)]
        public string UserGroupObjId { get; set; }

        /// <summary>
        /// Azure User portal access
        /// </summary>
        /// <value>Azure User portal access</value>
        [DataMember(Name="user-portal-access", EmitDefaultValue=false)]
        public bool UserPortalAccess { get; set; }

        /// <summary>
        /// User Principal Name
        /// </summary>
        /// <value>User Principal Name</value>
        [DataMember(Name="user-principal-name", EmitDefaultValue=false)]
        public string UserPrincipalName { get; set; }

        /// <summary>
        /// Azure User programmatic access
        /// </summary>
        /// <value>Azure User programmatic access</value>
        [DataMember(Name="user-programmatic-access", EmitDefaultValue=false)]
        public bool UserProgrammaticAccess { get; set; }

        /// <summary>
        /// User Role Template Id
        /// </summary>
        /// <value>User Role Template Id</value>
        [DataMember(Name="user-role-template-id", EmitDefaultValue=false)]
        public string UserRoleTemplateId { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name="user-ttl", EmitDefaultValue=false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerAzure {\n");
            sb.Append("  AppObjId: ").Append(AppObjId).Append("\n");
            sb.Append("  AzureClientId: ").Append(AzureClientId).Append("\n");
            sb.Append("  AzureClientSecret: ").Append(AzureClientSecret).Append("\n");
            sb.Append("  AzureTenantId: ").Append(AzureTenantId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessWebBrowsing: ").Append(SecureAccessWebBrowsing).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserGroupObjId: ").Append(UserGroupObjId).Append("\n");
            sb.Append("  UserPortalAccess: ").Append(UserPortalAccess).Append("\n");
            sb.Append("  UserPrincipalName: ").Append(UserPrincipalName).Append("\n");
            sb.Append("  UserProgrammaticAccess: ").Append(UserProgrammaticAccess).Append("\n");
            sb.Append("  UserRoleTemplateId: ").Append(UserRoleTemplateId).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayCreateProducerAzure);
        }

        /// <summary>
        /// Returns true if GatewayCreateProducerAzure instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayCreateProducerAzure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayCreateProducerAzure input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppObjId == input.AppObjId ||
                    (this.AppObjId != null &&
                    this.AppObjId.Equals(input.AppObjId))
                ) && 
                (
                    this.AzureClientId == input.AzureClientId ||
                    (this.AzureClientId != null &&
                    this.AzureClientId.Equals(input.AzureClientId))
                ) && 
                (
                    this.AzureClientSecret == input.AzureClientSecret ||
                    (this.AzureClientSecret != null &&
                    this.AzureClientSecret.Equals(input.AzureClientSecret))
                ) && 
                (
                    this.AzureTenantId == input.AzureTenantId ||
                    (this.AzureTenantId != null &&
                    this.AzureTenantId.Equals(input.AzureTenantId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.SecureAccessEnable == input.SecureAccessEnable ||
                    (this.SecureAccessEnable != null &&
                    this.SecureAccessEnable.Equals(input.SecureAccessEnable))
                ) && 
                (
                    this.SecureAccessWebBrowsing == input.SecureAccessWebBrowsing ||
                    this.SecureAccessWebBrowsing.Equals(input.SecureAccessWebBrowsing)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserGroupObjId == input.UserGroupObjId ||
                    (this.UserGroupObjId != null &&
                    this.UserGroupObjId.Equals(input.UserGroupObjId))
                ) && 
                (
                    this.UserPortalAccess == input.UserPortalAccess ||
                    this.UserPortalAccess.Equals(input.UserPortalAccess)
                ) && 
                (
                    this.UserPrincipalName == input.UserPrincipalName ||
                    (this.UserPrincipalName != null &&
                    this.UserPrincipalName.Equals(input.UserPrincipalName))
                ) && 
                (
                    this.UserProgrammaticAccess == input.UserProgrammaticAccess ||
                    this.UserProgrammaticAccess.Equals(input.UserProgrammaticAccess)
                ) && 
                (
                    this.UserRoleTemplateId == input.UserRoleTemplateId ||
                    (this.UserRoleTemplateId != null &&
                    this.UserRoleTemplateId.Equals(input.UserRoleTemplateId))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppObjId != null)
                    hashCode = hashCode * 59 + this.AppObjId.GetHashCode();
                if (this.AzureClientId != null)
                    hashCode = hashCode * 59 + this.AzureClientId.GetHashCode();
                if (this.AzureClientSecret != null)
                    hashCode = hashCode * 59 + this.AzureClientSecret.GetHashCode();
                if (this.AzureTenantId != null)
                    hashCode = hashCode * 59 + this.AzureTenantId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.ProducerEncryptionKeyName != null)
                    hashCode = hashCode * 59 + this.ProducerEncryptionKeyName.GetHashCode();
                if (this.SecureAccessEnable != null)
                    hashCode = hashCode * 59 + this.SecureAccessEnable.GetHashCode();
                hashCode = hashCode * 59 + this.SecureAccessWebBrowsing.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.UserGroupObjId != null)
                    hashCode = hashCode * 59 + this.UserGroupObjId.GetHashCode();
                hashCode = hashCode * 59 + this.UserPortalAccess.GetHashCode();
                if (this.UserPrincipalName != null)
                    hashCode = hashCode * 59 + this.UserPrincipalName.GetHashCode();
                hashCode = hashCode * 59 + this.UserProgrammaticAccess.GetHashCode();
                if (this.UserRoleTemplateId != null)
                    hashCode = hashCode * 59 + this.UserRoleTemplateId.GetHashCode();
                if (this.UserTtl != null)
                    hashCode = hashCode * 59 + this.UserTtl.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
