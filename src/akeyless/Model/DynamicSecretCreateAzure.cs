/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// dynamicSecretCreateAzure is a command that creates azure dynamic secret
    /// </summary>
    [DataContract(Name = "dynamicSecretCreateAzure")]
    public partial class DynamicSecretCreateAzure : IEquatable<DynamicSecretCreateAzure>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicSecretCreateAzure" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DynamicSecretCreateAzure() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicSecretCreateAzure" /> class.
        /// </summary>
        /// <param name="appObjId">Azure App Object Id.</param>
        /// <param name="azureClientId">Azure Client ID.</param>
        /// <param name="azureClientSecret">Azure Client Secret.</param>
        /// <param name="azureTenantId">Azure Tenant ID.</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="fixedUserClaimKeyname">FixedUserClaimKeyname (default to &quot;false&quot;).</param>
        /// <param name="fixedUserOnly">Fixed user (default to false).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Dynamic secret name (required).</param>
        /// <param name="passwordLength">The length of the password to be generated.</param>
        /// <param name="producerEncryptionKeyName">Dynamic secret encryption key.</param>
        /// <param name="secureAccessEnable">Enable/Disable secure remote access [true/false].</param>
        /// <param name="secureAccessWeb">Enable Web Secure Remote Access (default to true).</param>
        /// <param name="secureAccessWebBrowsing">Secure browser via Akeyless Web Access Bastion (default to false).</param>
        /// <param name="secureAccessWebProxy">Web-Proxy via Akeyless Web Access Bastion (default to false).</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userGroupObjId">User Group Object Id.</param>
        /// <param name="userPortalAccess">Azure User portal access (default to false).</param>
        /// <param name="userPrincipalName">User Principal Name.</param>
        /// <param name="userProgrammaticAccess">Azure User programmatic access (default to false).</param>
        /// <param name="userRoleTemplateId">User Role Template Id.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public DynamicSecretCreateAzure(string appObjId = default(string), string azureClientId = default(string), string azureClientSecret = default(string), string azureTenantId = default(string), string deleteProtection = default(string), string description = default(string), string fixedUserClaimKeyname = "false", bool fixedUserOnly = false, bool json = false, string name = default(string), string passwordLength = default(string), string producerEncryptionKeyName = default(string), string secureAccessEnable = default(string), bool secureAccessWeb = true, bool secureAccessWebBrowsing = false, bool secureAccessWebProxy = false, List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userGroupObjId = default(string), bool userPortalAccess = false, string userPrincipalName = default(string), bool userProgrammaticAccess = false, string userRoleTemplateId = default(string), string userTtl = "60m")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DynamicSecretCreateAzure and cannot be null");
            }
            this.Name = name;
            this.AppObjId = appObjId;
            this.AzureClientId = azureClientId;
            this.AzureClientSecret = azureClientSecret;
            this.AzureTenantId = azureTenantId;
            this.DeleteProtection = deleteProtection;
            this.Description = description;
            // use default value if no "fixedUserClaimKeyname" provided
            this.FixedUserClaimKeyname = fixedUserClaimKeyname ?? "false";
            this.FixedUserOnly = fixedUserOnly;
            this.Json = json;
            this.PasswordLength = passwordLength;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessWeb = secureAccessWeb;
            this.SecureAccessWebBrowsing = secureAccessWebBrowsing;
            this.SecureAccessWebProxy = secureAccessWebProxy;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            this.UserGroupObjId = userGroupObjId;
            this.UserPortalAccess = userPortalAccess;
            this.UserPrincipalName = userPrincipalName;
            this.UserProgrammaticAccess = userProgrammaticAccess;
            this.UserRoleTemplateId = userRoleTemplateId;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "60m";
        }

        /// <summary>
        /// Azure App Object Id
        /// </summary>
        /// <value>Azure App Object Id</value>
        [DataMember(Name = "app-obj-id", EmitDefaultValue = false)]
        public string AppObjId { get; set; }

        /// <summary>
        /// Azure Client ID
        /// </summary>
        /// <value>Azure Client ID</value>
        [DataMember(Name = "azure-client-id", EmitDefaultValue = false)]
        public string AzureClientId { get; set; }

        /// <summary>
        /// Azure Client Secret
        /// </summary>
        /// <value>Azure Client Secret</value>
        [DataMember(Name = "azure-client-secret", EmitDefaultValue = false)]
        public string AzureClientSecret { get; set; }

        /// <summary>
        /// Azure Tenant ID
        /// </summary>
        /// <value>Azure Tenant ID</value>
        [DataMember(Name = "azure-tenant-id", EmitDefaultValue = false)]
        public string AzureTenantId { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// FixedUserClaimKeyname
        /// </summary>
        /// <value>FixedUserClaimKeyname</value>
        [DataMember(Name = "fixed-user-claim-keyname", EmitDefaultValue = false)]
        public string FixedUserClaimKeyname { get; set; }

        /// <summary>
        /// Fixed user
        /// </summary>
        /// <value>Fixed user</value>
        [DataMember(Name = "fixed-user-only", EmitDefaultValue = true)]
        public bool FixedUserOnly { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The length of the password to be generated
        /// </summary>
        /// <value>The length of the password to be generated</value>
        [DataMember(Name = "password-length", EmitDefaultValue = false)]
        public string PasswordLength { get; set; }

        /// <summary>
        /// Dynamic secret encryption key
        /// </summary>
        /// <value>Dynamic secret encryption key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Enable/Disable secure remote access [true/false]
        /// </summary>
        /// <value>Enable/Disable secure remote access [true/false]</value>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Enable Web Secure Remote Access
        /// </summary>
        /// <value>Enable Web Secure Remote Access</value>
        [DataMember(Name = "secure-access-web", EmitDefaultValue = true)]
        public bool SecureAccessWeb { get; set; }

        /// <summary>
        /// Secure browser via Akeyless Web Access Bastion
        /// </summary>
        /// <value>Secure browser via Akeyless Web Access Bastion</value>
        [DataMember(Name = "secure-access-web-browsing", EmitDefaultValue = true)]
        public bool SecureAccessWebBrowsing { get; set; }

        /// <summary>
        /// Web-Proxy via Akeyless Web Access Bastion
        /// </summary>
        /// <value>Web-Proxy via Akeyless Web Access Bastion</value>
        [DataMember(Name = "secure-access-web-proxy", EmitDefaultValue = true)]
        public bool SecureAccessWebProxy { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User Group Object Id
        /// </summary>
        /// <value>User Group Object Id</value>
        [DataMember(Name = "user-group-obj-id", EmitDefaultValue = false)]
        public string UserGroupObjId { get; set; }

        /// <summary>
        /// Azure User portal access
        /// </summary>
        /// <value>Azure User portal access</value>
        [DataMember(Name = "user-portal-access", EmitDefaultValue = true)]
        public bool UserPortalAccess { get; set; }

        /// <summary>
        /// User Principal Name
        /// </summary>
        /// <value>User Principal Name</value>
        [DataMember(Name = "user-principal-name", EmitDefaultValue = false)]
        public string UserPrincipalName { get; set; }

        /// <summary>
        /// Azure User programmatic access
        /// </summary>
        /// <value>Azure User programmatic access</value>
        [DataMember(Name = "user-programmatic-access", EmitDefaultValue = true)]
        public bool UserProgrammaticAccess { get; set; }

        /// <summary>
        /// User Role Template Id
        /// </summary>
        /// <value>User Role Template Id</value>
        [DataMember(Name = "user-role-template-id", EmitDefaultValue = false)]
        public string UserRoleTemplateId { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DynamicSecretCreateAzure {\n");
            sb.Append("  AppObjId: ").Append(AppObjId).Append("\n");
            sb.Append("  AzureClientId: ").Append(AzureClientId).Append("\n");
            sb.Append("  AzureClientSecret: ").Append(AzureClientSecret).Append("\n");
            sb.Append("  AzureTenantId: ").Append(AzureTenantId).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FixedUserClaimKeyname: ").Append(FixedUserClaimKeyname).Append("\n");
            sb.Append("  FixedUserOnly: ").Append(FixedUserOnly).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PasswordLength: ").Append(PasswordLength).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessWeb: ").Append(SecureAccessWeb).Append("\n");
            sb.Append("  SecureAccessWebBrowsing: ").Append(SecureAccessWebBrowsing).Append("\n");
            sb.Append("  SecureAccessWebProxy: ").Append(SecureAccessWebProxy).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserGroupObjId: ").Append(UserGroupObjId).Append("\n");
            sb.Append("  UserPortalAccess: ").Append(UserPortalAccess).Append("\n");
            sb.Append("  UserPrincipalName: ").Append(UserPrincipalName).Append("\n");
            sb.Append("  UserProgrammaticAccess: ").Append(UserProgrammaticAccess).Append("\n");
            sb.Append("  UserRoleTemplateId: ").Append(UserRoleTemplateId).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DynamicSecretCreateAzure);
        }

        /// <summary>
        /// Returns true if DynamicSecretCreateAzure instances are equal
        /// </summary>
        /// <param name="input">Instance of DynamicSecretCreateAzure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DynamicSecretCreateAzure input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AppObjId == input.AppObjId ||
                    (this.AppObjId != null &&
                    this.AppObjId.Equals(input.AppObjId))
                ) && 
                (
                    this.AzureClientId == input.AzureClientId ||
                    (this.AzureClientId != null &&
                    this.AzureClientId.Equals(input.AzureClientId))
                ) && 
                (
                    this.AzureClientSecret == input.AzureClientSecret ||
                    (this.AzureClientSecret != null &&
                    this.AzureClientSecret.Equals(input.AzureClientSecret))
                ) && 
                (
                    this.AzureTenantId == input.AzureTenantId ||
                    (this.AzureTenantId != null &&
                    this.AzureTenantId.Equals(input.AzureTenantId))
                ) && 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    (this.DeleteProtection != null &&
                    this.DeleteProtection.Equals(input.DeleteProtection))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FixedUserClaimKeyname == input.FixedUserClaimKeyname ||
                    (this.FixedUserClaimKeyname != null &&
                    this.FixedUserClaimKeyname.Equals(input.FixedUserClaimKeyname))
                ) && 
                (
                    this.FixedUserOnly == input.FixedUserOnly ||
                    this.FixedUserOnly.Equals(input.FixedUserOnly)
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PasswordLength == input.PasswordLength ||
                    (this.PasswordLength != null &&
                    this.PasswordLength.Equals(input.PasswordLength))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.SecureAccessEnable == input.SecureAccessEnable ||
                    (this.SecureAccessEnable != null &&
                    this.SecureAccessEnable.Equals(input.SecureAccessEnable))
                ) && 
                (
                    this.SecureAccessWeb == input.SecureAccessWeb ||
                    this.SecureAccessWeb.Equals(input.SecureAccessWeb)
                ) && 
                (
                    this.SecureAccessWebBrowsing == input.SecureAccessWebBrowsing ||
                    this.SecureAccessWebBrowsing.Equals(input.SecureAccessWebBrowsing)
                ) && 
                (
                    this.SecureAccessWebProxy == input.SecureAccessWebProxy ||
                    this.SecureAccessWebProxy.Equals(input.SecureAccessWebProxy)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserGroupObjId == input.UserGroupObjId ||
                    (this.UserGroupObjId != null &&
                    this.UserGroupObjId.Equals(input.UserGroupObjId))
                ) && 
                (
                    this.UserPortalAccess == input.UserPortalAccess ||
                    this.UserPortalAccess.Equals(input.UserPortalAccess)
                ) && 
                (
                    this.UserPrincipalName == input.UserPrincipalName ||
                    (this.UserPrincipalName != null &&
                    this.UserPrincipalName.Equals(input.UserPrincipalName))
                ) && 
                (
                    this.UserProgrammaticAccess == input.UserProgrammaticAccess ||
                    this.UserProgrammaticAccess.Equals(input.UserProgrammaticAccess)
                ) && 
                (
                    this.UserRoleTemplateId == input.UserRoleTemplateId ||
                    (this.UserRoleTemplateId != null &&
                    this.UserRoleTemplateId.Equals(input.UserRoleTemplateId))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppObjId != null)
                {
                    hashCode = (hashCode * 59) + this.AppObjId.GetHashCode();
                }
                if (this.AzureClientId != null)
                {
                    hashCode = (hashCode * 59) + this.AzureClientId.GetHashCode();
                }
                if (this.AzureClientSecret != null)
                {
                    hashCode = (hashCode * 59) + this.AzureClientSecret.GetHashCode();
                }
                if (this.AzureTenantId != null)
                {
                    hashCode = (hashCode * 59) + this.AzureTenantId.GetHashCode();
                }
                if (this.DeleteProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteProtection.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.FixedUserClaimKeyname != null)
                {
                    hashCode = (hashCode * 59) + this.FixedUserClaimKeyname.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FixedUserOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.PasswordLength != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordLength.GetHashCode();
                }
                if (this.ProducerEncryptionKeyName != null)
                {
                    hashCode = (hashCode * 59) + this.ProducerEncryptionKeyName.GetHashCode();
                }
                if (this.SecureAccessEnable != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessEnable.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SecureAccessWeb.GetHashCode();
                hashCode = (hashCode * 59) + this.SecureAccessWebBrowsing.GetHashCode();
                hashCode = (hashCode * 59) + this.SecureAccessWebProxy.GetHashCode();
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TargetName != null)
                {
                    hashCode = (hashCode * 59) + this.TargetName.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UserGroupObjId != null)
                {
                    hashCode = (hashCode * 59) + this.UserGroupObjId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserPortalAccess.GetHashCode();
                if (this.UserPrincipalName != null)
                {
                    hashCode = (hashCode * 59) + this.UserPrincipalName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserProgrammaticAccess.GetHashCode();
                if (this.UserRoleTemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.UserRoleTemplateId.GetHashCode();
                }
                if (this.UserTtl != null)
                {
                    hashCode = (hashCode * 59) + this.UserTtl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
