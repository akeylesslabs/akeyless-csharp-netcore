/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// AzureStorage
    /// </summary>
    [DataContract(Name = "AzureStorage")]
    public partial class AzureStorage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AzureStorage" /> class.
        /// </summary>
        /// <param name="authType">authType.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="clientSecret">clientSecret.</param>
        /// <param name="storageAccount">storageAccount.</param>
        /// <param name="storageContainerName">storageContainerName.</param>
        /// <param name="tenantId">creds.</param>
        public AzureStorage(string authType = default(string), string clientId = default(string), string clientSecret = default(string), string storageAccount = default(string), string storageContainerName = default(string), string tenantId = default(string))
        {
            this.AuthType = authType;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.StorageAccount = storageAccount;
            this.StorageContainerName = storageContainerName;
            this.TenantId = tenantId;
        }

        /// <summary>
        /// Gets or Sets AuthType
        /// </summary>
        [DataMember(Name = "auth_type", EmitDefaultValue = false)]
        public string AuthType { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecret
        /// </summary>
        [DataMember(Name = "client_secret", EmitDefaultValue = false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets StorageAccount
        /// </summary>
        [DataMember(Name = "storage_account", EmitDefaultValue = false)]
        public string StorageAccount { get; set; }

        /// <summary>
        /// Gets or Sets StorageContainerName
        /// </summary>
        [DataMember(Name = "storage_container_name", EmitDefaultValue = false)]
        public string StorageContainerName { get; set; }

        /// <summary>
        /// creds
        /// </summary>
        /// <value>creds</value>
        [DataMember(Name = "tenant_id", EmitDefaultValue = false)]
        public string TenantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AzureStorage {\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  StorageAccount: ").Append(StorageAccount).Append("\n");
            sb.Append("  StorageContainerName: ").Append(StorageContainerName).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
