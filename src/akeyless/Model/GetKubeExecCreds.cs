/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// getKubeExecCreds is a command that gets credentials for authentication with Kubernetes cluster based on a PKI cert issuer.
    /// </summary>
    [DataContract(Name = "getKubeExecCreds")]
    public partial class GetKubeExecCreds : IEquatable<GetKubeExecCreds>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetKubeExecCreds" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetKubeExecCreds() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetKubeExecCreds" /> class.
        /// </summary>
        /// <param name="altNames">The Subject Alternative Names to be included in the PKI certificate (in a comma-separated list) (if CSR is supplied this flag is ignored and any DNS.* names are taken from it).</param>
        /// <param name="apiVersion">Client authentication API version (default to &quot;v1&quot;).</param>
        /// <param name="certIssuerName">The name of the PKI certificate issuer (required).</param>
        /// <param name="commonName">The common name to be included in the PKI certificate (if CSR is supplied this flag is ignored and the CSR subject CN is taken).</param>
        /// <param name="csrDataBase64">Certificate Signing Request contents encoded in base64 to generate the certificate with.</param>
        /// <param name="extendedKeyUsage">A comma-separated list of extended key usage requests which will be used for certificate issuance. Supported values: &#39;clientauth&#39;, &#39;serverauth&#39;..</param>
        /// <param name="extraExtensions">A json string that defines the requested extra extensions for the certificate.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="keyDataBase64">PKI key file contents. If this option is used, the certificate will be printed to stdout.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="ttl">Updated certificate lifetime in seconds (must be less than the Certificate Issuer default TTL).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="uriSans">The URI Subject Alternative Names to be included in the PKI certificate (in a comma-separated list) (if CSR is supplied this flag is ignored and any URI.* names are taken from it).</param>
        public GetKubeExecCreds(string altNames = default(string), string apiVersion = "v1", string certIssuerName = default(string), string commonName = default(string), string csrDataBase64 = default(string), string extendedKeyUsage = default(string), string extraExtensions = default(string), bool json = false, string keyDataBase64 = default(string), string token = default(string), long ttl = default(long), string uidToken = default(string), string uriSans = default(string))
        {
            // to ensure "certIssuerName" is required (not null)
            if (certIssuerName == null)
            {
                throw new ArgumentNullException("certIssuerName is a required property for GetKubeExecCreds and cannot be null");
            }
            this.CertIssuerName = certIssuerName;
            this.AltNames = altNames;
            // use default value if no "apiVersion" provided
            this.ApiVersion = apiVersion ?? "v1";
            this.CommonName = commonName;
            this.CsrDataBase64 = csrDataBase64;
            this.ExtendedKeyUsage = extendedKeyUsage;
            this.ExtraExtensions = extraExtensions;
            this.Json = json;
            this.KeyDataBase64 = keyDataBase64;
            this.Token = token;
            this.Ttl = ttl;
            this.UidToken = uidToken;
            this.UriSans = uriSans;
        }

        /// <summary>
        /// The Subject Alternative Names to be included in the PKI certificate (in a comma-separated list) (if CSR is supplied this flag is ignored and any DNS.* names are taken from it)
        /// </summary>
        /// <value>The Subject Alternative Names to be included in the PKI certificate (in a comma-separated list) (if CSR is supplied this flag is ignored and any DNS.* names are taken from it)</value>
        [DataMember(Name = "alt-names", EmitDefaultValue = false)]
        public string AltNames { get; set; }

        /// <summary>
        /// Client authentication API version
        /// </summary>
        /// <value>Client authentication API version</value>
        [DataMember(Name = "api-version", EmitDefaultValue = false)]
        public string ApiVersion { get; set; }

        /// <summary>
        /// The name of the PKI certificate issuer
        /// </summary>
        /// <value>The name of the PKI certificate issuer</value>
        [DataMember(Name = "cert-issuer-name", IsRequired = true, EmitDefaultValue = true)]
        public string CertIssuerName { get; set; }

        /// <summary>
        /// The common name to be included in the PKI certificate (if CSR is supplied this flag is ignored and the CSR subject CN is taken)
        /// </summary>
        /// <value>The common name to be included in the PKI certificate (if CSR is supplied this flag is ignored and the CSR subject CN is taken)</value>
        [DataMember(Name = "common-name", EmitDefaultValue = false)]
        public string CommonName { get; set; }

        /// <summary>
        /// Certificate Signing Request contents encoded in base64 to generate the certificate with
        /// </summary>
        /// <value>Certificate Signing Request contents encoded in base64 to generate the certificate with</value>
        [DataMember(Name = "csr-data-base64", EmitDefaultValue = false)]
        public string CsrDataBase64 { get; set; }

        /// <summary>
        /// A comma-separated list of extended key usage requests which will be used for certificate issuance. Supported values: &#39;clientauth&#39;, &#39;serverauth&#39;.
        /// </summary>
        /// <value>A comma-separated list of extended key usage requests which will be used for certificate issuance. Supported values: &#39;clientauth&#39;, &#39;serverauth&#39;.</value>
        [DataMember(Name = "extended-key-usage", EmitDefaultValue = false)]
        public string ExtendedKeyUsage { get; set; }

        /// <summary>
        /// A json string that defines the requested extra extensions for the certificate
        /// </summary>
        /// <value>A json string that defines the requested extra extensions for the certificate</value>
        [DataMember(Name = "extra-extensions", EmitDefaultValue = false)]
        public string ExtraExtensions { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// PKI key file contents. If this option is used, the certificate will be printed to stdout
        /// </summary>
        /// <value>PKI key file contents. If this option is used, the certificate will be printed to stdout</value>
        [DataMember(Name = "key-data-base64", EmitDefaultValue = false)]
        public string KeyDataBase64 { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Updated certificate lifetime in seconds (must be less than the Certificate Issuer default TTL)
        /// </summary>
        /// <value>Updated certificate lifetime in seconds (must be less than the Certificate Issuer default TTL)</value>
        [DataMember(Name = "ttl", EmitDefaultValue = false)]
        public long Ttl { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// The URI Subject Alternative Names to be included in the PKI certificate (in a comma-separated list) (if CSR is supplied this flag is ignored and any URI.* names are taken from it)
        /// </summary>
        /// <value>The URI Subject Alternative Names to be included in the PKI certificate (in a comma-separated list) (if CSR is supplied this flag is ignored and any URI.* names are taken from it)</value>
        [DataMember(Name = "uri-sans", EmitDefaultValue = false)]
        public string UriSans { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetKubeExecCreds {\n");
            sb.Append("  AltNames: ").Append(AltNames).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  CertIssuerName: ").Append(CertIssuerName).Append("\n");
            sb.Append("  CommonName: ").Append(CommonName).Append("\n");
            sb.Append("  CsrDataBase64: ").Append(CsrDataBase64).Append("\n");
            sb.Append("  ExtendedKeyUsage: ").Append(ExtendedKeyUsage).Append("\n");
            sb.Append("  ExtraExtensions: ").Append(ExtraExtensions).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeyDataBase64: ").Append(KeyDataBase64).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UriSans: ").Append(UriSans).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetKubeExecCreds);
        }

        /// <summary>
        /// Returns true if GetKubeExecCreds instances are equal
        /// </summary>
        /// <param name="input">Instance of GetKubeExecCreds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetKubeExecCreds input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AltNames == input.AltNames ||
                    (this.AltNames != null &&
                    this.AltNames.Equals(input.AltNames))
                ) && 
                (
                    this.ApiVersion == input.ApiVersion ||
                    (this.ApiVersion != null &&
                    this.ApiVersion.Equals(input.ApiVersion))
                ) && 
                (
                    this.CertIssuerName == input.CertIssuerName ||
                    (this.CertIssuerName != null &&
                    this.CertIssuerName.Equals(input.CertIssuerName))
                ) && 
                (
                    this.CommonName == input.CommonName ||
                    (this.CommonName != null &&
                    this.CommonName.Equals(input.CommonName))
                ) && 
                (
                    this.CsrDataBase64 == input.CsrDataBase64 ||
                    (this.CsrDataBase64 != null &&
                    this.CsrDataBase64.Equals(input.CsrDataBase64))
                ) && 
                (
                    this.ExtendedKeyUsage == input.ExtendedKeyUsage ||
                    (this.ExtendedKeyUsage != null &&
                    this.ExtendedKeyUsage.Equals(input.ExtendedKeyUsage))
                ) && 
                (
                    this.ExtraExtensions == input.ExtraExtensions ||
                    (this.ExtraExtensions != null &&
                    this.ExtraExtensions.Equals(input.ExtraExtensions))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.KeyDataBase64 == input.KeyDataBase64 ||
                    (this.KeyDataBase64 != null &&
                    this.KeyDataBase64.Equals(input.KeyDataBase64))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Ttl == input.Ttl ||
                    this.Ttl.Equals(input.Ttl)
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UriSans == input.UriSans ||
                    (this.UriSans != null &&
                    this.UriSans.Equals(input.UriSans))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AltNames != null)
                {
                    hashCode = (hashCode * 59) + this.AltNames.GetHashCode();
                }
                if (this.ApiVersion != null)
                {
                    hashCode = (hashCode * 59) + this.ApiVersion.GetHashCode();
                }
                if (this.CertIssuerName != null)
                {
                    hashCode = (hashCode * 59) + this.CertIssuerName.GetHashCode();
                }
                if (this.CommonName != null)
                {
                    hashCode = (hashCode * 59) + this.CommonName.GetHashCode();
                }
                if (this.CsrDataBase64 != null)
                {
                    hashCode = (hashCode * 59) + this.CsrDataBase64.GetHashCode();
                }
                if (this.ExtendedKeyUsage != null)
                {
                    hashCode = (hashCode * 59) + this.ExtendedKeyUsage.GetHashCode();
                }
                if (this.ExtraExtensions != null)
                {
                    hashCode = (hashCode * 59) + this.ExtraExtensions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.KeyDataBase64 != null)
                {
                    hashCode = (hashCode * 59) + this.KeyDataBase64.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Ttl.GetHashCode();
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UriSans != null)
                {
                    hashCode = (hashCode * 59) + this.UriSans.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
