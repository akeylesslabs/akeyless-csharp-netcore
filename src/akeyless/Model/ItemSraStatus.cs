/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ItemSraStatus
    /// </summary>
    [DataContract(Name = "ItemSraStatus")]
    public partial class ItemSraStatus : IEquatable<ItemSraStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSraStatus" /> class.
        /// </summary>
        /// <param name="bastionAccessId">bastionAccessId.</param>
        /// <param name="bastionClusterName">bastionClusterName.</param>
        /// <param name="bastionInstanceId">bastionInstanceId.</param>
        /// <param name="isInUsed">isInUsed.</param>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="time">time.</param>
        public ItemSraStatus(string bastionAccessId = default(string), string bastionClusterName = default(string), string bastionInstanceId = default(string), bool isInUsed = default(bool), string sessionId = default(string), DateTime time = default(DateTime))
        {
            this.BastionAccessId = bastionAccessId;
            this.BastionClusterName = bastionClusterName;
            this.BastionInstanceId = bastionInstanceId;
            this.IsInUsed = isInUsed;
            this.SessionId = sessionId;
            this.Time = time;
        }

        /// <summary>
        /// Gets or Sets BastionAccessId
        /// </summary>
        [DataMember(Name = "bastion_access_id", EmitDefaultValue = false)]
        public string BastionAccessId { get; set; }

        /// <summary>
        /// Gets or Sets BastionClusterName
        /// </summary>
        [DataMember(Name = "bastion_cluster_name", EmitDefaultValue = false)]
        public string BastionClusterName { get; set; }

        /// <summary>
        /// Gets or Sets BastionInstanceId
        /// </summary>
        [DataMember(Name = "bastion_instance_id", EmitDefaultValue = false)]
        public string BastionInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets IsInUsed
        /// </summary>
        [DataMember(Name = "is_in_used", EmitDefaultValue = true)]
        public bool IsInUsed { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name = "session_id", EmitDefaultValue = false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public DateTime Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemSraStatus {\n");
            sb.Append("  BastionAccessId: ").Append(BastionAccessId).Append("\n");
            sb.Append("  BastionClusterName: ").Append(BastionClusterName).Append("\n");
            sb.Append("  BastionInstanceId: ").Append(BastionInstanceId).Append("\n");
            sb.Append("  IsInUsed: ").Append(IsInUsed).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemSraStatus);
        }

        /// <summary>
        /// Returns true if ItemSraStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemSraStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemSraStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BastionAccessId == input.BastionAccessId ||
                    (this.BastionAccessId != null &&
                    this.BastionAccessId.Equals(input.BastionAccessId))
                ) && 
                (
                    this.BastionClusterName == input.BastionClusterName ||
                    (this.BastionClusterName != null &&
                    this.BastionClusterName.Equals(input.BastionClusterName))
                ) && 
                (
                    this.BastionInstanceId == input.BastionInstanceId ||
                    (this.BastionInstanceId != null &&
                    this.BastionInstanceId.Equals(input.BastionInstanceId))
                ) && 
                (
                    this.IsInUsed == input.IsInUsed ||
                    this.IsInUsed.Equals(input.IsInUsed)
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BastionAccessId != null)
                {
                    hashCode = (hashCode * 59) + this.BastionAccessId.GetHashCode();
                }
                if (this.BastionClusterName != null)
                {
                    hashCode = (hashCode * 59) + this.BastionClusterName.GetHashCode();
                }
                if (this.BastionInstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.BastionInstanceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsInUsed.GetHashCode();
                if (this.SessionId != null)
                {
                    hashCode = (hashCode * 59) + this.SessionId.GetHashCode();
                }
                if (this.Time != null)
                {
                    hashCode = (hashCode * 59) + this.Time.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
