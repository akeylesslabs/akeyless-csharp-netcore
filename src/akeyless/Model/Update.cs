/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// Update
    /// </summary>
    [DataContract(Name = "update")]
    public partial class Update : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Update" /> class.
        /// </summary>
        /// <param name="artifactRepository">Alternative CLI repository url. e.g. https://artifacts.site2.akeyless.io.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="showChangelog">Show the changelog between the current version and the latest one and exit (update will not be performed).</param>
        /// <param name="varVersion">The CLI version (default to &quot;latest&quot;).</param>
        public Update(string artifactRepository = default(string), bool json = false, bool showChangelog = default(bool), string varVersion = @"latest")
        {
            this.ArtifactRepository = artifactRepository;
            this.Json = json;
            this.ShowChangelog = showChangelog;
            // use default value if no "varVersion" provided
            this.VarVersion = varVersion ?? @"latest";
        }

        /// <summary>
        /// Alternative CLI repository url. e.g. https://artifacts.site2.akeyless.io
        /// </summary>
        /// <value>Alternative CLI repository url. e.g. https://artifacts.site2.akeyless.io</value>
        [DataMember(Name = "artifact-repository", EmitDefaultValue = false)]
        public string ArtifactRepository { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Show the changelog between the current version and the latest one and exit (update will not be performed)
        /// </summary>
        /// <value>Show the changelog between the current version and the latest one and exit (update will not be performed)</value>
        [DataMember(Name = "show-changelog", EmitDefaultValue = true)]
        public bool ShowChangelog { get; set; }

        /// <summary>
        /// The CLI version
        /// </summary>
        /// <value>The CLI version</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Update {\n");
            sb.Append("  ArtifactRepository: ").Append(ArtifactRepository).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  ShowChangelog: ").Append(ShowChangelog).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
