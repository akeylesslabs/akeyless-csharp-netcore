/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GetProducersListReplyObj
    /// </summary>
    [DataContract(Name = "GetProducersListReplyObj")]
    public partial class GetProducersListReplyObj : IEquatable<GetProducersListReplyObj>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProducersListReplyObj" /> class.
        /// </summary>
        /// <param name="producers">producers.</param>
        /// <param name="producersErrors">producersErrors.</param>
        public GetProducersListReplyObj(List<Producer> producers = default(List<Producer>), Object producersErrors = default(Object))
        {
            this.Producers = producers;
            this.ProducersErrors = producersErrors;
        }

        /// <summary>
        /// Gets or Sets Producers
        /// </summary>
        [DataMember(Name = "producers", EmitDefaultValue = false)]
        public List<Producer> Producers { get; set; }

        /// <summary>
        /// Gets or Sets ProducersErrors
        /// </summary>
        [DataMember(Name = "producers_errors", EmitDefaultValue = false)]
        public Object ProducersErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetProducersListReplyObj {\n");
            sb.Append("  Producers: ").Append(Producers).Append("\n");
            sb.Append("  ProducersErrors: ").Append(ProducersErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetProducersListReplyObj);
        }

        /// <summary>
        /// Returns true if GetProducersListReplyObj instances are equal
        /// </summary>
        /// <param name="input">Instance of GetProducersListReplyObj to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetProducersListReplyObj input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Producers == input.Producers ||
                    this.Producers != null &&
                    input.Producers != null &&
                    this.Producers.SequenceEqual(input.Producers)
                ) && 
                (
                    this.ProducersErrors == input.ProducersErrors ||
                    (this.ProducersErrors != null &&
                    this.ProducersErrors.Equals(input.ProducersErrors))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Producers != null)
                    hashCode = hashCode * 59 + this.Producers.GetHashCode();
                if (this.ProducersErrors != null)
                    hashCode = hashCode * 59 + this.ProducersErrors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
