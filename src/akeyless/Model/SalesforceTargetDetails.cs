/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SalesforceTargetDetails
    /// </summary>
    [DataContract(Name = "SalesforceTargetDetails")]
    public partial class SalesforceTargetDetails : IEquatable<SalesforceTargetDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesforceTargetDetails" /> class.
        /// </summary>
        /// <param name="appPrivateKey">params needed for jwt auth AppPrivateKey is the rsa private key in PEM format.</param>
        /// <param name="authFlow">authFlow.</param>
        /// <param name="caCertData">CACertData is the rsa 4096 certificate data in PEM format.</param>
        /// <param name="caCertName">CACertName is the name of the certificate in SalesForce tenant.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="clientSecret">params needed for password auth.</param>
        /// <param name="password">password.</param>
        /// <param name="securityToken">securityToken.</param>
        /// <param name="tenantUrl">tenantUrl.</param>
        /// <param name="userName">userName.</param>
        public SalesforceTargetDetails(List<int> appPrivateKey = default(List<int>), string authFlow = default(string), List<int> caCertData = default(List<int>), string caCertName = default(string), string clientId = default(string), string clientSecret = default(string), string password = default(string), string securityToken = default(string), string tenantUrl = default(string), string userName = default(string))
        {
            this.AppPrivateKey = appPrivateKey;
            this.AuthFlow = authFlow;
            this.CaCertData = caCertData;
            this.CaCertName = caCertName;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.Password = password;
            this.SecurityToken = securityToken;
            this.TenantUrl = tenantUrl;
            this.UserName = userName;
        }

        /// <summary>
        /// params needed for jwt auth AppPrivateKey is the rsa private key in PEM format
        /// </summary>
        /// <value>params needed for jwt auth AppPrivateKey is the rsa private key in PEM format</value>
        [DataMember(Name = "app_private_key", EmitDefaultValue = false)]
        public List<int> AppPrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets AuthFlow
        /// </summary>
        [DataMember(Name = "auth_flow", EmitDefaultValue = false)]
        public string AuthFlow { get; set; }

        /// <summary>
        /// CACertData is the rsa 4096 certificate data in PEM format
        /// </summary>
        /// <value>CACertData is the rsa 4096 certificate data in PEM format</value>
        [DataMember(Name = "ca_cert_data", EmitDefaultValue = false)]
        public List<int> CaCertData { get; set; }

        /// <summary>
        /// CACertName is the name of the certificate in SalesForce tenant
        /// </summary>
        /// <value>CACertName is the name of the certificate in SalesForce tenant</value>
        [DataMember(Name = "ca_cert_name", EmitDefaultValue = false)]
        public string CaCertName { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// params needed for password auth
        /// </summary>
        /// <value>params needed for password auth</value>
        [DataMember(Name = "client_secret", EmitDefaultValue = false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets SecurityToken
        /// </summary>
        [DataMember(Name = "security_token", EmitDefaultValue = false)]
        public string SecurityToken { get; set; }

        /// <summary>
        /// Gets or Sets TenantUrl
        /// </summary>
        [DataMember(Name = "tenant_url", EmitDefaultValue = false)]
        public string TenantUrl { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "user_name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalesforceTargetDetails {\n");
            sb.Append("  AppPrivateKey: ").Append(AppPrivateKey).Append("\n");
            sb.Append("  AuthFlow: ").Append(AuthFlow).Append("\n");
            sb.Append("  CaCertData: ").Append(CaCertData).Append("\n");
            sb.Append("  CaCertName: ").Append(CaCertName).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  SecurityToken: ").Append(SecurityToken).Append("\n");
            sb.Append("  TenantUrl: ").Append(TenantUrl).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesforceTargetDetails);
        }

        /// <summary>
        /// Returns true if SalesforceTargetDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesforceTargetDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesforceTargetDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AppPrivateKey == input.AppPrivateKey ||
                    this.AppPrivateKey != null &&
                    input.AppPrivateKey != null &&
                    this.AppPrivateKey.SequenceEqual(input.AppPrivateKey)
                ) && 
                (
                    this.AuthFlow == input.AuthFlow ||
                    (this.AuthFlow != null &&
                    this.AuthFlow.Equals(input.AuthFlow))
                ) && 
                (
                    this.CaCertData == input.CaCertData ||
                    this.CaCertData != null &&
                    input.CaCertData != null &&
                    this.CaCertData.SequenceEqual(input.CaCertData)
                ) && 
                (
                    this.CaCertName == input.CaCertName ||
                    (this.CaCertName != null &&
                    this.CaCertName.Equals(input.CaCertName))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.SecurityToken == input.SecurityToken ||
                    (this.SecurityToken != null &&
                    this.SecurityToken.Equals(input.SecurityToken))
                ) && 
                (
                    this.TenantUrl == input.TenantUrl ||
                    (this.TenantUrl != null &&
                    this.TenantUrl.Equals(input.TenantUrl))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppPrivateKey != null)
                {
                    hashCode = (hashCode * 59) + this.AppPrivateKey.GetHashCode();
                }
                if (this.AuthFlow != null)
                {
                    hashCode = (hashCode * 59) + this.AuthFlow.GetHashCode();
                }
                if (this.CaCertData != null)
                {
                    hashCode = (hashCode * 59) + this.CaCertData.GetHashCode();
                }
                if (this.CaCertName != null)
                {
                    hashCode = (hashCode * 59) + this.CaCertName.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ClientSecret != null)
                {
                    hashCode = (hashCode * 59) + this.ClientSecret.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.SecurityToken != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityToken.GetHashCode();
                }
                if (this.TenantUrl != null)
                {
                    hashCode = (hashCode * 59) + this.TenantUrl.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
