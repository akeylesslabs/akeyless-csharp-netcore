/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// DefaultConfigPart
    /// </summary>
    [DataContract]
    public partial class DefaultConfigPart :  IEquatable<DefaultConfigPart>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultConfigPart" /> class.
        /// </summary>
        /// <param name="defaultProtectionKeyId">defaultProtectionKeyId.</param>
        /// <param name="defaultSecretLocation">defaultSecretLocation.</param>
        /// <param name="openIdConnectAccessId">openIdConnectAccessId.</param>
        /// <param name="samlAccessId">samlAccessId.</param>
        public DefaultConfigPart(long defaultProtectionKeyId = default(long), string defaultSecretLocation = default(string), string openIdConnectAccessId = default(string), string samlAccessId = default(string))
        {
            this.DefaultProtectionKeyId = defaultProtectionKeyId;
            this.DefaultSecretLocation = defaultSecretLocation;
            this.OpenIdConnectAccessId = openIdConnectAccessId;
            this.SamlAccessId = samlAccessId;
        }
        
        /// <summary>
        /// Gets or Sets DefaultProtectionKeyId
        /// </summary>
        [DataMember(Name="default_protection_key_id", EmitDefaultValue=false)]
        public long DefaultProtectionKeyId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultSecretLocation
        /// </summary>
        [DataMember(Name="default_secret_location", EmitDefaultValue=false)]
        public string DefaultSecretLocation { get; set; }

        /// <summary>
        /// Gets or Sets OpenIdConnectAccessId
        /// </summary>
        [DataMember(Name="open_id_connect_access_id", EmitDefaultValue=false)]
        public string OpenIdConnectAccessId { get; set; }

        /// <summary>
        /// Gets or Sets SamlAccessId
        /// </summary>
        [DataMember(Name="saml_access_id", EmitDefaultValue=false)]
        public string SamlAccessId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DefaultConfigPart {\n");
            sb.Append("  DefaultProtectionKeyId: ").Append(DefaultProtectionKeyId).Append("\n");
            sb.Append("  DefaultSecretLocation: ").Append(DefaultSecretLocation).Append("\n");
            sb.Append("  OpenIdConnectAccessId: ").Append(OpenIdConnectAccessId).Append("\n");
            sb.Append("  SamlAccessId: ").Append(SamlAccessId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DefaultConfigPart);
        }

        /// <summary>
        /// Returns true if DefaultConfigPart instances are equal
        /// </summary>
        /// <param name="input">Instance of DefaultConfigPart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefaultConfigPart input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultProtectionKeyId == input.DefaultProtectionKeyId ||
                    this.DefaultProtectionKeyId.Equals(input.DefaultProtectionKeyId)
                ) && 
                (
                    this.DefaultSecretLocation == input.DefaultSecretLocation ||
                    (this.DefaultSecretLocation != null &&
                    this.DefaultSecretLocation.Equals(input.DefaultSecretLocation))
                ) && 
                (
                    this.OpenIdConnectAccessId == input.OpenIdConnectAccessId ||
                    (this.OpenIdConnectAccessId != null &&
                    this.OpenIdConnectAccessId.Equals(input.OpenIdConnectAccessId))
                ) && 
                (
                    this.SamlAccessId == input.SamlAccessId ||
                    (this.SamlAccessId != null &&
                    this.SamlAccessId.Equals(input.SamlAccessId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.DefaultProtectionKeyId.GetHashCode();
                if (this.DefaultSecretLocation != null)
                    hashCode = hashCode * 59 + this.DefaultSecretLocation.GetHashCode();
                if (this.OpenIdConnectAccessId != null)
                    hashCode = hashCode * 59 + this.OpenIdConnectAccessId.GetHashCode();
                if (this.SamlAccessId != null)
                    hashCode = hashCode * 59 + this.SamlAccessId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
