/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ChefTargetDetails
    /// </summary>
    [DataContract(Name = "ChefTargetDetails")]
    public partial class ChefTargetDetails : IEquatable<ChefTargetDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChefTargetDetails" /> class.
        /// </summary>
        /// <param name="chefServerHostName">chefServerHostName.</param>
        /// <param name="chefServerKey">chefServerKey.</param>
        /// <param name="chefServerPort">chefServerPort.</param>
        /// <param name="chefServerUrl">chefServerUrl.</param>
        /// <param name="chefServerUsername">chefServerUsername.</param>
        /// <param name="chefSkipSsl">chefSkipSsl.</param>
        public ChefTargetDetails(string chefServerHostName = default(string), string chefServerKey = default(string), string chefServerPort = default(string), string chefServerUrl = default(string), string chefServerUsername = default(string), bool chefSkipSsl = default(bool))
        {
            this.ChefServerHostName = chefServerHostName;
            this.ChefServerKey = chefServerKey;
            this.ChefServerPort = chefServerPort;
            this.ChefServerUrl = chefServerUrl;
            this.ChefServerUsername = chefServerUsername;
            this.ChefSkipSsl = chefSkipSsl;
        }

        /// <summary>
        /// Gets or Sets ChefServerHostName
        /// </summary>
        [DataMember(Name = "chef_server_host_name", EmitDefaultValue = false)]
        public string ChefServerHostName { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerKey
        /// </summary>
        [DataMember(Name = "chef_server_key", EmitDefaultValue = false)]
        public string ChefServerKey { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerPort
        /// </summary>
        [DataMember(Name = "chef_server_port", EmitDefaultValue = false)]
        public string ChefServerPort { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerUrl
        /// </summary>
        [DataMember(Name = "chef_server_url", EmitDefaultValue = false)]
        public string ChefServerUrl { get; set; }

        /// <summary>
        /// Gets or Sets ChefServerUsername
        /// </summary>
        [DataMember(Name = "chef_server_username", EmitDefaultValue = false)]
        public string ChefServerUsername { get; set; }

        /// <summary>
        /// Gets or Sets ChefSkipSsl
        /// </summary>
        [DataMember(Name = "chef_skip_ssl", EmitDefaultValue = true)]
        public bool ChefSkipSsl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChefTargetDetails {\n");
            sb.Append("  ChefServerHostName: ").Append(ChefServerHostName).Append("\n");
            sb.Append("  ChefServerKey: ").Append(ChefServerKey).Append("\n");
            sb.Append("  ChefServerPort: ").Append(ChefServerPort).Append("\n");
            sb.Append("  ChefServerUrl: ").Append(ChefServerUrl).Append("\n");
            sb.Append("  ChefServerUsername: ").Append(ChefServerUsername).Append("\n");
            sb.Append("  ChefSkipSsl: ").Append(ChefSkipSsl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChefTargetDetails);
        }

        /// <summary>
        /// Returns true if ChefTargetDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ChefTargetDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChefTargetDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChefServerHostName == input.ChefServerHostName ||
                    (this.ChefServerHostName != null &&
                    this.ChefServerHostName.Equals(input.ChefServerHostName))
                ) && 
                (
                    this.ChefServerKey == input.ChefServerKey ||
                    (this.ChefServerKey != null &&
                    this.ChefServerKey.Equals(input.ChefServerKey))
                ) && 
                (
                    this.ChefServerPort == input.ChefServerPort ||
                    (this.ChefServerPort != null &&
                    this.ChefServerPort.Equals(input.ChefServerPort))
                ) && 
                (
                    this.ChefServerUrl == input.ChefServerUrl ||
                    (this.ChefServerUrl != null &&
                    this.ChefServerUrl.Equals(input.ChefServerUrl))
                ) && 
                (
                    this.ChefServerUsername == input.ChefServerUsername ||
                    (this.ChefServerUsername != null &&
                    this.ChefServerUsername.Equals(input.ChefServerUsername))
                ) && 
                (
                    this.ChefSkipSsl == input.ChefSkipSsl ||
                    this.ChefSkipSsl.Equals(input.ChefSkipSsl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChefServerHostName != null)
                {
                    hashCode = (hashCode * 59) + this.ChefServerHostName.GetHashCode();
                }
                if (this.ChefServerKey != null)
                {
                    hashCode = (hashCode * 59) + this.ChefServerKey.GetHashCode();
                }
                if (this.ChefServerPort != null)
                {
                    hashCode = (hashCode * 59) + this.ChefServerPort.GetHashCode();
                }
                if (this.ChefServerUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ChefServerUrl.GetHashCode();
                }
                if (this.ChefServerUsername != null)
                {
                    hashCode = (hashCode * 59) + this.ChefServerUsername.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChefSkipSsl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
