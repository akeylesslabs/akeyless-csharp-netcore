/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// Connect is a command that performs secure remote access
    /// </summary>
    [DataContract(Name = "Connect")]
    public partial class Connect : IEquatable<Connect>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Connect" /> class.
        /// </summary>
        /// <param name="helper">helper.</param>
        /// <param name="rcFileOverride">used to override .akeyless-connect.rc in tests.</param>
        /// <param name="bastionCtrlPath">The Bastion API path.</param>
        /// <param name="bastionCtrlPort">The Bastion API Port (default to &quot;9900&quot;).</param>
        /// <param name="bastionCtrlProto">The Bastion API protocol (default to &quot;http&quot;).</param>
        /// <param name="bastionCtrlSubdomain">The Bastion API prefix.</param>
        /// <param name="certIssuerName">The Akeyless certificate issuer name.</param>
        /// <param name="identityFile">The file from which the identity (private key) for public key authentication is read.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">The Secret name (for database and AWS producers - producer name).</param>
        /// <param name="sshCommand">Path to SSH executable. e.g. /usr/bin/ssh.</param>
        /// <param name="sshExtraArgs">The Use to add offical SSH arguments (except -i).</param>
        /// <param name="sshLegacySigningAlg">Set this option to output legacy (&#39;ssh-rsa-cert-v01@openssh.com&#39;) signing algorithm name in the ssh certificate. (default to false).</param>
        /// <param name="target">The target.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="useSshAgent">Enable ssh-agent.</param>
        /// <param name="viaBastion">The jump box server.</param>
        public Connect(Object helper = default(Object), string rcFileOverride = default(string), string bastionCtrlPath = default(string), string bastionCtrlPort = "9900", string bastionCtrlProto = "http", string bastionCtrlSubdomain = default(string), string certIssuerName = default(string), string identityFile = default(string), bool json = false, string name = default(string), string sshCommand = default(string), string sshExtraArgs = default(string), bool sshLegacySigningAlg = false, string target = default(string), string token = default(string), string uidToken = default(string), bool useSshAgent = default(bool), string viaBastion = default(string))
        {
            this.Helper = helper;
            this.RcFileOverride = rcFileOverride;
            this.BastionCtrlPath = bastionCtrlPath;
            // use default value if no "bastionCtrlPort" provided
            this.BastionCtrlPort = bastionCtrlPort ?? "9900";
            // use default value if no "bastionCtrlProto" provided
            this.BastionCtrlProto = bastionCtrlProto ?? "http";
            this.BastionCtrlSubdomain = bastionCtrlSubdomain;
            this.CertIssuerName = certIssuerName;
            this.IdentityFile = identityFile;
            this.Json = json;
            this.Name = name;
            this.SshCommand = sshCommand;
            this.SshExtraArgs = sshExtraArgs;
            this.SshLegacySigningAlg = sshLegacySigningAlg;
            this.Target = target;
            this.Token = token;
            this.UidToken = uidToken;
            this.UseSshAgent = useSshAgent;
            this.ViaBastion = viaBastion;
        }

        /// <summary>
        /// Gets or Sets Helper
        /// </summary>
        [DataMember(Name = "Helper", EmitDefaultValue = false)]
        public Object Helper { get; set; }

        /// <summary>
        /// used to override .akeyless-connect.rc in tests
        /// </summary>
        /// <value>used to override .akeyless-connect.rc in tests</value>
        [DataMember(Name = "RcFileOverride", EmitDefaultValue = false)]
        public string RcFileOverride { get; set; }

        /// <summary>
        /// The Bastion API path
        /// </summary>
        /// <value>The Bastion API path</value>
        [DataMember(Name = "bastion-ctrl-path", EmitDefaultValue = false)]
        public string BastionCtrlPath { get; set; }

        /// <summary>
        /// The Bastion API Port
        /// </summary>
        /// <value>The Bastion API Port</value>
        [DataMember(Name = "bastion-ctrl-port", EmitDefaultValue = false)]
        public string BastionCtrlPort { get; set; }

        /// <summary>
        /// The Bastion API protocol
        /// </summary>
        /// <value>The Bastion API protocol</value>
        [DataMember(Name = "bastion-ctrl-proto", EmitDefaultValue = false)]
        public string BastionCtrlProto { get; set; }

        /// <summary>
        /// The Bastion API prefix
        /// </summary>
        /// <value>The Bastion API prefix</value>
        [DataMember(Name = "bastion-ctrl-subdomain", EmitDefaultValue = false)]
        public string BastionCtrlSubdomain { get; set; }

        /// <summary>
        /// The Akeyless certificate issuer name
        /// </summary>
        /// <value>The Akeyless certificate issuer name</value>
        [DataMember(Name = "cert-issuer-name", EmitDefaultValue = false)]
        public string CertIssuerName { get; set; }

        /// <summary>
        /// The file from which the identity (private key) for public key authentication is read
        /// </summary>
        /// <value>The file from which the identity (private key) for public key authentication is read</value>
        [DataMember(Name = "identity-file", EmitDefaultValue = false)]
        public string IdentityFile { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The Secret name (for database and AWS producers - producer name)
        /// </summary>
        /// <value>The Secret name (for database and AWS producers - producer name)</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Path to SSH executable. e.g. /usr/bin/ssh
        /// </summary>
        /// <value>Path to SSH executable. e.g. /usr/bin/ssh</value>
        [DataMember(Name = "ssh-command", EmitDefaultValue = false)]
        public string SshCommand { get; set; }

        /// <summary>
        /// The Use to add offical SSH arguments (except -i)
        /// </summary>
        /// <value>The Use to add offical SSH arguments (except -i)</value>
        [DataMember(Name = "ssh-extra-args", EmitDefaultValue = false)]
        public string SshExtraArgs { get; set; }

        /// <summary>
        /// Set this option to output legacy (&#39;ssh-rsa-cert-v01@openssh.com&#39;) signing algorithm name in the ssh certificate.
        /// </summary>
        /// <value>Set this option to output legacy (&#39;ssh-rsa-cert-v01@openssh.com&#39;) signing algorithm name in the ssh certificate.</value>
        [DataMember(Name = "ssh-legacy-signing-alg", EmitDefaultValue = true)]
        public bool SshLegacySigningAlg { get; set; }

        /// <summary>
        /// The target
        /// </summary>
        /// <value>The target</value>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public string Target { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Enable ssh-agent
        /// </summary>
        /// <value>Enable ssh-agent</value>
        [DataMember(Name = "use-ssh-agent", EmitDefaultValue = true)]
        public bool UseSshAgent { get; set; }

        /// <summary>
        /// The jump box server
        /// </summary>
        /// <value>The jump box server</value>
        [DataMember(Name = "via-bastion", EmitDefaultValue = false)]
        public string ViaBastion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Connect {\n");
            sb.Append("  Helper: ").Append(Helper).Append("\n");
            sb.Append("  RcFileOverride: ").Append(RcFileOverride).Append("\n");
            sb.Append("  BastionCtrlPath: ").Append(BastionCtrlPath).Append("\n");
            sb.Append("  BastionCtrlPort: ").Append(BastionCtrlPort).Append("\n");
            sb.Append("  BastionCtrlProto: ").Append(BastionCtrlProto).Append("\n");
            sb.Append("  BastionCtrlSubdomain: ").Append(BastionCtrlSubdomain).Append("\n");
            sb.Append("  CertIssuerName: ").Append(CertIssuerName).Append("\n");
            sb.Append("  IdentityFile: ").Append(IdentityFile).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SshCommand: ").Append(SshCommand).Append("\n");
            sb.Append("  SshExtraArgs: ").Append(SshExtraArgs).Append("\n");
            sb.Append("  SshLegacySigningAlg: ").Append(SshLegacySigningAlg).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UseSshAgent: ").Append(UseSshAgent).Append("\n");
            sb.Append("  ViaBastion: ").Append(ViaBastion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Connect);
        }

        /// <summary>
        /// Returns true if Connect instances are equal
        /// </summary>
        /// <param name="input">Instance of Connect to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Connect input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Helper == input.Helper ||
                    (this.Helper != null &&
                    this.Helper.Equals(input.Helper))
                ) && 
                (
                    this.RcFileOverride == input.RcFileOverride ||
                    (this.RcFileOverride != null &&
                    this.RcFileOverride.Equals(input.RcFileOverride))
                ) && 
                (
                    this.BastionCtrlPath == input.BastionCtrlPath ||
                    (this.BastionCtrlPath != null &&
                    this.BastionCtrlPath.Equals(input.BastionCtrlPath))
                ) && 
                (
                    this.BastionCtrlPort == input.BastionCtrlPort ||
                    (this.BastionCtrlPort != null &&
                    this.BastionCtrlPort.Equals(input.BastionCtrlPort))
                ) && 
                (
                    this.BastionCtrlProto == input.BastionCtrlProto ||
                    (this.BastionCtrlProto != null &&
                    this.BastionCtrlProto.Equals(input.BastionCtrlProto))
                ) && 
                (
                    this.BastionCtrlSubdomain == input.BastionCtrlSubdomain ||
                    (this.BastionCtrlSubdomain != null &&
                    this.BastionCtrlSubdomain.Equals(input.BastionCtrlSubdomain))
                ) && 
                (
                    this.CertIssuerName == input.CertIssuerName ||
                    (this.CertIssuerName != null &&
                    this.CertIssuerName.Equals(input.CertIssuerName))
                ) && 
                (
                    this.IdentityFile == input.IdentityFile ||
                    (this.IdentityFile != null &&
                    this.IdentityFile.Equals(input.IdentityFile))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SshCommand == input.SshCommand ||
                    (this.SshCommand != null &&
                    this.SshCommand.Equals(input.SshCommand))
                ) && 
                (
                    this.SshExtraArgs == input.SshExtraArgs ||
                    (this.SshExtraArgs != null &&
                    this.SshExtraArgs.Equals(input.SshExtraArgs))
                ) && 
                (
                    this.SshLegacySigningAlg == input.SshLegacySigningAlg ||
                    this.SshLegacySigningAlg.Equals(input.SshLegacySigningAlg)
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UseSshAgent == input.UseSshAgent ||
                    this.UseSshAgent.Equals(input.UseSshAgent)
                ) && 
                (
                    this.ViaBastion == input.ViaBastion ||
                    (this.ViaBastion != null &&
                    this.ViaBastion.Equals(input.ViaBastion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Helper != null)
                {
                    hashCode = (hashCode * 59) + this.Helper.GetHashCode();
                }
                if (this.RcFileOverride != null)
                {
                    hashCode = (hashCode * 59) + this.RcFileOverride.GetHashCode();
                }
                if (this.BastionCtrlPath != null)
                {
                    hashCode = (hashCode * 59) + this.BastionCtrlPath.GetHashCode();
                }
                if (this.BastionCtrlPort != null)
                {
                    hashCode = (hashCode * 59) + this.BastionCtrlPort.GetHashCode();
                }
                if (this.BastionCtrlProto != null)
                {
                    hashCode = (hashCode * 59) + this.BastionCtrlProto.GetHashCode();
                }
                if (this.BastionCtrlSubdomain != null)
                {
                    hashCode = (hashCode * 59) + this.BastionCtrlSubdomain.GetHashCode();
                }
                if (this.CertIssuerName != null)
                {
                    hashCode = (hashCode * 59) + this.CertIssuerName.GetHashCode();
                }
                if (this.IdentityFile != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityFile.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.SshCommand != null)
                {
                    hashCode = (hashCode * 59) + this.SshCommand.GetHashCode();
                }
                if (this.SshExtraArgs != null)
                {
                    hashCode = (hashCode * 59) + this.SshExtraArgs.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SshLegacySigningAlg.GetHashCode();
                if (this.Target != null)
                {
                    hashCode = (hashCode * 59) + this.Target.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseSshAgent.GetHashCode();
                if (this.ViaBastion != null)
                {
                    hashCode = (hashCode * 59) + this.ViaBastion.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
