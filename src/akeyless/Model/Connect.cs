/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// Connect is a command that performs secure remote access
    /// </summary>
    [DataContract(Name = "Connect")]
    public partial class Connect : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Connect" /> class.
        /// </summary>
        /// <param name="helper">helper.</param>
        /// <param name="rcFileOverride">used to override .akeyless-connect.rc in tests.</param>
        /// <param name="bastionCtrlPath">Deprecated. use bastion-ctrl-path.</param>
        /// <param name="bastionCtrlPort">Deprecated. use sra-ctrl-port.</param>
        /// <param name="bastionCtrlProto">Deprecated. use sra-ctrl-proto.</param>
        /// <param name="bastionCtrlSubdomain">Deprecated. use sra-ctrl-subdomain.</param>
        /// <param name="certIssuerName">The Akeyless certificate issuer name.</param>
        /// <param name="gatewayUrl">The Gateway URL (configuration management) address, e.g. http://localhost:8000.</param>
        /// <param name="identityFile">The file from which the identity (private key) for public key authentication is read.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="justification">justification.</param>
        /// <param name="name">The Secret name (for database and AWS producers - producer name).</param>
        /// <param name="sraCtrlPath">The Bastion API path.</param>
        /// <param name="sraCtrlPort">The Bastion API Port (default to &quot;9900&quot;).</param>
        /// <param name="sraCtrlProto">The SRA API protocol (default to &quot;http&quot;).</param>
        /// <param name="sraCtrlSubdomain">The SRA API prefix.</param>
        /// <param name="sshCommand">Path to SSH executable. e.g. /usr/bin/ssh.</param>
        /// <param name="sshExtraArgs">Additional SSH arguments (except -i).</param>
        /// <param name="sshLegacySigningAlg">Set this option to output legacy (&#39;ssh-rsa-cert-v01@openssh.com&#39;) signing algorithm name in the ssh certificate. (default to false).</param>
        /// <param name="target">The target.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="useSshAgent">Enable ssh-agent.</param>
        /// <param name="viaBastion">Deprecated. Use via-sra.</param>
        /// <param name="viaSra">The jump box server.</param>
        public Connect(Object helper = default(Object), string rcFileOverride = default(string), string bastionCtrlPath = default(string), string bastionCtrlPort = default(string), string bastionCtrlProto = default(string), string bastionCtrlSubdomain = default(string), string certIssuerName = default(string), string gatewayUrl = default(string), string identityFile = default(string), bool json = false, string justification = default(string), string name = default(string), string sraCtrlPath = default(string), string sraCtrlPort = @"9900", string sraCtrlProto = @"http", string sraCtrlSubdomain = default(string), string sshCommand = default(string), string sshExtraArgs = default(string), bool sshLegacySigningAlg = false, string target = default(string), string token = default(string), string uidToken = default(string), bool useSshAgent = default(bool), string viaBastion = default(string), string viaSra = default(string))
        {
            this.Helper = helper;
            this.RcFileOverride = rcFileOverride;
            this.BastionCtrlPath = bastionCtrlPath;
            this.BastionCtrlPort = bastionCtrlPort;
            this.BastionCtrlProto = bastionCtrlProto;
            this.BastionCtrlSubdomain = bastionCtrlSubdomain;
            this.CertIssuerName = certIssuerName;
            this.GatewayUrl = gatewayUrl;
            this.IdentityFile = identityFile;
            this.Json = json;
            this.Justification = justification;
            this.Name = name;
            this.SraCtrlPath = sraCtrlPath;
            // use default value if no "sraCtrlPort" provided
            this.SraCtrlPort = sraCtrlPort ?? @"9900";
            // use default value if no "sraCtrlProto" provided
            this.SraCtrlProto = sraCtrlProto ?? @"http";
            this.SraCtrlSubdomain = sraCtrlSubdomain;
            this.SshCommand = sshCommand;
            this.SshExtraArgs = sshExtraArgs;
            this.SshLegacySigningAlg = sshLegacySigningAlg;
            this.Target = target;
            this.Token = token;
            this.UidToken = uidToken;
            this.UseSshAgent = useSshAgent;
            this.ViaBastion = viaBastion;
            this.ViaSra = viaSra;
        }

        /// <summary>
        /// Gets or Sets Helper
        /// </summary>
        [DataMember(Name = "Helper", EmitDefaultValue = false)]
        public Object Helper { get; set; }

        /// <summary>
        /// used to override .akeyless-connect.rc in tests
        /// </summary>
        /// <value>used to override .akeyless-connect.rc in tests</value>
        [DataMember(Name = "RcFileOverride", EmitDefaultValue = false)]
        public string RcFileOverride { get; set; }

        /// <summary>
        /// Deprecated. use bastion-ctrl-path
        /// </summary>
        /// <value>Deprecated. use bastion-ctrl-path</value>
        [DataMember(Name = "bastion-ctrl-path", EmitDefaultValue = false)]
        public string BastionCtrlPath { get; set; }

        /// <summary>
        /// Deprecated. use sra-ctrl-port
        /// </summary>
        /// <value>Deprecated. use sra-ctrl-port</value>
        [DataMember(Name = "bastion-ctrl-port", EmitDefaultValue = false)]
        public string BastionCtrlPort { get; set; }

        /// <summary>
        /// Deprecated. use sra-ctrl-proto
        /// </summary>
        /// <value>Deprecated. use sra-ctrl-proto</value>
        [DataMember(Name = "bastion-ctrl-proto", EmitDefaultValue = false)]
        public string BastionCtrlProto { get; set; }

        /// <summary>
        /// Deprecated. use sra-ctrl-subdomain
        /// </summary>
        /// <value>Deprecated. use sra-ctrl-subdomain</value>
        [DataMember(Name = "bastion-ctrl-subdomain", EmitDefaultValue = false)]
        public string BastionCtrlSubdomain { get; set; }

        /// <summary>
        /// The Akeyless certificate issuer name
        /// </summary>
        /// <value>The Akeyless certificate issuer name</value>
        [DataMember(Name = "cert-issuer-name", EmitDefaultValue = false)]
        public string CertIssuerName { get; set; }

        /// <summary>
        /// The Gateway URL (configuration management) address, e.g. http://localhost:8000
        /// </summary>
        /// <value>The Gateway URL (configuration management) address, e.g. http://localhost:8000</value>
        [DataMember(Name = "gateway-url", EmitDefaultValue = false)]
        public string GatewayUrl { get; set; }

        /// <summary>
        /// The file from which the identity (private key) for public key authentication is read
        /// </summary>
        /// <value>The file from which the identity (private key) for public key authentication is read</value>
        [DataMember(Name = "identity-file", EmitDefaultValue = false)]
        public string IdentityFile { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Gets or Sets Justification
        /// </summary>
        [DataMember(Name = "justification", EmitDefaultValue = false)]
        public string Justification { get; set; }

        /// <summary>
        /// The Secret name (for database and AWS producers - producer name)
        /// </summary>
        /// <value>The Secret name (for database and AWS producers - producer name)</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The Bastion API path
        /// </summary>
        /// <value>The Bastion API path</value>
        [DataMember(Name = "sra-ctrl-path", EmitDefaultValue = false)]
        public string SraCtrlPath { get; set; }

        /// <summary>
        /// The Bastion API Port
        /// </summary>
        /// <value>The Bastion API Port</value>
        [DataMember(Name = "sra-ctrl-port", EmitDefaultValue = false)]
        public string SraCtrlPort { get; set; }

        /// <summary>
        /// The SRA API protocol
        /// </summary>
        /// <value>The SRA API protocol</value>
        [DataMember(Name = "sra-ctrl-proto", EmitDefaultValue = false)]
        public string SraCtrlProto { get; set; }

        /// <summary>
        /// The SRA API prefix
        /// </summary>
        /// <value>The SRA API prefix</value>
        [DataMember(Name = "sra-ctrl-subdomain", EmitDefaultValue = false)]
        public string SraCtrlSubdomain { get; set; }

        /// <summary>
        /// Path to SSH executable. e.g. /usr/bin/ssh
        /// </summary>
        /// <value>Path to SSH executable. e.g. /usr/bin/ssh</value>
        [DataMember(Name = "ssh-command", EmitDefaultValue = false)]
        public string SshCommand { get; set; }

        /// <summary>
        /// Additional SSH arguments (except -i)
        /// </summary>
        /// <value>Additional SSH arguments (except -i)</value>
        [DataMember(Name = "ssh-extra-args", EmitDefaultValue = false)]
        public string SshExtraArgs { get; set; }

        /// <summary>
        /// Set this option to output legacy (&#39;ssh-rsa-cert-v01@openssh.com&#39;) signing algorithm name in the ssh certificate.
        /// </summary>
        /// <value>Set this option to output legacy (&#39;ssh-rsa-cert-v01@openssh.com&#39;) signing algorithm name in the ssh certificate.</value>
        [DataMember(Name = "ssh-legacy-signing-alg", EmitDefaultValue = true)]
        public bool SshLegacySigningAlg { get; set; }

        /// <summary>
        /// The target
        /// </summary>
        /// <value>The target</value>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public string Target { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Enable ssh-agent
        /// </summary>
        /// <value>Enable ssh-agent</value>
        [DataMember(Name = "use-ssh-agent", EmitDefaultValue = true)]
        public bool UseSshAgent { get; set; }

        /// <summary>
        /// Deprecated. Use via-sra
        /// </summary>
        /// <value>Deprecated. Use via-sra</value>
        [DataMember(Name = "via-bastion", EmitDefaultValue = false)]
        public string ViaBastion { get; set; }

        /// <summary>
        /// The jump box server
        /// </summary>
        /// <value>The jump box server</value>
        [DataMember(Name = "via-sra", EmitDefaultValue = false)]
        public string ViaSra { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Connect {\n");
            sb.Append("  Helper: ").Append(Helper).Append("\n");
            sb.Append("  RcFileOverride: ").Append(RcFileOverride).Append("\n");
            sb.Append("  BastionCtrlPath: ").Append(BastionCtrlPath).Append("\n");
            sb.Append("  BastionCtrlPort: ").Append(BastionCtrlPort).Append("\n");
            sb.Append("  BastionCtrlProto: ").Append(BastionCtrlProto).Append("\n");
            sb.Append("  BastionCtrlSubdomain: ").Append(BastionCtrlSubdomain).Append("\n");
            sb.Append("  CertIssuerName: ").Append(CertIssuerName).Append("\n");
            sb.Append("  GatewayUrl: ").Append(GatewayUrl).Append("\n");
            sb.Append("  IdentityFile: ").Append(IdentityFile).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Justification: ").Append(Justification).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SraCtrlPath: ").Append(SraCtrlPath).Append("\n");
            sb.Append("  SraCtrlPort: ").Append(SraCtrlPort).Append("\n");
            sb.Append("  SraCtrlProto: ").Append(SraCtrlProto).Append("\n");
            sb.Append("  SraCtrlSubdomain: ").Append(SraCtrlSubdomain).Append("\n");
            sb.Append("  SshCommand: ").Append(SshCommand).Append("\n");
            sb.Append("  SshExtraArgs: ").Append(SshExtraArgs).Append("\n");
            sb.Append("  SshLegacySigningAlg: ").Append(SshLegacySigningAlg).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UseSshAgent: ").Append(UseSshAgent).Append("\n");
            sb.Append("  ViaBastion: ").Append(ViaBastion).Append("\n");
            sb.Append("  ViaSra: ").Append(ViaSra).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
