/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// TargetItemAssociation includes details of an association between a target and an item.
    /// </summary>
    [DataContract(Name = "TargetItemAssociation")]
    public partial class TargetItemAssociation : IEquatable<TargetItemAssociation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetItemAssociation" /> class.
        /// </summary>
        /// <param name="assocId">assocId.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="clusterId">clusterId.</param>
        /// <param name="itemName">itemName.</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="relationship">relationship.</param>
        public TargetItemAssociation(string assocId = default(string), Dictionary<string, string> attributes = default(Dictionary<string, string>), long clusterId = default(long), string itemName = default(string), string itemType = default(string), string relationship = default(string))
        {
            this.AssocId = assocId;
            this.Attributes = attributes;
            this.ClusterId = clusterId;
            this.ItemName = itemName;
            this.ItemType = itemType;
            this.Relationship = relationship;
        }

        /// <summary>
        /// Gets or Sets AssocId
        /// </summary>
        [DataMember(Name = "assoc_id", EmitDefaultValue = false)]
        public string AssocId { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public Dictionary<string, string> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets ClusterId
        /// </summary>
        [DataMember(Name = "cluster_id", EmitDefaultValue = false)]
        public long ClusterId { get; set; }

        /// <summary>
        /// Gets or Sets ItemName
        /// </summary>
        [DataMember(Name = "item_name", EmitDefaultValue = false)]
        public string ItemName { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "item_type", EmitDefaultValue = false)]
        public string ItemType { get; set; }

        /// <summary>
        /// Gets or Sets Relationship
        /// </summary>
        [DataMember(Name = "relationship", EmitDefaultValue = false)]
        public string Relationship { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TargetItemAssociation {\n");
            sb.Append("  AssocId: ").Append(AssocId).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TargetItemAssociation);
        }

        /// <summary>
        /// Returns true if TargetItemAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of TargetItemAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TargetItemAssociation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AssocId == input.AssocId ||
                    (this.AssocId != null &&
                    this.AssocId.Equals(input.AssocId))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.ClusterId == input.ClusterId ||
                    this.ClusterId.Equals(input.ClusterId)
                ) && 
                (
                    this.ItemName == input.ItemName ||
                    (this.ItemName != null &&
                    this.ItemName.Equals(input.ItemName))
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    (this.ItemType != null &&
                    this.ItemType.Equals(input.ItemType))
                ) && 
                (
                    this.Relationship == input.Relationship ||
                    (this.Relationship != null &&
                    this.Relationship.Equals(input.Relationship))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssocId != null)
                {
                    hashCode = (hashCode * 59) + this.AssocId.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClusterId.GetHashCode();
                if (this.ItemName != null)
                {
                    hashCode = (hashCode * 59) + this.ItemName.GetHashCode();
                }
                if (this.ItemType != null)
                {
                    hashCode = (hashCode * 59) + this.ItemType.GetHashCode();
                }
                if (this.Relationship != null)
                {
                    hashCode = (hashCode * 59) + this.Relationship.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
