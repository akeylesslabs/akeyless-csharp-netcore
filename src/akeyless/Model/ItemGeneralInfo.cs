/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ItemGeneralInfo
    /// </summary>
    [DataContract(Name = "ItemGeneralInfo")]
    public partial class ItemGeneralInfo : IEquatable<ItemGeneralInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemGeneralInfo" /> class.
        /// </summary>
        /// <param name="certIssueDetails">certIssueDetails.</param>
        /// <param name="classicKeyDetails">classicKeyDetails.</param>
        /// <param name="dynamicSecretProducerDetails">dynamicSecretProducerDetails.</param>
        /// <param name="rotatedSecretDetails">rotatedSecretDetails.</param>
        /// <param name="secureRemoteAccessDetails">secureRemoteAccessDetails.</param>
        public ItemGeneralInfo(CertificateIssueInfo certIssueDetails = default(CertificateIssueInfo), ClassicKeyDetailsInfo classicKeyDetails = default(ClassicKeyDetailsInfo), DynamicSecretProducerInfo dynamicSecretProducerDetails = default(DynamicSecretProducerInfo), RotatedSecretDetailsInfo rotatedSecretDetails = default(RotatedSecretDetailsInfo), SecureRemoteAccess secureRemoteAccessDetails = default(SecureRemoteAccess))
        {
            this.CertIssueDetails = certIssueDetails;
            this.ClassicKeyDetails = classicKeyDetails;
            this.DynamicSecretProducerDetails = dynamicSecretProducerDetails;
            this.RotatedSecretDetails = rotatedSecretDetails;
            this.SecureRemoteAccessDetails = secureRemoteAccessDetails;
        }

        /// <summary>
        /// Gets or Sets CertIssueDetails
        /// </summary>
        [DataMember(Name = "cert_issue_details", EmitDefaultValue = false)]
        public CertificateIssueInfo CertIssueDetails { get; set; }

        /// <summary>
        /// Gets or Sets ClassicKeyDetails
        /// </summary>
        [DataMember(Name = "classic_key_details", EmitDefaultValue = false)]
        public ClassicKeyDetailsInfo ClassicKeyDetails { get; set; }

        /// <summary>
        /// Gets or Sets DynamicSecretProducerDetails
        /// </summary>
        [DataMember(Name = "dynamic_secret_producer_details", EmitDefaultValue = false)]
        public DynamicSecretProducerInfo DynamicSecretProducerDetails { get; set; }

        /// <summary>
        /// Gets or Sets RotatedSecretDetails
        /// </summary>
        [DataMember(Name = "rotated_secret_details", EmitDefaultValue = false)]
        public RotatedSecretDetailsInfo RotatedSecretDetails { get; set; }

        /// <summary>
        /// Gets or Sets SecureRemoteAccessDetails
        /// </summary>
        [DataMember(Name = "secure_remote_access_details", EmitDefaultValue = false)]
        public SecureRemoteAccess SecureRemoteAccessDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemGeneralInfo {\n");
            sb.Append("  CertIssueDetails: ").Append(CertIssueDetails).Append("\n");
            sb.Append("  ClassicKeyDetails: ").Append(ClassicKeyDetails).Append("\n");
            sb.Append("  DynamicSecretProducerDetails: ").Append(DynamicSecretProducerDetails).Append("\n");
            sb.Append("  RotatedSecretDetails: ").Append(RotatedSecretDetails).Append("\n");
            sb.Append("  SecureRemoteAccessDetails: ").Append(SecureRemoteAccessDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemGeneralInfo);
        }

        /// <summary>
        /// Returns true if ItemGeneralInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemGeneralInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemGeneralInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CertIssueDetails == input.CertIssueDetails ||
                    (this.CertIssueDetails != null &&
                    this.CertIssueDetails.Equals(input.CertIssueDetails))
                ) && 
                (
                    this.ClassicKeyDetails == input.ClassicKeyDetails ||
                    (this.ClassicKeyDetails != null &&
                    this.ClassicKeyDetails.Equals(input.ClassicKeyDetails))
                ) && 
                (
                    this.DynamicSecretProducerDetails == input.DynamicSecretProducerDetails ||
                    (this.DynamicSecretProducerDetails != null &&
                    this.DynamicSecretProducerDetails.Equals(input.DynamicSecretProducerDetails))
                ) && 
                (
                    this.RotatedSecretDetails == input.RotatedSecretDetails ||
                    (this.RotatedSecretDetails != null &&
                    this.RotatedSecretDetails.Equals(input.RotatedSecretDetails))
                ) && 
                (
                    this.SecureRemoteAccessDetails == input.SecureRemoteAccessDetails ||
                    (this.SecureRemoteAccessDetails != null &&
                    this.SecureRemoteAccessDetails.Equals(input.SecureRemoteAccessDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertIssueDetails != null)
                    hashCode = hashCode * 59 + this.CertIssueDetails.GetHashCode();
                if (this.ClassicKeyDetails != null)
                    hashCode = hashCode * 59 + this.ClassicKeyDetails.GetHashCode();
                if (this.DynamicSecretProducerDetails != null)
                    hashCode = hashCode * 59 + this.DynamicSecretProducerDetails.GetHashCode();
                if (this.RotatedSecretDetails != null)
                    hashCode = hashCode * 59 + this.RotatedSecretDetails.GetHashCode();
                if (this.SecureRemoteAccessDetails != null)
                    hashCode = hashCode * 59 + this.SecureRemoteAccessDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
