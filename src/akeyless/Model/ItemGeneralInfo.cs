/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ItemGeneralInfo
    /// </summary>
    [DataContract(Name = "ItemGeneralInfo")]
    public partial class ItemGeneralInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemGeneralInfo" /> class.
        /// </summary>
        /// <param name="certIssueDetails">certIssueDetails.</param>
        /// <param name="certificateChainInfo">certificateChainInfo.</param>
        /// <param name="certificateFormat">certificateFormat.</param>
        /// <param name="certificatesTemplateInfo">certificatesTemplateInfo.</param>
        /// <param name="classicKeyDetails">classicKeyDetails.</param>
        /// <param name="clusterGwUrl">clusterGwUrl.</param>
        /// <param name="displayMetadata">displayMetadata.</param>
        /// <param name="dynamicSecretProducerDetails">dynamicSecretProducerDetails.</param>
        /// <param name="expirationEvents">expirationEvents.</param>
        /// <param name="importerInfo">importerInfo.</param>
        /// <param name="nextRotationEvents">nextRotationEvents.</param>
        /// <param name="oidcClientInfo">oidcClientInfo.</param>
        /// <param name="passwordPolicy">passwordPolicy.</param>
        /// <param name="rotatedSecretDetails">rotatedSecretDetails.</param>
        /// <param name="secureRemoteAccessDetails">secureRemoteAccessDetails.</param>
        /// <param name="staticSecretInfo">staticSecretInfo.</param>
        /// <param name="tokenizerInfo">tokenizerInfo.</param>
        public ItemGeneralInfo(CertificateIssueInfo certIssueDetails = default(CertificateIssueInfo), CertificateChainInfo certificateChainInfo = default(CertificateChainInfo), string certificateFormat = default(string), CertificateTemplateInfo certificatesTemplateInfo = default(CertificateTemplateInfo), ClassicKeyDetailsInfo classicKeyDetails = default(ClassicKeyDetailsInfo), string clusterGwUrl = default(string), string displayMetadata = default(string), DynamicSecretProducerInfo dynamicSecretProducerDetails = default(DynamicSecretProducerInfo), List<CertificateExpirationEvent> expirationEvents = default(List<CertificateExpirationEvent>), ImporterInfo importerInfo = default(ImporterInfo), List<NextAutoRotationEvent> nextRotationEvents = default(List<NextAutoRotationEvent>), OidcClientInfo oidcClientInfo = default(OidcClientInfo), PasswordPolicyInfo passwordPolicy = default(PasswordPolicyInfo), RotatedSecretDetailsInfo rotatedSecretDetails = default(RotatedSecretDetailsInfo), SecureRemoteAccess secureRemoteAccessDetails = default(SecureRemoteAccess), StaticSecretDetailsInfo staticSecretInfo = default(StaticSecretDetailsInfo), TokenizerInfo tokenizerInfo = default(TokenizerInfo))
        {
            this.CertIssueDetails = certIssueDetails;
            this.CertificateChainInfo = certificateChainInfo;
            this.CertificateFormat = certificateFormat;
            this.CertificatesTemplateInfo = certificatesTemplateInfo;
            this.ClassicKeyDetails = classicKeyDetails;
            this.ClusterGwUrl = clusterGwUrl;
            this.DisplayMetadata = displayMetadata;
            this.DynamicSecretProducerDetails = dynamicSecretProducerDetails;
            this.ExpirationEvents = expirationEvents;
            this.ImporterInfo = importerInfo;
            this.NextRotationEvents = nextRotationEvents;
            this.OidcClientInfo = oidcClientInfo;
            this.PasswordPolicy = passwordPolicy;
            this.RotatedSecretDetails = rotatedSecretDetails;
            this.SecureRemoteAccessDetails = secureRemoteAccessDetails;
            this.StaticSecretInfo = staticSecretInfo;
            this.TokenizerInfo = tokenizerInfo;
        }

        /// <summary>
        /// Gets or Sets CertIssueDetails
        /// </summary>
        [DataMember(Name = "cert_issue_details", EmitDefaultValue = false)]
        public CertificateIssueInfo CertIssueDetails { get; set; }

        /// <summary>
        /// Gets or Sets CertificateChainInfo
        /// </summary>
        [DataMember(Name = "certificate_chain_info", EmitDefaultValue = false)]
        public CertificateChainInfo CertificateChainInfo { get; set; }

        /// <summary>
        /// Gets or Sets CertificateFormat
        /// </summary>
        [DataMember(Name = "certificate_format", EmitDefaultValue = false)]
        public string CertificateFormat { get; set; }

        /// <summary>
        /// Gets or Sets CertificatesTemplateInfo
        /// </summary>
        [DataMember(Name = "certificates_template_info", EmitDefaultValue = false)]
        public CertificateTemplateInfo CertificatesTemplateInfo { get; set; }

        /// <summary>
        /// Gets or Sets ClassicKeyDetails
        /// </summary>
        [DataMember(Name = "classic_key_details", EmitDefaultValue = false)]
        public ClassicKeyDetailsInfo ClassicKeyDetails { get; set; }

        /// <summary>
        /// Gets or Sets ClusterGwUrl
        /// </summary>
        [DataMember(Name = "cluster_gw_url", EmitDefaultValue = false)]
        public string ClusterGwUrl { get; set; }

        /// <summary>
        /// Gets or Sets DisplayMetadata
        /// </summary>
        [DataMember(Name = "display_metadata", EmitDefaultValue = false)]
        public string DisplayMetadata { get; set; }

        /// <summary>
        /// Gets or Sets DynamicSecretProducerDetails
        /// </summary>
        [DataMember(Name = "dynamic_secret_producer_details", EmitDefaultValue = false)]
        public DynamicSecretProducerInfo DynamicSecretProducerDetails { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationEvents
        /// </summary>
        [DataMember(Name = "expiration_events", EmitDefaultValue = false)]
        public List<CertificateExpirationEvent> ExpirationEvents { get; set; }

        /// <summary>
        /// Gets or Sets ImporterInfo
        /// </summary>
        [DataMember(Name = "importer_info", EmitDefaultValue = false)]
        public ImporterInfo ImporterInfo { get; set; }

        /// <summary>
        /// Gets or Sets NextRotationEvents
        /// </summary>
        [DataMember(Name = "next_rotation_events", EmitDefaultValue = false)]
        public List<NextAutoRotationEvent> NextRotationEvents { get; set; }

        /// <summary>
        /// Gets or Sets OidcClientInfo
        /// </summary>
        [DataMember(Name = "oidc_client_info", EmitDefaultValue = false)]
        public OidcClientInfo OidcClientInfo { get; set; }

        /// <summary>
        /// Gets or Sets PasswordPolicy
        /// </summary>
        [DataMember(Name = "password_policy", EmitDefaultValue = false)]
        public PasswordPolicyInfo PasswordPolicy { get; set; }

        /// <summary>
        /// Gets or Sets RotatedSecretDetails
        /// </summary>
        [DataMember(Name = "rotated_secret_details", EmitDefaultValue = false)]
        public RotatedSecretDetailsInfo RotatedSecretDetails { get; set; }

        /// <summary>
        /// Gets or Sets SecureRemoteAccessDetails
        /// </summary>
        [DataMember(Name = "secure_remote_access_details", EmitDefaultValue = false)]
        public SecureRemoteAccess SecureRemoteAccessDetails { get; set; }

        /// <summary>
        /// Gets or Sets StaticSecretInfo
        /// </summary>
        [DataMember(Name = "static_secret_info", EmitDefaultValue = false)]
        public StaticSecretDetailsInfo StaticSecretInfo { get; set; }

        /// <summary>
        /// Gets or Sets TokenizerInfo
        /// </summary>
        [DataMember(Name = "tokenizer_info", EmitDefaultValue = false)]
        public TokenizerInfo TokenizerInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemGeneralInfo {\n");
            sb.Append("  CertIssueDetails: ").Append(CertIssueDetails).Append("\n");
            sb.Append("  CertificateChainInfo: ").Append(CertificateChainInfo).Append("\n");
            sb.Append("  CertificateFormat: ").Append(CertificateFormat).Append("\n");
            sb.Append("  CertificatesTemplateInfo: ").Append(CertificatesTemplateInfo).Append("\n");
            sb.Append("  ClassicKeyDetails: ").Append(ClassicKeyDetails).Append("\n");
            sb.Append("  ClusterGwUrl: ").Append(ClusterGwUrl).Append("\n");
            sb.Append("  DisplayMetadata: ").Append(DisplayMetadata).Append("\n");
            sb.Append("  DynamicSecretProducerDetails: ").Append(DynamicSecretProducerDetails).Append("\n");
            sb.Append("  ExpirationEvents: ").Append(ExpirationEvents).Append("\n");
            sb.Append("  ImporterInfo: ").Append(ImporterInfo).Append("\n");
            sb.Append("  NextRotationEvents: ").Append(NextRotationEvents).Append("\n");
            sb.Append("  OidcClientInfo: ").Append(OidcClientInfo).Append("\n");
            sb.Append("  PasswordPolicy: ").Append(PasswordPolicy).Append("\n");
            sb.Append("  RotatedSecretDetails: ").Append(RotatedSecretDetails).Append("\n");
            sb.Append("  SecureRemoteAccessDetails: ").Append(SecureRemoteAccessDetails).Append("\n");
            sb.Append("  StaticSecretInfo: ").Append(StaticSecretInfo).Append("\n");
            sb.Append("  TokenizerInfo: ").Append(TokenizerInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
