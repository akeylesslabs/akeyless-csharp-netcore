/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayUpdateLogForwardingDatadog is a command that updates log forwarding config (datadog target)
    /// </summary>
    [DataContract(Name = "gatewayUpdateLogForwardingDatadog")]
    public partial class GatewayUpdateLogForwardingDatadog : IEquatable<GatewayUpdateLogForwardingDatadog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateLogForwardingDatadog" /> class.
        /// </summary>
        /// <param name="apiKey">Datadog api key.</param>
        /// <param name="enable">Enable Log Forwarding [true/false] (default to &quot;true&quot;).</param>
        /// <param name="host">Datadog host.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="logService">Datadog log service (default to &quot;use-existing&quot;).</param>
        /// <param name="logSource">Datadog log source (default to &quot;use-existing&quot;).</param>
        /// <param name="logTags">A comma-separated list of Datadog log tags formatted as \&quot;key:value\&quot; strings (default to &quot;use-existing&quot;).</param>
        /// <param name="outputFormat">Logs format [text/json] (default to &quot;text&quot;).</param>
        /// <param name="pullInterval">Pull interval in seconds (default to &quot;10&quot;).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GatewayUpdateLogForwardingDatadog(string apiKey = default(string), string enable = "true", string host = default(string), bool json = false, string logService = "use-existing", string logSource = "use-existing", string logTags = "use-existing", string outputFormat = "text", string pullInterval = "10", string token = default(string), string uidToken = default(string))
        {
            this.ApiKey = apiKey;
            // use default value if no "enable" provided
            this.Enable = enable ?? "true";
            this.Host = host;
            this.Json = json;
            // use default value if no "logService" provided
            this.LogService = logService ?? "use-existing";
            // use default value if no "logSource" provided
            this.LogSource = logSource ?? "use-existing";
            // use default value if no "logTags" provided
            this.LogTags = logTags ?? "use-existing";
            // use default value if no "outputFormat" provided
            this.OutputFormat = outputFormat ?? "text";
            // use default value if no "pullInterval" provided
            this.PullInterval = pullInterval ?? "10";
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Datadog api key
        /// </summary>
        /// <value>Datadog api key</value>
        [DataMember(Name = "api-key", EmitDefaultValue = false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Enable Log Forwarding [true/false]
        /// </summary>
        /// <value>Enable Log Forwarding [true/false]</value>
        [DataMember(Name = "enable", EmitDefaultValue = false)]
        public string Enable { get; set; }

        /// <summary>
        /// Datadog host
        /// </summary>
        /// <value>Datadog host</value>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Datadog log service
        /// </summary>
        /// <value>Datadog log service</value>
        [DataMember(Name = "log-service", EmitDefaultValue = false)]
        public string LogService { get; set; }

        /// <summary>
        /// Datadog log source
        /// </summary>
        /// <value>Datadog log source</value>
        [DataMember(Name = "log-source", EmitDefaultValue = false)]
        public string LogSource { get; set; }

        /// <summary>
        /// A comma-separated list of Datadog log tags formatted as \&quot;key:value\&quot; strings
        /// </summary>
        /// <value>A comma-separated list of Datadog log tags formatted as \&quot;key:value\&quot; strings</value>
        [DataMember(Name = "log-tags", EmitDefaultValue = false)]
        public string LogTags { get; set; }

        /// <summary>
        /// Logs format [text/json]
        /// </summary>
        /// <value>Logs format [text/json]</value>
        [DataMember(Name = "output-format", EmitDefaultValue = false)]
        public string OutputFormat { get; set; }

        /// <summary>
        /// Pull interval in seconds
        /// </summary>
        /// <value>Pull interval in seconds</value>
        [DataMember(Name = "pull-interval", EmitDefaultValue = false)]
        public string PullInterval { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayUpdateLogForwardingDatadog {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  LogService: ").Append(LogService).Append("\n");
            sb.Append("  LogSource: ").Append(LogSource).Append("\n");
            sb.Append("  LogTags: ").Append(LogTags).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  PullInterval: ").Append(PullInterval).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayUpdateLogForwardingDatadog);
        }

        /// <summary>
        /// Returns true if GatewayUpdateLogForwardingDatadog instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayUpdateLogForwardingDatadog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayUpdateLogForwardingDatadog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.Enable == input.Enable ||
                    (this.Enable != null &&
                    this.Enable.Equals(input.Enable))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.LogService == input.LogService ||
                    (this.LogService != null &&
                    this.LogService.Equals(input.LogService))
                ) && 
                (
                    this.LogSource == input.LogSource ||
                    (this.LogSource != null &&
                    this.LogSource.Equals(input.LogSource))
                ) && 
                (
                    this.LogTags == input.LogTags ||
                    (this.LogTags != null &&
                    this.LogTags.Equals(input.LogTags))
                ) && 
                (
                    this.OutputFormat == input.OutputFormat ||
                    (this.OutputFormat != null &&
                    this.OutputFormat.Equals(input.OutputFormat))
                ) && 
                (
                    this.PullInterval == input.PullInterval ||
                    (this.PullInterval != null &&
                    this.PullInterval.Equals(input.PullInterval))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.ApiKey.GetHashCode();
                }
                if (this.Enable != null)
                {
                    hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                }
                if (this.Host != null)
                {
                    hashCode = (hashCode * 59) + this.Host.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.LogService != null)
                {
                    hashCode = (hashCode * 59) + this.LogService.GetHashCode();
                }
                if (this.LogSource != null)
                {
                    hashCode = (hashCode * 59) + this.LogSource.GetHashCode();
                }
                if (this.LogTags != null)
                {
                    hashCode = (hashCode * 59) + this.LogTags.GetHashCode();
                }
                if (this.OutputFormat != null)
                {
                    hashCode = (hashCode * 59) + this.OutputFormat.GetHashCode();
                }
                if (this.PullInterval != null)
                {
                    hashCode = (hashCode * 59) + this.PullInterval.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
