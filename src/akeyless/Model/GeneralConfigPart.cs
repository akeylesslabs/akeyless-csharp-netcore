/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GeneralConfigPart
    /// </summary>
    [DataContract(Name = "GeneralConfigPart")]
    public partial class GeneralConfigPart : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralConfigPart" /> class.
        /// </summary>
        /// <param name="akeylessUrl">AkeylessUrl is here for BC only. Gator will still return it if it exists in the configuration, but new clients (&gt;&#x3D;2.34.0) will ignore it and override it with what exists in their local file. It will no longer be sent to Gator for update, so new clusters will only have the default value saved in the DB..</param>
        /// <param name="apiTokenTtl">apiTokenTtl.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="enableSniProxy">enableSniProxy.</param>
        /// <param name="enableTls">enableTls.</param>
        /// <param name="enableTlsConfigure">enableTlsConfigure.</param>
        /// <param name="enableTlsCurl">enableTlsCurl.</param>
        /// <param name="enableTlsHvp">enableTlsHvp.</param>
        /// <param name="gwClusterUrl">gwClusterUrl.</param>
        /// <param name="hvpRouteVersion">hvpRouteVersion.</param>
        /// <param name="notifyOnStatusChange">notifyOnStatusChange.</param>
        /// <param name="tcpPort">tcpPort.</param>
        /// <param name="tlsCert">tlsCert.</param>
        /// <param name="tlsKey">tlsKey.</param>
        public GeneralConfigPart(string akeylessUrl = default(string), string apiTokenTtl = default(string), string displayName = default(string), bool enableSniProxy = default(bool), bool enableTls = default(bool), bool enableTlsConfigure = default(bool), bool enableTlsCurl = default(bool), bool enableTlsHvp = default(bool), string gwClusterUrl = default(string), long hvpRouteVersion = default(long), bool notifyOnStatusChange = default(bool), string tcpPort = default(string), string tlsCert = default(string), string tlsKey = default(string))
        {
            this.AkeylessUrl = akeylessUrl;
            this.ApiTokenTtl = apiTokenTtl;
            this.DisplayName = displayName;
            this.EnableSniProxy = enableSniProxy;
            this.EnableTls = enableTls;
            this.EnableTlsConfigure = enableTlsConfigure;
            this.EnableTlsCurl = enableTlsCurl;
            this.EnableTlsHvp = enableTlsHvp;
            this.GwClusterUrl = gwClusterUrl;
            this.HvpRouteVersion = hvpRouteVersion;
            this.NotifyOnStatusChange = notifyOnStatusChange;
            this.TcpPort = tcpPort;
            this.TlsCert = tlsCert;
            this.TlsKey = tlsKey;
        }

        /// <summary>
        /// AkeylessUrl is here for BC only. Gator will still return it if it exists in the configuration, but new clients (&gt;&#x3D;2.34.0) will ignore it and override it with what exists in their local file. It will no longer be sent to Gator for update, so new clusters will only have the default value saved in the DB.
        /// </summary>
        /// <value>AkeylessUrl is here for BC only. Gator will still return it if it exists in the configuration, but new clients (&gt;&#x3D;2.34.0) will ignore it and override it with what exists in their local file. It will no longer be sent to Gator for update, so new clusters will only have the default value saved in the DB.</value>
        [DataMember(Name = "akeyless_url", EmitDefaultValue = false)]
        public string AkeylessUrl { get; set; }

        /// <summary>
        /// Gets or Sets ApiTokenTtl
        /// </summary>
        [DataMember(Name = "api_token_ttl", EmitDefaultValue = false)]
        public string ApiTokenTtl { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets EnableSniProxy
        /// </summary>
        [DataMember(Name = "enable_sni_proxy", EmitDefaultValue = true)]
        public bool EnableSniProxy { get; set; }

        /// <summary>
        /// Gets or Sets EnableTls
        /// </summary>
        [DataMember(Name = "enable_tls", EmitDefaultValue = true)]
        public bool EnableTls { get; set; }

        /// <summary>
        /// Gets or Sets EnableTlsConfigure
        /// </summary>
        [DataMember(Name = "enable_tls_configure", EmitDefaultValue = true)]
        public bool EnableTlsConfigure { get; set; }

        /// <summary>
        /// Gets or Sets EnableTlsCurl
        /// </summary>
        [DataMember(Name = "enable_tls_curl", EmitDefaultValue = true)]
        public bool EnableTlsCurl { get; set; }

        /// <summary>
        /// Gets or Sets EnableTlsHvp
        /// </summary>
        [DataMember(Name = "enable_tls_hvp", EmitDefaultValue = true)]
        public bool EnableTlsHvp { get; set; }

        /// <summary>
        /// Gets or Sets GwClusterUrl
        /// </summary>
        [DataMember(Name = "gw_cluster_url", EmitDefaultValue = false)]
        public string GwClusterUrl { get; set; }

        /// <summary>
        /// Gets or Sets HvpRouteVersion
        /// </summary>
        [DataMember(Name = "hvp_route_version", EmitDefaultValue = false)]
        public long HvpRouteVersion { get; set; }

        /// <summary>
        /// Gets or Sets NotifyOnStatusChange
        /// </summary>
        [DataMember(Name = "notify_on_status_change", EmitDefaultValue = true)]
        public bool NotifyOnStatusChange { get; set; }

        /// <summary>
        /// Gets or Sets TcpPort
        /// </summary>
        [DataMember(Name = "tcp_port", EmitDefaultValue = false)]
        public string TcpPort { get; set; }

        /// <summary>
        /// Gets or Sets TlsCert
        /// </summary>
        [DataMember(Name = "tls_cert", EmitDefaultValue = false)]
        public string TlsCert { get; set; }

        /// <summary>
        /// Gets or Sets TlsKey
        /// </summary>
        [DataMember(Name = "tls_key", EmitDefaultValue = false)]
        public string TlsKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeneralConfigPart {\n");
            sb.Append("  AkeylessUrl: ").Append(AkeylessUrl).Append("\n");
            sb.Append("  ApiTokenTtl: ").Append(ApiTokenTtl).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EnableSniProxy: ").Append(EnableSniProxy).Append("\n");
            sb.Append("  EnableTls: ").Append(EnableTls).Append("\n");
            sb.Append("  EnableTlsConfigure: ").Append(EnableTlsConfigure).Append("\n");
            sb.Append("  EnableTlsCurl: ").Append(EnableTlsCurl).Append("\n");
            sb.Append("  EnableTlsHvp: ").Append(EnableTlsHvp).Append("\n");
            sb.Append("  GwClusterUrl: ").Append(GwClusterUrl).Append("\n");
            sb.Append("  HvpRouteVersion: ").Append(HvpRouteVersion).Append("\n");
            sb.Append("  NotifyOnStatusChange: ").Append(NotifyOnStatusChange).Append("\n");
            sb.Append("  TcpPort: ").Append(TcpPort).Append("\n");
            sb.Append("  TlsCert: ").Append(TlsCert).Append("\n");
            sb.Append("  TlsKey: ").Append(TlsKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
