/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GeneralConfigPart
    /// </summary>
    [DataContract]
    public partial class GeneralConfigPart :  IEquatable<GeneralConfigPart>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralConfigPart" /> class.
        /// </summary>
        /// <param name="akeylessUrl">akeylessUrl.</param>
        /// <param name="apiTokenTtl">apiTokenTtl.</param>
        /// <param name="enableTls">enableTls.</param>
        /// <param name="enableTlsConfigure">enableTlsConfigure.</param>
        /// <param name="enableTlsCurl">enableTlsCurl.</param>
        /// <param name="enableTlsHvp">enableTlsHvp.</param>
        /// <param name="gwClusterUrl">gwClusterUrl.</param>
        /// <param name="tcpPort">tcpPort.</param>
        /// <param name="tlsCert">tlsCert.</param>
        /// <param name="tlsKey">tlsKey.</param>
        public GeneralConfigPart(string akeylessUrl = default(string), string apiTokenTtl = default(string), bool enableTls = default(bool), bool enableTlsConfigure = default(bool), bool enableTlsCurl = default(bool), bool enableTlsHvp = default(bool), string gwClusterUrl = default(string), string tcpPort = default(string), string tlsCert = default(string), string tlsKey = default(string))
        {
            this.AkeylessUrl = akeylessUrl;
            this.ApiTokenTtl = apiTokenTtl;
            this.EnableTls = enableTls;
            this.EnableTlsConfigure = enableTlsConfigure;
            this.EnableTlsCurl = enableTlsCurl;
            this.EnableTlsHvp = enableTlsHvp;
            this.GwClusterUrl = gwClusterUrl;
            this.TcpPort = tcpPort;
            this.TlsCert = tlsCert;
            this.TlsKey = tlsKey;
        }
        
        /// <summary>
        /// Gets or Sets AkeylessUrl
        /// </summary>
        [DataMember(Name="akeyless_url", EmitDefaultValue=false)]
        public string AkeylessUrl { get; set; }

        /// <summary>
        /// Gets or Sets ApiTokenTtl
        /// </summary>
        [DataMember(Name="api_token_ttl", EmitDefaultValue=false)]
        public string ApiTokenTtl { get; set; }

        /// <summary>
        /// Gets or Sets EnableTls
        /// </summary>
        [DataMember(Name="enable_tls", EmitDefaultValue=false)]
        public bool EnableTls { get; set; }

        /// <summary>
        /// Gets or Sets EnableTlsConfigure
        /// </summary>
        [DataMember(Name="enable_tls_configure", EmitDefaultValue=false)]
        public bool EnableTlsConfigure { get; set; }

        /// <summary>
        /// Gets or Sets EnableTlsCurl
        /// </summary>
        [DataMember(Name="enable_tls_curl", EmitDefaultValue=false)]
        public bool EnableTlsCurl { get; set; }

        /// <summary>
        /// Gets or Sets EnableTlsHvp
        /// </summary>
        [DataMember(Name="enable_tls_hvp", EmitDefaultValue=false)]
        public bool EnableTlsHvp { get; set; }

        /// <summary>
        /// Gets or Sets GwClusterUrl
        /// </summary>
        [DataMember(Name="gw_cluster_url", EmitDefaultValue=false)]
        public string GwClusterUrl { get; set; }

        /// <summary>
        /// Gets or Sets TcpPort
        /// </summary>
        [DataMember(Name="tcp_port", EmitDefaultValue=false)]
        public string TcpPort { get; set; }

        /// <summary>
        /// Gets or Sets TlsCert
        /// </summary>
        [DataMember(Name="tls_cert", EmitDefaultValue=false)]
        public string TlsCert { get; set; }

        /// <summary>
        /// Gets or Sets TlsKey
        /// </summary>
        [DataMember(Name="tls_key", EmitDefaultValue=false)]
        public string TlsKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeneralConfigPart {\n");
            sb.Append("  AkeylessUrl: ").Append(AkeylessUrl).Append("\n");
            sb.Append("  ApiTokenTtl: ").Append(ApiTokenTtl).Append("\n");
            sb.Append("  EnableTls: ").Append(EnableTls).Append("\n");
            sb.Append("  EnableTlsConfigure: ").Append(EnableTlsConfigure).Append("\n");
            sb.Append("  EnableTlsCurl: ").Append(EnableTlsCurl).Append("\n");
            sb.Append("  EnableTlsHvp: ").Append(EnableTlsHvp).Append("\n");
            sb.Append("  GwClusterUrl: ").Append(GwClusterUrl).Append("\n");
            sb.Append("  TcpPort: ").Append(TcpPort).Append("\n");
            sb.Append("  TlsCert: ").Append(TlsCert).Append("\n");
            sb.Append("  TlsKey: ").Append(TlsKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeneralConfigPart);
        }

        /// <summary>
        /// Returns true if GeneralConfigPart instances are equal
        /// </summary>
        /// <param name="input">Instance of GeneralConfigPart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeneralConfigPart input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AkeylessUrl == input.AkeylessUrl ||
                    (this.AkeylessUrl != null &&
                    this.AkeylessUrl.Equals(input.AkeylessUrl))
                ) && 
                (
                    this.ApiTokenTtl == input.ApiTokenTtl ||
                    (this.ApiTokenTtl != null &&
                    this.ApiTokenTtl.Equals(input.ApiTokenTtl))
                ) && 
                (
                    this.EnableTls == input.EnableTls ||
                    this.EnableTls.Equals(input.EnableTls)
                ) && 
                (
                    this.EnableTlsConfigure == input.EnableTlsConfigure ||
                    this.EnableTlsConfigure.Equals(input.EnableTlsConfigure)
                ) && 
                (
                    this.EnableTlsCurl == input.EnableTlsCurl ||
                    this.EnableTlsCurl.Equals(input.EnableTlsCurl)
                ) && 
                (
                    this.EnableTlsHvp == input.EnableTlsHvp ||
                    this.EnableTlsHvp.Equals(input.EnableTlsHvp)
                ) && 
                (
                    this.GwClusterUrl == input.GwClusterUrl ||
                    (this.GwClusterUrl != null &&
                    this.GwClusterUrl.Equals(input.GwClusterUrl))
                ) && 
                (
                    this.TcpPort == input.TcpPort ||
                    (this.TcpPort != null &&
                    this.TcpPort.Equals(input.TcpPort))
                ) && 
                (
                    this.TlsCert == input.TlsCert ||
                    (this.TlsCert != null &&
                    this.TlsCert.Equals(input.TlsCert))
                ) && 
                (
                    this.TlsKey == input.TlsKey ||
                    (this.TlsKey != null &&
                    this.TlsKey.Equals(input.TlsKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AkeylessUrl != null)
                    hashCode = hashCode * 59 + this.AkeylessUrl.GetHashCode();
                if (this.ApiTokenTtl != null)
                    hashCode = hashCode * 59 + this.ApiTokenTtl.GetHashCode();
                hashCode = hashCode * 59 + this.EnableTls.GetHashCode();
                hashCode = hashCode * 59 + this.EnableTlsConfigure.GetHashCode();
                hashCode = hashCode * 59 + this.EnableTlsCurl.GetHashCode();
                hashCode = hashCode * 59 + this.EnableTlsHvp.GetHashCode();
                if (this.GwClusterUrl != null)
                    hashCode = hashCode * 59 + this.GwClusterUrl.GetHashCode();
                if (this.TcpPort != null)
                    hashCode = hashCode * 59 + this.TcpPort.GetHashCode();
                if (this.TlsCert != null)
                    hashCode = hashCode * 59 + this.TlsCert.GetHashCode();
                if (this.TlsKey != null)
                    hashCode = hashCode * 59 + this.TlsKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
