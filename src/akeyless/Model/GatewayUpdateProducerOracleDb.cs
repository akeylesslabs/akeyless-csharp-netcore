/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayUpdateProducerOracleDb is a command that updates oracle db producer
    /// </summary>
    [DataContract(Name = "gatewayUpdateProducerOracleDb")]
    public partial class GatewayUpdateProducerOracleDb : IEquatable<GatewayUpdateProducerOracleDb>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateProducerOracleDb" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayUpdateProducerOracleDb() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateProducerOracleDb" /> class.
        /// </summary>
        /// <param name="dbServerCertificates">(Optional) DB server certificates.</param>
        /// <param name="dbServerName">(Optional) Server name for certificate verification.</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this item [true/false].</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Producer name (required).</param>
        /// <param name="newName">Producer name.</param>
        /// <param name="oracleHost">Oracle Host (default to &quot;127.0.0.1&quot;).</param>
        /// <param name="oraclePassword">Oracle Password.</param>
        /// <param name="oraclePort">Oracle Port (default to &quot;1521&quot;).</param>
        /// <param name="oracleScreationStatements">Oracle Creation statements.</param>
        /// <param name="oracleServiceName">Oracle DB Name.</param>
        /// <param name="oracleUsername">Oracle Username.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="secureAccessBastionIssuer">Path to the SSH Certificate Issuer for your Akeyless Bastion.</param>
        /// <param name="secureAccessEnable">Enable/Disable secure remote access [true/false] (default to &quot;false&quot;).</param>
        /// <param name="secureAccessHost">Target DB servers for connections.</param>
        /// <param name="secureAccessWeb">Enable Web Secure Remote Access (default to false).</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public GatewayUpdateProducerOracleDb(string dbServerCertificates = default(string), string dbServerName = default(string), string deleteProtection = default(string), bool json = false, string name = default(string), string newName = default(string), string oracleHost = "127.0.0.1", string oraclePassword = default(string), string oraclePort = "1521", string oracleScreationStatements = default(string), string oracleServiceName = default(string), string oracleUsername = default(string), string producerEncryptionKeyName = default(string), string secureAccessBastionIssuer = default(string), string secureAccessEnable = "false", List<string> secureAccessHost = default(List<string>), bool secureAccessWeb = false, List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userTtl = "60m")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayUpdateProducerOracleDb and cannot be null");
            }
            this.Name = name;
            this.DbServerCertificates = dbServerCertificates;
            this.DbServerName = dbServerName;
            this.DeleteProtection = deleteProtection;
            this.Json = json;
            this.NewName = newName;
            // use default value if no "oracleHost" provided
            this.OracleHost = oracleHost ?? "127.0.0.1";
            this.OraclePassword = oraclePassword;
            // use default value if no "oraclePort" provided
            this.OraclePort = oraclePort ?? "1521";
            this.OracleScreationStatements = oracleScreationStatements;
            this.OracleServiceName = oracleServiceName;
            this.OracleUsername = oracleUsername;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.SecureAccessBastionIssuer = secureAccessBastionIssuer;
            // use default value if no "secureAccessEnable" provided
            this.SecureAccessEnable = secureAccessEnable ?? "false";
            this.SecureAccessHost = secureAccessHost;
            this.SecureAccessWeb = secureAccessWeb;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "60m";
        }

        /// <summary>
        /// (Optional) DB server certificates
        /// </summary>
        /// <value>(Optional) DB server certificates</value>
        [DataMember(Name = "db-server-certificates", EmitDefaultValue = false)]
        public string DbServerCertificates { get; set; }

        /// <summary>
        /// (Optional) Server name for certificate verification
        /// </summary>
        /// <value>(Optional) Server name for certificate verification</value>
        [DataMember(Name = "db-server-name", EmitDefaultValue = false)]
        public string DbServerName { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this item [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this item [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Producer name
        /// </summary>
        /// <value>Producer name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Producer name
        /// </summary>
        /// <value>Producer name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Oracle Host
        /// </summary>
        /// <value>Oracle Host</value>
        [DataMember(Name = "oracle-host", EmitDefaultValue = false)]
        public string OracleHost { get; set; }

        /// <summary>
        /// Oracle Password
        /// </summary>
        /// <value>Oracle Password</value>
        [DataMember(Name = "oracle-password", EmitDefaultValue = false)]
        public string OraclePassword { get; set; }

        /// <summary>
        /// Oracle Port
        /// </summary>
        /// <value>Oracle Port</value>
        [DataMember(Name = "oracle-port", EmitDefaultValue = false)]
        public string OraclePort { get; set; }

        /// <summary>
        /// Oracle Creation statements
        /// </summary>
        /// <value>Oracle Creation statements</value>
        [DataMember(Name = "oracle-screation-statements", EmitDefaultValue = false)]
        public string OracleScreationStatements { get; set; }

        /// <summary>
        /// Oracle DB Name
        /// </summary>
        /// <value>Oracle DB Name</value>
        [DataMember(Name = "oracle-service-name", EmitDefaultValue = false)]
        public string OracleServiceName { get; set; }

        /// <summary>
        /// Oracle Username
        /// </summary>
        /// <value>Oracle Username</value>
        [DataMember(Name = "oracle-username", EmitDefaultValue = false)]
        public string OracleUsername { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Path to the SSH Certificate Issuer for your Akeyless Bastion
        /// </summary>
        /// <value>Path to the SSH Certificate Issuer for your Akeyless Bastion</value>
        [DataMember(Name = "secure-access-bastion-issuer", EmitDefaultValue = false)]
        public string SecureAccessBastionIssuer { get; set; }

        /// <summary>
        /// Enable/Disable secure remote access [true/false]
        /// </summary>
        /// <value>Enable/Disable secure remote access [true/false]</value>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Target DB servers for connections
        /// </summary>
        /// <value>Target DB servers for connections</value>
        [DataMember(Name = "secure-access-host", EmitDefaultValue = false)]
        public List<string> SecureAccessHost { get; set; }

        /// <summary>
        /// Enable Web Secure Remote Access
        /// </summary>
        /// <value>Enable Web Secure Remote Access</value>
        [DataMember(Name = "secure-access-web", EmitDefaultValue = true)]
        public bool SecureAccessWeb { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayUpdateProducerOracleDb {\n");
            sb.Append("  DbServerCertificates: ").Append(DbServerCertificates).Append("\n");
            sb.Append("  DbServerName: ").Append(DbServerName).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  OracleHost: ").Append(OracleHost).Append("\n");
            sb.Append("  OraclePassword: ").Append(OraclePassword).Append("\n");
            sb.Append("  OraclePort: ").Append(OraclePort).Append("\n");
            sb.Append("  OracleScreationStatements: ").Append(OracleScreationStatements).Append("\n");
            sb.Append("  OracleServiceName: ").Append(OracleServiceName).Append("\n");
            sb.Append("  OracleUsername: ").Append(OracleUsername).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  SecureAccessBastionIssuer: ").Append(SecureAccessBastionIssuer).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessHost: ").Append(SecureAccessHost).Append("\n");
            sb.Append("  SecureAccessWeb: ").Append(SecureAccessWeb).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayUpdateProducerOracleDb);
        }

        /// <summary>
        /// Returns true if GatewayUpdateProducerOracleDb instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayUpdateProducerOracleDb to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayUpdateProducerOracleDb input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DbServerCertificates == input.DbServerCertificates ||
                    (this.DbServerCertificates != null &&
                    this.DbServerCertificates.Equals(input.DbServerCertificates))
                ) && 
                (
                    this.DbServerName == input.DbServerName ||
                    (this.DbServerName != null &&
                    this.DbServerName.Equals(input.DbServerName))
                ) && 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    (this.DeleteProtection != null &&
                    this.DeleteProtection.Equals(input.DeleteProtection))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                ) && 
                (
                    this.OracleHost == input.OracleHost ||
                    (this.OracleHost != null &&
                    this.OracleHost.Equals(input.OracleHost))
                ) && 
                (
                    this.OraclePassword == input.OraclePassword ||
                    (this.OraclePassword != null &&
                    this.OraclePassword.Equals(input.OraclePassword))
                ) && 
                (
                    this.OraclePort == input.OraclePort ||
                    (this.OraclePort != null &&
                    this.OraclePort.Equals(input.OraclePort))
                ) && 
                (
                    this.OracleScreationStatements == input.OracleScreationStatements ||
                    (this.OracleScreationStatements != null &&
                    this.OracleScreationStatements.Equals(input.OracleScreationStatements))
                ) && 
                (
                    this.OracleServiceName == input.OracleServiceName ||
                    (this.OracleServiceName != null &&
                    this.OracleServiceName.Equals(input.OracleServiceName))
                ) && 
                (
                    this.OracleUsername == input.OracleUsername ||
                    (this.OracleUsername != null &&
                    this.OracleUsername.Equals(input.OracleUsername))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.SecureAccessBastionIssuer == input.SecureAccessBastionIssuer ||
                    (this.SecureAccessBastionIssuer != null &&
                    this.SecureAccessBastionIssuer.Equals(input.SecureAccessBastionIssuer))
                ) && 
                (
                    this.SecureAccessEnable == input.SecureAccessEnable ||
                    (this.SecureAccessEnable != null &&
                    this.SecureAccessEnable.Equals(input.SecureAccessEnable))
                ) && 
                (
                    this.SecureAccessHost == input.SecureAccessHost ||
                    this.SecureAccessHost != null &&
                    input.SecureAccessHost != null &&
                    this.SecureAccessHost.SequenceEqual(input.SecureAccessHost)
                ) && 
                (
                    this.SecureAccessWeb == input.SecureAccessWeb ||
                    this.SecureAccessWeb.Equals(input.SecureAccessWeb)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DbServerCertificates != null)
                {
                    hashCode = (hashCode * 59) + this.DbServerCertificates.GetHashCode();
                }
                if (this.DbServerName != null)
                {
                    hashCode = (hashCode * 59) + this.DbServerName.GetHashCode();
                }
                if (this.DeleteProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteProtection.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NewName != null)
                {
                    hashCode = (hashCode * 59) + this.NewName.GetHashCode();
                }
                if (this.OracleHost != null)
                {
                    hashCode = (hashCode * 59) + this.OracleHost.GetHashCode();
                }
                if (this.OraclePassword != null)
                {
                    hashCode = (hashCode * 59) + this.OraclePassword.GetHashCode();
                }
                if (this.OraclePort != null)
                {
                    hashCode = (hashCode * 59) + this.OraclePort.GetHashCode();
                }
                if (this.OracleScreationStatements != null)
                {
                    hashCode = (hashCode * 59) + this.OracleScreationStatements.GetHashCode();
                }
                if (this.OracleServiceName != null)
                {
                    hashCode = (hashCode * 59) + this.OracleServiceName.GetHashCode();
                }
                if (this.OracleUsername != null)
                {
                    hashCode = (hashCode * 59) + this.OracleUsername.GetHashCode();
                }
                if (this.ProducerEncryptionKeyName != null)
                {
                    hashCode = (hashCode * 59) + this.ProducerEncryptionKeyName.GetHashCode();
                }
                if (this.SecureAccessBastionIssuer != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessBastionIssuer.GetHashCode();
                }
                if (this.SecureAccessEnable != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessEnable.GetHashCode();
                }
                if (this.SecureAccessHost != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessHost.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SecureAccessWeb.GetHashCode();
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TargetName != null)
                {
                    hashCode = (hashCode * 59) + this.TargetName.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UserTtl != null)
                {
                    hashCode = (hashCode * 59) + this.UserTtl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
