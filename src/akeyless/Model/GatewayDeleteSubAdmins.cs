/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayDeleteSubAdmins is a command that deletes sub-admins
    /// </summary>
    [DataContract]
    public partial class GatewayDeleteSubAdmins :  IEquatable<GatewayDeleteSubAdmins>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayDeleteSubAdmins" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayDeleteSubAdmins() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayDeleteSubAdmins" /> class.
        /// </summary>
        /// <param name="gatewayUrl">Gateway url (default to &quot;http://localhost:8000&quot;).</param>
        /// <param name="subAdmin">SubAdmins to be removed (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GatewayDeleteSubAdmins(string gatewayUrl = "http://localhost:8000", List<string> subAdmin = default(List<string>), string token = default(string), string uidToken = default(string))
        {
            // to ensure "subAdmin" is required (not null)
            this.SubAdmin = subAdmin ?? throw new ArgumentNullException("subAdmin is a required property for GatewayDeleteSubAdmins and cannot be null");
            // use default value if no "gatewayUrl" provided
            this.GatewayUrl = gatewayUrl ?? "http://localhost:8000";
            this.Token = token;
            this.UidToken = uidToken;
        }
        
        /// <summary>
        /// Gateway url
        /// </summary>
        /// <value>Gateway url</value>
        [DataMember(Name="gateway-url", EmitDefaultValue=false)]
        public string GatewayUrl { get; set; }

        /// <summary>
        /// SubAdmins to be removed
        /// </summary>
        /// <value>SubAdmins to be removed</value>
        [DataMember(Name="sub-admin", EmitDefaultValue=false)]
        public List<string> SubAdmin { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayDeleteSubAdmins {\n");
            sb.Append("  GatewayUrl: ").Append(GatewayUrl).Append("\n");
            sb.Append("  SubAdmin: ").Append(SubAdmin).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayDeleteSubAdmins);
        }

        /// <summary>
        /// Returns true if GatewayDeleteSubAdmins instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayDeleteSubAdmins to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayDeleteSubAdmins input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GatewayUrl == input.GatewayUrl ||
                    (this.GatewayUrl != null &&
                    this.GatewayUrl.Equals(input.GatewayUrl))
                ) && 
                (
                    this.SubAdmin == input.SubAdmin ||
                    this.SubAdmin != null &&
                    input.SubAdmin != null &&
                    this.SubAdmin.SequenceEqual(input.SubAdmin)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GatewayUrl != null)
                    hashCode = hashCode * 59 + this.GatewayUrl.GetHashCode();
                if (this.SubAdmin != null)
                    hashCode = hashCode * 59 + this.SubAdmin.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
