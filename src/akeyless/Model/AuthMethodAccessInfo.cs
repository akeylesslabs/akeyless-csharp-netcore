/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// AuthMethodAccessInfo
    /// </summary>
    [DataContract(Name = "AuthMethodAccessInfo")]
    public partial class AuthMethodAccessInfo : IEquatable<AuthMethodAccessInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthMethodAccessInfo" /> class.
        /// </summary>
        /// <param name="accessExpires">accessExpires.</param>
        /// <param name="accessIdAlias">for accounts where AccessId holds encrypted email this field will hold generated AccessId, for accounts based on regular AccessId it will be equal to accessId itself.</param>
        /// <param name="apiKeyAccessRules">apiKeyAccessRules.</param>
        /// <param name="auditLogsClaims">auditLogsClaims.</param>
        /// <param name="awsIamAccessRules">awsIamAccessRules.</param>
        /// <param name="azureAdAccessRules">azureAdAccessRules.</param>
        /// <param name="certAccessRules">certAccessRules.</param>
        /// <param name="cidrWhitelist">cidrWhitelist.</param>
        /// <param name="emailPassAccessRules">emailPassAccessRules.</param>
        /// <param name="forceSubClaims">if true the role associated with this auth method must include sub claims.</param>
        /// <param name="gcpAccessRules">gcpAccessRules.</param>
        /// <param name="gwCidrWhitelist">gwCidrWhitelist.</param>
        /// <param name="huaweiAccessRules">huaweiAccessRules.</param>
        /// <param name="jwtTtl">jwtTtl.</param>
        /// <param name="k8sAccessRules">k8sAccessRules.</param>
        /// <param name="ldapAccessRules">ldapAccessRules.</param>
        /// <param name="oauth2AccessRules">oauth2AccessRules.</param>
        /// <param name="ociAccessRules">ociAccessRules.</param>
        /// <param name="oidcAccessRules">oidcAccessRules.</param>
        /// <param name="productTypes">List of product types this auth method will be in use of.</param>
        /// <param name="rulesType">rulesType.</param>
        /// <param name="samlAccessRules">samlAccessRules.</param>
        /// <param name="subClaimsDelimiters">subClaimsDelimiters.</param>
        /// <param name="universalIdentityAccessRules">universalIdentityAccessRules.</param>
        public AuthMethodAccessInfo(long accessExpires = default(long), string accessIdAlias = default(string), APIKeyAccessRules apiKeyAccessRules = default(APIKeyAccessRules), List<string> auditLogsClaims = default(List<string>), AWSIAMAccessRules awsIamAccessRules = default(AWSIAMAccessRules), AzureADAccessRules azureAdAccessRules = default(AzureADAccessRules), CertAccessRules certAccessRules = default(CertAccessRules), string cidrWhitelist = default(string), EmailPassAccessRules emailPassAccessRules = default(EmailPassAccessRules), bool forceSubClaims = default(bool), GCPAccessRules gcpAccessRules = default(GCPAccessRules), string gwCidrWhitelist = default(string), HuaweiAccessRules huaweiAccessRules = default(HuaweiAccessRules), long jwtTtl = default(long), KubernetesAccessRules k8sAccessRules = default(KubernetesAccessRules), LDAPAccessRules ldapAccessRules = default(LDAPAccessRules), OAuth2AccessRules oauth2AccessRules = default(OAuth2AccessRules), OCIAccessRules ociAccessRules = default(OCIAccessRules), OIDCAccessRules oidcAccessRules = default(OIDCAccessRules), List<string> productTypes = default(List<string>), string rulesType = default(string), SAMLAccessRules samlAccessRules = default(SAMLAccessRules), List<string> subClaimsDelimiters = default(List<string>), UniversalIdentityAccessRules universalIdentityAccessRules = default(UniversalIdentityAccessRules))
        {
            this.AccessExpires = accessExpires;
            this.AccessIdAlias = accessIdAlias;
            this.ApiKeyAccessRules = apiKeyAccessRules;
            this.AuditLogsClaims = auditLogsClaims;
            this.AwsIamAccessRules = awsIamAccessRules;
            this.AzureAdAccessRules = azureAdAccessRules;
            this.CertAccessRules = certAccessRules;
            this.CidrWhitelist = cidrWhitelist;
            this.EmailPassAccessRules = emailPassAccessRules;
            this.ForceSubClaims = forceSubClaims;
            this.GcpAccessRules = gcpAccessRules;
            this.GwCidrWhitelist = gwCidrWhitelist;
            this.HuaweiAccessRules = huaweiAccessRules;
            this.JwtTtl = jwtTtl;
            this.K8sAccessRules = k8sAccessRules;
            this.LdapAccessRules = ldapAccessRules;
            this.Oauth2AccessRules = oauth2AccessRules;
            this.OciAccessRules = ociAccessRules;
            this.OidcAccessRules = oidcAccessRules;
            this.ProductTypes = productTypes;
            this.RulesType = rulesType;
            this.SamlAccessRules = samlAccessRules;
            this.SubClaimsDelimiters = subClaimsDelimiters;
            this.UniversalIdentityAccessRules = universalIdentityAccessRules;
        }

        /// <summary>
        /// Gets or Sets AccessExpires
        /// </summary>
        [DataMember(Name = "access_expires", EmitDefaultValue = false)]
        public long AccessExpires { get; set; }

        /// <summary>
        /// for accounts where AccessId holds encrypted email this field will hold generated AccessId, for accounts based on regular AccessId it will be equal to accessId itself
        /// </summary>
        /// <value>for accounts where AccessId holds encrypted email this field will hold generated AccessId, for accounts based on regular AccessId it will be equal to accessId itself</value>
        [DataMember(Name = "access_id_alias", EmitDefaultValue = false)]
        public string AccessIdAlias { get; set; }

        /// <summary>
        /// Gets or Sets ApiKeyAccessRules
        /// </summary>
        [DataMember(Name = "api_key_access_rules", EmitDefaultValue = false)]
        public APIKeyAccessRules ApiKeyAccessRules { get; set; }

        /// <summary>
        /// Gets or Sets AuditLogsClaims
        /// </summary>
        [DataMember(Name = "audit_logs_claims", EmitDefaultValue = false)]
        public List<string> AuditLogsClaims { get; set; }

        /// <summary>
        /// Gets or Sets AwsIamAccessRules
        /// </summary>
        [DataMember(Name = "aws_iam_access_rules", EmitDefaultValue = false)]
        public AWSIAMAccessRules AwsIamAccessRules { get; set; }

        /// <summary>
        /// Gets or Sets AzureAdAccessRules
        /// </summary>
        [DataMember(Name = "azure_ad_access_rules", EmitDefaultValue = false)]
        public AzureADAccessRules AzureAdAccessRules { get; set; }

        /// <summary>
        /// Gets or Sets CertAccessRules
        /// </summary>
        [DataMember(Name = "cert_access_rules", EmitDefaultValue = false)]
        public CertAccessRules CertAccessRules { get; set; }

        /// <summary>
        /// Gets or Sets CidrWhitelist
        /// </summary>
        [DataMember(Name = "cidr_whitelist", EmitDefaultValue = false)]
        public string CidrWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets EmailPassAccessRules
        /// </summary>
        [DataMember(Name = "email_pass_access_rules", EmitDefaultValue = false)]
        public EmailPassAccessRules EmailPassAccessRules { get; set; }

        /// <summary>
        /// if true the role associated with this auth method must include sub claims
        /// </summary>
        /// <value>if true the role associated with this auth method must include sub claims</value>
        [DataMember(Name = "force_sub_claims", EmitDefaultValue = true)]
        public bool ForceSubClaims { get; set; }

        /// <summary>
        /// Gets or Sets GcpAccessRules
        /// </summary>
        [DataMember(Name = "gcp_access_rules", EmitDefaultValue = false)]
        public GCPAccessRules GcpAccessRules { get; set; }

        /// <summary>
        /// Gets or Sets GwCidrWhitelist
        /// </summary>
        [DataMember(Name = "gw_cidr_whitelist", EmitDefaultValue = false)]
        public string GwCidrWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets HuaweiAccessRules
        /// </summary>
        [DataMember(Name = "huawei_access_rules", EmitDefaultValue = false)]
        public HuaweiAccessRules HuaweiAccessRules { get; set; }

        /// <summary>
        /// Gets or Sets JwtTtl
        /// </summary>
        [DataMember(Name = "jwt_ttl", EmitDefaultValue = false)]
        public long JwtTtl { get; set; }

        /// <summary>
        /// Gets or Sets K8sAccessRules
        /// </summary>
        [DataMember(Name = "k8s_access_rules", EmitDefaultValue = false)]
        public KubernetesAccessRules K8sAccessRules { get; set; }

        /// <summary>
        /// Gets or Sets LdapAccessRules
        /// </summary>
        [DataMember(Name = "ldap_access_rules", EmitDefaultValue = false)]
        public LDAPAccessRules LdapAccessRules { get; set; }

        /// <summary>
        /// Gets or Sets Oauth2AccessRules
        /// </summary>
        [DataMember(Name = "oauth2_access_rules", EmitDefaultValue = false)]
        public OAuth2AccessRules Oauth2AccessRules { get; set; }

        /// <summary>
        /// Gets or Sets OciAccessRules
        /// </summary>
        [DataMember(Name = "oci_access_rules", EmitDefaultValue = false)]
        public OCIAccessRules OciAccessRules { get; set; }

        /// <summary>
        /// Gets or Sets OidcAccessRules
        /// </summary>
        [DataMember(Name = "oidc_access_rules", EmitDefaultValue = false)]
        public OIDCAccessRules OidcAccessRules { get; set; }

        /// <summary>
        /// List of product types this auth method will be in use of
        /// </summary>
        /// <value>List of product types this auth method will be in use of</value>
        [DataMember(Name = "product_types", EmitDefaultValue = false)]
        public List<string> ProductTypes { get; set; }

        /// <summary>
        /// Gets or Sets RulesType
        /// </summary>
        [DataMember(Name = "rules_type", EmitDefaultValue = false)]
        public string RulesType { get; set; }

        /// <summary>
        /// Gets or Sets SamlAccessRules
        /// </summary>
        [DataMember(Name = "saml_access_rules", EmitDefaultValue = false)]
        public SAMLAccessRules SamlAccessRules { get; set; }

        /// <summary>
        /// Gets or Sets SubClaimsDelimiters
        /// </summary>
        [DataMember(Name = "sub_claims_delimiters", EmitDefaultValue = false)]
        public List<string> SubClaimsDelimiters { get; set; }

        /// <summary>
        /// Gets or Sets UniversalIdentityAccessRules
        /// </summary>
        [DataMember(Name = "universal_identity_access_rules", EmitDefaultValue = false)]
        public UniversalIdentityAccessRules UniversalIdentityAccessRules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthMethodAccessInfo {\n");
            sb.Append("  AccessExpires: ").Append(AccessExpires).Append("\n");
            sb.Append("  AccessIdAlias: ").Append(AccessIdAlias).Append("\n");
            sb.Append("  ApiKeyAccessRules: ").Append(ApiKeyAccessRules).Append("\n");
            sb.Append("  AuditLogsClaims: ").Append(AuditLogsClaims).Append("\n");
            sb.Append("  AwsIamAccessRules: ").Append(AwsIamAccessRules).Append("\n");
            sb.Append("  AzureAdAccessRules: ").Append(AzureAdAccessRules).Append("\n");
            sb.Append("  CertAccessRules: ").Append(CertAccessRules).Append("\n");
            sb.Append("  CidrWhitelist: ").Append(CidrWhitelist).Append("\n");
            sb.Append("  EmailPassAccessRules: ").Append(EmailPassAccessRules).Append("\n");
            sb.Append("  ForceSubClaims: ").Append(ForceSubClaims).Append("\n");
            sb.Append("  GcpAccessRules: ").Append(GcpAccessRules).Append("\n");
            sb.Append("  GwCidrWhitelist: ").Append(GwCidrWhitelist).Append("\n");
            sb.Append("  HuaweiAccessRules: ").Append(HuaweiAccessRules).Append("\n");
            sb.Append("  JwtTtl: ").Append(JwtTtl).Append("\n");
            sb.Append("  K8sAccessRules: ").Append(K8sAccessRules).Append("\n");
            sb.Append("  LdapAccessRules: ").Append(LdapAccessRules).Append("\n");
            sb.Append("  Oauth2AccessRules: ").Append(Oauth2AccessRules).Append("\n");
            sb.Append("  OciAccessRules: ").Append(OciAccessRules).Append("\n");
            sb.Append("  OidcAccessRules: ").Append(OidcAccessRules).Append("\n");
            sb.Append("  ProductTypes: ").Append(ProductTypes).Append("\n");
            sb.Append("  RulesType: ").Append(RulesType).Append("\n");
            sb.Append("  SamlAccessRules: ").Append(SamlAccessRules).Append("\n");
            sb.Append("  SubClaimsDelimiters: ").Append(SubClaimsDelimiters).Append("\n");
            sb.Append("  UniversalIdentityAccessRules: ").Append(UniversalIdentityAccessRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthMethodAccessInfo);
        }

        /// <summary>
        /// Returns true if AuthMethodAccessInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthMethodAccessInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthMethodAccessInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessExpires == input.AccessExpires ||
                    this.AccessExpires.Equals(input.AccessExpires)
                ) && 
                (
                    this.AccessIdAlias == input.AccessIdAlias ||
                    (this.AccessIdAlias != null &&
                    this.AccessIdAlias.Equals(input.AccessIdAlias))
                ) && 
                (
                    this.ApiKeyAccessRules == input.ApiKeyAccessRules ||
                    (this.ApiKeyAccessRules != null &&
                    this.ApiKeyAccessRules.Equals(input.ApiKeyAccessRules))
                ) && 
                (
                    this.AuditLogsClaims == input.AuditLogsClaims ||
                    this.AuditLogsClaims != null &&
                    input.AuditLogsClaims != null &&
                    this.AuditLogsClaims.SequenceEqual(input.AuditLogsClaims)
                ) && 
                (
                    this.AwsIamAccessRules == input.AwsIamAccessRules ||
                    (this.AwsIamAccessRules != null &&
                    this.AwsIamAccessRules.Equals(input.AwsIamAccessRules))
                ) && 
                (
                    this.AzureAdAccessRules == input.AzureAdAccessRules ||
                    (this.AzureAdAccessRules != null &&
                    this.AzureAdAccessRules.Equals(input.AzureAdAccessRules))
                ) && 
                (
                    this.CertAccessRules == input.CertAccessRules ||
                    (this.CertAccessRules != null &&
                    this.CertAccessRules.Equals(input.CertAccessRules))
                ) && 
                (
                    this.CidrWhitelist == input.CidrWhitelist ||
                    (this.CidrWhitelist != null &&
                    this.CidrWhitelist.Equals(input.CidrWhitelist))
                ) && 
                (
                    this.EmailPassAccessRules == input.EmailPassAccessRules ||
                    (this.EmailPassAccessRules != null &&
                    this.EmailPassAccessRules.Equals(input.EmailPassAccessRules))
                ) && 
                (
                    this.ForceSubClaims == input.ForceSubClaims ||
                    this.ForceSubClaims.Equals(input.ForceSubClaims)
                ) && 
                (
                    this.GcpAccessRules == input.GcpAccessRules ||
                    (this.GcpAccessRules != null &&
                    this.GcpAccessRules.Equals(input.GcpAccessRules))
                ) && 
                (
                    this.GwCidrWhitelist == input.GwCidrWhitelist ||
                    (this.GwCidrWhitelist != null &&
                    this.GwCidrWhitelist.Equals(input.GwCidrWhitelist))
                ) && 
                (
                    this.HuaweiAccessRules == input.HuaweiAccessRules ||
                    (this.HuaweiAccessRules != null &&
                    this.HuaweiAccessRules.Equals(input.HuaweiAccessRules))
                ) && 
                (
                    this.JwtTtl == input.JwtTtl ||
                    this.JwtTtl.Equals(input.JwtTtl)
                ) && 
                (
                    this.K8sAccessRules == input.K8sAccessRules ||
                    (this.K8sAccessRules != null &&
                    this.K8sAccessRules.Equals(input.K8sAccessRules))
                ) && 
                (
                    this.LdapAccessRules == input.LdapAccessRules ||
                    (this.LdapAccessRules != null &&
                    this.LdapAccessRules.Equals(input.LdapAccessRules))
                ) && 
                (
                    this.Oauth2AccessRules == input.Oauth2AccessRules ||
                    (this.Oauth2AccessRules != null &&
                    this.Oauth2AccessRules.Equals(input.Oauth2AccessRules))
                ) && 
                (
                    this.OciAccessRules == input.OciAccessRules ||
                    (this.OciAccessRules != null &&
                    this.OciAccessRules.Equals(input.OciAccessRules))
                ) && 
                (
                    this.OidcAccessRules == input.OidcAccessRules ||
                    (this.OidcAccessRules != null &&
                    this.OidcAccessRules.Equals(input.OidcAccessRules))
                ) && 
                (
                    this.ProductTypes == input.ProductTypes ||
                    this.ProductTypes != null &&
                    input.ProductTypes != null &&
                    this.ProductTypes.SequenceEqual(input.ProductTypes)
                ) && 
                (
                    this.RulesType == input.RulesType ||
                    (this.RulesType != null &&
                    this.RulesType.Equals(input.RulesType))
                ) && 
                (
                    this.SamlAccessRules == input.SamlAccessRules ||
                    (this.SamlAccessRules != null &&
                    this.SamlAccessRules.Equals(input.SamlAccessRules))
                ) && 
                (
                    this.SubClaimsDelimiters == input.SubClaimsDelimiters ||
                    this.SubClaimsDelimiters != null &&
                    input.SubClaimsDelimiters != null &&
                    this.SubClaimsDelimiters.SequenceEqual(input.SubClaimsDelimiters)
                ) && 
                (
                    this.UniversalIdentityAccessRules == input.UniversalIdentityAccessRules ||
                    (this.UniversalIdentityAccessRules != null &&
                    this.UniversalIdentityAccessRules.Equals(input.UniversalIdentityAccessRules))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AccessExpires.GetHashCode();
                if (this.AccessIdAlias != null)
                {
                    hashCode = (hashCode * 59) + this.AccessIdAlias.GetHashCode();
                }
                if (this.ApiKeyAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.ApiKeyAccessRules.GetHashCode();
                }
                if (this.AuditLogsClaims != null)
                {
                    hashCode = (hashCode * 59) + this.AuditLogsClaims.GetHashCode();
                }
                if (this.AwsIamAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.AwsIamAccessRules.GetHashCode();
                }
                if (this.AzureAdAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.AzureAdAccessRules.GetHashCode();
                }
                if (this.CertAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.CertAccessRules.GetHashCode();
                }
                if (this.CidrWhitelist != null)
                {
                    hashCode = (hashCode * 59) + this.CidrWhitelist.GetHashCode();
                }
                if (this.EmailPassAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.EmailPassAccessRules.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ForceSubClaims.GetHashCode();
                if (this.GcpAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.GcpAccessRules.GetHashCode();
                }
                if (this.GwCidrWhitelist != null)
                {
                    hashCode = (hashCode * 59) + this.GwCidrWhitelist.GetHashCode();
                }
                if (this.HuaweiAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.HuaweiAccessRules.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JwtTtl.GetHashCode();
                if (this.K8sAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.K8sAccessRules.GetHashCode();
                }
                if (this.LdapAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.LdapAccessRules.GetHashCode();
                }
                if (this.Oauth2AccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.Oauth2AccessRules.GetHashCode();
                }
                if (this.OciAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.OciAccessRules.GetHashCode();
                }
                if (this.OidcAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.OidcAccessRules.GetHashCode();
                }
                if (this.ProductTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ProductTypes.GetHashCode();
                }
                if (this.RulesType != null)
                {
                    hashCode = (hashCode * 59) + this.RulesType.GetHashCode();
                }
                if (this.SamlAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.SamlAccessRules.GetHashCode();
                }
                if (this.SubClaimsDelimiters != null)
                {
                    hashCode = (hashCode * 59) + this.SubClaimsDelimiters.GetHashCode();
                }
                if (this.UniversalIdentityAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.UniversalIdentityAccessRules.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
