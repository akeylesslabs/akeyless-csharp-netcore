/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ActiveDirectoryPayload
    /// </summary>
    [DataContract(Name = "ActiveDirectoryPayload")]
    public partial class ActiveDirectoryPayload : IEquatable<ActiveDirectoryPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveDirectoryPayload" /> class.
        /// </summary>
        /// <param name="activeDirectoryTargetId">activeDirectoryTargetId.</param>
        /// <param name="autoRotate">autoRotate.</param>
        /// <param name="autoRotateIntervalInDays">autoRotateIntervalInDays.</param>
        /// <param name="autoRotateRotationHour">autoRotateRotationHour.</param>
        /// <param name="computerBaseDn">computerBaseDn.</param>
        /// <param name="discoverLocalUsers">discoverLocalUsers.</param>
        /// <param name="domainName">domainName.</param>
        /// <param name="domainServerTargetsPathTemplate">domainServerTargetsPathTemplate.</param>
        /// <param name="domainUsersRotatedSecretsPathTemplate">domainUsersRotatedSecretsPathTemplate.</param>
        /// <param name="enableRdpSra">enableRdpSra.</param>
        /// <param name="localUsersIgnoreList">localUsersIgnoreList.</param>
        /// <param name="localUsersRotatedSecretsPathTemplate">localUsersRotatedSecretsPathTemplate.</param>
        /// <param name="sshPort">sshPort.</param>
        /// <param name="userBaseDn">userBaseDn.</param>
        /// <param name="userGroups">userGroups.</param>
        public ActiveDirectoryPayload(long activeDirectoryTargetId = default(long), bool autoRotate = default(bool), int autoRotateIntervalInDays = default(int), int autoRotateRotationHour = default(int), string computerBaseDn = default(string), bool discoverLocalUsers = default(bool), string domainName = default(string), string domainServerTargetsPathTemplate = default(string), string domainUsersRotatedSecretsPathTemplate = default(string), bool enableRdpSra = default(bool), Dictionary<string, bool> localUsersIgnoreList = default(Dictionary<string, bool>), string localUsersRotatedSecretsPathTemplate = default(string), string sshPort = default(string), string userBaseDn = default(string), List<string> userGroups = default(List<string>))
        {
            this.ActiveDirectoryTargetId = activeDirectoryTargetId;
            this.AutoRotate = autoRotate;
            this.AutoRotateIntervalInDays = autoRotateIntervalInDays;
            this.AutoRotateRotationHour = autoRotateRotationHour;
            this.ComputerBaseDn = computerBaseDn;
            this.DiscoverLocalUsers = discoverLocalUsers;
            this.DomainName = domainName;
            this.DomainServerTargetsPathTemplate = domainServerTargetsPathTemplate;
            this.DomainUsersRotatedSecretsPathTemplate = domainUsersRotatedSecretsPathTemplate;
            this.EnableRdpSra = enableRdpSra;
            this.LocalUsersIgnoreList = localUsersIgnoreList;
            this.LocalUsersRotatedSecretsPathTemplate = localUsersRotatedSecretsPathTemplate;
            this.SshPort = sshPort;
            this.UserBaseDn = userBaseDn;
            this.UserGroups = userGroups;
        }

        /// <summary>
        /// Gets or Sets ActiveDirectoryTargetId
        /// </summary>
        [DataMember(Name = "active_directory_target_id", EmitDefaultValue = false)]
        public long ActiveDirectoryTargetId { get; set; }

        /// <summary>
        /// Gets or Sets AutoRotate
        /// </summary>
        [DataMember(Name = "auto_rotate", EmitDefaultValue = true)]
        public bool AutoRotate { get; set; }

        /// <summary>
        /// Gets or Sets AutoRotateIntervalInDays
        /// </summary>
        [DataMember(Name = "auto_rotate_interval_in_days", EmitDefaultValue = false)]
        public int AutoRotateIntervalInDays { get; set; }

        /// <summary>
        /// Gets or Sets AutoRotateRotationHour
        /// </summary>
        [DataMember(Name = "auto_rotate_rotation_hour", EmitDefaultValue = false)]
        public int AutoRotateRotationHour { get; set; }

        /// <summary>
        /// Gets or Sets ComputerBaseDn
        /// </summary>
        [DataMember(Name = "computer_base_dn", EmitDefaultValue = false)]
        public string ComputerBaseDn { get; set; }

        /// <summary>
        /// Gets or Sets DiscoverLocalUsers
        /// </summary>
        [DataMember(Name = "discover_local_users", EmitDefaultValue = true)]
        public bool DiscoverLocalUsers { get; set; }

        /// <summary>
        /// Gets or Sets DomainName
        /// </summary>
        [DataMember(Name = "domain_name", EmitDefaultValue = false)]
        public string DomainName { get; set; }

        /// <summary>
        /// Gets or Sets DomainServerTargetsPathTemplate
        /// </summary>
        [DataMember(Name = "domain_server_targets_path_template", EmitDefaultValue = false)]
        public string DomainServerTargetsPathTemplate { get; set; }

        /// <summary>
        /// Gets or Sets DomainUsersRotatedSecretsPathTemplate
        /// </summary>
        [DataMember(Name = "domain_users_rotated_secrets_path_template", EmitDefaultValue = false)]
        public string DomainUsersRotatedSecretsPathTemplate { get; set; }

        /// <summary>
        /// Gets or Sets EnableRdpSra
        /// </summary>
        [DataMember(Name = "enable_rdp_sra", EmitDefaultValue = true)]
        public bool EnableRdpSra { get; set; }

        /// <summary>
        /// Gets or Sets LocalUsersIgnoreList
        /// </summary>
        [DataMember(Name = "local_users_ignore_list", EmitDefaultValue = false)]
        public Dictionary<string, bool> LocalUsersIgnoreList { get; set; }

        /// <summary>
        /// Gets or Sets LocalUsersRotatedSecretsPathTemplate
        /// </summary>
        [DataMember(Name = "local_users_rotated_secrets_path_template", EmitDefaultValue = false)]
        public string LocalUsersRotatedSecretsPathTemplate { get; set; }

        /// <summary>
        /// Gets or Sets SshPort
        /// </summary>
        [DataMember(Name = "ssh_port", EmitDefaultValue = false)]
        public string SshPort { get; set; }

        /// <summary>
        /// Gets or Sets UserBaseDn
        /// </summary>
        [DataMember(Name = "user_base_dn", EmitDefaultValue = false)]
        public string UserBaseDn { get; set; }

        /// <summary>
        /// Gets or Sets UserGroups
        /// </summary>
        [DataMember(Name = "user_groups", EmitDefaultValue = false)]
        public List<string> UserGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActiveDirectoryPayload {\n");
            sb.Append("  ActiveDirectoryTargetId: ").Append(ActiveDirectoryTargetId).Append("\n");
            sb.Append("  AutoRotate: ").Append(AutoRotate).Append("\n");
            sb.Append("  AutoRotateIntervalInDays: ").Append(AutoRotateIntervalInDays).Append("\n");
            sb.Append("  AutoRotateRotationHour: ").Append(AutoRotateRotationHour).Append("\n");
            sb.Append("  ComputerBaseDn: ").Append(ComputerBaseDn).Append("\n");
            sb.Append("  DiscoverLocalUsers: ").Append(DiscoverLocalUsers).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  DomainServerTargetsPathTemplate: ").Append(DomainServerTargetsPathTemplate).Append("\n");
            sb.Append("  DomainUsersRotatedSecretsPathTemplate: ").Append(DomainUsersRotatedSecretsPathTemplate).Append("\n");
            sb.Append("  EnableRdpSra: ").Append(EnableRdpSra).Append("\n");
            sb.Append("  LocalUsersIgnoreList: ").Append(LocalUsersIgnoreList).Append("\n");
            sb.Append("  LocalUsersRotatedSecretsPathTemplate: ").Append(LocalUsersRotatedSecretsPathTemplate).Append("\n");
            sb.Append("  SshPort: ").Append(SshPort).Append("\n");
            sb.Append("  UserBaseDn: ").Append(UserBaseDn).Append("\n");
            sb.Append("  UserGroups: ").Append(UserGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActiveDirectoryPayload);
        }

        /// <summary>
        /// Returns true if ActiveDirectoryPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of ActiveDirectoryPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActiveDirectoryPayload input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActiveDirectoryTargetId == input.ActiveDirectoryTargetId ||
                    this.ActiveDirectoryTargetId.Equals(input.ActiveDirectoryTargetId)
                ) && 
                (
                    this.AutoRotate == input.AutoRotate ||
                    this.AutoRotate.Equals(input.AutoRotate)
                ) && 
                (
                    this.AutoRotateIntervalInDays == input.AutoRotateIntervalInDays ||
                    this.AutoRotateIntervalInDays.Equals(input.AutoRotateIntervalInDays)
                ) && 
                (
                    this.AutoRotateRotationHour == input.AutoRotateRotationHour ||
                    this.AutoRotateRotationHour.Equals(input.AutoRotateRotationHour)
                ) && 
                (
                    this.ComputerBaseDn == input.ComputerBaseDn ||
                    (this.ComputerBaseDn != null &&
                    this.ComputerBaseDn.Equals(input.ComputerBaseDn))
                ) && 
                (
                    this.DiscoverLocalUsers == input.DiscoverLocalUsers ||
                    this.DiscoverLocalUsers.Equals(input.DiscoverLocalUsers)
                ) && 
                (
                    this.DomainName == input.DomainName ||
                    (this.DomainName != null &&
                    this.DomainName.Equals(input.DomainName))
                ) && 
                (
                    this.DomainServerTargetsPathTemplate == input.DomainServerTargetsPathTemplate ||
                    (this.DomainServerTargetsPathTemplate != null &&
                    this.DomainServerTargetsPathTemplate.Equals(input.DomainServerTargetsPathTemplate))
                ) && 
                (
                    this.DomainUsersRotatedSecretsPathTemplate == input.DomainUsersRotatedSecretsPathTemplate ||
                    (this.DomainUsersRotatedSecretsPathTemplate != null &&
                    this.DomainUsersRotatedSecretsPathTemplate.Equals(input.DomainUsersRotatedSecretsPathTemplate))
                ) && 
                (
                    this.EnableRdpSra == input.EnableRdpSra ||
                    this.EnableRdpSra.Equals(input.EnableRdpSra)
                ) && 
                (
                    this.LocalUsersIgnoreList == input.LocalUsersIgnoreList ||
                    this.LocalUsersIgnoreList != null &&
                    input.LocalUsersIgnoreList != null &&
                    this.LocalUsersIgnoreList.SequenceEqual(input.LocalUsersIgnoreList)
                ) && 
                (
                    this.LocalUsersRotatedSecretsPathTemplate == input.LocalUsersRotatedSecretsPathTemplate ||
                    (this.LocalUsersRotatedSecretsPathTemplate != null &&
                    this.LocalUsersRotatedSecretsPathTemplate.Equals(input.LocalUsersRotatedSecretsPathTemplate))
                ) && 
                (
                    this.SshPort == input.SshPort ||
                    (this.SshPort != null &&
                    this.SshPort.Equals(input.SshPort))
                ) && 
                (
                    this.UserBaseDn == input.UserBaseDn ||
                    (this.UserBaseDn != null &&
                    this.UserBaseDn.Equals(input.UserBaseDn))
                ) && 
                (
                    this.UserGroups == input.UserGroups ||
                    this.UserGroups != null &&
                    input.UserGroups != null &&
                    this.UserGroups.SequenceEqual(input.UserGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ActiveDirectoryTargetId.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoRotate.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoRotateIntervalInDays.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoRotateRotationHour.GetHashCode();
                if (this.ComputerBaseDn != null)
                {
                    hashCode = (hashCode * 59) + this.ComputerBaseDn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DiscoverLocalUsers.GetHashCode();
                if (this.DomainName != null)
                {
                    hashCode = (hashCode * 59) + this.DomainName.GetHashCode();
                }
                if (this.DomainServerTargetsPathTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.DomainServerTargetsPathTemplate.GetHashCode();
                }
                if (this.DomainUsersRotatedSecretsPathTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.DomainUsersRotatedSecretsPathTemplate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableRdpSra.GetHashCode();
                if (this.LocalUsersIgnoreList != null)
                {
                    hashCode = (hashCode * 59) + this.LocalUsersIgnoreList.GetHashCode();
                }
                if (this.LocalUsersRotatedSecretsPathTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.LocalUsersRotatedSecretsPathTemplate.GetHashCode();
                }
                if (this.SshPort != null)
                {
                    hashCode = (hashCode * 59) + this.SshPort.GetHashCode();
                }
                if (this.UserBaseDn != null)
                {
                    hashCode = (hashCode * 59) + this.UserBaseDn.GetHashCode();
                }
                if (this.UserGroups != null)
                {
                    hashCode = (hashCode * 59) + this.UserGroups.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
