/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// KubeConfigValue
    /// </summary>
    [DataContract(Name = "KubeConfigValue")]
    public partial class KubeConfigValue : IEquatable<KubeConfigValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KubeConfigValue" /> class.
        /// </summary>
        /// <param name="apiVersion">apiVersion.</param>
        /// <param name="clusters">clusters.</param>
        /// <param name="contexts">contexts.</param>
        /// <param name="currentContext">currentContext.</param>
        /// <param name="kind">kind.</param>
        /// <param name="users">users.</param>
        public KubeConfigValue(string apiVersion = default(string), List<KubeconfigNamedCluster> clusters = default(List<KubeconfigNamedCluster>), List<KubeconfigNamedContext> contexts = default(List<KubeconfigNamedContext>), string currentContext = default(string), string kind = default(string), List<KubeconfigUser> users = default(List<KubeconfigUser>))
        {
            this.ApiVersion = apiVersion;
            this.Clusters = clusters;
            this.Contexts = contexts;
            this.CurrentContext = currentContext;
            this.Kind = kind;
            this.Users = users;
        }

        /// <summary>
        /// Gets or Sets ApiVersion
        /// </summary>
        [DataMember(Name = "apiVersion", EmitDefaultValue = false)]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Gets or Sets Clusters
        /// </summary>
        [DataMember(Name = "clusters", EmitDefaultValue = false)]
        public List<KubeconfigNamedCluster> Clusters { get; set; }

        /// <summary>
        /// Gets or Sets Contexts
        /// </summary>
        [DataMember(Name = "contexts", EmitDefaultValue = false)]
        public List<KubeconfigNamedContext> Contexts { get; set; }

        /// <summary>
        /// Gets or Sets CurrentContext
        /// </summary>
        [DataMember(Name = "current-context", EmitDefaultValue = false)]
        public string CurrentContext { get; set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name = "kind", EmitDefaultValue = false)]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name = "users", EmitDefaultValue = false)]
        public List<KubeconfigUser> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KubeConfigValue {\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  Clusters: ").Append(Clusters).Append("\n");
            sb.Append("  Contexts: ").Append(Contexts).Append("\n");
            sb.Append("  CurrentContext: ").Append(CurrentContext).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KubeConfigValue);
        }

        /// <summary>
        /// Returns true if KubeConfigValue instances are equal
        /// </summary>
        /// <param name="input">Instance of KubeConfigValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KubeConfigValue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApiVersion == input.ApiVersion ||
                    (this.ApiVersion != null &&
                    this.ApiVersion.Equals(input.ApiVersion))
                ) && 
                (
                    this.Clusters == input.Clusters ||
                    this.Clusters != null &&
                    input.Clusters != null &&
                    this.Clusters.SequenceEqual(input.Clusters)
                ) && 
                (
                    this.Contexts == input.Contexts ||
                    this.Contexts != null &&
                    input.Contexts != null &&
                    this.Contexts.SequenceEqual(input.Contexts)
                ) && 
                (
                    this.CurrentContext == input.CurrentContext ||
                    (this.CurrentContext != null &&
                    this.CurrentContext.Equals(input.CurrentContext))
                ) && 
                (
                    this.Kind == input.Kind ||
                    (this.Kind != null &&
                    this.Kind.Equals(input.Kind))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiVersion != null)
                {
                    hashCode = (hashCode * 59) + this.ApiVersion.GetHashCode();
                }
                if (this.Clusters != null)
                {
                    hashCode = (hashCode * 59) + this.Clusters.GetHashCode();
                }
                if (this.Contexts != null)
                {
                    hashCode = (hashCode * 59) + this.Contexts.GetHashCode();
                }
                if (this.CurrentContext != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentContext.GetHashCode();
                }
                if (this.Kind != null)
                {
                    hashCode = (hashCode * 59) + this.Kind.GetHashCode();
                }
                if (this.Users != null)
                {
                    hashCode = (hashCode * 59) + this.Users.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
