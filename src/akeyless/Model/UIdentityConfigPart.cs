/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UIdentityConfigPart
    /// </summary>
    [DataContract]
    public partial class UIdentityConfigPart :  IEquatable<UIdentityConfigPart>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UIdentityConfigPart" /> class.
        /// </summary>
        /// <param name="uidAccessId">uidAccessId.</param>
        /// <param name="uidEnable">uidEnable.</param>
        /// <param name="uidRotateInterval">uidRotateInterval.</param>
        /// <param name="uidStatus">uidStatus.</param>
        /// <param name="uidToken">uidToken.</param>
        public UIdentityConfigPart(string uidAccessId = default(string), bool uidEnable = default(bool), string uidRotateInterval = default(string), string uidStatus = default(string), string uidToken = default(string))
        {
            this.UidAccessId = uidAccessId;
            this.UidEnable = uidEnable;
            this.UidRotateInterval = uidRotateInterval;
            this.UidStatus = uidStatus;
            this.UidToken = uidToken;
        }
        
        /// <summary>
        /// Gets or Sets UidAccessId
        /// </summary>
        [DataMember(Name="uid_access_id", EmitDefaultValue=false)]
        public string UidAccessId { get; set; }

        /// <summary>
        /// Gets or Sets UidEnable
        /// </summary>
        [DataMember(Name="uid_enable", EmitDefaultValue=false)]
        public bool UidEnable { get; set; }

        /// <summary>
        /// Gets or Sets UidRotateInterval
        /// </summary>
        [DataMember(Name="uid_rotate_interval", EmitDefaultValue=false)]
        public string UidRotateInterval { get; set; }

        /// <summary>
        /// Gets or Sets UidStatus
        /// </summary>
        [DataMember(Name="uid_status", EmitDefaultValue=false)]
        public string UidStatus { get; set; }

        /// <summary>
        /// Gets or Sets UidToken
        /// </summary>
        [DataMember(Name="uid_token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UIdentityConfigPart {\n");
            sb.Append("  UidAccessId: ").Append(UidAccessId).Append("\n");
            sb.Append("  UidEnable: ").Append(UidEnable).Append("\n");
            sb.Append("  UidRotateInterval: ").Append(UidRotateInterval).Append("\n");
            sb.Append("  UidStatus: ").Append(UidStatus).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UIdentityConfigPart);
        }

        /// <summary>
        /// Returns true if UIdentityConfigPart instances are equal
        /// </summary>
        /// <param name="input">Instance of UIdentityConfigPart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UIdentityConfigPart input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UidAccessId == input.UidAccessId ||
                    (this.UidAccessId != null &&
                    this.UidAccessId.Equals(input.UidAccessId))
                ) && 
                (
                    this.UidEnable == input.UidEnable ||
                    this.UidEnable.Equals(input.UidEnable)
                ) && 
                (
                    this.UidRotateInterval == input.UidRotateInterval ||
                    (this.UidRotateInterval != null &&
                    this.UidRotateInterval.Equals(input.UidRotateInterval))
                ) && 
                (
                    this.UidStatus == input.UidStatus ||
                    (this.UidStatus != null &&
                    this.UidStatus.Equals(input.UidStatus))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UidAccessId != null)
                    hashCode = hashCode * 59 + this.UidAccessId.GetHashCode();
                hashCode = hashCode * 59 + this.UidEnable.GetHashCode();
                if (this.UidRotateInterval != null)
                    hashCode = hashCode * 59 + this.UidRotateInterval.GetHashCode();
                if (this.UidStatus != null)
                    hashCode = hashCode * 59 + this.UidStatus.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
