/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ClassicKeyTargetInfo
    /// </summary>
    [DataContract(Name = "ClassicKeyTargetInfo")]
    public partial class ClassicKeyTargetInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassicKeyTargetInfo" /> class.
        /// </summary>
        /// <param name="externalKmsId">externalKmsId.</param>
        /// <param name="keyPurpose">keyPurpose.</param>
        /// <param name="keyStatus">keyStatus.</param>
        /// <param name="targetAssocId">targetAssocId.</param>
        /// <param name="targetType">targetType.</param>
        public ClassicKeyTargetInfo(ExternalKMSKeyId externalKmsId = default(ExternalKMSKeyId), List<string> keyPurpose = default(List<string>), ClassicKeyStatusInfo keyStatus = default(ClassicKeyStatusInfo), string targetAssocId = default(string), string targetType = default(string))
        {
            this.ExternalKmsId = externalKmsId;
            this.KeyPurpose = keyPurpose;
            this.KeyStatus = keyStatus;
            this.TargetAssocId = targetAssocId;
            this.TargetType = targetType;
        }

        /// <summary>
        /// Gets or Sets ExternalKmsId
        /// </summary>
        [DataMember(Name = "external_kms_id", EmitDefaultValue = false)]
        public ExternalKMSKeyId ExternalKmsId { get; set; }

        /// <summary>
        /// Gets or Sets KeyPurpose
        /// </summary>
        [DataMember(Name = "key_purpose", EmitDefaultValue = false)]
        public List<string> KeyPurpose { get; set; }

        /// <summary>
        /// Gets or Sets KeyStatus
        /// </summary>
        [DataMember(Name = "key_status", EmitDefaultValue = false)]
        public ClassicKeyStatusInfo KeyStatus { get; set; }

        /// <summary>
        /// Gets or Sets TargetAssocId
        /// </summary>
        [DataMember(Name = "target_assoc_id", EmitDefaultValue = false)]
        public string TargetAssocId { get; set; }

        /// <summary>
        /// Gets or Sets TargetType
        /// </summary>
        [DataMember(Name = "target_type", EmitDefaultValue = false)]
        public string TargetType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClassicKeyTargetInfo {\n");
            sb.Append("  ExternalKmsId: ").Append(ExternalKmsId).Append("\n");
            sb.Append("  KeyPurpose: ").Append(KeyPurpose).Append("\n");
            sb.Append("  KeyStatus: ").Append(KeyStatus).Append("\n");
            sb.Append("  TargetAssocId: ").Append(TargetAssocId).Append("\n");
            sb.Append("  TargetType: ").Append(TargetType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
