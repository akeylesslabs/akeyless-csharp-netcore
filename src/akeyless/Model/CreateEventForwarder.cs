/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CreateEventForwarder
    /// </summary>
    [DataContract(Name = "createEventForwarder")]
    public partial class CreateEventForwarder : IEquatable<CreateEventForwarder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEventForwarder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateEventForwarder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEventForwarder" /> class.
        /// </summary>
        /// <param name="adminName">Workstation Admin Name.</param>
        /// <param name="adminPwd">Workstation Admin password.</param>
        /// <param name="appPrivateKeyBase64">The RSA Private Key PEM formatted in base64 to use when connecting to ServiceNow with jwt authentication.</param>
        /// <param name="authType">The authentication type to use when connecting to ServiceNow (user-pass / jwt) (default to &quot;user-pass&quot;).</param>
        /// <param name="clientId">The client ID to use when connecting to ServiceNow with jwt authentication.</param>
        /// <param name="clientSecret">The client secret to use when connecting to ServiceNow with jwt authentication.</param>
        /// <param name="comment">Deprecated - use description.</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="emailTo">A comma seperated list of email addresses to send event to (relevant only for \&quot;email\&quot; Event Forwarder).</param>
        /// <param name="eventSourceLocations">Event sources (required).</param>
        /// <param name="eventSourceType">Event Source type [item, target, auth_method, gateway] (default to &quot;item&quot;).</param>
        /// <param name="eventTypes">List of event types to notify about [request-access, certificate-pending-expiration, certificate-expired, auth-method-pending-expiration, auth-method-expired, rotated-secret-success, rotated-secret-failure, dynamic-secret-failure, multi-auth-failure, uid-rotation-failure].</param>
        /// <param name="every">Rate of periodic runner repetition in hours.</param>
        /// <param name="forwarderType">forwarderType (required).</param>
        /// <param name="host">Workstation Host.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="key">The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="name">EventForwarder name (required).</param>
        /// <param name="runnerType">runnerType (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userEmail">The user email to use when connecting to ServiceNow with jwt authentication.</param>
        public CreateEventForwarder(string adminName = default(string), string adminPwd = default(string), string appPrivateKeyBase64 = default(string), string authType = "user-pass", string clientId = default(string), string clientSecret = default(string), string comment = default(string), string description = default(string), string emailTo = default(string), List<string> eventSourceLocations = default(List<string>), string eventSourceType = "item", List<string> eventTypes = default(List<string>), string every = default(string), string forwarderType = default(string), string host = default(string), bool json = false, string key = default(string), string name = default(string), string runnerType = default(string), string token = default(string), string uidToken = default(string), string userEmail = default(string))
        {
            // to ensure "eventSourceLocations" is required (not null)
            if (eventSourceLocations == null)
            {
                throw new ArgumentNullException("eventSourceLocations is a required property for CreateEventForwarder and cannot be null");
            }
            this.EventSourceLocations = eventSourceLocations;
            // to ensure "forwarderType" is required (not null)
            if (forwarderType == null)
            {
                throw new ArgumentNullException("forwarderType is a required property for CreateEventForwarder and cannot be null");
            }
            this.ForwarderType = forwarderType;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateEventForwarder and cannot be null");
            }
            this.Name = name;
            // to ensure "runnerType" is required (not null)
            if (runnerType == null)
            {
                throw new ArgumentNullException("runnerType is a required property for CreateEventForwarder and cannot be null");
            }
            this.RunnerType = runnerType;
            this.AdminName = adminName;
            this.AdminPwd = adminPwd;
            this.AppPrivateKeyBase64 = appPrivateKeyBase64;
            // use default value if no "authType" provided
            this.AuthType = authType ?? "user-pass";
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.Comment = comment;
            this.Description = description;
            this.EmailTo = emailTo;
            // use default value if no "eventSourceType" provided
            this.EventSourceType = eventSourceType ?? "item";
            this.EventTypes = eventTypes;
            this.Every = every;
            this.Host = host;
            this.Json = json;
            this.Key = key;
            this.Token = token;
            this.UidToken = uidToken;
            this.UserEmail = userEmail;
        }

        /// <summary>
        /// Workstation Admin Name
        /// </summary>
        /// <value>Workstation Admin Name</value>
        [DataMember(Name = "admin-name", EmitDefaultValue = false)]
        public string AdminName { get; set; }

        /// <summary>
        /// Workstation Admin password
        /// </summary>
        /// <value>Workstation Admin password</value>
        [DataMember(Name = "admin-pwd", EmitDefaultValue = false)]
        public string AdminPwd { get; set; }

        /// <summary>
        /// The RSA Private Key PEM formatted in base64 to use when connecting to ServiceNow with jwt authentication
        /// </summary>
        /// <value>The RSA Private Key PEM formatted in base64 to use when connecting to ServiceNow with jwt authentication</value>
        [DataMember(Name = "app-private-key-base64", EmitDefaultValue = false)]
        public string AppPrivateKeyBase64 { get; set; }

        /// <summary>
        /// The authentication type to use when connecting to ServiceNow (user-pass / jwt)
        /// </summary>
        /// <value>The authentication type to use when connecting to ServiceNow (user-pass / jwt)</value>
        [DataMember(Name = "auth-type", EmitDefaultValue = false)]
        public string AuthType { get; set; }

        /// <summary>
        /// The client ID to use when connecting to ServiceNow with jwt authentication
        /// </summary>
        /// <value>The client ID to use when connecting to ServiceNow with jwt authentication</value>
        [DataMember(Name = "client-id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// The client secret to use when connecting to ServiceNow with jwt authentication
        /// </summary>
        /// <value>The client secret to use when connecting to ServiceNow with jwt authentication</value>
        [DataMember(Name = "client-secret", EmitDefaultValue = false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Deprecated - use description
        /// </summary>
        /// <value>Deprecated - use description</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// A comma seperated list of email addresses to send event to (relevant only for \&quot;email\&quot; Event Forwarder)
        /// </summary>
        /// <value>A comma seperated list of email addresses to send event to (relevant only for \&quot;email\&quot; Event Forwarder)</value>
        [DataMember(Name = "email-to", EmitDefaultValue = false)]
        public string EmailTo { get; set; }

        /// <summary>
        /// Event sources
        /// </summary>
        /// <value>Event sources</value>
        [DataMember(Name = "event-source-locations", IsRequired = true, EmitDefaultValue = true)]
        public List<string> EventSourceLocations { get; set; }

        /// <summary>
        /// Event Source type [item, target, auth_method, gateway]
        /// </summary>
        /// <value>Event Source type [item, target, auth_method, gateway]</value>
        [DataMember(Name = "event-source-type", EmitDefaultValue = false)]
        public string EventSourceType { get; set; }

        /// <summary>
        /// List of event types to notify about [request-access, certificate-pending-expiration, certificate-expired, auth-method-pending-expiration, auth-method-expired, rotated-secret-success, rotated-secret-failure, dynamic-secret-failure, multi-auth-failure, uid-rotation-failure]
        /// </summary>
        /// <value>List of event types to notify about [request-access, certificate-pending-expiration, certificate-expired, auth-method-pending-expiration, auth-method-expired, rotated-secret-success, rotated-secret-failure, dynamic-secret-failure, multi-auth-failure, uid-rotation-failure]</value>
        [DataMember(Name = "event-types", EmitDefaultValue = false)]
        public List<string> EventTypes { get; set; }

        /// <summary>
        /// Rate of periodic runner repetition in hours
        /// </summary>
        /// <value>Rate of periodic runner repetition in hours</value>
        [DataMember(Name = "every", EmitDefaultValue = false)]
        public string Every { get; set; }

        /// <summary>
        /// Gets or Sets ForwarderType
        /// </summary>
        [DataMember(Name = "forwarder-type", IsRequired = true, EmitDefaultValue = true)]
        public string ForwarderType { get; set; }

        /// <summary>
        /// Workstation Host
        /// </summary>
        /// <value>Workstation Host</value>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// EventForwarder name
        /// </summary>
        /// <value>EventForwarder name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RunnerType
        /// </summary>
        [DataMember(Name = "runner-type", IsRequired = true, EmitDefaultValue = true)]
        public string RunnerType { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// The user email to use when connecting to ServiceNow with jwt authentication
        /// </summary>
        /// <value>The user email to use when connecting to ServiceNow with jwt authentication</value>
        [DataMember(Name = "user-email", EmitDefaultValue = false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateEventForwarder {\n");
            sb.Append("  AdminName: ").Append(AdminName).Append("\n");
            sb.Append("  AdminPwd: ").Append(AdminPwd).Append("\n");
            sb.Append("  AppPrivateKeyBase64: ").Append(AppPrivateKeyBase64).Append("\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EmailTo: ").Append(EmailTo).Append("\n");
            sb.Append("  EventSourceLocations: ").Append(EventSourceLocations).Append("\n");
            sb.Append("  EventSourceType: ").Append(EventSourceType).Append("\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("  Every: ").Append(Every).Append("\n");
            sb.Append("  ForwarderType: ").Append(ForwarderType).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RunnerType: ").Append(RunnerType).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateEventForwarder);
        }

        /// <summary>
        /// Returns true if CreateEventForwarder instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateEventForwarder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateEventForwarder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdminName == input.AdminName ||
                    (this.AdminName != null &&
                    this.AdminName.Equals(input.AdminName))
                ) && 
                (
                    this.AdminPwd == input.AdminPwd ||
                    (this.AdminPwd != null &&
                    this.AdminPwd.Equals(input.AdminPwd))
                ) && 
                (
                    this.AppPrivateKeyBase64 == input.AppPrivateKeyBase64 ||
                    (this.AppPrivateKeyBase64 != null &&
                    this.AppPrivateKeyBase64.Equals(input.AppPrivateKeyBase64))
                ) && 
                (
                    this.AuthType == input.AuthType ||
                    (this.AuthType != null &&
                    this.AuthType.Equals(input.AuthType))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EmailTo == input.EmailTo ||
                    (this.EmailTo != null &&
                    this.EmailTo.Equals(input.EmailTo))
                ) && 
                (
                    this.EventSourceLocations == input.EventSourceLocations ||
                    this.EventSourceLocations != null &&
                    input.EventSourceLocations != null &&
                    this.EventSourceLocations.SequenceEqual(input.EventSourceLocations)
                ) && 
                (
                    this.EventSourceType == input.EventSourceType ||
                    (this.EventSourceType != null &&
                    this.EventSourceType.Equals(input.EventSourceType))
                ) && 
                (
                    this.EventTypes == input.EventTypes ||
                    this.EventTypes != null &&
                    input.EventTypes != null &&
                    this.EventTypes.SequenceEqual(input.EventTypes)
                ) && 
                (
                    this.Every == input.Every ||
                    (this.Every != null &&
                    this.Every.Equals(input.Every))
                ) && 
                (
                    this.ForwarderType == input.ForwarderType ||
                    (this.ForwarderType != null &&
                    this.ForwarderType.Equals(input.ForwarderType))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RunnerType == input.RunnerType ||
                    (this.RunnerType != null &&
                    this.RunnerType.Equals(input.RunnerType))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserEmail == input.UserEmail ||
                    (this.UserEmail != null &&
                    this.UserEmail.Equals(input.UserEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdminName != null)
                {
                    hashCode = (hashCode * 59) + this.AdminName.GetHashCode();
                }
                if (this.AdminPwd != null)
                {
                    hashCode = (hashCode * 59) + this.AdminPwd.GetHashCode();
                }
                if (this.AppPrivateKeyBase64 != null)
                {
                    hashCode = (hashCode * 59) + this.AppPrivateKeyBase64.GetHashCode();
                }
                if (this.AuthType != null)
                {
                    hashCode = (hashCode * 59) + this.AuthType.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ClientSecret != null)
                {
                    hashCode = (hashCode * 59) + this.ClientSecret.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.EmailTo != null)
                {
                    hashCode = (hashCode * 59) + this.EmailTo.GetHashCode();
                }
                if (this.EventSourceLocations != null)
                {
                    hashCode = (hashCode * 59) + this.EventSourceLocations.GetHashCode();
                }
                if (this.EventSourceType != null)
                {
                    hashCode = (hashCode * 59) + this.EventSourceType.GetHashCode();
                }
                if (this.EventTypes != null)
                {
                    hashCode = (hashCode * 59) + this.EventTypes.GetHashCode();
                }
                if (this.Every != null)
                {
                    hashCode = (hashCode * 59) + this.Every.GetHashCode();
                }
                if (this.ForwarderType != null)
                {
                    hashCode = (hashCode * 59) + this.ForwarderType.GetHashCode();
                }
                if (this.Host != null)
                {
                    hashCode = (hashCode * 59) + this.Host.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.RunnerType != null)
                {
                    hashCode = (hashCode * 59) + this.RunnerType.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UserEmail != null)
                {
                    hashCode = (hashCode * 59) + this.UserEmail.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
