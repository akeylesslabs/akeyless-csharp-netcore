/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SraSessionEntryOut
    /// </summary>
    [DataContract(Name = "SraSessionEntryOut")]
    public partial class SraSessionEntryOut : IEquatable<SraSessionEntryOut>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SraSessionEntryOut" /> class.
        /// </summary>
        /// <param name="accessId">accessId.</param>
        /// <param name="clientType">clientType.</param>
        /// <param name="clusterUniqueId">clusterUniqueId.</param>
        /// <param name="connectionType">connectionType.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="errorMsg">errorMsg.</param>
        /// <param name="gatewayName">gatewayName.</param>
        /// <param name="instanceId">instanceId.</param>
        /// <param name="secretName">secretName.</param>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="status">status.</param>
        /// <param name="targetHost">targetHost.</param>
        /// <param name="ttl">ttl.</param>
        /// <param name="userIdentifier">userIdentifier.</param>
        public SraSessionEntryOut(string accessId = default(string), string clientType = default(string), long clusterUniqueId = default(long), string connectionType = default(string), DateTime endTime = default(DateTime), string errorMsg = default(string), string gatewayName = default(string), string instanceId = default(string), string secretName = default(string), string sessionId = default(string), DateTime startTime = default(DateTime), string status = default(string), string targetHost = default(string), string ttl = default(string), string userIdentifier = default(string))
        {
            this.AccessId = accessId;
            this.ClientType = clientType;
            this.ClusterUniqueId = clusterUniqueId;
            this.ConnectionType = connectionType;
            this.EndTime = endTime;
            this.ErrorMsg = errorMsg;
            this.GatewayName = gatewayName;
            this.InstanceId = instanceId;
            this.SecretName = secretName;
            this.SessionId = sessionId;
            this.StartTime = startTime;
            this.Status = status;
            this.TargetHost = targetHost;
            this.Ttl = ttl;
            this.UserIdentifier = userIdentifier;
        }

        /// <summary>
        /// Gets or Sets AccessId
        /// </summary>
        [DataMember(Name = "access_id", EmitDefaultValue = false)]
        public string AccessId { get; set; }

        /// <summary>
        /// Gets or Sets ClientType
        /// </summary>
        [DataMember(Name = "client_type", EmitDefaultValue = false)]
        public string ClientType { get; set; }

        /// <summary>
        /// Gets or Sets ClusterUniqueId
        /// </summary>
        [DataMember(Name = "cluster_unique_id", EmitDefaultValue = false)]
        public long ClusterUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionType
        /// </summary>
        [DataMember(Name = "connection_type", EmitDefaultValue = false)]
        public string ConnectionType { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "end_time", EmitDefaultValue = false)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMsg
        /// </summary>
        [DataMember(Name = "error_msg", EmitDefaultValue = false)]
        public string ErrorMsg { get; set; }

        /// <summary>
        /// Gets or Sets GatewayName
        /// </summary>
        [DataMember(Name = "gateway_name", EmitDefaultValue = false)]
        public string GatewayName { get; set; }

        /// <summary>
        /// Gets or Sets InstanceId
        /// </summary>
        [DataMember(Name = "instance_id", EmitDefaultValue = false)]
        public string InstanceId { get; set; }

        /// <summary>
        /// Gets or Sets SecretName
        /// </summary>
        [DataMember(Name = "secret_name", EmitDefaultValue = false)]
        public string SecretName { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name = "session_id", EmitDefaultValue = false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "start_time", EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TargetHost
        /// </summary>
        [DataMember(Name = "target_host", EmitDefaultValue = false)]
        public string TargetHost { get; set; }

        /// <summary>
        /// Gets or Sets Ttl
        /// </summary>
        [DataMember(Name = "ttl", EmitDefaultValue = false)]
        public string Ttl { get; set; }

        /// <summary>
        /// Gets or Sets UserIdentifier
        /// </summary>
        [DataMember(Name = "user_identifier", EmitDefaultValue = false)]
        public string UserIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SraSessionEntryOut {\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  ClientType: ").Append(ClientType).Append("\n");
            sb.Append("  ClusterUniqueId: ").Append(ClusterUniqueId).Append("\n");
            sb.Append("  ConnectionType: ").Append(ConnectionType).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ErrorMsg: ").Append(ErrorMsg).Append("\n");
            sb.Append("  GatewayName: ").Append(GatewayName).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  SecretName: ").Append(SecretName).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TargetHost: ").Append(TargetHost).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  UserIdentifier: ").Append(UserIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SraSessionEntryOut);
        }

        /// <summary>
        /// Returns true if SraSessionEntryOut instances are equal
        /// </summary>
        /// <param name="input">Instance of SraSessionEntryOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SraSessionEntryOut input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessId == input.AccessId ||
                    (this.AccessId != null &&
                    this.AccessId.Equals(input.AccessId))
                ) && 
                (
                    this.ClientType == input.ClientType ||
                    (this.ClientType != null &&
                    this.ClientType.Equals(input.ClientType))
                ) && 
                (
                    this.ClusterUniqueId == input.ClusterUniqueId ||
                    this.ClusterUniqueId.Equals(input.ClusterUniqueId)
                ) && 
                (
                    this.ConnectionType == input.ConnectionType ||
                    (this.ConnectionType != null &&
                    this.ConnectionType.Equals(input.ConnectionType))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.ErrorMsg == input.ErrorMsg ||
                    (this.ErrorMsg != null &&
                    this.ErrorMsg.Equals(input.ErrorMsg))
                ) && 
                (
                    this.GatewayName == input.GatewayName ||
                    (this.GatewayName != null &&
                    this.GatewayName.Equals(input.GatewayName))
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.SecretName == input.SecretName ||
                    (this.SecretName != null &&
                    this.SecretName.Equals(input.SecretName))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TargetHost == input.TargetHost ||
                    (this.TargetHost != null &&
                    this.TargetHost.Equals(input.TargetHost))
                ) && 
                (
                    this.Ttl == input.Ttl ||
                    (this.Ttl != null &&
                    this.Ttl.Equals(input.Ttl))
                ) && 
                (
                    this.UserIdentifier == input.UserIdentifier ||
                    (this.UserIdentifier != null &&
                    this.UserIdentifier.Equals(input.UserIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessId != null)
                {
                    hashCode = (hashCode * 59) + this.AccessId.GetHashCode();
                }
                if (this.ClientType != null)
                {
                    hashCode = (hashCode * 59) + this.ClientType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClusterUniqueId.GetHashCode();
                if (this.ConnectionType != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionType.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                if (this.ErrorMsg != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMsg.GetHashCode();
                }
                if (this.GatewayName != null)
                {
                    hashCode = (hashCode * 59) + this.GatewayName.GetHashCode();
                }
                if (this.InstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceId.GetHashCode();
                }
                if (this.SecretName != null)
                {
                    hashCode = (hashCode * 59) + this.SecretName.GetHashCode();
                }
                if (this.SessionId != null)
                {
                    hashCode = (hashCode * 59) + this.SessionId.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.TargetHost != null)
                {
                    hashCode = (hashCode * 59) + this.TargetHost.GetHashCode();
                }
                if (this.Ttl != null)
                {
                    hashCode = (hashCode * 59) + this.Ttl.GetHashCode();
                }
                if (this.UserIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.UserIdentifier.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
