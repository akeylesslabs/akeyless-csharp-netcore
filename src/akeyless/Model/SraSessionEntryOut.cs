/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SraSessionEntryOut
    /// </summary>
    [DataContract(Name = "SraSessionEntryOut")]
    public partial class SraSessionEntryOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SraSessionEntryOut" /> class.
        /// </summary>
        /// <param name="accessId">accessId.</param>
        /// <param name="clientType">clientType.</param>
        /// <param name="clusterUniqueId">clusterUniqueId.</param>
        /// <param name="connectionType">connectionType.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="errorMsg">errorMsg.</param>
        /// <param name="gatewayInfo">gatewayInfo.</param>
        /// <param name="instanceId">instanceId.</param>
        /// <param name="secretName">secretName.</param>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="status">status.</param>
        /// <param name="targetHost">targetHost.</param>
        /// <param name="ttl">ttl.</param>
        /// <param name="userIdentifier">userIdentifier.</param>
        public SraSessionEntryOut(string accessId = default(string), string clientType = default(string), long clusterUniqueId = default(long), string connectionType = default(string), DateTime endTime = default(DateTime), string errorMsg = default(string), GatewayNameInfo gatewayInfo = default(GatewayNameInfo), string instanceId = default(string), string secretName = default(string), string sessionId = default(string), DateTime startTime = default(DateTime), string status = default(string), string targetHost = default(string), string ttl = default(string), string userIdentifier = default(string))
        {
            this.AccessId = accessId;
            this.ClientType = clientType;
            this.ClusterUniqueId = clusterUniqueId;
            this.ConnectionType = connectionType;
            this.EndTime = endTime;
            this.ErrorMsg = errorMsg;
            this.GatewayInfo = gatewayInfo;
            this.InstanceId = instanceId;
            this.SecretName = secretName;
            this.SessionId = sessionId;
            this.StartTime = startTime;
            this.Status = status;
            this.TargetHost = targetHost;
            this.Ttl = ttl;
            this.UserIdentifier = userIdentifier;
        }

        /// <summary>
        /// Gets or Sets AccessId
        /// </summary>
        [DataMember(Name = "access_id", EmitDefaultValue = false)]
        public string AccessId { get; set; }

        /// <summary>
        /// Gets or Sets ClientType
        /// </summary>
        [DataMember(Name = "client_type", EmitDefaultValue = false)]
        public string ClientType { get; set; }

        /// <summary>
        /// Gets or Sets ClusterUniqueId
        /// </summary>
        [DataMember(Name = "cluster_unique_id", EmitDefaultValue = false)]
        public long ClusterUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionType
        /// </summary>
        [DataMember(Name = "connection_type", EmitDefaultValue = false)]
        public string ConnectionType { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "end_time", EmitDefaultValue = false)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMsg
        /// </summary>
        [DataMember(Name = "error_msg", EmitDefaultValue = false)]
        public string ErrorMsg { get; set; }

        /// <summary>
        /// Gets or Sets GatewayInfo
        /// </summary>
        [DataMember(Name = "gateway_info", EmitDefaultValue = false)]
        public GatewayNameInfo GatewayInfo { get; set; }

        /// <summary>
        /// Gets or Sets InstanceId
        /// </summary>
        [DataMember(Name = "instance_id", EmitDefaultValue = false)]
        public string InstanceId { get; set; }

        /// <summary>
        /// Gets or Sets SecretName
        /// </summary>
        [DataMember(Name = "secret_name", EmitDefaultValue = false)]
        public string SecretName { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name = "session_id", EmitDefaultValue = false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "start_time", EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TargetHost
        /// </summary>
        [DataMember(Name = "target_host", EmitDefaultValue = false)]
        public string TargetHost { get; set; }

        /// <summary>
        /// Gets or Sets Ttl
        /// </summary>
        [DataMember(Name = "ttl", EmitDefaultValue = false)]
        public string Ttl { get; set; }

        /// <summary>
        /// Gets or Sets UserIdentifier
        /// </summary>
        [DataMember(Name = "user_identifier", EmitDefaultValue = false)]
        public string UserIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SraSessionEntryOut {\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  ClientType: ").Append(ClientType).Append("\n");
            sb.Append("  ClusterUniqueId: ").Append(ClusterUniqueId).Append("\n");
            sb.Append("  ConnectionType: ").Append(ConnectionType).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ErrorMsg: ").Append(ErrorMsg).Append("\n");
            sb.Append("  GatewayInfo: ").Append(GatewayInfo).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  SecretName: ").Append(SecretName).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TargetHost: ").Append(TargetHost).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  UserIdentifier: ").Append(UserIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
