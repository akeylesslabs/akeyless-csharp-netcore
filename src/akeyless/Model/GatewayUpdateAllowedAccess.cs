/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayUpdateAllowedAccess is a command that update allowed access in Gator
    /// </summary>
    [DataContract(Name = "gatewayUpdateAllowedAccess")]
    public partial class GatewayUpdateAllowedAccess : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateAllowedAccess" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayUpdateAllowedAccess() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateAllowedAccess" /> class.
        /// </summary>
        /// <param name="subClaimsCaseInsensitive">subClaimsCaseInsensitive.</param>
        /// <param name="accessId">Access ID The access id to be attached to this allowed access. Auth method with this access id should already exist. (required).</param>
        /// <param name="caseSensitive">Treat sub claims as case-sensitive [true/false] (default to &quot;true&quot;).</param>
        /// <param name="description">Allowed access description.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Allowed access name (required).</param>
        /// <param name="newName">New allowed access name.</param>
        /// <param name="permissions">Permissions  Comma-seperated list of permissions for this allowed access. Available permissions: [defaults,targets,classic_keys,automatic_migration,ldap_auth,dynamic_secret,k8s_auth,log_forwarding,zero_knowledge_encryption,rotated_secret,caching,event_forwarding,admin,kmip,general].</param>
        /// <param name="subClaims">Sub claims key/val of sub claims, e.g group&#x3D;admins,developers.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GatewayUpdateAllowedAccess(bool subClaimsCaseInsensitive = default(bool), string accessId = default(string), string caseSensitive = @"true", string description = default(string), bool json = false, string name = default(string), string newName = default(string), string permissions = default(string), Dictionary<string, string> subClaims = default(Dictionary<string, string>), string token = default(string), string uidToken = default(string))
        {
            // to ensure "accessId" is required (not null)
            if (accessId == null)
            {
                throw new ArgumentNullException("accessId is a required property for GatewayUpdateAllowedAccess and cannot be null");
            }
            this.AccessId = accessId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayUpdateAllowedAccess and cannot be null");
            }
            this.Name = name;
            this.SubClaimsCaseInsensitive = subClaimsCaseInsensitive;
            // use default value if no "caseSensitive" provided
            this.CaseSensitive = caseSensitive ?? @"true";
            this.Description = description;
            this.Json = json;
            this.NewName = newName;
            this.Permissions = permissions;
            this.SubClaims = subClaims;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Gets or Sets SubClaimsCaseInsensitive
        /// </summary>
        [DataMember(Name = "SubClaimsCaseInsensitive", EmitDefaultValue = true)]
        public bool SubClaimsCaseInsensitive { get; set; }

        /// <summary>
        /// Access ID The access id to be attached to this allowed access. Auth method with this access id should already exist.
        /// </summary>
        /// <value>Access ID The access id to be attached to this allowed access. Auth method with this access id should already exist.</value>
        [DataMember(Name = "access-id", IsRequired = true, EmitDefaultValue = true)]
        public string AccessId { get; set; }

        /// <summary>
        /// Treat sub claims as case-sensitive [true/false]
        /// </summary>
        /// <value>Treat sub claims as case-sensitive [true/false]</value>
        [DataMember(Name = "case-sensitive", EmitDefaultValue = false)]
        public string CaseSensitive { get; set; }

        /// <summary>
        /// Allowed access description
        /// </summary>
        /// <value>Allowed access description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Allowed access name
        /// </summary>
        /// <value>Allowed access name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// New allowed access name
        /// </summary>
        /// <value>New allowed access name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Permissions  Comma-seperated list of permissions for this allowed access. Available permissions: [defaults,targets,classic_keys,automatic_migration,ldap_auth,dynamic_secret,k8s_auth,log_forwarding,zero_knowledge_encryption,rotated_secret,caching,event_forwarding,admin,kmip,general]
        /// </summary>
        /// <value>Permissions  Comma-seperated list of permissions for this allowed access. Available permissions: [defaults,targets,classic_keys,automatic_migration,ldap_auth,dynamic_secret,k8s_auth,log_forwarding,zero_knowledge_encryption,rotated_secret,caching,event_forwarding,admin,kmip,general]</value>
        [DataMember(Name = "permissions", EmitDefaultValue = false)]
        public string Permissions { get; set; }

        /// <summary>
        /// Sub claims key/val of sub claims, e.g group&#x3D;admins,developers
        /// </summary>
        /// <value>Sub claims key/val of sub claims, e.g group&#x3D;admins,developers</value>
        [DataMember(Name = "sub-claims", EmitDefaultValue = false)]
        public Dictionary<string, string> SubClaims { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayUpdateAllowedAccess {\n");
            sb.Append("  SubClaimsCaseInsensitive: ").Append(SubClaimsCaseInsensitive).Append("\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  CaseSensitive: ").Append(CaseSensitive).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  SubClaims: ").Append(SubClaims).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
