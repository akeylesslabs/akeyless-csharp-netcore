/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GatewayMessageQueueInfo
    /// </summary>
    [DataContract(Name = "GatewayMessageQueueInfo")]
    public partial class GatewayMessageQueueInfo : IEquatable<GatewayMessageQueueInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayMessageQueueInfo" /> class.
        /// </summary>
        /// <param name="mqType">mqType.</param>
        /// <param name="queueName">queueName.</param>
        /// <param name="queueUrl">queueUrl.</param>
        /// <param name="useNewQueue">useNewQueue.</param>
        public GatewayMessageQueueInfo(string mqType = default(string), string queueName = default(string), string queueUrl = default(string), bool useNewQueue = default(bool))
        {
            this.MqType = mqType;
            this.QueueName = queueName;
            this.QueueUrl = queueUrl;
            this.UseNewQueue = useNewQueue;
        }

        /// <summary>
        /// Gets or Sets MqType
        /// </summary>
        [DataMember(Name = "mq_type", EmitDefaultValue = false)]
        public string MqType { get; set; }

        /// <summary>
        /// Gets or Sets QueueName
        /// </summary>
        [DataMember(Name = "queue_name", EmitDefaultValue = false)]
        public string QueueName { get; set; }

        /// <summary>
        /// Gets or Sets QueueUrl
        /// </summary>
        [DataMember(Name = "queue_url", EmitDefaultValue = false)]
        public string QueueUrl { get; set; }

        /// <summary>
        /// Gets or Sets UseNewQueue
        /// </summary>
        [DataMember(Name = "use_new_queue", EmitDefaultValue = true)]
        public bool UseNewQueue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayMessageQueueInfo {\n");
            sb.Append("  MqType: ").Append(MqType).Append("\n");
            sb.Append("  QueueName: ").Append(QueueName).Append("\n");
            sb.Append("  QueueUrl: ").Append(QueueUrl).Append("\n");
            sb.Append("  UseNewQueue: ").Append(UseNewQueue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayMessageQueueInfo);
        }

        /// <summary>
        /// Returns true if GatewayMessageQueueInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayMessageQueueInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayMessageQueueInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MqType == input.MqType ||
                    (this.MqType != null &&
                    this.MqType.Equals(input.MqType))
                ) && 
                (
                    this.QueueName == input.QueueName ||
                    (this.QueueName != null &&
                    this.QueueName.Equals(input.QueueName))
                ) && 
                (
                    this.QueueUrl == input.QueueUrl ||
                    (this.QueueUrl != null &&
                    this.QueueUrl.Equals(input.QueueUrl))
                ) && 
                (
                    this.UseNewQueue == input.UseNewQueue ||
                    this.UseNewQueue.Equals(input.UseNewQueue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MqType != null)
                    hashCode = hashCode * 59 + this.MqType.GetHashCode();
                if (this.QueueName != null)
                    hashCode = hashCode * 59 + this.QueueName.GetHashCode();
                if (this.QueueUrl != null)
                    hashCode = hashCode * 59 + this.QueueUrl.GetHashCode();
                hashCode = hashCode * 59 + this.UseNewQueue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
