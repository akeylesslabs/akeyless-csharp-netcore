/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// RotatedSecretDetailsInfo The rotated secret rotator info
    /// </summary>
    [DataContract(Name = "RotatedSecretDetailsInfo")]
    public partial class RotatedSecretDetailsInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RotatedSecretDetailsInfo" /> class.
        /// </summary>
        /// <param name="deletePreviousVersionInDays">deletePreviousVersionInDays.</param>
        /// <param name="graceRotation">graceRotation.</param>
        /// <param name="gwClusterId">gwClusterId.</param>
        /// <param name="lastRotationError">lastRotationError.</param>
        /// <param name="managedByAkeyless">managedByAkeyless.</param>
        /// <param name="maxVersions">maxVersions.</param>
        /// <param name="numberOfVersionsToSave">numberOfVersionsToSave.</param>
        /// <param name="rotationHour">rotationHour.</param>
        /// <param name="rotationIntervalMin">rotationIntervalMin.</param>
        /// <param name="rotationStatement">rotationStatement.</param>
        /// <param name="rotatorCredsType">rotatorCredsType.</param>
        /// <param name="rotatorStatus">RotationStatus defines types of rotation Status.</param>
        /// <param name="rotatorType">rotatorType.</param>
        /// <param name="samePassword">samePassword.</param>
        /// <param name="servicesDetails">servicesDetails.</param>
        /// <param name="timeoutSeconds">timeoutSeconds.</param>
        public RotatedSecretDetailsInfo(int deletePreviousVersionInDays = default(int), bool graceRotation = default(bool), long gwClusterId = default(long), string lastRotationError = default(string), bool managedByAkeyless = default(bool), long maxVersions = default(long), int numberOfVersionsToSave = default(int), int rotationHour = default(int), bool rotationIntervalMin = default(bool), string rotationStatement = default(string), string rotatorCredsType = default(string), string rotatorStatus = default(string), string rotatorType = default(string), bool samePassword = default(bool), List<WindowsService> servicesDetails = default(List<WindowsService>), long timeoutSeconds = default(long))
        {
            this.DeletePreviousVersionInDays = deletePreviousVersionInDays;
            this.GraceRotation = graceRotation;
            this.GwClusterId = gwClusterId;
            this.LastRotationError = lastRotationError;
            this.ManagedByAkeyless = managedByAkeyless;
            this.MaxVersions = maxVersions;
            this.NumberOfVersionsToSave = numberOfVersionsToSave;
            this.RotationHour = rotationHour;
            this.RotationIntervalMin = rotationIntervalMin;
            this.RotationStatement = rotationStatement;
            this.RotatorCredsType = rotatorCredsType;
            this.RotatorStatus = rotatorStatus;
            this.RotatorType = rotatorType;
            this.SamePassword = samePassword;
            this.ServicesDetails = servicesDetails;
            this.TimeoutSeconds = timeoutSeconds;
        }

        /// <summary>
        /// Gets or Sets DeletePreviousVersionInDays
        /// </summary>
        [DataMember(Name = "delete_previous_version_in_days", EmitDefaultValue = false)]
        public int DeletePreviousVersionInDays { get; set; }

        /// <summary>
        /// Gets or Sets GraceRotation
        /// </summary>
        [DataMember(Name = "grace_rotation", EmitDefaultValue = true)]
        public bool GraceRotation { get; set; }

        /// <summary>
        /// Gets or Sets GwClusterId
        /// </summary>
        [DataMember(Name = "gw_cluster_id", EmitDefaultValue = false)]
        public long GwClusterId { get; set; }

        /// <summary>
        /// Gets or Sets LastRotationError
        /// </summary>
        [DataMember(Name = "last_rotation_error", EmitDefaultValue = false)]
        public string LastRotationError { get; set; }

        /// <summary>
        /// Gets or Sets ManagedByAkeyless
        /// </summary>
        [DataMember(Name = "managed_by_akeyless", EmitDefaultValue = true)]
        public bool ManagedByAkeyless { get; set; }

        /// <summary>
        /// Gets or Sets MaxVersions
        /// </summary>
        [DataMember(Name = "max_versions", EmitDefaultValue = false)]
        public long MaxVersions { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfVersionsToSave
        /// </summary>
        [DataMember(Name = "number_of_versions_to_save", EmitDefaultValue = false)]
        public int NumberOfVersionsToSave { get; set; }

        /// <summary>
        /// Gets or Sets RotationHour
        /// </summary>
        [DataMember(Name = "rotation_hour", EmitDefaultValue = false)]
        public int RotationHour { get; set; }

        /// <summary>
        /// Gets or Sets RotationIntervalMin
        /// </summary>
        [DataMember(Name = "rotation_interval_min", EmitDefaultValue = true)]
        public bool RotationIntervalMin { get; set; }

        /// <summary>
        /// Gets or Sets RotationStatement
        /// </summary>
        [DataMember(Name = "rotation_statement", EmitDefaultValue = false)]
        public string RotationStatement { get; set; }

        /// <summary>
        /// Gets or Sets RotatorCredsType
        /// </summary>
        [DataMember(Name = "rotator_creds_type", EmitDefaultValue = false)]
        public string RotatorCredsType { get; set; }

        /// <summary>
        /// RotationStatus defines types of rotation Status
        /// </summary>
        /// <value>RotationStatus defines types of rotation Status</value>
        [DataMember(Name = "rotator_status", EmitDefaultValue = false)]
        public string RotatorStatus { get; set; }

        /// <summary>
        /// Gets or Sets RotatorType
        /// </summary>
        [DataMember(Name = "rotator_type", EmitDefaultValue = false)]
        public string RotatorType { get; set; }

        /// <summary>
        /// Gets or Sets SamePassword
        /// </summary>
        [DataMember(Name = "same_password", EmitDefaultValue = true)]
        public bool SamePassword { get; set; }

        /// <summary>
        /// Gets or Sets ServicesDetails
        /// </summary>
        [DataMember(Name = "services_details", EmitDefaultValue = false)]
        public List<WindowsService> ServicesDetails { get; set; }

        /// <summary>
        /// Gets or Sets TimeoutSeconds
        /// </summary>
        [DataMember(Name = "timeout_seconds", EmitDefaultValue = false)]
        public long TimeoutSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RotatedSecretDetailsInfo {\n");
            sb.Append("  DeletePreviousVersionInDays: ").Append(DeletePreviousVersionInDays).Append("\n");
            sb.Append("  GraceRotation: ").Append(GraceRotation).Append("\n");
            sb.Append("  GwClusterId: ").Append(GwClusterId).Append("\n");
            sb.Append("  LastRotationError: ").Append(LastRotationError).Append("\n");
            sb.Append("  ManagedByAkeyless: ").Append(ManagedByAkeyless).Append("\n");
            sb.Append("  MaxVersions: ").Append(MaxVersions).Append("\n");
            sb.Append("  NumberOfVersionsToSave: ").Append(NumberOfVersionsToSave).Append("\n");
            sb.Append("  RotationHour: ").Append(RotationHour).Append("\n");
            sb.Append("  RotationIntervalMin: ").Append(RotationIntervalMin).Append("\n");
            sb.Append("  RotationStatement: ").Append(RotationStatement).Append("\n");
            sb.Append("  RotatorCredsType: ").Append(RotatorCredsType).Append("\n");
            sb.Append("  RotatorStatus: ").Append(RotatorStatus).Append("\n");
            sb.Append("  RotatorType: ").Append(RotatorType).Append("\n");
            sb.Append("  SamePassword: ").Append(SamePassword).Append("\n");
            sb.Append("  ServicesDetails: ").Append(ServicesDetails).Append("\n");
            sb.Append("  TimeoutSeconds: ").Append(TimeoutSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
