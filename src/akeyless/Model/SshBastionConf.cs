/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SshBastionConf
    /// </summary>
    [DataContract(Name = "SshBastionConf")]
    public partial class SshBastionConf : IEquatable<SshBastionConf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SshBastionConf" /> class.
        /// </summary>
        /// <param name="hideSessionRecording">hideSessionRecording.</param>
        /// <param name="kexalgs">kexalgs.</param>
        /// <param name="logForwarding">logForwarding.</param>
        /// <param name="sessionTermination">sessionTermination.</param>
        public SshBastionConf(bool hideSessionRecording = default(bool), string kexalgs = default(string), LogForwardingConfigPart logForwarding = default(LogForwardingConfigPart), SshBastionSessionTermination sessionTermination = default(SshBastionSessionTermination))
        {
            this.HideSessionRecording = hideSessionRecording;
            this.Kexalgs = kexalgs;
            this.LogForwarding = logForwarding;
            this.SessionTermination = sessionTermination;
        }

        /// <summary>
        /// Gets or Sets HideSessionRecording
        /// </summary>
        [DataMember(Name = "hide_session_recording", EmitDefaultValue = true)]
        public bool HideSessionRecording { get; set; }

        /// <summary>
        /// Gets or Sets Kexalgs
        /// </summary>
        [DataMember(Name = "kexalgs", EmitDefaultValue = false)]
        public string Kexalgs { get; set; }

        /// <summary>
        /// Gets or Sets LogForwarding
        /// </summary>
        [DataMember(Name = "log_forwarding", EmitDefaultValue = false)]
        public LogForwardingConfigPart LogForwarding { get; set; }

        /// <summary>
        /// Gets or Sets SessionTermination
        /// </summary>
        [DataMember(Name = "session_termination", EmitDefaultValue = false)]
        public SshBastionSessionTermination SessionTermination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SshBastionConf {\n");
            sb.Append("  HideSessionRecording: ").Append(HideSessionRecording).Append("\n");
            sb.Append("  Kexalgs: ").Append(Kexalgs).Append("\n");
            sb.Append("  LogForwarding: ").Append(LogForwarding).Append("\n");
            sb.Append("  SessionTermination: ").Append(SessionTermination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SshBastionConf);
        }

        /// <summary>
        /// Returns true if SshBastionConf instances are equal
        /// </summary>
        /// <param name="input">Instance of SshBastionConf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SshBastionConf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HideSessionRecording == input.HideSessionRecording ||
                    this.HideSessionRecording.Equals(input.HideSessionRecording)
                ) && 
                (
                    this.Kexalgs == input.Kexalgs ||
                    (this.Kexalgs != null &&
                    this.Kexalgs.Equals(input.Kexalgs))
                ) && 
                (
                    this.LogForwarding == input.LogForwarding ||
                    (this.LogForwarding != null &&
                    this.LogForwarding.Equals(input.LogForwarding))
                ) && 
                (
                    this.SessionTermination == input.SessionTermination ||
                    (this.SessionTermination != null &&
                    this.SessionTermination.Equals(input.SessionTermination))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.HideSessionRecording.GetHashCode();
                if (this.Kexalgs != null)
                {
                    hashCode = (hashCode * 59) + this.Kexalgs.GetHashCode();
                }
                if (this.LogForwarding != null)
                {
                    hashCode = (hashCode * 59) + this.LogForwarding.GetHashCode();
                }
                if (this.SessionTermination != null)
                {
                    hashCode = (hashCode * 59) + this.SessionTermination.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
