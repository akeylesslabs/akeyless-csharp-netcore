/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// K8SPayload
    /// </summary>
    [DataContract(Name = "K8SPayload")]
    public partial class K8SPayload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="K8SPayload" /> class.
        /// </summary>
        /// <param name="ca">ca.</param>
        /// <param name="clientCert">clientCert.</param>
        /// <param name="clientKey">clientKey.</param>
        /// <param name="varNamespace">varNamespace.</param>
        /// <param name="password">password.</param>
        /// <param name="server">server.</param>
        /// <param name="skipSystem">skipSystem.</param>
        /// <param name="token">token.</param>
        /// <param name="username">username.</param>
        public K8SPayload(List<int> ca = default(List<int>), List<int> clientCert = default(List<int>), List<int> clientKey = default(List<int>), string varNamespace = default(string), string password = default(string), string server = default(string), bool skipSystem = default(bool), string token = default(string), string username = default(string))
        {
            this.Ca = ca;
            this.ClientCert = clientCert;
            this.ClientKey = clientKey;
            this.Namespace = varNamespace;
            this.Password = password;
            this.Server = server;
            this.SkipSystem = skipSystem;
            this.Token = token;
            this.Username = username;
        }

        /// <summary>
        /// Gets or Sets Ca
        /// </summary>
        [DataMember(Name = "ca", EmitDefaultValue = false)]
        public List<int> Ca { get; set; }

        /// <summary>
        /// Gets or Sets ClientCert
        /// </summary>
        [DataMember(Name = "client_cert", EmitDefaultValue = false)]
        public List<int> ClientCert { get; set; }

        /// <summary>
        /// Gets or Sets ClientKey
        /// </summary>
        [DataMember(Name = "client_key", EmitDefaultValue = false)]
        public List<int> ClientKey { get; set; }

        /// <summary>
        /// Gets or Sets Namespace
        /// </summary>
        [DataMember(Name = "namespace", EmitDefaultValue = false)]
        public string Namespace { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [DataMember(Name = "server", EmitDefaultValue = false)]
        public string Server { get; set; }

        /// <summary>
        /// Gets or Sets SkipSystem
        /// </summary>
        [DataMember(Name = "skip_system", EmitDefaultValue = true)]
        public bool SkipSystem { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class K8SPayload {\n");
            sb.Append("  Ca: ").Append(Ca).Append("\n");
            sb.Append("  ClientCert: ").Append(ClientCert).Append("\n");
            sb.Append("  ClientKey: ").Append(ClientKey).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  SkipSystem: ").Append(SkipSystem).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
