/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// AWSIAMAccessRules
    /// </summary>
    [DataContract]
    public partial class AWSIAMAccessRules :  IEquatable<AWSIAMAccessRules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AWSIAMAccessRules" /> class.
        /// </summary>
        /// <param name="accountId">The list of account ids that the login is restricted to..</param>
        /// <param name="arn">The list of ARNs that the login is restricted to..</param>
        /// <param name="resourceId">The list of resource ids that the login is restricted to..</param>
        /// <param name="roleId">The list of role ids that the login is restricted to..</param>
        /// <param name="roleName">The list of role names that the login is restricted to..</param>
        /// <param name="stsEndpoint">The sts URL..</param>
        /// <param name="userId">The list of user ids that the login is restricted to..</param>
        /// <param name="userName">The list of user names that the login is restricted to..</param>
        public AWSIAMAccessRules(List<string> accountId = default(List<string>), List<string> arn = default(List<string>), List<string> resourceId = default(List<string>), List<string> roleId = default(List<string>), List<string> roleName = default(List<string>), string stsEndpoint = default(string), List<string> userId = default(List<string>), List<string> userName = default(List<string>))
        {
            this.AccountId = accountId;
            this.Arn = arn;
            this.ResourceId = resourceId;
            this.RoleId = roleId;
            this.RoleName = roleName;
            this.StsEndpoint = stsEndpoint;
            this.UserId = userId;
            this.UserName = userName;
        }
        
        /// <summary>
        /// The list of account ids that the login is restricted to.
        /// </summary>
        /// <value>The list of account ids that the login is restricted to.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public List<string> AccountId { get; set; }

        /// <summary>
        /// The list of ARNs that the login is restricted to.
        /// </summary>
        /// <value>The list of ARNs that the login is restricted to.</value>
        [DataMember(Name="arn", EmitDefaultValue=false)]
        public List<string> Arn { get; set; }

        /// <summary>
        /// The list of resource ids that the login is restricted to.
        /// </summary>
        /// <value>The list of resource ids that the login is restricted to.</value>
        [DataMember(Name="resource_id", EmitDefaultValue=false)]
        public List<string> ResourceId { get; set; }

        /// <summary>
        /// The list of role ids that the login is restricted to.
        /// </summary>
        /// <value>The list of role ids that the login is restricted to.</value>
        [DataMember(Name="role_id", EmitDefaultValue=false)]
        public List<string> RoleId { get; set; }

        /// <summary>
        /// The list of role names that the login is restricted to.
        /// </summary>
        /// <value>The list of role names that the login is restricted to.</value>
        [DataMember(Name="role_name", EmitDefaultValue=false)]
        public List<string> RoleName { get; set; }

        /// <summary>
        /// The sts URL.
        /// </summary>
        /// <value>The sts URL.</value>
        [DataMember(Name="sts_endpoint", EmitDefaultValue=false)]
        public string StsEndpoint { get; set; }

        /// <summary>
        /// The list of user ids that the login is restricted to.
        /// </summary>
        /// <value>The list of user ids that the login is restricted to.</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public List<string> UserId { get; set; }

        /// <summary>
        /// The list of user names that the login is restricted to.
        /// </summary>
        /// <value>The list of user names that the login is restricted to.</value>
        [DataMember(Name="user_name", EmitDefaultValue=false)]
        public List<string> UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AWSIAMAccessRules {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Arn: ").Append(Arn).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  StsEndpoint: ").Append(StsEndpoint).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AWSIAMAccessRules);
        }

        /// <summary>
        /// Returns true if AWSIAMAccessRules instances are equal
        /// </summary>
        /// <param name="input">Instance of AWSIAMAccessRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AWSIAMAccessRules input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    this.AccountId != null &&
                    input.AccountId != null &&
                    this.AccountId.SequenceEqual(input.AccountId)
                ) && 
                (
                    this.Arn == input.Arn ||
                    this.Arn != null &&
                    input.Arn != null &&
                    this.Arn.SequenceEqual(input.Arn)
                ) && 
                (
                    this.ResourceId == input.ResourceId ||
                    this.ResourceId != null &&
                    input.ResourceId != null &&
                    this.ResourceId.SequenceEqual(input.ResourceId)
                ) && 
                (
                    this.RoleId == input.RoleId ||
                    this.RoleId != null &&
                    input.RoleId != null &&
                    this.RoleId.SequenceEqual(input.RoleId)
                ) && 
                (
                    this.RoleName == input.RoleName ||
                    this.RoleName != null &&
                    input.RoleName != null &&
                    this.RoleName.SequenceEqual(input.RoleName)
                ) && 
                (
                    this.StsEndpoint == input.StsEndpoint ||
                    (this.StsEndpoint != null &&
                    this.StsEndpoint.Equals(input.StsEndpoint))
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId != null &&
                    input.UserId != null &&
                    this.UserId.SequenceEqual(input.UserId)
                ) && 
                (
                    this.UserName == input.UserName ||
                    this.UserName != null &&
                    input.UserName != null &&
                    this.UserName.SequenceEqual(input.UserName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Arn != null)
                    hashCode = hashCode * 59 + this.Arn.GetHashCode();
                if (this.ResourceId != null)
                    hashCode = hashCode * 59 + this.ResourceId.GetHashCode();
                if (this.RoleId != null)
                    hashCode = hashCode * 59 + this.RoleId.GetHashCode();
                if (this.RoleName != null)
                    hashCode = hashCode * 59 + this.RoleName.GetHashCode();
                if (this.StsEndpoint != null)
                    hashCode = hashCode * 59 + this.StsEndpoint.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
