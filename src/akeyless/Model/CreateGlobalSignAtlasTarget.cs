/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// createGlobalSignAtlasTarget is a command that creates a new target. [Deprecated: Use target-create-globalsign-atlas command]
    /// </summary>
    [DataContract(Name = "createGlobalSignAtlasTarget")]
    public partial class CreateGlobalSignAtlasTarget : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateGlobalSignAtlasTarget" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateGlobalSignAtlasTarget() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateGlobalSignAtlasTarget" /> class.
        /// </summary>
        /// <param name="apiKey">API Key of the GlobalSign Atlas account (required).</param>
        /// <param name="apiSecret">API Secret of the GlobalSign Atlas account (required).</param>
        /// <param name="comment">Deprecated - use description.</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="key">The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="maxVersions">Set the maximum number of versions, limited by the account settings defaults..</param>
        /// <param name="mtlsCertDataBase64">Mutual TLS Certificate contents of the GlobalSign Atlas account encoded in base64, either mtls-cert-file-path or mtls-cert-data-base64 must be supplied.</param>
        /// <param name="mtlsKeyDataBase64">Mutual TLS Key contents of the GlobalSign Atlas account encoded in base64, either mtls-key-file-path or mtls-data-base64 must be supplied.</param>
        /// <param name="name">Target name (required).</param>
        /// <param name="timeout">Timeout waiting for certificate validation in Duration format (1h - 1 Hour, 20m - 20 Minutes, 33m3s - 33 Minutes and 3 Seconds), maximum 1h. (default to &quot;5m&quot;).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public CreateGlobalSignAtlasTarget(string apiKey = default(string), string apiSecret = default(string), string comment = default(string), string description = default(string), bool json = false, string key = default(string), string maxVersions = default(string), string mtlsCertDataBase64 = default(string), string mtlsKeyDataBase64 = default(string), string name = default(string), string timeout = @"5m", string token = default(string), string uidToken = default(string))
        {
            // to ensure "apiKey" is required (not null)
            if (apiKey == null)
            {
                throw new ArgumentNullException("apiKey is a required property for CreateGlobalSignAtlasTarget and cannot be null");
            }
            this.ApiKey = apiKey;
            // to ensure "apiSecret" is required (not null)
            if (apiSecret == null)
            {
                throw new ArgumentNullException("apiSecret is a required property for CreateGlobalSignAtlasTarget and cannot be null");
            }
            this.ApiSecret = apiSecret;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateGlobalSignAtlasTarget and cannot be null");
            }
            this.Name = name;
            this.Comment = comment;
            this.Description = description;
            this.Json = json;
            this.Key = key;
            this.MaxVersions = maxVersions;
            this.MtlsCertDataBase64 = mtlsCertDataBase64;
            this.MtlsKeyDataBase64 = mtlsKeyDataBase64;
            // use default value if no "timeout" provided
            this.Timeout = timeout ?? @"5m";
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// API Key of the GlobalSign Atlas account
        /// </summary>
        /// <value>API Key of the GlobalSign Atlas account</value>
        [DataMember(Name = "api-key", IsRequired = true, EmitDefaultValue = true)]
        public string ApiKey { get; set; }

        /// <summary>
        /// API Secret of the GlobalSign Atlas account
        /// </summary>
        /// <value>API Secret of the GlobalSign Atlas account</value>
        [DataMember(Name = "api-secret", IsRequired = true, EmitDefaultValue = true)]
        public string ApiSecret { get; set; }

        /// <summary>
        /// Deprecated - use description
        /// </summary>
        /// <value>Deprecated - use description</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Set the maximum number of versions, limited by the account settings defaults.
        /// </summary>
        /// <value>Set the maximum number of versions, limited by the account settings defaults.</value>
        [DataMember(Name = "max-versions", EmitDefaultValue = false)]
        public string MaxVersions { get; set; }

        /// <summary>
        /// Mutual TLS Certificate contents of the GlobalSign Atlas account encoded in base64, either mtls-cert-file-path or mtls-cert-data-base64 must be supplied
        /// </summary>
        /// <value>Mutual TLS Certificate contents of the GlobalSign Atlas account encoded in base64, either mtls-cert-file-path or mtls-cert-data-base64 must be supplied</value>
        [DataMember(Name = "mtls-cert-data-base64", EmitDefaultValue = false)]
        public string MtlsCertDataBase64 { get; set; }

        /// <summary>
        /// Mutual TLS Key contents of the GlobalSign Atlas account encoded in base64, either mtls-key-file-path or mtls-data-base64 must be supplied
        /// </summary>
        /// <value>Mutual TLS Key contents of the GlobalSign Atlas account encoded in base64, either mtls-key-file-path or mtls-data-base64 must be supplied</value>
        [DataMember(Name = "mtls-key-data-base64", EmitDefaultValue = false)]
        public string MtlsKeyDataBase64 { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Timeout waiting for certificate validation in Duration format (1h - 1 Hour, 20m - 20 Minutes, 33m3s - 33 Minutes and 3 Seconds), maximum 1h.
        /// </summary>
        /// <value>Timeout waiting for certificate validation in Duration format (1h - 1 Hour, 20m - 20 Minutes, 33m3s - 33 Minutes and 3 Seconds), maximum 1h.</value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public string Timeout { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateGlobalSignAtlasTarget {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  ApiSecret: ").Append(ApiSecret).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  MaxVersions: ").Append(MaxVersions).Append("\n");
            sb.Append("  MtlsCertDataBase64: ").Append(MtlsCertDataBase64).Append("\n");
            sb.Append("  MtlsKeyDataBase64: ").Append(MtlsKeyDataBase64).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
