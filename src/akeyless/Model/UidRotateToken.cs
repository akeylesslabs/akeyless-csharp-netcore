/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// uidRotateToken is a command that rotates an Akeyless Universal Identity token.
    /// </summary>
    [DataContract(Name = "uidRotateToken")]
    public partial class UidRotateToken : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UidRotateToken" /> class.
        /// </summary>
        /// <param name="fork">Create a new child token with default parameters.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="sendManualAckToken">The new rotated token to send manual ack for (with uid-token&#x3D;the-orig-token).</param>
        /// <param name="uidToken">The Universal identity token.</param>
        /// <param name="withManualAck">Disable automatic ack.</param>
        public UidRotateToken(bool fork = default(bool), bool json = false, string sendManualAckToken = default(string), string uidToken = default(string), bool withManualAck = default(bool))
        {
            this.Fork = fork;
            this.Json = json;
            this.SendManualAckToken = sendManualAckToken;
            this.UidToken = uidToken;
            this.WithManualAck = withManualAck;
        }

        /// <summary>
        /// Create a new child token with default parameters
        /// </summary>
        /// <value>Create a new child token with default parameters</value>
        [DataMember(Name = "fork", EmitDefaultValue = true)]
        public bool Fork { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The new rotated token to send manual ack for (with uid-token&#x3D;the-orig-token)
        /// </summary>
        /// <value>The new rotated token to send manual ack for (with uid-token&#x3D;the-orig-token)</value>
        [DataMember(Name = "send-manual-ack-token", EmitDefaultValue = false)]
        public string SendManualAckToken { get; set; }

        /// <summary>
        /// The Universal identity token
        /// </summary>
        /// <value>The Universal identity token</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Disable automatic ack
        /// </summary>
        /// <value>Disable automatic ack</value>
        [DataMember(Name = "with-manual-ack", EmitDefaultValue = true)]
        public bool WithManualAck { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UidRotateToken {\n");
            sb.Append("  Fork: ").Append(Fork).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  SendManualAckToken: ").Append(SendManualAckToken).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  WithManualAck: ").Append(WithManualAck).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
