/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// createTokenizer is a command that creates a tokenizer item
    /// </summary>
    [DataContract(Name = "createTokenizer")]
    public partial class CreateTokenizer : IEquatable<CreateTokenizer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTokenizer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTokenizer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTokenizer" /> class.
        /// </summary>
        /// <param name="alphabet">Alphabet to use in regexp vaultless tokenization.</param>
        /// <param name="decryptionTemplate">The Decryption output template to use in regexp vaultless tokenization.</param>
        /// <param name="encryptionKeyName">AES key name to use in vaultless tokenization.</param>
        /// <param name="encryptionTemplate">The Encryption output template to use in regexp vaultless tokenization.</param>
        /// <param name="metadata">A metadata about the tokenizer.</param>
        /// <param name="name">Tokenizer name (required).</param>
        /// <param name="pattern">Pattern to use in regexp vaultless tokenization.</param>
        /// <param name="tag">List of the tags attached to this key.</param>
        /// <param name="templateType">Which template type this tokenizer is used for [SSN,CreditCard,USPhoneNumber,Email,Regexp] (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="tokenizerType">Tokenizer type (required).</param>
        /// <param name="tweakType">The tweak type to use in vaultless tokenization [Supplied, Generated, Internal, Masking].</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public CreateTokenizer(string alphabet = default(string), string decryptionTemplate = default(string), string encryptionKeyName = default(string), string encryptionTemplate = default(string), string metadata = default(string), string name = default(string), string pattern = default(string), List<string> tag = default(List<string>), string templateType = default(string), string token = default(string), string tokenizerType = default(string), string tweakType = default(string), string uidToken = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for CreateTokenizer and cannot be null");
            }
            this.Name = name;
            // to ensure "templateType" is required (not null)
            if (templateType == null) {
                throw new ArgumentNullException("templateType is a required property for CreateTokenizer and cannot be null");
            }
            this.TemplateType = templateType;
            // to ensure "tokenizerType" is required (not null)
            if (tokenizerType == null) {
                throw new ArgumentNullException("tokenizerType is a required property for CreateTokenizer and cannot be null");
            }
            this.TokenizerType = tokenizerType;
            this.Alphabet = alphabet;
            this.DecryptionTemplate = decryptionTemplate;
            this.EncryptionKeyName = encryptionKeyName;
            this.EncryptionTemplate = encryptionTemplate;
            this.Metadata = metadata;
            this.Pattern = pattern;
            this.Tag = tag;
            this.Token = token;
            this.TweakType = tweakType;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Alphabet to use in regexp vaultless tokenization
        /// </summary>
        /// <value>Alphabet to use in regexp vaultless tokenization</value>
        [DataMember(Name = "alphabet", EmitDefaultValue = false)]
        public string Alphabet { get; set; }

        /// <summary>
        /// The Decryption output template to use in regexp vaultless tokenization
        /// </summary>
        /// <value>The Decryption output template to use in regexp vaultless tokenization</value>
        [DataMember(Name = "decryption-template", EmitDefaultValue = false)]
        public string DecryptionTemplate { get; set; }

        /// <summary>
        /// AES key name to use in vaultless tokenization
        /// </summary>
        /// <value>AES key name to use in vaultless tokenization</value>
        [DataMember(Name = "encryption-key-name", EmitDefaultValue = false)]
        public string EncryptionKeyName { get; set; }

        /// <summary>
        /// The Encryption output template to use in regexp vaultless tokenization
        /// </summary>
        /// <value>The Encryption output template to use in regexp vaultless tokenization</value>
        [DataMember(Name = "encryption-template", EmitDefaultValue = false)]
        public string EncryptionTemplate { get; set; }

        /// <summary>
        /// A metadata about the tokenizer
        /// </summary>
        /// <value>A metadata about the tokenizer</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Tokenizer name
        /// </summary>
        /// <value>Tokenizer name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Pattern to use in regexp vaultless tokenization
        /// </summary>
        /// <value>Pattern to use in regexp vaultless tokenization</value>
        [DataMember(Name = "pattern", EmitDefaultValue = false)]
        public string Pattern { get; set; }

        /// <summary>
        /// List of the tags attached to this key
        /// </summary>
        /// <value>List of the tags attached to this key</value>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public List<string> Tag { get; set; }

        /// <summary>
        /// Which template type this tokenizer is used for [SSN,CreditCard,USPhoneNumber,Email,Regexp]
        /// </summary>
        /// <value>Which template type this tokenizer is used for [SSN,CreditCard,USPhoneNumber,Email,Regexp]</value>
        [DataMember(Name = "template-type", IsRequired = true, EmitDefaultValue = false)]
        public string TemplateType { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Tokenizer type
        /// </summary>
        /// <value>Tokenizer type</value>
        [DataMember(Name = "tokenizer-type", IsRequired = true, EmitDefaultValue = false)]
        public string TokenizerType { get; set; }

        /// <summary>
        /// The tweak type to use in vaultless tokenization [Supplied, Generated, Internal, Masking]
        /// </summary>
        /// <value>The tweak type to use in vaultless tokenization [Supplied, Generated, Internal, Masking]</value>
        [DataMember(Name = "tweak-type", EmitDefaultValue = false)]
        public string TweakType { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTokenizer {\n");
            sb.Append("  Alphabet: ").Append(Alphabet).Append("\n");
            sb.Append("  DecryptionTemplate: ").Append(DecryptionTemplate).Append("\n");
            sb.Append("  EncryptionKeyName: ").Append(EncryptionKeyName).Append("\n");
            sb.Append("  EncryptionTemplate: ").Append(EncryptionTemplate).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  TemplateType: ").Append(TemplateType).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  TokenizerType: ").Append(TokenizerType).Append("\n");
            sb.Append("  TweakType: ").Append(TweakType).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTokenizer);
        }

        /// <summary>
        /// Returns true if CreateTokenizer instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTokenizer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTokenizer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Alphabet == input.Alphabet ||
                    (this.Alphabet != null &&
                    this.Alphabet.Equals(input.Alphabet))
                ) && 
                (
                    this.DecryptionTemplate == input.DecryptionTemplate ||
                    (this.DecryptionTemplate != null &&
                    this.DecryptionTemplate.Equals(input.DecryptionTemplate))
                ) && 
                (
                    this.EncryptionKeyName == input.EncryptionKeyName ||
                    (this.EncryptionKeyName != null &&
                    this.EncryptionKeyName.Equals(input.EncryptionKeyName))
                ) && 
                (
                    this.EncryptionTemplate == input.EncryptionTemplate ||
                    (this.EncryptionTemplate != null &&
                    this.EncryptionTemplate.Equals(input.EncryptionTemplate))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Pattern == input.Pattern ||
                    (this.Pattern != null &&
                    this.Pattern.Equals(input.Pattern))
                ) && 
                (
                    this.Tag == input.Tag ||
                    this.Tag != null &&
                    input.Tag != null &&
                    this.Tag.SequenceEqual(input.Tag)
                ) && 
                (
                    this.TemplateType == input.TemplateType ||
                    (this.TemplateType != null &&
                    this.TemplateType.Equals(input.TemplateType))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.TokenizerType == input.TokenizerType ||
                    (this.TokenizerType != null &&
                    this.TokenizerType.Equals(input.TokenizerType))
                ) && 
                (
                    this.TweakType == input.TweakType ||
                    (this.TweakType != null &&
                    this.TweakType.Equals(input.TweakType))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alphabet != null)
                    hashCode = hashCode * 59 + this.Alphabet.GetHashCode();
                if (this.DecryptionTemplate != null)
                    hashCode = hashCode * 59 + this.DecryptionTemplate.GetHashCode();
                if (this.EncryptionKeyName != null)
                    hashCode = hashCode * 59 + this.EncryptionKeyName.GetHashCode();
                if (this.EncryptionTemplate != null)
                    hashCode = hashCode * 59 + this.EncryptionTemplate.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Pattern != null)
                    hashCode = hashCode * 59 + this.Pattern.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.TemplateType != null)
                    hashCode = hashCode * 59 + this.TemplateType.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.TokenizerType != null)
                    hashCode = hashCode * 59 + this.TokenizerType.GetHashCode();
                if (this.TweakType != null)
                    hashCode = hashCode * 59 + this.TweakType.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
