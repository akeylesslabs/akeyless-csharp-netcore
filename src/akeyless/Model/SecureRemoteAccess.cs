/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SecureRemoteAccess
    /// </summary>
    [DataContract(Name = "SecureRemoteAccess")]
    public partial class SecureRemoteAccess : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecureRemoteAccess" /> class.
        /// </summary>
        /// <param name="accountId">accountId.</param>
        /// <param name="allowPortForwarding">allowPortForwarding.</param>
        /// <param name="allowProvidingExternalUsername">allowProvidingExternalUsername.</param>
        /// <param name="bastionApi">bastionApi.</param>
        /// <param name="bastionIssuer">bastionIssuer.</param>
        /// <param name="bastionIssuerId">bastionIssuerId.</param>
        /// <param name="bastionSsh">bastionSsh.</param>
        /// <param name="blockConcurrentConnections">blockConcurrentConnections.</param>
        /// <param name="blockConcurrentConnectionsLevel">blockConcurrentConnectionsLevel.</param>
        /// <param name="category">category.</param>
        /// <param name="connectionDelaySeconds">connectionDelaySeconds.</param>
        /// <param name="dashboardUrl">dashboardUrl.</param>
        /// <param name="dbName">dbName.</param>
        /// <param name="domain">domain.</param>
        /// <param name="enable">enable.</param>
        /// <param name="endpoint">endpoint.</param>
        /// <param name="enforceHostsRestriction">enforceHostsRestriction.</param>
        /// <param name="gwClusterId">gwClusterId.</param>
        /// <param name="host">host.</param>
        /// <param name="hostProviderType">hostProviderType.</param>
        /// <param name="isCli">isCli.</param>
        /// <param name="isDesktopApp">isDesktopApp.</param>
        /// <param name="isWeb">isWeb.</param>
        /// <param name="isolated">isolated.</param>
        /// <param name="native">native.</param>
        /// <param name="rdGatewayServer">rdGatewayServer.</param>
        /// <param name="rdpUser">rdpUser.</param>
        /// <param name="region">region.</param>
        /// <param name="rotateAfterDisconnect">rotateAfterDisconnect.</param>
        /// <param name="schema">schema.</param>
        /// <param name="sshPassword">sshPassword.</param>
        /// <param name="sshPrivateKey">sshPrivateKey.</param>
        /// <param name="sshUser">sshUser.</param>
        /// <param name="statusInfo">statusInfo.</param>
        /// <param name="targetHosts">targetHosts.</param>
        /// <param name="targets">targets.</param>
        /// <param name="url">url.</param>
        /// <param name="useInternalBastion">useInternalBastion.</param>
        /// <param name="webProxy">webProxy.</param>
        public SecureRemoteAccess(string accountId = default(string), bool allowPortForwarding = default(bool), bool allowProvidingExternalUsername = default(bool), string bastionApi = default(string), string bastionIssuer = default(string), long bastionIssuerId = default(long), string bastionSsh = default(string), bool blockConcurrentConnections = default(bool), string blockConcurrentConnectionsLevel = default(string), string category = default(string), long connectionDelaySeconds = default(long), string dashboardUrl = default(string), string dbName = default(string), string domain = default(string), bool enable = default(bool), string endpoint = default(string), bool enforceHostsRestriction = default(bool), long gwClusterId = default(long), List<string> host = default(List<string>), string hostProviderType = default(string), bool isCli = default(bool), bool isDesktopApp = default(bool), bool isWeb = default(bool), bool isolated = default(bool), bool native = default(bool), string rdGatewayServer = default(string), string rdpUser = default(string), string region = default(string), bool rotateAfterDisconnect = default(bool), string schema = default(string), bool sshPassword = default(bool), bool sshPrivateKey = default(bool), string sshUser = default(string), ItemSraStatus statusInfo = default(ItemSraStatus), List<TargetNameWithHosts> targetHosts = default(List<TargetNameWithHosts>), List<string> targets = default(List<string>), string url = default(string), bool useInternalBastion = default(bool), bool webProxy = default(bool))
        {
            this.AccountId = accountId;
            this.AllowPortForwarding = allowPortForwarding;
            this.AllowProvidingExternalUsername = allowProvidingExternalUsername;
            this.BastionApi = bastionApi;
            this.BastionIssuer = bastionIssuer;
            this.BastionIssuerId = bastionIssuerId;
            this.BastionSsh = bastionSsh;
            this.BlockConcurrentConnections = blockConcurrentConnections;
            this.BlockConcurrentConnectionsLevel = blockConcurrentConnectionsLevel;
            this.Category = category;
            this.ConnectionDelaySeconds = connectionDelaySeconds;
            this.DashboardUrl = dashboardUrl;
            this.DbName = dbName;
            this.Domain = domain;
            this.Enable = enable;
            this.Endpoint = endpoint;
            this.EnforceHostsRestriction = enforceHostsRestriction;
            this.GwClusterId = gwClusterId;
            this.Host = host;
            this.HostProviderType = hostProviderType;
            this.IsCli = isCli;
            this.IsDesktopApp = isDesktopApp;
            this.IsWeb = isWeb;
            this.Isolated = isolated;
            this.Native = native;
            this.RdGatewayServer = rdGatewayServer;
            this.RdpUser = rdpUser;
            this.Region = region;
            this.RotateAfterDisconnect = rotateAfterDisconnect;
            this.Schema = schema;
            this.SshPassword = sshPassword;
            this.SshPrivateKey = sshPrivateKey;
            this.SshUser = sshUser;
            this.StatusInfo = statusInfo;
            this.TargetHosts = targetHosts;
            this.Targets = targets;
            this.Url = url;
            this.UseInternalBastion = useInternalBastion;
            this.WebProxy = webProxy;
        }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "account_id", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets AllowPortForwarding
        /// </summary>
        [DataMember(Name = "allow_port_forwarding", EmitDefaultValue = true)]
        public bool AllowPortForwarding { get; set; }

        /// <summary>
        /// Gets or Sets AllowProvidingExternalUsername
        /// </summary>
        [DataMember(Name = "allow_providing_external_username", EmitDefaultValue = true)]
        public bool AllowProvidingExternalUsername { get; set; }

        /// <summary>
        /// Gets or Sets BastionApi
        /// </summary>
        [DataMember(Name = "bastion_api", EmitDefaultValue = false)]
        public string BastionApi { get; set; }

        /// <summary>
        /// Gets or Sets BastionIssuer
        /// </summary>
        [DataMember(Name = "bastion_issuer", EmitDefaultValue = false)]
        public string BastionIssuer { get; set; }

        /// <summary>
        /// Gets or Sets BastionIssuerId
        /// </summary>
        [DataMember(Name = "bastion_issuer_id", EmitDefaultValue = false)]
        public long BastionIssuerId { get; set; }

        /// <summary>
        /// Gets or Sets BastionSsh
        /// </summary>
        [DataMember(Name = "bastion_ssh", EmitDefaultValue = false)]
        public string BastionSsh { get; set; }

        /// <summary>
        /// Gets or Sets BlockConcurrentConnections
        /// </summary>
        [DataMember(Name = "block_concurrent_connections", EmitDefaultValue = true)]
        public bool BlockConcurrentConnections { get; set; }

        /// <summary>
        /// Gets or Sets BlockConcurrentConnectionsLevel
        /// </summary>
        [DataMember(Name = "block_concurrent_connections_level", EmitDefaultValue = false)]
        public string BlockConcurrentConnectionsLevel { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionDelaySeconds
        /// </summary>
        [DataMember(Name = "connection_delay_seconds", EmitDefaultValue = false)]
        public long ConnectionDelaySeconds { get; set; }

        /// <summary>
        /// Gets or Sets DashboardUrl
        /// </summary>
        [DataMember(Name = "dashboard_url", EmitDefaultValue = false)]
        public string DashboardUrl { get; set; }

        /// <summary>
        /// Gets or Sets DbName
        /// </summary>
        [DataMember(Name = "db_name", EmitDefaultValue = false)]
        public string DbName { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets Enable
        /// </summary>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name = "endpoint", EmitDefaultValue = false)]
        public string Endpoint { get; set; }

        /// <summary>
        /// Gets or Sets EnforceHostsRestriction
        /// </summary>
        [DataMember(Name = "enforce_hosts_restriction", EmitDefaultValue = true)]
        public bool EnforceHostsRestriction { get; set; }

        /// <summary>
        /// Gets or Sets GwClusterId
        /// </summary>
        [DataMember(Name = "gw_cluster_id", EmitDefaultValue = false)]
        public long GwClusterId { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public List<string> Host { get; set; }

        /// <summary>
        /// Gets or Sets HostProviderType
        /// </summary>
        [DataMember(Name = "host_provider_type", EmitDefaultValue = false)]
        public string HostProviderType { get; set; }

        /// <summary>
        /// Gets or Sets IsCli
        /// </summary>
        [DataMember(Name = "is_cli", EmitDefaultValue = true)]
        public bool IsCli { get; set; }

        /// <summary>
        /// Gets or Sets IsDesktopApp
        /// </summary>
        [DataMember(Name = "is_desktop_app", EmitDefaultValue = true)]
        public bool IsDesktopApp { get; set; }

        /// <summary>
        /// Gets or Sets IsWeb
        /// </summary>
        [DataMember(Name = "is_web", EmitDefaultValue = true)]
        public bool IsWeb { get; set; }

        /// <summary>
        /// Gets or Sets Isolated
        /// </summary>
        [DataMember(Name = "isolated", EmitDefaultValue = true)]
        public bool Isolated { get; set; }

        /// <summary>
        /// Gets or Sets Native
        /// </summary>
        [DataMember(Name = "native", EmitDefaultValue = true)]
        public bool Native { get; set; }

        /// <summary>
        /// Gets or Sets RdGatewayServer
        /// </summary>
        [DataMember(Name = "rd_gateway_server", EmitDefaultValue = false)]
        public string RdGatewayServer { get; set; }

        /// <summary>
        /// Gets or Sets RdpUser
        /// </summary>
        [DataMember(Name = "rdp_user", EmitDefaultValue = false)]
        public string RdpUser { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets RotateAfterDisconnect
        /// </summary>
        [DataMember(Name = "rotate_after_disconnect", EmitDefaultValue = true)]
        public bool RotateAfterDisconnect { get; set; }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public string Schema { get; set; }

        /// <summary>
        /// Gets or Sets SshPassword
        /// </summary>
        [DataMember(Name = "ssh_password", EmitDefaultValue = true)]
        public bool SshPassword { get; set; }

        /// <summary>
        /// Gets or Sets SshPrivateKey
        /// </summary>
        [DataMember(Name = "ssh_private_key", EmitDefaultValue = true)]
        public bool SshPrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets SshUser
        /// </summary>
        [DataMember(Name = "ssh_user", EmitDefaultValue = false)]
        public string SshUser { get; set; }

        /// <summary>
        /// Gets or Sets StatusInfo
        /// </summary>
        [DataMember(Name = "status_info", EmitDefaultValue = false)]
        public ItemSraStatus StatusInfo { get; set; }

        /// <summary>
        /// Gets or Sets TargetHosts
        /// </summary>
        [DataMember(Name = "target_hosts", EmitDefaultValue = false)]
        public List<TargetNameWithHosts> TargetHosts { get; set; }

        /// <summary>
        /// Gets or Sets Targets
        /// </summary>
        [DataMember(Name = "targets", EmitDefaultValue = false)]
        public List<string> Targets { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets UseInternalBastion
        /// </summary>
        [DataMember(Name = "use_internal_bastion", EmitDefaultValue = true)]
        public bool UseInternalBastion { get; set; }

        /// <summary>
        /// Gets or Sets WebProxy
        /// </summary>
        [DataMember(Name = "web_proxy", EmitDefaultValue = true)]
        public bool WebProxy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecureRemoteAccess {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AllowPortForwarding: ").Append(AllowPortForwarding).Append("\n");
            sb.Append("  AllowProvidingExternalUsername: ").Append(AllowProvidingExternalUsername).Append("\n");
            sb.Append("  BastionApi: ").Append(BastionApi).Append("\n");
            sb.Append("  BastionIssuer: ").Append(BastionIssuer).Append("\n");
            sb.Append("  BastionIssuerId: ").Append(BastionIssuerId).Append("\n");
            sb.Append("  BastionSsh: ").Append(BastionSsh).Append("\n");
            sb.Append("  BlockConcurrentConnections: ").Append(BlockConcurrentConnections).Append("\n");
            sb.Append("  BlockConcurrentConnectionsLevel: ").Append(BlockConcurrentConnectionsLevel).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ConnectionDelaySeconds: ").Append(ConnectionDelaySeconds).Append("\n");
            sb.Append("  DashboardUrl: ").Append(DashboardUrl).Append("\n");
            sb.Append("  DbName: ").Append(DbName).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  EnforceHostsRestriction: ").Append(EnforceHostsRestriction).Append("\n");
            sb.Append("  GwClusterId: ").Append(GwClusterId).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  HostProviderType: ").Append(HostProviderType).Append("\n");
            sb.Append("  IsCli: ").Append(IsCli).Append("\n");
            sb.Append("  IsDesktopApp: ").Append(IsDesktopApp).Append("\n");
            sb.Append("  IsWeb: ").Append(IsWeb).Append("\n");
            sb.Append("  Isolated: ").Append(Isolated).Append("\n");
            sb.Append("  Native: ").Append(Native).Append("\n");
            sb.Append("  RdGatewayServer: ").Append(RdGatewayServer).Append("\n");
            sb.Append("  RdpUser: ").Append(RdpUser).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  RotateAfterDisconnect: ").Append(RotateAfterDisconnect).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  SshPassword: ").Append(SshPassword).Append("\n");
            sb.Append("  SshPrivateKey: ").Append(SshPrivateKey).Append("\n");
            sb.Append("  SshUser: ").Append(SshUser).Append("\n");
            sb.Append("  StatusInfo: ").Append(StatusInfo).Append("\n");
            sb.Append("  TargetHosts: ").Append(TargetHosts).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UseInternalBastion: ").Append(UseInternalBastion).Append("\n");
            sb.Append("  WebProxy: ").Append(WebProxy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
