/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SecureRemoteAccess
    /// </summary>
    [DataContract(Name = "SecureRemoteAccess")]
    public partial class SecureRemoteAccess : IEquatable<SecureRemoteAccess>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecureRemoteAccess" /> class.
        /// </summary>
        /// <param name="accountId">accountId.</param>
        /// <param name="allowPortForwarding">allowPortForwarding.</param>
        /// <param name="allowProvidingExternalUsername">allowProvidingExternalUsername.</param>
        /// <param name="bastionApi">bastionApi.</param>
        /// <param name="bastionIssuer">bastionIssuer.</param>
        /// <param name="bastionIssuerId">bastionIssuerId.</param>
        /// <param name="bastionSsh">bastionSsh.</param>
        /// <param name="category">category.</param>
        /// <param name="dashboardUrl">dashboardUrl.</param>
        /// <param name="dbName">dbName.</param>
        /// <param name="domain">domain.</param>
        /// <param name="enable">enable.</param>
        /// <param name="endpoint">endpoint.</param>
        /// <param name="host">host.</param>
        /// <param name="isCli">isCli.</param>
        /// <param name="isWeb">isWeb.</param>
        /// <param name="isolated">isolated.</param>
        /// <param name="native">native.</param>
        /// <param name="rdpUser">rdpUser.</param>
        /// <param name="region">region.</param>
        /// <param name="schema">schema.</param>
        /// <param name="sshPassword">sshPassword.</param>
        /// <param name="sshPrivateKey">sshPrivateKey.</param>
        /// <param name="sshUser">sshUser.</param>
        /// <param name="url">url.</param>
        /// <param name="useInternalBastion">useInternalBastion.</param>
        public SecureRemoteAccess(string accountId = default(string), bool allowPortForwarding = default(bool), bool allowProvidingExternalUsername = default(bool), string bastionApi = default(string), string bastionIssuer = default(string), long bastionIssuerId = default(long), string bastionSsh = default(string), string category = default(string), string dashboardUrl = default(string), string dbName = default(string), string domain = default(string), bool enable = default(bool), string endpoint = default(string), List<string> host = default(List<string>), bool isCli = default(bool), bool isWeb = default(bool), bool isolated = default(bool), bool native = default(bool), string rdpUser = default(string), string region = default(string), string schema = default(string), bool sshPassword = default(bool), bool sshPrivateKey = default(bool), string sshUser = default(string), string url = default(string), bool useInternalBastion = default(bool))
        {
            this.AccountId = accountId;
            this.AllowPortForwarding = allowPortForwarding;
            this.AllowProvidingExternalUsername = allowProvidingExternalUsername;
            this.BastionApi = bastionApi;
            this.BastionIssuer = bastionIssuer;
            this.BastionIssuerId = bastionIssuerId;
            this.BastionSsh = bastionSsh;
            this.Category = category;
            this.DashboardUrl = dashboardUrl;
            this.DbName = dbName;
            this.Domain = domain;
            this.Enable = enable;
            this.Endpoint = endpoint;
            this.Host = host;
            this.IsCli = isCli;
            this.IsWeb = isWeb;
            this.Isolated = isolated;
            this.Native = native;
            this.RdpUser = rdpUser;
            this.Region = region;
            this.Schema = schema;
            this.SshPassword = sshPassword;
            this.SshPrivateKey = sshPrivateKey;
            this.SshUser = sshUser;
            this.Url = url;
            this.UseInternalBastion = useInternalBastion;
        }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "account_id", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets AllowPortForwarding
        /// </summary>
        [DataMember(Name = "allow_port_forwarding", EmitDefaultValue = true)]
        public bool AllowPortForwarding { get; set; }

        /// <summary>
        /// Gets or Sets AllowProvidingExternalUsername
        /// </summary>
        [DataMember(Name = "allow_providing_external_username", EmitDefaultValue = true)]
        public bool AllowProvidingExternalUsername { get; set; }

        /// <summary>
        /// Gets or Sets BastionApi
        /// </summary>
        [DataMember(Name = "bastion_api", EmitDefaultValue = false)]
        public string BastionApi { get; set; }

        /// <summary>
        /// Gets or Sets BastionIssuer
        /// </summary>
        [DataMember(Name = "bastion_issuer", EmitDefaultValue = false)]
        public string BastionIssuer { get; set; }

        /// <summary>
        /// Gets or Sets BastionIssuerId
        /// </summary>
        [DataMember(Name = "bastion_issuer_id", EmitDefaultValue = false)]
        public long BastionIssuerId { get; set; }

        /// <summary>
        /// Gets or Sets BastionSsh
        /// </summary>
        [DataMember(Name = "bastion_ssh", EmitDefaultValue = false)]
        public string BastionSsh { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets DashboardUrl
        /// </summary>
        [DataMember(Name = "dashboard_url", EmitDefaultValue = false)]
        public string DashboardUrl { get; set; }

        /// <summary>
        /// Gets or Sets DbName
        /// </summary>
        [DataMember(Name = "db_name", EmitDefaultValue = false)]
        public string DbName { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets Enable
        /// </summary>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name = "endpoint", EmitDefaultValue = false)]
        public string Endpoint { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public List<string> Host { get; set; }

        /// <summary>
        /// Gets or Sets IsCli
        /// </summary>
        [DataMember(Name = "is_cli", EmitDefaultValue = true)]
        public bool IsCli { get; set; }

        /// <summary>
        /// Gets or Sets IsWeb
        /// </summary>
        [DataMember(Name = "is_web", EmitDefaultValue = true)]
        public bool IsWeb { get; set; }

        /// <summary>
        /// Gets or Sets Isolated
        /// </summary>
        [DataMember(Name = "isolated", EmitDefaultValue = true)]
        public bool Isolated { get; set; }

        /// <summary>
        /// Gets or Sets Native
        /// </summary>
        [DataMember(Name = "native", EmitDefaultValue = true)]
        public bool Native { get; set; }

        /// <summary>
        /// Gets or Sets RdpUser
        /// </summary>
        [DataMember(Name = "rdp_user", EmitDefaultValue = false)]
        public string RdpUser { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public string Schema { get; set; }

        /// <summary>
        /// Gets or Sets SshPassword
        /// </summary>
        [DataMember(Name = "ssh_password", EmitDefaultValue = true)]
        public bool SshPassword { get; set; }

        /// <summary>
        /// Gets or Sets SshPrivateKey
        /// </summary>
        [DataMember(Name = "ssh_private_key", EmitDefaultValue = true)]
        public bool SshPrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets SshUser
        /// </summary>
        [DataMember(Name = "ssh_user", EmitDefaultValue = false)]
        public string SshUser { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets UseInternalBastion
        /// </summary>
        [DataMember(Name = "use_internal_bastion", EmitDefaultValue = true)]
        public bool UseInternalBastion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecureRemoteAccess {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AllowPortForwarding: ").Append(AllowPortForwarding).Append("\n");
            sb.Append("  AllowProvidingExternalUsername: ").Append(AllowProvidingExternalUsername).Append("\n");
            sb.Append("  BastionApi: ").Append(BastionApi).Append("\n");
            sb.Append("  BastionIssuer: ").Append(BastionIssuer).Append("\n");
            sb.Append("  BastionIssuerId: ").Append(BastionIssuerId).Append("\n");
            sb.Append("  BastionSsh: ").Append(BastionSsh).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  DashboardUrl: ").Append(DashboardUrl).Append("\n");
            sb.Append("  DbName: ").Append(DbName).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  IsCli: ").Append(IsCli).Append("\n");
            sb.Append("  IsWeb: ").Append(IsWeb).Append("\n");
            sb.Append("  Isolated: ").Append(Isolated).Append("\n");
            sb.Append("  Native: ").Append(Native).Append("\n");
            sb.Append("  RdpUser: ").Append(RdpUser).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  SshPassword: ").Append(SshPassword).Append("\n");
            sb.Append("  SshPrivateKey: ").Append(SshPrivateKey).Append("\n");
            sb.Append("  SshUser: ").Append(SshUser).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UseInternalBastion: ").Append(UseInternalBastion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecureRemoteAccess);
        }

        /// <summary>
        /// Returns true if SecureRemoteAccess instances are equal
        /// </summary>
        /// <param name="input">Instance of SecureRemoteAccess to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecureRemoteAccess input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AllowPortForwarding == input.AllowPortForwarding ||
                    this.AllowPortForwarding.Equals(input.AllowPortForwarding)
                ) && 
                (
                    this.AllowProvidingExternalUsername == input.AllowProvidingExternalUsername ||
                    this.AllowProvidingExternalUsername.Equals(input.AllowProvidingExternalUsername)
                ) && 
                (
                    this.BastionApi == input.BastionApi ||
                    (this.BastionApi != null &&
                    this.BastionApi.Equals(input.BastionApi))
                ) && 
                (
                    this.BastionIssuer == input.BastionIssuer ||
                    (this.BastionIssuer != null &&
                    this.BastionIssuer.Equals(input.BastionIssuer))
                ) && 
                (
                    this.BastionIssuerId == input.BastionIssuerId ||
                    this.BastionIssuerId.Equals(input.BastionIssuerId)
                ) && 
                (
                    this.BastionSsh == input.BastionSsh ||
                    (this.BastionSsh != null &&
                    this.BastionSsh.Equals(input.BastionSsh))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.DashboardUrl == input.DashboardUrl ||
                    (this.DashboardUrl != null &&
                    this.DashboardUrl.Equals(input.DashboardUrl))
                ) && 
                (
                    this.DbName == input.DbName ||
                    (this.DbName != null &&
                    this.DbName.Equals(input.DbName))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Endpoint == input.Endpoint ||
                    (this.Endpoint != null &&
                    this.Endpoint.Equals(input.Endpoint))
                ) && 
                (
                    this.Host == input.Host ||
                    this.Host != null &&
                    input.Host != null &&
                    this.Host.SequenceEqual(input.Host)
                ) && 
                (
                    this.IsCli == input.IsCli ||
                    this.IsCli.Equals(input.IsCli)
                ) && 
                (
                    this.IsWeb == input.IsWeb ||
                    this.IsWeb.Equals(input.IsWeb)
                ) && 
                (
                    this.Isolated == input.Isolated ||
                    this.Isolated.Equals(input.Isolated)
                ) && 
                (
                    this.Native == input.Native ||
                    this.Native.Equals(input.Native)
                ) && 
                (
                    this.RdpUser == input.RdpUser ||
                    (this.RdpUser != null &&
                    this.RdpUser.Equals(input.RdpUser))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Schema == input.Schema ||
                    (this.Schema != null &&
                    this.Schema.Equals(input.Schema))
                ) && 
                (
                    this.SshPassword == input.SshPassword ||
                    this.SshPassword.Equals(input.SshPassword)
                ) && 
                (
                    this.SshPrivateKey == input.SshPrivateKey ||
                    this.SshPrivateKey.Equals(input.SshPrivateKey)
                ) && 
                (
                    this.SshUser == input.SshUser ||
                    (this.SshUser != null &&
                    this.SshUser.Equals(input.SshUser))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.UseInternalBastion == input.UseInternalBastion ||
                    this.UseInternalBastion.Equals(input.UseInternalBastion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                hashCode = hashCode * 59 + this.AllowPortForwarding.GetHashCode();
                hashCode = hashCode * 59 + this.AllowProvidingExternalUsername.GetHashCode();
                if (this.BastionApi != null)
                    hashCode = hashCode * 59 + this.BastionApi.GetHashCode();
                if (this.BastionIssuer != null)
                    hashCode = hashCode * 59 + this.BastionIssuer.GetHashCode();
                hashCode = hashCode * 59 + this.BastionIssuerId.GetHashCode();
                if (this.BastionSsh != null)
                    hashCode = hashCode * 59 + this.BastionSsh.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.DashboardUrl != null)
                    hashCode = hashCode * 59 + this.DashboardUrl.GetHashCode();
                if (this.DbName != null)
                    hashCode = hashCode * 59 + this.DbName.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                hashCode = hashCode * 59 + this.Enable.GetHashCode();
                if (this.Endpoint != null)
                    hashCode = hashCode * 59 + this.Endpoint.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                hashCode = hashCode * 59 + this.IsCli.GetHashCode();
                hashCode = hashCode * 59 + this.IsWeb.GetHashCode();
                hashCode = hashCode * 59 + this.Isolated.GetHashCode();
                hashCode = hashCode * 59 + this.Native.GetHashCode();
                if (this.RdpUser != null)
                    hashCode = hashCode * 59 + this.RdpUser.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.Schema != null)
                    hashCode = hashCode * 59 + this.Schema.GetHashCode();
                hashCode = hashCode * 59 + this.SshPassword.GetHashCode();
                hashCode = hashCode * 59 + this.SshPrivateKey.GetHashCode();
                if (this.SshUser != null)
                    hashCode = hashCode * 59 + this.SshUser.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                hashCode = hashCode * 59 + this.UseInternalBastion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
