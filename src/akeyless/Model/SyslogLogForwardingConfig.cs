/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// SyslogLogForwardingConfig
    /// </summary>
    [DataContract(Name = "SyslogLogForwardingConfig")]
    public partial class SyslogLogForwardingConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyslogLogForwardingConfig" /> class.
        /// </summary>
        /// <param name="syslogEnableTls">syslogEnableTls.</param>
        /// <param name="syslogFormatter">syslogFormatter.</param>
        /// <param name="syslogHost">syslogHost.</param>
        /// <param name="syslogNetwork">syslogNetwork.</param>
        /// <param name="syslogTargetTag">syslogTargetTag.</param>
        /// <param name="syslogTlsCertificate">syslogTlsCertificate.</param>
        public SyslogLogForwardingConfig(bool syslogEnableTls = default(bool), string syslogFormatter = default(string), string syslogHost = default(string), string syslogNetwork = default(string), string syslogTargetTag = default(string), string syslogTlsCertificate = default(string))
        {
            this.SyslogEnableTls = syslogEnableTls;
            this.SyslogFormatter = syslogFormatter;
            this.SyslogHost = syslogHost;
            this.SyslogNetwork = syslogNetwork;
            this.SyslogTargetTag = syslogTargetTag;
            this.SyslogTlsCertificate = syslogTlsCertificate;
        }

        /// <summary>
        /// Gets or Sets SyslogEnableTls
        /// </summary>
        [DataMember(Name = "syslog_enable_tls", EmitDefaultValue = true)]
        public bool SyslogEnableTls { get; set; }

        /// <summary>
        /// Gets or Sets SyslogFormatter
        /// </summary>
        [DataMember(Name = "syslog_formatter", EmitDefaultValue = false)]
        public string SyslogFormatter { get; set; }

        /// <summary>
        /// Gets or Sets SyslogHost
        /// </summary>
        [DataMember(Name = "syslog_host", EmitDefaultValue = false)]
        public string SyslogHost { get; set; }

        /// <summary>
        /// Gets or Sets SyslogNetwork
        /// </summary>
        [DataMember(Name = "syslog_network", EmitDefaultValue = false)]
        public string SyslogNetwork { get; set; }

        /// <summary>
        /// Gets or Sets SyslogTargetTag
        /// </summary>
        [DataMember(Name = "syslog_target_tag", EmitDefaultValue = false)]
        public string SyslogTargetTag { get; set; }

        /// <summary>
        /// Gets or Sets SyslogTlsCertificate
        /// </summary>
        [DataMember(Name = "syslog_tls_certificate", EmitDefaultValue = false)]
        public string SyslogTlsCertificate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SyslogLogForwardingConfig {\n");
            sb.Append("  SyslogEnableTls: ").Append(SyslogEnableTls).Append("\n");
            sb.Append("  SyslogFormatter: ").Append(SyslogFormatter).Append("\n");
            sb.Append("  SyslogHost: ").Append(SyslogHost).Append("\n");
            sb.Append("  SyslogNetwork: ").Append(SyslogNetwork).Append("\n");
            sb.Append("  SyslogTargetTag: ").Append(SyslogTargetTag).Append("\n");
            sb.Append("  SyslogTlsCertificate: ").Append(SyslogTlsCertificate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
