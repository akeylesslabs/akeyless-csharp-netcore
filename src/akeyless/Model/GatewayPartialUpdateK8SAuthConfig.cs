/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GatewayPartialUpdateK8SAuthConfig
    /// </summary>
    [DataContract(Name = "gatewayPartialUpdateK8SAuthConfig")]
    public partial class GatewayPartialUpdateK8SAuthConfig : IEquatable<GatewayPartialUpdateK8SAuthConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayPartialUpdateK8SAuthConfig" /> class.
        /// </summary>
        /// <param name="useDefaultIdentityBool">useDefaultIdentityBool.</param>
        /// <param name="accessId">The access ID of the Kubernetes auth method.</param>
        /// <param name="configEncryptionKeyName">Config encryption key.</param>
        /// <param name="disableIssuerValidation">Disable issuer validation [true/false].</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="k8sAuthType">K8S auth type [token/certificate]. (relevant for \&quot;native_k8s\&quot; only) (default to &quot;token&quot;).</param>
        /// <param name="k8sCaCert">The CA Certificate (base64 encoded) to use to call into the kubernetes API server.</param>
        /// <param name="k8sClientCertificate">Content of the k8 client certificate (PEM format) in a Base64 format (relevant for \&quot;native_k8s\&quot; only).</param>
        /// <param name="k8sClientKey">Content of the k8 client private key (PEM format) in a Base64 format (relevant for \&quot;native_k8s\&quot; only).</param>
        /// <param name="k8sHost">The URL of the kubernetes API server.</param>
        /// <param name="k8sIssuer">The Kubernetes JWT issuer name. K8SIssuer is the claim that specifies who issued the Kubernetes token.</param>
        /// <param name="name">K8S Auth config name.</param>
        /// <param name="newName">K8S Auth config new name.</param>
        /// <param name="rancherApiKey">The api key used to access the TokenReview API to validate other JWTs (relevant for \&quot;rancher\&quot; only).</param>
        /// <param name="rancherClusterId">The cluster id as define in rancher (relevant for \&quot;rancher\&quot; only).</param>
        /// <param name="signingKey">The private key (base64 encoded) associated with the public key defined in the Kubernetes auth.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="tokenExp">Time in seconds of expiration of the Akeyless Kube Auth Method token.</param>
        /// <param name="tokenReviewerJwt">A Kubernetes service account JWT used to access the TokenReview API to validate other JWTs (relevant for \&quot;native_k8s\&quot; only). If not set, the JWT submitted in the authentication process will be used to access the Kubernetes TokenReview API..</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="useGwServiceAccount">Use the GW&#39;s service account.</param>
        public GatewayPartialUpdateK8SAuthConfig(bool useDefaultIdentityBool = default(bool), string accessId = default(string), string configEncryptionKeyName = default(string), string disableIssuerValidation = default(string), bool json = false, string k8sAuthType = "token", string k8sCaCert = default(string), string k8sClientCertificate = default(string), string k8sClientKey = default(string), string k8sHost = default(string), string k8sIssuer = default(string), string name = default(string), string newName = default(string), string rancherApiKey = default(string), string rancherClusterId = default(string), string signingKey = default(string), string token = default(string), long tokenExp = default(long), string tokenReviewerJwt = default(string), string uidToken = default(string), string useGwServiceAccount = default(string))
        {
            this.UseDefaultIdentityBool = useDefaultIdentityBool;
            this.AccessId = accessId;
            this.ConfigEncryptionKeyName = configEncryptionKeyName;
            this.DisableIssuerValidation = disableIssuerValidation;
            this.Json = json;
            // use default value if no "k8sAuthType" provided
            this.K8sAuthType = k8sAuthType ?? "token";
            this.K8sCaCert = k8sCaCert;
            this.K8sClientCertificate = k8sClientCertificate;
            this.K8sClientKey = k8sClientKey;
            this.K8sHost = k8sHost;
            this.K8sIssuer = k8sIssuer;
            this.Name = name;
            this.NewName = newName;
            this.RancherApiKey = rancherApiKey;
            this.RancherClusterId = rancherClusterId;
            this.SigningKey = signingKey;
            this.Token = token;
            this.TokenExp = tokenExp;
            this.TokenReviewerJwt = tokenReviewerJwt;
            this.UidToken = uidToken;
            this.UseGwServiceAccount = useGwServiceAccount;
        }

        /// <summary>
        /// Gets or Sets UseDefaultIdentityBool
        /// </summary>
        [DataMember(Name = "UseDefaultIdentityBool", EmitDefaultValue = true)]
        public bool UseDefaultIdentityBool { get; set; }

        /// <summary>
        /// The access ID of the Kubernetes auth method
        /// </summary>
        /// <value>The access ID of the Kubernetes auth method</value>
        [DataMember(Name = "access-id", EmitDefaultValue = false)]
        public string AccessId { get; set; }

        /// <summary>
        /// Config encryption key
        /// </summary>
        /// <value>Config encryption key</value>
        [DataMember(Name = "config-encryption-key-name", EmitDefaultValue = false)]
        public string ConfigEncryptionKeyName { get; set; }

        /// <summary>
        /// Disable issuer validation [true/false]
        /// </summary>
        /// <value>Disable issuer validation [true/false]</value>
        [DataMember(Name = "disable-issuer-validation", EmitDefaultValue = false)]
        public string DisableIssuerValidation { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// K8S auth type [token/certificate]. (relevant for \&quot;native_k8s\&quot; only)
        /// </summary>
        /// <value>K8S auth type [token/certificate]. (relevant for \&quot;native_k8s\&quot; only)</value>
        [DataMember(Name = "k8s-auth-type", EmitDefaultValue = false)]
        public string K8sAuthType { get; set; }

        /// <summary>
        /// The CA Certificate (base64 encoded) to use to call into the kubernetes API server
        /// </summary>
        /// <value>The CA Certificate (base64 encoded) to use to call into the kubernetes API server</value>
        [DataMember(Name = "k8s-ca-cert", EmitDefaultValue = false)]
        public string K8sCaCert { get; set; }

        /// <summary>
        /// Content of the k8 client certificate (PEM format) in a Base64 format (relevant for \&quot;native_k8s\&quot; only)
        /// </summary>
        /// <value>Content of the k8 client certificate (PEM format) in a Base64 format (relevant for \&quot;native_k8s\&quot; only)</value>
        [DataMember(Name = "k8s-client-certificate", EmitDefaultValue = false)]
        public string K8sClientCertificate { get; set; }

        /// <summary>
        /// Content of the k8 client private key (PEM format) in a Base64 format (relevant for \&quot;native_k8s\&quot; only)
        /// </summary>
        /// <value>Content of the k8 client private key (PEM format) in a Base64 format (relevant for \&quot;native_k8s\&quot; only)</value>
        [DataMember(Name = "k8s-client-key", EmitDefaultValue = false)]
        public string K8sClientKey { get; set; }

        /// <summary>
        /// The URL of the kubernetes API server
        /// </summary>
        /// <value>The URL of the kubernetes API server</value>
        [DataMember(Name = "k8s-host", EmitDefaultValue = false)]
        public string K8sHost { get; set; }

        /// <summary>
        /// The Kubernetes JWT issuer name. K8SIssuer is the claim that specifies who issued the Kubernetes token
        /// </summary>
        /// <value>The Kubernetes JWT issuer name. K8SIssuer is the claim that specifies who issued the Kubernetes token</value>
        [DataMember(Name = "k8s-issuer", EmitDefaultValue = false)]
        public string K8sIssuer { get; set; }

        /// <summary>
        /// K8S Auth config name
        /// </summary>
        /// <value>K8S Auth config name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// K8S Auth config new name
        /// </summary>
        /// <value>K8S Auth config new name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// The api key used to access the TokenReview API to validate other JWTs (relevant for \&quot;rancher\&quot; only)
        /// </summary>
        /// <value>The api key used to access the TokenReview API to validate other JWTs (relevant for \&quot;rancher\&quot; only)</value>
        [DataMember(Name = "rancher-api-key", EmitDefaultValue = false)]
        public string RancherApiKey { get; set; }

        /// <summary>
        /// The cluster id as define in rancher (relevant for \&quot;rancher\&quot; only)
        /// </summary>
        /// <value>The cluster id as define in rancher (relevant for \&quot;rancher\&quot; only)</value>
        [DataMember(Name = "rancher-cluster-id", EmitDefaultValue = false)]
        public string RancherClusterId { get; set; }

        /// <summary>
        /// The private key (base64 encoded) associated with the public key defined in the Kubernetes auth
        /// </summary>
        /// <value>The private key (base64 encoded) associated with the public key defined in the Kubernetes auth</value>
        [DataMember(Name = "signing-key", EmitDefaultValue = false)]
        public string SigningKey { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Time in seconds of expiration of the Akeyless Kube Auth Method token
        /// </summary>
        /// <value>Time in seconds of expiration of the Akeyless Kube Auth Method token</value>
        [DataMember(Name = "token-exp", EmitDefaultValue = false)]
        public long TokenExp { get; set; }

        /// <summary>
        /// A Kubernetes service account JWT used to access the TokenReview API to validate other JWTs (relevant for \&quot;native_k8s\&quot; only). If not set, the JWT submitted in the authentication process will be used to access the Kubernetes TokenReview API.
        /// </summary>
        /// <value>A Kubernetes service account JWT used to access the TokenReview API to validate other JWTs (relevant for \&quot;native_k8s\&quot; only). If not set, the JWT submitted in the authentication process will be used to access the Kubernetes TokenReview API.</value>
        [DataMember(Name = "token-reviewer-jwt", EmitDefaultValue = false)]
        public string TokenReviewerJwt { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Use the GW&#39;s service account
        /// </summary>
        /// <value>Use the GW&#39;s service account</value>
        [DataMember(Name = "use-gw-service-account", EmitDefaultValue = false)]
        public string UseGwServiceAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayPartialUpdateK8SAuthConfig {\n");
            sb.Append("  UseDefaultIdentityBool: ").Append(UseDefaultIdentityBool).Append("\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  ConfigEncryptionKeyName: ").Append(ConfigEncryptionKeyName).Append("\n");
            sb.Append("  DisableIssuerValidation: ").Append(DisableIssuerValidation).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  K8sAuthType: ").Append(K8sAuthType).Append("\n");
            sb.Append("  K8sCaCert: ").Append(K8sCaCert).Append("\n");
            sb.Append("  K8sClientCertificate: ").Append(K8sClientCertificate).Append("\n");
            sb.Append("  K8sClientKey: ").Append(K8sClientKey).Append("\n");
            sb.Append("  K8sHost: ").Append(K8sHost).Append("\n");
            sb.Append("  K8sIssuer: ").Append(K8sIssuer).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  RancherApiKey: ").Append(RancherApiKey).Append("\n");
            sb.Append("  RancherClusterId: ").Append(RancherClusterId).Append("\n");
            sb.Append("  SigningKey: ").Append(SigningKey).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  TokenExp: ").Append(TokenExp).Append("\n");
            sb.Append("  TokenReviewerJwt: ").Append(TokenReviewerJwt).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UseGwServiceAccount: ").Append(UseGwServiceAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayPartialUpdateK8SAuthConfig);
        }

        /// <summary>
        /// Returns true if GatewayPartialUpdateK8SAuthConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayPartialUpdateK8SAuthConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayPartialUpdateK8SAuthConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UseDefaultIdentityBool == input.UseDefaultIdentityBool ||
                    this.UseDefaultIdentityBool.Equals(input.UseDefaultIdentityBool)
                ) && 
                (
                    this.AccessId == input.AccessId ||
                    (this.AccessId != null &&
                    this.AccessId.Equals(input.AccessId))
                ) && 
                (
                    this.ConfigEncryptionKeyName == input.ConfigEncryptionKeyName ||
                    (this.ConfigEncryptionKeyName != null &&
                    this.ConfigEncryptionKeyName.Equals(input.ConfigEncryptionKeyName))
                ) && 
                (
                    this.DisableIssuerValidation == input.DisableIssuerValidation ||
                    (this.DisableIssuerValidation != null &&
                    this.DisableIssuerValidation.Equals(input.DisableIssuerValidation))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.K8sAuthType == input.K8sAuthType ||
                    (this.K8sAuthType != null &&
                    this.K8sAuthType.Equals(input.K8sAuthType))
                ) && 
                (
                    this.K8sCaCert == input.K8sCaCert ||
                    (this.K8sCaCert != null &&
                    this.K8sCaCert.Equals(input.K8sCaCert))
                ) && 
                (
                    this.K8sClientCertificate == input.K8sClientCertificate ||
                    (this.K8sClientCertificate != null &&
                    this.K8sClientCertificate.Equals(input.K8sClientCertificate))
                ) && 
                (
                    this.K8sClientKey == input.K8sClientKey ||
                    (this.K8sClientKey != null &&
                    this.K8sClientKey.Equals(input.K8sClientKey))
                ) && 
                (
                    this.K8sHost == input.K8sHost ||
                    (this.K8sHost != null &&
                    this.K8sHost.Equals(input.K8sHost))
                ) && 
                (
                    this.K8sIssuer == input.K8sIssuer ||
                    (this.K8sIssuer != null &&
                    this.K8sIssuer.Equals(input.K8sIssuer))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                ) && 
                (
                    this.RancherApiKey == input.RancherApiKey ||
                    (this.RancherApiKey != null &&
                    this.RancherApiKey.Equals(input.RancherApiKey))
                ) && 
                (
                    this.RancherClusterId == input.RancherClusterId ||
                    (this.RancherClusterId != null &&
                    this.RancherClusterId.Equals(input.RancherClusterId))
                ) && 
                (
                    this.SigningKey == input.SigningKey ||
                    (this.SigningKey != null &&
                    this.SigningKey.Equals(input.SigningKey))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.TokenExp == input.TokenExp ||
                    this.TokenExp.Equals(input.TokenExp)
                ) && 
                (
                    this.TokenReviewerJwt == input.TokenReviewerJwt ||
                    (this.TokenReviewerJwt != null &&
                    this.TokenReviewerJwt.Equals(input.TokenReviewerJwt))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UseGwServiceAccount == input.UseGwServiceAccount ||
                    (this.UseGwServiceAccount != null &&
                    this.UseGwServiceAccount.Equals(input.UseGwServiceAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UseDefaultIdentityBool.GetHashCode();
                if (this.AccessId != null)
                {
                    hashCode = (hashCode * 59) + this.AccessId.GetHashCode();
                }
                if (this.ConfigEncryptionKeyName != null)
                {
                    hashCode = (hashCode * 59) + this.ConfigEncryptionKeyName.GetHashCode();
                }
                if (this.DisableIssuerValidation != null)
                {
                    hashCode = (hashCode * 59) + this.DisableIssuerValidation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.K8sAuthType != null)
                {
                    hashCode = (hashCode * 59) + this.K8sAuthType.GetHashCode();
                }
                if (this.K8sCaCert != null)
                {
                    hashCode = (hashCode * 59) + this.K8sCaCert.GetHashCode();
                }
                if (this.K8sClientCertificate != null)
                {
                    hashCode = (hashCode * 59) + this.K8sClientCertificate.GetHashCode();
                }
                if (this.K8sClientKey != null)
                {
                    hashCode = (hashCode * 59) + this.K8sClientKey.GetHashCode();
                }
                if (this.K8sHost != null)
                {
                    hashCode = (hashCode * 59) + this.K8sHost.GetHashCode();
                }
                if (this.K8sIssuer != null)
                {
                    hashCode = (hashCode * 59) + this.K8sIssuer.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NewName != null)
                {
                    hashCode = (hashCode * 59) + this.NewName.GetHashCode();
                }
                if (this.RancherApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.RancherApiKey.GetHashCode();
                }
                if (this.RancherClusterId != null)
                {
                    hashCode = (hashCode * 59) + this.RancherClusterId.GetHashCode();
                }
                if (this.SigningKey != null)
                {
                    hashCode = (hashCode * 59) + this.SigningKey.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TokenExp.GetHashCode();
                if (this.TokenReviewerJwt != null)
                {
                    hashCode = (hashCode * 59) + this.TokenReviewerJwt.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UseGwServiceAccount != null)
                {
                    hashCode = (hashCode * 59) + this.UseGwServiceAccount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
