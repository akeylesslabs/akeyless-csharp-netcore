/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// createAuthMethodK8S is a command that creates a new auth method that will be able to authenticate using K8S.
    /// </summary>
    [DataContract(Name = "createAuthMethodK8S")]
    public partial class CreateAuthMethodK8S : IEquatable<CreateAuthMethodK8S>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAuthMethodK8S" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAuthMethodK8S() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAuthMethodK8S" /> class.
        /// </summary>
        /// <param name="accessExpires">Access expiration date in Unix timestamp (select 0 for access without expiry date) (default to 0).</param>
        /// <param name="audience">The audience in the Kubernetes JWT that the access is restricted to.</param>
        /// <param name="boundIps">A CIDR whitelist with the IPs that the access is restricted to.</param>
        /// <param name="boundNamespaces">A list of namespaces that the access is restricted to.</param>
        /// <param name="boundPodNames">A list of pod names that the access is restricted to.</param>
        /// <param name="boundSaNames">A list of service account names that the access is restricted to.</param>
        /// <param name="forceSubClaims">if true: enforce role-association must include sub claims.</param>
        /// <param name="genKey">Automatically generate key-pair for K8S configuration. If set to false, a public key needs to be provided (default to &quot;true&quot;).</param>
        /// <param name="gwBoundIps">A CIDR whitelist with the GW IPs that the access is restricted to.</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="jwtTtl">Jwt TTL.</param>
        /// <param name="name">Auth Method name (required).</param>
        /// <param name="publicKey">Base64-encoded or PEM formatted public key data for K8S authentication method is required [RSA2048].</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public CreateAuthMethodK8S(long accessExpires = 0, string audience = default(string), List<string> boundIps = default(List<string>), List<string> boundNamespaces = default(List<string>), List<string> boundPodNames = default(List<string>), List<string> boundSaNames = default(List<string>), bool forceSubClaims = default(bool), string genKey = "true", List<string> gwBoundIps = default(List<string>), bool json = default(bool), long jwtTtl = default(long), string name = default(string), string publicKey = default(string), string token = default(string), string uidToken = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for CreateAuthMethodK8S and cannot be null");
            }
            this.Name = name;
            this.AccessExpires = accessExpires;
            this.Audience = audience;
            this.BoundIps = boundIps;
            this.BoundNamespaces = boundNamespaces;
            this.BoundPodNames = boundPodNames;
            this.BoundSaNames = boundSaNames;
            this.ForceSubClaims = forceSubClaims;
            // use default value if no "genKey" provided
            this.GenKey = genKey ?? "true";
            this.GwBoundIps = gwBoundIps;
            this.Json = json;
            this.JwtTtl = jwtTtl;
            this.PublicKey = publicKey;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Access expiration date in Unix timestamp (select 0 for access without expiry date)
        /// </summary>
        /// <value>Access expiration date in Unix timestamp (select 0 for access without expiry date)</value>
        [DataMember(Name = "access-expires", EmitDefaultValue = false)]
        public long AccessExpires { get; set; }

        /// <summary>
        /// The audience in the Kubernetes JWT that the access is restricted to
        /// </summary>
        /// <value>The audience in the Kubernetes JWT that the access is restricted to</value>
        [DataMember(Name = "audience", EmitDefaultValue = false)]
        public string Audience { get; set; }

        /// <summary>
        /// A CIDR whitelist with the IPs that the access is restricted to
        /// </summary>
        /// <value>A CIDR whitelist with the IPs that the access is restricted to</value>
        [DataMember(Name = "bound-ips", EmitDefaultValue = false)]
        public List<string> BoundIps { get; set; }

        /// <summary>
        /// A list of namespaces that the access is restricted to
        /// </summary>
        /// <value>A list of namespaces that the access is restricted to</value>
        [DataMember(Name = "bound-namespaces", EmitDefaultValue = false)]
        public List<string> BoundNamespaces { get; set; }

        /// <summary>
        /// A list of pod names that the access is restricted to
        /// </summary>
        /// <value>A list of pod names that the access is restricted to</value>
        [DataMember(Name = "bound-pod-names", EmitDefaultValue = false)]
        public List<string> BoundPodNames { get; set; }

        /// <summary>
        /// A list of service account names that the access is restricted to
        /// </summary>
        /// <value>A list of service account names that the access is restricted to</value>
        [DataMember(Name = "bound-sa-names", EmitDefaultValue = false)]
        public List<string> BoundSaNames { get; set; }

        /// <summary>
        /// if true: enforce role-association must include sub claims
        /// </summary>
        /// <value>if true: enforce role-association must include sub claims</value>
        [DataMember(Name = "force-sub-claims", EmitDefaultValue = true)]
        public bool ForceSubClaims { get; set; }

        /// <summary>
        /// Automatically generate key-pair for K8S configuration. If set to false, a public key needs to be provided
        /// </summary>
        /// <value>Automatically generate key-pair for K8S configuration. If set to false, a public key needs to be provided</value>
        [DataMember(Name = "gen-key", EmitDefaultValue = false)]
        public string GenKey { get; set; }

        /// <summary>
        /// A CIDR whitelist with the GW IPs that the access is restricted to
        /// </summary>
        /// <value>A CIDR whitelist with the GW IPs that the access is restricted to</value>
        [DataMember(Name = "gw-bound-ips", EmitDefaultValue = false)]
        public List<string> GwBoundIps { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Jwt TTL
        /// </summary>
        /// <value>Jwt TTL</value>
        [DataMember(Name = "jwt-ttl", EmitDefaultValue = false)]
        public long JwtTtl { get; set; }

        /// <summary>
        /// Auth Method name
        /// </summary>
        /// <value>Auth Method name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Base64-encoded or PEM formatted public key data for K8S authentication method is required [RSA2048]
        /// </summary>
        /// <value>Base64-encoded or PEM formatted public key data for K8S authentication method is required [RSA2048]</value>
        [DataMember(Name = "public-key", EmitDefaultValue = false)]
        public string PublicKey { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAuthMethodK8S {\n");
            sb.Append("  AccessExpires: ").Append(AccessExpires).Append("\n");
            sb.Append("  Audience: ").Append(Audience).Append("\n");
            sb.Append("  BoundIps: ").Append(BoundIps).Append("\n");
            sb.Append("  BoundNamespaces: ").Append(BoundNamespaces).Append("\n");
            sb.Append("  BoundPodNames: ").Append(BoundPodNames).Append("\n");
            sb.Append("  BoundSaNames: ").Append(BoundSaNames).Append("\n");
            sb.Append("  ForceSubClaims: ").Append(ForceSubClaims).Append("\n");
            sb.Append("  GenKey: ").Append(GenKey).Append("\n");
            sb.Append("  GwBoundIps: ").Append(GwBoundIps).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  JwtTtl: ").Append(JwtTtl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAuthMethodK8S);
        }

        /// <summary>
        /// Returns true if CreateAuthMethodK8S instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAuthMethodK8S to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAuthMethodK8S input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessExpires == input.AccessExpires ||
                    this.AccessExpires.Equals(input.AccessExpires)
                ) && 
                (
                    this.Audience == input.Audience ||
                    (this.Audience != null &&
                    this.Audience.Equals(input.Audience))
                ) && 
                (
                    this.BoundIps == input.BoundIps ||
                    this.BoundIps != null &&
                    input.BoundIps != null &&
                    this.BoundIps.SequenceEqual(input.BoundIps)
                ) && 
                (
                    this.BoundNamespaces == input.BoundNamespaces ||
                    this.BoundNamespaces != null &&
                    input.BoundNamespaces != null &&
                    this.BoundNamespaces.SequenceEqual(input.BoundNamespaces)
                ) && 
                (
                    this.BoundPodNames == input.BoundPodNames ||
                    this.BoundPodNames != null &&
                    input.BoundPodNames != null &&
                    this.BoundPodNames.SequenceEqual(input.BoundPodNames)
                ) && 
                (
                    this.BoundSaNames == input.BoundSaNames ||
                    this.BoundSaNames != null &&
                    input.BoundSaNames != null &&
                    this.BoundSaNames.SequenceEqual(input.BoundSaNames)
                ) && 
                (
                    this.ForceSubClaims == input.ForceSubClaims ||
                    this.ForceSubClaims.Equals(input.ForceSubClaims)
                ) && 
                (
                    this.GenKey == input.GenKey ||
                    (this.GenKey != null &&
                    this.GenKey.Equals(input.GenKey))
                ) && 
                (
                    this.GwBoundIps == input.GwBoundIps ||
                    this.GwBoundIps != null &&
                    input.GwBoundIps != null &&
                    this.GwBoundIps.SequenceEqual(input.GwBoundIps)
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.JwtTtl == input.JwtTtl ||
                    this.JwtTtl.Equals(input.JwtTtl)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PublicKey == input.PublicKey ||
                    (this.PublicKey != null &&
                    this.PublicKey.Equals(input.PublicKey))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AccessExpires.GetHashCode();
                if (this.Audience != null)
                    hashCode = hashCode * 59 + this.Audience.GetHashCode();
                if (this.BoundIps != null)
                    hashCode = hashCode * 59 + this.BoundIps.GetHashCode();
                if (this.BoundNamespaces != null)
                    hashCode = hashCode * 59 + this.BoundNamespaces.GetHashCode();
                if (this.BoundPodNames != null)
                    hashCode = hashCode * 59 + this.BoundPodNames.GetHashCode();
                if (this.BoundSaNames != null)
                    hashCode = hashCode * 59 + this.BoundSaNames.GetHashCode();
                hashCode = hashCode * 59 + this.ForceSubClaims.GetHashCode();
                if (this.GenKey != null)
                    hashCode = hashCode * 59 + this.GenKey.GetHashCode();
                if (this.GwBoundIps != null)
                    hashCode = hashCode * 59 + this.GwBoundIps.GetHashCode();
                hashCode = hashCode * 59 + this.Json.GetHashCode();
                hashCode = hashCode * 59 + this.JwtTtl.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PublicKey != null)
                    hashCode = hashCode * 59 + this.PublicKey.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
