/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UploadRSA
    /// </summary>
    [DataContract(Name = "uploadRSA")]
    public partial class UploadRSA : IEquatable<UploadRSA>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadRSA" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadRSA() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadRSA" /> class.
        /// </summary>
        /// <param name="alg">Key type. options: [RSA1024, RSA2048, RSA3072, RSA4096] (required).</param>
        /// <param name="certFileData">Certificate in a PEM format..</param>
        /// <param name="certificateFormat">certificateFormat.</param>
        /// <param name="customerFrgId">The customer fragment ID that will be used to split the key (if empty, the key will be created independently of a customer fragment).</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="expirationEventIn">How many days before the expiration of the certificate would you like to be notified..</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="metadata">Deprecated - use description.</param>
        /// <param name="name">Name of key to be created (required).</param>
        /// <param name="overwrite">When the overwrite flag is set, this command will only update an existing key [true/false] (default to &quot;false&quot;).</param>
        /// <param name="rsaFileData">RSA private key data, base64 encoded.</param>
        /// <param name="splitLevel">The number of fragments that the item will be split into (default to 3).</param>
        /// <param name="tag">List of the tags attached to this key.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public UploadRSA(string alg = default(string), string certFileData = default(string), string certificateFormat = default(string), string customerFrgId = default(string), string deleteProtection = default(string), string description = default(string), List<string> expirationEventIn = default(List<string>), bool json = false, string metadata = default(string), string name = default(string), string overwrite = "false", string rsaFileData = default(string), long splitLevel = 3, List<string> tag = default(List<string>), string token = default(string), string uidToken = default(string))
        {
            // to ensure "alg" is required (not null)
            if (alg == null)
            {
                throw new ArgumentNullException("alg is a required property for UploadRSA and cannot be null");
            }
            this.Alg = alg;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UploadRSA and cannot be null");
            }
            this.Name = name;
            this.CertFileData = certFileData;
            this.CertificateFormat = certificateFormat;
            this.CustomerFrgId = customerFrgId;
            this.DeleteProtection = deleteProtection;
            this.Description = description;
            this.ExpirationEventIn = expirationEventIn;
            this.Json = json;
            this.Metadata = metadata;
            // use default value if no "overwrite" provided
            this.Overwrite = overwrite ?? "false";
            this.RsaFileData = rsaFileData;
            this.SplitLevel = splitLevel;
            this.Tag = tag;
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Key type. options: [RSA1024, RSA2048, RSA3072, RSA4096]
        /// </summary>
        /// <value>Key type. options: [RSA1024, RSA2048, RSA3072, RSA4096]</value>
        [DataMember(Name = "alg", IsRequired = true, EmitDefaultValue = true)]
        public string Alg { get; set; }

        /// <summary>
        /// Certificate in a PEM format.
        /// </summary>
        /// <value>Certificate in a PEM format.</value>
        [DataMember(Name = "cert-file-data", EmitDefaultValue = false)]
        public string CertFileData { get; set; }

        /// <summary>
        /// Gets or Sets CertificateFormat
        /// </summary>
        [DataMember(Name = "certificate-format", EmitDefaultValue = false)]
        public string CertificateFormat { get; set; }

        /// <summary>
        /// The customer fragment ID that will be used to split the key (if empty, the key will be created independently of a customer fragment)
        /// </summary>
        /// <value>The customer fragment ID that will be used to split the key (if empty, the key will be created independently of a customer fragment)</value>
        [DataMember(Name = "customer-frg-id", EmitDefaultValue = false)]
        public string CustomerFrgId { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// How many days before the expiration of the certificate would you like to be notified.
        /// </summary>
        /// <value>How many days before the expiration of the certificate would you like to be notified.</value>
        [DataMember(Name = "expiration-event-in", EmitDefaultValue = false)]
        public List<string> ExpirationEventIn { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Deprecated - use description
        /// </summary>
        /// <value>Deprecated - use description</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Name of key to be created
        /// </summary>
        /// <value>Name of key to be created</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// When the overwrite flag is set, this command will only update an existing key [true/false]
        /// </summary>
        /// <value>When the overwrite flag is set, this command will only update an existing key [true/false]</value>
        [DataMember(Name = "overwrite", EmitDefaultValue = false)]
        public string Overwrite { get; set; }

        /// <summary>
        /// RSA private key data, base64 encoded
        /// </summary>
        /// <value>RSA private key data, base64 encoded</value>
        [DataMember(Name = "rsa-file-data", EmitDefaultValue = false)]
        public string RsaFileData { get; set; }

        /// <summary>
        /// The number of fragments that the item will be split into
        /// </summary>
        /// <value>The number of fragments that the item will be split into</value>
        [DataMember(Name = "split-level", EmitDefaultValue = false)]
        public long SplitLevel { get; set; }

        /// <summary>
        /// List of the tags attached to this key
        /// </summary>
        /// <value>List of the tags attached to this key</value>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public List<string> Tag { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UploadRSA {\n");
            sb.Append("  Alg: ").Append(Alg).Append("\n");
            sb.Append("  CertFileData: ").Append(CertFileData).Append("\n");
            sb.Append("  CertificateFormat: ").Append(CertificateFormat).Append("\n");
            sb.Append("  CustomerFrgId: ").Append(CustomerFrgId).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpirationEventIn: ").Append(ExpirationEventIn).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Overwrite: ").Append(Overwrite).Append("\n");
            sb.Append("  RsaFileData: ").Append(RsaFileData).Append("\n");
            sb.Append("  SplitLevel: ").Append(SplitLevel).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadRSA);
        }

        /// <summary>
        /// Returns true if UploadRSA instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadRSA to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadRSA input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Alg == input.Alg ||
                    (this.Alg != null &&
                    this.Alg.Equals(input.Alg))
                ) && 
                (
                    this.CertFileData == input.CertFileData ||
                    (this.CertFileData != null &&
                    this.CertFileData.Equals(input.CertFileData))
                ) && 
                (
                    this.CertificateFormat == input.CertificateFormat ||
                    (this.CertificateFormat != null &&
                    this.CertificateFormat.Equals(input.CertificateFormat))
                ) && 
                (
                    this.CustomerFrgId == input.CustomerFrgId ||
                    (this.CustomerFrgId != null &&
                    this.CustomerFrgId.Equals(input.CustomerFrgId))
                ) && 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    (this.DeleteProtection != null &&
                    this.DeleteProtection.Equals(input.DeleteProtection))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExpirationEventIn == input.ExpirationEventIn ||
                    this.ExpirationEventIn != null &&
                    input.ExpirationEventIn != null &&
                    this.ExpirationEventIn.SequenceEqual(input.ExpirationEventIn)
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Overwrite == input.Overwrite ||
                    (this.Overwrite != null &&
                    this.Overwrite.Equals(input.Overwrite))
                ) && 
                (
                    this.RsaFileData == input.RsaFileData ||
                    (this.RsaFileData != null &&
                    this.RsaFileData.Equals(input.RsaFileData))
                ) && 
                (
                    this.SplitLevel == input.SplitLevel ||
                    this.SplitLevel.Equals(input.SplitLevel)
                ) && 
                (
                    this.Tag == input.Tag ||
                    this.Tag != null &&
                    input.Tag != null &&
                    this.Tag.SequenceEqual(input.Tag)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alg != null)
                {
                    hashCode = (hashCode * 59) + this.Alg.GetHashCode();
                }
                if (this.CertFileData != null)
                {
                    hashCode = (hashCode * 59) + this.CertFileData.GetHashCode();
                }
                if (this.CertificateFormat != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateFormat.GetHashCode();
                }
                if (this.CustomerFrgId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerFrgId.GetHashCode();
                }
                if (this.DeleteProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteProtection.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ExpirationEventIn != null)
                {
                    hashCode = (hashCode * 59) + this.ExpirationEventIn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Overwrite != null)
                {
                    hashCode = (hashCode * 59) + this.Overwrite.GetHashCode();
                }
                if (this.RsaFileData != null)
                {
                    hashCode = (hashCode * 59) + this.RsaFileData.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SplitLevel.GetHashCode();
                if (this.Tag != null)
                {
                    hashCode = (hashCode * 59) + this.Tag.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
