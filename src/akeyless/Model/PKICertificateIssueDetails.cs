/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// PKICertificateIssueDetails
    /// </summary>
    [DataContract(Name = "PKICertificateIssueDetails")]
    public partial class PKICertificateIssueDetails : IEquatable<PKICertificateIssueDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PKICertificateIssueDetails" /> class.
        /// </summary>
        /// <param name="allowAnyName">allowAnyName.</param>
        /// <param name="allowSubdomains">allowSubdomains.</param>
        /// <param name="allowedDomainsList">allowedDomainsList.</param>
        /// <param name="allowedUriSans">allowedUriSans.</param>
        /// <param name="basicConstraintsValidForNonCa">basicConstraintsValidForNonCa.</param>
        /// <param name="clientFlag">clientFlag.</param>
        /// <param name="codeSigningFlag">codeSigningFlag.</param>
        /// <param name="country">country.</param>
        /// <param name="enforceHostnames">enforceHostnames.</param>
        /// <param name="isCa">isCa.</param>
        /// <param name="keyBits">keyBits.</param>
        /// <param name="keyType">keyType.</param>
        /// <param name="keyUsageList">keyUsageList.</param>
        /// <param name="locality">locality.</param>
        /// <param name="notBeforeDuration">A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years..</param>
        /// <param name="organizationList">organizationList.</param>
        /// <param name="organizationUnitList">organizationUnitList.</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="province">province.</param>
        /// <param name="requireCn">requireCn.</param>
        /// <param name="serverFlag">serverFlag.</param>
        /// <param name="streetAddress">streetAddress.</param>
        public PKICertificateIssueDetails(bool allowAnyName = default(bool), bool allowSubdomains = default(bool), List<string> allowedDomainsList = default(List<string>), List<string> allowedUriSans = default(List<string>), bool basicConstraintsValidForNonCa = default(bool), bool clientFlag = default(bool), bool codeSigningFlag = default(bool), List<string> country = default(List<string>), bool enforceHostnames = default(bool), bool isCa = default(bool), long keyBits = default(long), string keyType = default(string), List<string> keyUsageList = default(List<string>), List<string> locality = default(List<string>), long notBeforeDuration = default(long), List<string> organizationList = default(List<string>), List<string> organizationUnitList = default(List<string>), List<string> postalCode = default(List<string>), List<string> province = default(List<string>), bool requireCn = default(bool), bool serverFlag = default(bool), List<string> streetAddress = default(List<string>))
        {
            this.AllowAnyName = allowAnyName;
            this.AllowSubdomains = allowSubdomains;
            this.AllowedDomainsList = allowedDomainsList;
            this.AllowedUriSans = allowedUriSans;
            this.BasicConstraintsValidForNonCa = basicConstraintsValidForNonCa;
            this.ClientFlag = clientFlag;
            this.CodeSigningFlag = codeSigningFlag;
            this.Country = country;
            this.EnforceHostnames = enforceHostnames;
            this.IsCa = isCa;
            this.KeyBits = keyBits;
            this.KeyType = keyType;
            this.KeyUsageList = keyUsageList;
            this.Locality = locality;
            this.NotBeforeDuration = notBeforeDuration;
            this.OrganizationList = organizationList;
            this.OrganizationUnitList = organizationUnitList;
            this.PostalCode = postalCode;
            this.Province = province;
            this.RequireCn = requireCn;
            this.ServerFlag = serverFlag;
            this.StreetAddress = streetAddress;
        }

        /// <summary>
        /// Gets or Sets AllowAnyName
        /// </summary>
        [DataMember(Name = "allow_any_name", EmitDefaultValue = true)]
        public bool AllowAnyName { get; set; }

        /// <summary>
        /// Gets or Sets AllowSubdomains
        /// </summary>
        [DataMember(Name = "allow_subdomains", EmitDefaultValue = true)]
        public bool AllowSubdomains { get; set; }

        /// <summary>
        /// Gets or Sets AllowedDomainsList
        /// </summary>
        [DataMember(Name = "allowed_domains_list", EmitDefaultValue = false)]
        public List<string> AllowedDomainsList { get; set; }

        /// <summary>
        /// Gets or Sets AllowedUriSans
        /// </summary>
        [DataMember(Name = "allowed_uri_sans", EmitDefaultValue = false)]
        public List<string> AllowedUriSans { get; set; }

        /// <summary>
        /// Gets or Sets BasicConstraintsValidForNonCa
        /// </summary>
        [DataMember(Name = "basic_constraints_valid_for_non_ca", EmitDefaultValue = true)]
        public bool BasicConstraintsValidForNonCa { get; set; }

        /// <summary>
        /// Gets or Sets ClientFlag
        /// </summary>
        [DataMember(Name = "client_flag", EmitDefaultValue = true)]
        public bool ClientFlag { get; set; }

        /// <summary>
        /// Gets or Sets CodeSigningFlag
        /// </summary>
        [DataMember(Name = "code_signing_flag", EmitDefaultValue = true)]
        public bool CodeSigningFlag { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public List<string> Country { get; set; }

        /// <summary>
        /// Gets or Sets EnforceHostnames
        /// </summary>
        [DataMember(Name = "enforce_hostnames", EmitDefaultValue = true)]
        public bool EnforceHostnames { get; set; }

        /// <summary>
        /// Gets or Sets IsCa
        /// </summary>
        [DataMember(Name = "is_ca", EmitDefaultValue = true)]
        public bool IsCa { get; set; }

        /// <summary>
        /// Gets or Sets KeyBits
        /// </summary>
        [DataMember(Name = "key_bits", EmitDefaultValue = false)]
        public long KeyBits { get; set; }

        /// <summary>
        /// Gets or Sets KeyType
        /// </summary>
        [DataMember(Name = "key_type", EmitDefaultValue = false)]
        public string KeyType { get; set; }

        /// <summary>
        /// Gets or Sets KeyUsageList
        /// </summary>
        [DataMember(Name = "key_usage_list", EmitDefaultValue = false)]
        public List<string> KeyUsageList { get; set; }

        /// <summary>
        /// Gets or Sets Locality
        /// </summary>
        [DataMember(Name = "locality", EmitDefaultValue = false)]
        public List<string> Locality { get; set; }

        /// <summary>
        /// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
        /// </summary>
        /// <value>A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.</value>
        [DataMember(Name = "not_before_duration", EmitDefaultValue = false)]
        public long NotBeforeDuration { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationList
        /// </summary>
        [DataMember(Name = "organization_list", EmitDefaultValue = false)]
        public List<string> OrganizationList { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationUnitList
        /// </summary>
        [DataMember(Name = "organization_unit_list", EmitDefaultValue = false)]
        public List<string> OrganizationUnitList { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "postal_code", EmitDefaultValue = false)]
        public List<string> PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Province
        /// </summary>
        [DataMember(Name = "province", EmitDefaultValue = false)]
        public List<string> Province { get; set; }

        /// <summary>
        /// Gets or Sets RequireCn
        /// </summary>
        [DataMember(Name = "require_cn", EmitDefaultValue = true)]
        public bool RequireCn { get; set; }

        /// <summary>
        /// Gets or Sets ServerFlag
        /// </summary>
        [DataMember(Name = "server_flag", EmitDefaultValue = true)]
        public bool ServerFlag { get; set; }

        /// <summary>
        /// Gets or Sets StreetAddress
        /// </summary>
        [DataMember(Name = "street_address", EmitDefaultValue = false)]
        public List<string> StreetAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PKICertificateIssueDetails {\n");
            sb.Append("  AllowAnyName: ").Append(AllowAnyName).Append("\n");
            sb.Append("  AllowSubdomains: ").Append(AllowSubdomains).Append("\n");
            sb.Append("  AllowedDomainsList: ").Append(AllowedDomainsList).Append("\n");
            sb.Append("  AllowedUriSans: ").Append(AllowedUriSans).Append("\n");
            sb.Append("  BasicConstraintsValidForNonCa: ").Append(BasicConstraintsValidForNonCa).Append("\n");
            sb.Append("  ClientFlag: ").Append(ClientFlag).Append("\n");
            sb.Append("  CodeSigningFlag: ").Append(CodeSigningFlag).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  EnforceHostnames: ").Append(EnforceHostnames).Append("\n");
            sb.Append("  IsCa: ").Append(IsCa).Append("\n");
            sb.Append("  KeyBits: ").Append(KeyBits).Append("\n");
            sb.Append("  KeyType: ").Append(KeyType).Append("\n");
            sb.Append("  KeyUsageList: ").Append(KeyUsageList).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  NotBeforeDuration: ").Append(NotBeforeDuration).Append("\n");
            sb.Append("  OrganizationList: ").Append(OrganizationList).Append("\n");
            sb.Append("  OrganizationUnitList: ").Append(OrganizationUnitList).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  RequireCn: ").Append(RequireCn).Append("\n");
            sb.Append("  ServerFlag: ").Append(ServerFlag).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PKICertificateIssueDetails);
        }

        /// <summary>
        /// Returns true if PKICertificateIssueDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PKICertificateIssueDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PKICertificateIssueDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllowAnyName == input.AllowAnyName ||
                    this.AllowAnyName.Equals(input.AllowAnyName)
                ) && 
                (
                    this.AllowSubdomains == input.AllowSubdomains ||
                    this.AllowSubdomains.Equals(input.AllowSubdomains)
                ) && 
                (
                    this.AllowedDomainsList == input.AllowedDomainsList ||
                    this.AllowedDomainsList != null &&
                    input.AllowedDomainsList != null &&
                    this.AllowedDomainsList.SequenceEqual(input.AllowedDomainsList)
                ) && 
                (
                    this.AllowedUriSans == input.AllowedUriSans ||
                    this.AllowedUriSans != null &&
                    input.AllowedUriSans != null &&
                    this.AllowedUriSans.SequenceEqual(input.AllowedUriSans)
                ) && 
                (
                    this.BasicConstraintsValidForNonCa == input.BasicConstraintsValidForNonCa ||
                    this.BasicConstraintsValidForNonCa.Equals(input.BasicConstraintsValidForNonCa)
                ) && 
                (
                    this.ClientFlag == input.ClientFlag ||
                    this.ClientFlag.Equals(input.ClientFlag)
                ) && 
                (
                    this.CodeSigningFlag == input.CodeSigningFlag ||
                    this.CodeSigningFlag.Equals(input.CodeSigningFlag)
                ) && 
                (
                    this.Country == input.Country ||
                    this.Country != null &&
                    input.Country != null &&
                    this.Country.SequenceEqual(input.Country)
                ) && 
                (
                    this.EnforceHostnames == input.EnforceHostnames ||
                    this.EnforceHostnames.Equals(input.EnforceHostnames)
                ) && 
                (
                    this.IsCa == input.IsCa ||
                    this.IsCa.Equals(input.IsCa)
                ) && 
                (
                    this.KeyBits == input.KeyBits ||
                    this.KeyBits.Equals(input.KeyBits)
                ) && 
                (
                    this.KeyType == input.KeyType ||
                    (this.KeyType != null &&
                    this.KeyType.Equals(input.KeyType))
                ) && 
                (
                    this.KeyUsageList == input.KeyUsageList ||
                    this.KeyUsageList != null &&
                    input.KeyUsageList != null &&
                    this.KeyUsageList.SequenceEqual(input.KeyUsageList)
                ) && 
                (
                    this.Locality == input.Locality ||
                    this.Locality != null &&
                    input.Locality != null &&
                    this.Locality.SequenceEqual(input.Locality)
                ) && 
                (
                    this.NotBeforeDuration == input.NotBeforeDuration ||
                    this.NotBeforeDuration.Equals(input.NotBeforeDuration)
                ) && 
                (
                    this.OrganizationList == input.OrganizationList ||
                    this.OrganizationList != null &&
                    input.OrganizationList != null &&
                    this.OrganizationList.SequenceEqual(input.OrganizationList)
                ) && 
                (
                    this.OrganizationUnitList == input.OrganizationUnitList ||
                    this.OrganizationUnitList != null &&
                    input.OrganizationUnitList != null &&
                    this.OrganizationUnitList.SequenceEqual(input.OrganizationUnitList)
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    this.PostalCode != null &&
                    input.PostalCode != null &&
                    this.PostalCode.SequenceEqual(input.PostalCode)
                ) && 
                (
                    this.Province == input.Province ||
                    this.Province != null &&
                    input.Province != null &&
                    this.Province.SequenceEqual(input.Province)
                ) && 
                (
                    this.RequireCn == input.RequireCn ||
                    this.RequireCn.Equals(input.RequireCn)
                ) && 
                (
                    this.ServerFlag == input.ServerFlag ||
                    this.ServerFlag.Equals(input.ServerFlag)
                ) && 
                (
                    this.StreetAddress == input.StreetAddress ||
                    this.StreetAddress != null &&
                    input.StreetAddress != null &&
                    this.StreetAddress.SequenceEqual(input.StreetAddress)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AllowAnyName.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowSubdomains.GetHashCode();
                if (this.AllowedDomainsList != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedDomainsList.GetHashCode();
                }
                if (this.AllowedUriSans != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedUriSans.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BasicConstraintsValidForNonCa.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.CodeSigningFlag.GetHashCode();
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnforceHostnames.GetHashCode();
                hashCode = (hashCode * 59) + this.IsCa.GetHashCode();
                hashCode = (hashCode * 59) + this.KeyBits.GetHashCode();
                if (this.KeyType != null)
                {
                    hashCode = (hashCode * 59) + this.KeyType.GetHashCode();
                }
                if (this.KeyUsageList != null)
                {
                    hashCode = (hashCode * 59) + this.KeyUsageList.GetHashCode();
                }
                if (this.Locality != null)
                {
                    hashCode = (hashCode * 59) + this.Locality.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotBeforeDuration.GetHashCode();
                if (this.OrganizationList != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationList.GetHashCode();
                }
                if (this.OrganizationUnitList != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationUnitList.GetHashCode();
                }
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.Province != null)
                {
                    hashCode = (hashCode * 59) + this.Province.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequireCn.GetHashCode();
                hashCode = (hashCode * 59) + this.ServerFlag.GetHashCode();
                if (this.StreetAddress != null)
                {
                    hashCode = (hashCode * 59) + this.StreetAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
