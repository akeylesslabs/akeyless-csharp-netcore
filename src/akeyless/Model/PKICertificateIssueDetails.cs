/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// PKICertificateIssueDetails
    /// </summary>
    [DataContract(Name = "PKICertificateIssueDetails")]
    public partial class PKICertificateIssueDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PKICertificateIssueDetails" /> class.
        /// </summary>
        /// <param name="acmeEnabled">acmeEnabled.</param>
        /// <param name="allowAnyName">allowAnyName.</param>
        /// <param name="allowCopyExtFromCsr">allowCopyExtFromCsr.</param>
        /// <param name="allowSubdomains">allowSubdomains.</param>
        /// <param name="allowedDomainsList">allowedDomainsList.</param>
        /// <param name="allowedExtraExtensions">allowedExtraExtensions.</param>
        /// <param name="allowedUriSans">allowedUriSans.</param>
        /// <param name="autoRenewCertificate">autoRenewCertificate.</param>
        /// <param name="basicConstraintsValidForNonCa">basicConstraintsValidForNonCa.</param>
        /// <param name="certificateAuthorityMode">certificateAuthorityMode.</param>
        /// <param name="clientFlag">clientFlag.</param>
        /// <param name="codeSigningFlag">codeSigningFlag.</param>
        /// <param name="country">country.</param>
        /// <param name="createPrivateCrl">createPrivateCrl.</param>
        /// <param name="createPublicCrl">createPublicCrl.</param>
        /// <param name="destinationPath">DestinationPath is the destination to save generated certificates.</param>
        /// <param name="enforceHostnames">enforceHostnames.</param>
        /// <param name="expirationEvents">ExpirationNotification holds a list of expiration notices that should be sent in case a certificate is about to expire, this value is being propagated to the Certificate resources that are created.</param>
        /// <param name="gwClusterId">gwClusterId.</param>
        /// <param name="gwClusterUrl">GWClusterURL is required when CAMode is \&quot;public\&quot; and it defines the cluster URL the PKI should be issued from. The GW cluster must have permissions to read associated target&#39;s details.</param>
        /// <param name="isCa">isCa.</param>
        /// <param name="keyBits">keyBits.</param>
        /// <param name="keyType">keyType.</param>
        /// <param name="keyUsageList">keyUsageList.</param>
        /// <param name="locality">locality.</param>
        /// <param name="maxPathLen">maxPathLen.</param>
        /// <param name="nonCriticalKeyUsage">nonCriticalKeyUsage.</param>
        /// <param name="notBeforeDuration">A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years..</param>
        /// <param name="organizationList">organizationList.</param>
        /// <param name="organizationUnitList">organizationUnitList.</param>
        /// <param name="pkiIssuerType">pkiIssuerType.</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="protectGeneratedCertificates">ProtectGeneratedCertificates dictates whether the created certificates should be protected from deletion.</param>
        /// <param name="province">province.</param>
        /// <param name="renewBeforeExpirationInDays">renewBeforeExpirationInDays.</param>
        /// <param name="requireCn">requireCn.</param>
        /// <param name="serverFlag">serverFlag.</param>
        /// <param name="streetAddress">streetAddress.</param>
        public PKICertificateIssueDetails(bool acmeEnabled = default(bool), bool allowAnyName = default(bool), bool allowCopyExtFromCsr = default(bool), bool allowSubdomains = default(bool), List<string> allowedDomainsList = default(List<string>), Dictionary<string, List<string>> allowedExtraExtensions = default(Dictionary<string, List<string>>), List<string> allowedUriSans = default(List<string>), bool autoRenewCertificate = default(bool), bool basicConstraintsValidForNonCa = default(bool), string certificateAuthorityMode = default(string), bool clientFlag = default(bool), bool codeSigningFlag = default(bool), List<string> country = default(List<string>), bool createPrivateCrl = default(bool), bool createPublicCrl = default(bool), string destinationPath = default(string), bool enforceHostnames = default(bool), List<CertificateExpirationEvent> expirationEvents = default(List<CertificateExpirationEvent>), long gwClusterId = default(long), string gwClusterUrl = default(string), bool isCa = default(bool), long keyBits = default(long), string keyType = default(string), List<string> keyUsageList = default(List<string>), List<string> locality = default(List<string>), long maxPathLen = default(long), bool nonCriticalKeyUsage = default(bool), long notBeforeDuration = default(long), List<string> organizationList = default(List<string>), List<string> organizationUnitList = default(List<string>), string pkiIssuerType = default(string), List<string> postalCode = default(List<string>), bool protectGeneratedCertificates = default(bool), List<string> province = default(List<string>), long renewBeforeExpirationInDays = default(long), bool requireCn = default(bool), bool serverFlag = default(bool), List<string> streetAddress = default(List<string>))
        {
            this.AcmeEnabled = acmeEnabled;
            this.AllowAnyName = allowAnyName;
            this.AllowCopyExtFromCsr = allowCopyExtFromCsr;
            this.AllowSubdomains = allowSubdomains;
            this.AllowedDomainsList = allowedDomainsList;
            this.AllowedExtraExtensions = allowedExtraExtensions;
            this.AllowedUriSans = allowedUriSans;
            this.AutoRenewCertificate = autoRenewCertificate;
            this.BasicConstraintsValidForNonCa = basicConstraintsValidForNonCa;
            this.CertificateAuthorityMode = certificateAuthorityMode;
            this.ClientFlag = clientFlag;
            this.CodeSigningFlag = codeSigningFlag;
            this.Country = country;
            this.CreatePrivateCrl = createPrivateCrl;
            this.CreatePublicCrl = createPublicCrl;
            this.DestinationPath = destinationPath;
            this.EnforceHostnames = enforceHostnames;
            this.ExpirationEvents = expirationEvents;
            this.GwClusterId = gwClusterId;
            this.GwClusterUrl = gwClusterUrl;
            this.IsCa = isCa;
            this.KeyBits = keyBits;
            this.KeyType = keyType;
            this.KeyUsageList = keyUsageList;
            this.Locality = locality;
            this.MaxPathLen = maxPathLen;
            this.NonCriticalKeyUsage = nonCriticalKeyUsage;
            this.NotBeforeDuration = notBeforeDuration;
            this.OrganizationList = organizationList;
            this.OrganizationUnitList = organizationUnitList;
            this.PkiIssuerType = pkiIssuerType;
            this.PostalCode = postalCode;
            this.ProtectGeneratedCertificates = protectGeneratedCertificates;
            this.Province = province;
            this.RenewBeforeExpirationInDays = renewBeforeExpirationInDays;
            this.RequireCn = requireCn;
            this.ServerFlag = serverFlag;
            this.StreetAddress = streetAddress;
        }

        /// <summary>
        /// Gets or Sets AcmeEnabled
        /// </summary>
        [DataMember(Name = "acme_enabled", EmitDefaultValue = true)]
        public bool AcmeEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AllowAnyName
        /// </summary>
        [DataMember(Name = "allow_any_name", EmitDefaultValue = true)]
        public bool AllowAnyName { get; set; }

        /// <summary>
        /// Gets or Sets AllowCopyExtFromCsr
        /// </summary>
        [DataMember(Name = "allow_copy_ext_from_csr", EmitDefaultValue = true)]
        public bool AllowCopyExtFromCsr { get; set; }

        /// <summary>
        /// Gets or Sets AllowSubdomains
        /// </summary>
        [DataMember(Name = "allow_subdomains", EmitDefaultValue = true)]
        public bool AllowSubdomains { get; set; }

        /// <summary>
        /// Gets or Sets AllowedDomainsList
        /// </summary>
        [DataMember(Name = "allowed_domains_list", EmitDefaultValue = false)]
        public List<string> AllowedDomainsList { get; set; }

        /// <summary>
        /// Gets or Sets AllowedExtraExtensions
        /// </summary>
        [DataMember(Name = "allowed_extra_extensions", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> AllowedExtraExtensions { get; set; }

        /// <summary>
        /// Gets or Sets AllowedUriSans
        /// </summary>
        [DataMember(Name = "allowed_uri_sans", EmitDefaultValue = false)]
        public List<string> AllowedUriSans { get; set; }

        /// <summary>
        /// Gets or Sets AutoRenewCertificate
        /// </summary>
        [DataMember(Name = "auto_renew_certificate", EmitDefaultValue = true)]
        public bool AutoRenewCertificate { get; set; }

        /// <summary>
        /// Gets or Sets BasicConstraintsValidForNonCa
        /// </summary>
        [DataMember(Name = "basic_constraints_valid_for_non_ca", EmitDefaultValue = true)]
        public bool BasicConstraintsValidForNonCa { get; set; }

        /// <summary>
        /// Gets or Sets CertificateAuthorityMode
        /// </summary>
        [DataMember(Name = "certificate_authority_mode", EmitDefaultValue = false)]
        public string CertificateAuthorityMode { get; set; }

        /// <summary>
        /// Gets or Sets ClientFlag
        /// </summary>
        [DataMember(Name = "client_flag", EmitDefaultValue = true)]
        public bool ClientFlag { get; set; }

        /// <summary>
        /// Gets or Sets CodeSigningFlag
        /// </summary>
        [DataMember(Name = "code_signing_flag", EmitDefaultValue = true)]
        public bool CodeSigningFlag { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public List<string> Country { get; set; }

        /// <summary>
        /// Gets or Sets CreatePrivateCrl
        /// </summary>
        [DataMember(Name = "create_private_crl", EmitDefaultValue = true)]
        public bool CreatePrivateCrl { get; set; }

        /// <summary>
        /// Gets or Sets CreatePublicCrl
        /// </summary>
        [DataMember(Name = "create_public_crl", EmitDefaultValue = true)]
        public bool CreatePublicCrl { get; set; }

        /// <summary>
        /// DestinationPath is the destination to save generated certificates
        /// </summary>
        /// <value>DestinationPath is the destination to save generated certificates</value>
        [DataMember(Name = "destination_path", EmitDefaultValue = false)]
        public string DestinationPath { get; set; }

        /// <summary>
        /// Gets or Sets EnforceHostnames
        /// </summary>
        [DataMember(Name = "enforce_hostnames", EmitDefaultValue = true)]
        public bool EnforceHostnames { get; set; }

        /// <summary>
        /// ExpirationNotification holds a list of expiration notices that should be sent in case a certificate is about to expire, this value is being propagated to the Certificate resources that are created
        /// </summary>
        /// <value>ExpirationNotification holds a list of expiration notices that should be sent in case a certificate is about to expire, this value is being propagated to the Certificate resources that are created</value>
        [DataMember(Name = "expiration_events", EmitDefaultValue = false)]
        public List<CertificateExpirationEvent> ExpirationEvents { get; set; }

        /// <summary>
        /// Gets or Sets GwClusterId
        /// </summary>
        [DataMember(Name = "gw_cluster_id", EmitDefaultValue = false)]
        public long GwClusterId { get; set; }

        /// <summary>
        /// GWClusterURL is required when CAMode is \&quot;public\&quot; and it defines the cluster URL the PKI should be issued from. The GW cluster must have permissions to read associated target&#39;s details
        /// </summary>
        /// <value>GWClusterURL is required when CAMode is \&quot;public\&quot; and it defines the cluster URL the PKI should be issued from. The GW cluster must have permissions to read associated target&#39;s details</value>
        [DataMember(Name = "gw_cluster_url", EmitDefaultValue = false)]
        public string GwClusterUrl { get; set; }

        /// <summary>
        /// Gets or Sets IsCa
        /// </summary>
        [DataMember(Name = "is_ca", EmitDefaultValue = true)]
        public bool IsCa { get; set; }

        /// <summary>
        /// Gets or Sets KeyBits
        /// </summary>
        [DataMember(Name = "key_bits", EmitDefaultValue = false)]
        public long KeyBits { get; set; }

        /// <summary>
        /// Gets or Sets KeyType
        /// </summary>
        [DataMember(Name = "key_type", EmitDefaultValue = false)]
        public string KeyType { get; set; }

        /// <summary>
        /// Gets or Sets KeyUsageList
        /// </summary>
        [DataMember(Name = "key_usage_list", EmitDefaultValue = false)]
        public List<string> KeyUsageList { get; set; }

        /// <summary>
        /// Gets or Sets Locality
        /// </summary>
        [DataMember(Name = "locality", EmitDefaultValue = false)]
        public List<string> Locality { get; set; }

        /// <summary>
        /// Gets or Sets MaxPathLen
        /// </summary>
        [DataMember(Name = "max_path_len", EmitDefaultValue = false)]
        public long MaxPathLen { get; set; }

        /// <summary>
        /// Gets or Sets NonCriticalKeyUsage
        /// </summary>
        [DataMember(Name = "non_critical_key_usage", EmitDefaultValue = true)]
        public bool NonCriticalKeyUsage { get; set; }

        /// <summary>
        /// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
        /// </summary>
        /// <value>A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.</value>
        [DataMember(Name = "not_before_duration", EmitDefaultValue = false)]
        public long NotBeforeDuration { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationList
        /// </summary>
        [DataMember(Name = "organization_list", EmitDefaultValue = false)]
        public List<string> OrganizationList { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationUnitList
        /// </summary>
        [DataMember(Name = "organization_unit_list", EmitDefaultValue = false)]
        public List<string> OrganizationUnitList { get; set; }

        /// <summary>
        /// Gets or Sets PkiIssuerType
        /// </summary>
        [DataMember(Name = "pki_issuer_type", EmitDefaultValue = false)]
        public string PkiIssuerType { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "postal_code", EmitDefaultValue = false)]
        public List<string> PostalCode { get; set; }

        /// <summary>
        /// ProtectGeneratedCertificates dictates whether the created certificates should be protected from deletion
        /// </summary>
        /// <value>ProtectGeneratedCertificates dictates whether the created certificates should be protected from deletion</value>
        [DataMember(Name = "protect_generated_certificates", EmitDefaultValue = true)]
        public bool ProtectGeneratedCertificates { get; set; }

        /// <summary>
        /// Gets or Sets Province
        /// </summary>
        [DataMember(Name = "province", EmitDefaultValue = false)]
        public List<string> Province { get; set; }

        /// <summary>
        /// Gets or Sets RenewBeforeExpirationInDays
        /// </summary>
        [DataMember(Name = "renew_before_expiration_in_days", EmitDefaultValue = false)]
        public long RenewBeforeExpirationInDays { get; set; }

        /// <summary>
        /// Gets or Sets RequireCn
        /// </summary>
        [DataMember(Name = "require_cn", EmitDefaultValue = true)]
        public bool RequireCn { get; set; }

        /// <summary>
        /// Gets or Sets ServerFlag
        /// </summary>
        [DataMember(Name = "server_flag", EmitDefaultValue = true)]
        public bool ServerFlag { get; set; }

        /// <summary>
        /// Gets or Sets StreetAddress
        /// </summary>
        [DataMember(Name = "street_address", EmitDefaultValue = false)]
        public List<string> StreetAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PKICertificateIssueDetails {\n");
            sb.Append("  AcmeEnabled: ").Append(AcmeEnabled).Append("\n");
            sb.Append("  AllowAnyName: ").Append(AllowAnyName).Append("\n");
            sb.Append("  AllowCopyExtFromCsr: ").Append(AllowCopyExtFromCsr).Append("\n");
            sb.Append("  AllowSubdomains: ").Append(AllowSubdomains).Append("\n");
            sb.Append("  AllowedDomainsList: ").Append(AllowedDomainsList).Append("\n");
            sb.Append("  AllowedExtraExtensions: ").Append(AllowedExtraExtensions).Append("\n");
            sb.Append("  AllowedUriSans: ").Append(AllowedUriSans).Append("\n");
            sb.Append("  AutoRenewCertificate: ").Append(AutoRenewCertificate).Append("\n");
            sb.Append("  BasicConstraintsValidForNonCa: ").Append(BasicConstraintsValidForNonCa).Append("\n");
            sb.Append("  CertificateAuthorityMode: ").Append(CertificateAuthorityMode).Append("\n");
            sb.Append("  ClientFlag: ").Append(ClientFlag).Append("\n");
            sb.Append("  CodeSigningFlag: ").Append(CodeSigningFlag).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CreatePrivateCrl: ").Append(CreatePrivateCrl).Append("\n");
            sb.Append("  CreatePublicCrl: ").Append(CreatePublicCrl).Append("\n");
            sb.Append("  DestinationPath: ").Append(DestinationPath).Append("\n");
            sb.Append("  EnforceHostnames: ").Append(EnforceHostnames).Append("\n");
            sb.Append("  ExpirationEvents: ").Append(ExpirationEvents).Append("\n");
            sb.Append("  GwClusterId: ").Append(GwClusterId).Append("\n");
            sb.Append("  GwClusterUrl: ").Append(GwClusterUrl).Append("\n");
            sb.Append("  IsCa: ").Append(IsCa).Append("\n");
            sb.Append("  KeyBits: ").Append(KeyBits).Append("\n");
            sb.Append("  KeyType: ").Append(KeyType).Append("\n");
            sb.Append("  KeyUsageList: ").Append(KeyUsageList).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  MaxPathLen: ").Append(MaxPathLen).Append("\n");
            sb.Append("  NonCriticalKeyUsage: ").Append(NonCriticalKeyUsage).Append("\n");
            sb.Append("  NotBeforeDuration: ").Append(NotBeforeDuration).Append("\n");
            sb.Append("  OrganizationList: ").Append(OrganizationList).Append("\n");
            sb.Append("  OrganizationUnitList: ").Append(OrganizationUnitList).Append("\n");
            sb.Append("  PkiIssuerType: ").Append(PkiIssuerType).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  ProtectGeneratedCertificates: ").Append(ProtectGeneratedCertificates).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  RenewBeforeExpirationInDays: ").Append(RenewBeforeExpirationInDays).Append("\n");
            sb.Append("  RequireCn: ").Append(RequireCn).Append("\n");
            sb.Append("  ServerFlag: ").Append(ServerFlag).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
