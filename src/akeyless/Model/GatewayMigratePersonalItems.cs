/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayMigratePersonalItems is a command that migrate personal items from external vault
    /// </summary>
    [DataContract(Name = "gatewayMigratePersonalItems")]
    public partial class GatewayMigratePersonalItems : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayMigratePersonalItems" /> class.
        /// </summary>
        /// <param name="var1passwordEmail">1Password user email to connect to the API.</param>
        /// <param name="var1passwordPassword">1Password user password to connect to the API.</param>
        /// <param name="var1passwordSecretKey">1Password user secret key to connect to the API.</param>
        /// <param name="var1passwordUrl">1Password api container url.</param>
        /// <param name="var1passwordVaults">1Password list of vault to get the items from.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="protectionKey">The name of a key that used to encrypt the secret value.</param>
        /// <param name="targetLocation">Target location in your Akeyless personal folder for migrated secrets.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="type">Migration type for now only 1password. (default to &quot;1password&quot;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GatewayMigratePersonalItems(string var1passwordEmail = default(string), string var1passwordPassword = default(string), string var1passwordSecretKey = default(string), string var1passwordUrl = default(string), List<string> var1passwordVaults = default(List<string>), bool json = false, string protectionKey = default(string), string targetLocation = default(string), string token = default(string), string type = @"1password", string uidToken = default(string))
        {
            this.Var1passwordEmail = var1passwordEmail;
            this.Var1passwordPassword = var1passwordPassword;
            this.Var1passwordSecretKey = var1passwordSecretKey;
            this.Var1passwordUrl = var1passwordUrl;
            this.Var1passwordVaults = var1passwordVaults;
            this.Json = json;
            this.ProtectionKey = protectionKey;
            this.TargetLocation = targetLocation;
            this.Token = token;
            // use default value if no "type" provided
            this.Type = type ?? @"1password";
            this.UidToken = uidToken;
        }

        /// <summary>
        /// 1Password user email to connect to the API
        /// </summary>
        /// <value>1Password user email to connect to the API</value>
        [DataMember(Name = "1password-email", EmitDefaultValue = false)]
        public string Var1passwordEmail { get; set; }

        /// <summary>
        /// 1Password user password to connect to the API
        /// </summary>
        /// <value>1Password user password to connect to the API</value>
        [DataMember(Name = "1password-password", EmitDefaultValue = false)]
        public string Var1passwordPassword { get; set; }

        /// <summary>
        /// 1Password user secret key to connect to the API
        /// </summary>
        /// <value>1Password user secret key to connect to the API</value>
        [DataMember(Name = "1password-secret-key", EmitDefaultValue = false)]
        public string Var1passwordSecretKey { get; set; }

        /// <summary>
        /// 1Password api container url
        /// </summary>
        /// <value>1Password api container url</value>
        [DataMember(Name = "1password-url", EmitDefaultValue = false)]
        public string Var1passwordUrl { get; set; }

        /// <summary>
        /// 1Password list of vault to get the items from
        /// </summary>
        /// <value>1Password list of vault to get the items from</value>
        [DataMember(Name = "1password-vaults", EmitDefaultValue = false)]
        public List<string> Var1passwordVaults { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secret value
        /// </summary>
        /// <value>The name of a key that used to encrypt the secret value</value>
        [DataMember(Name = "protection-key", EmitDefaultValue = false)]
        public string ProtectionKey { get; set; }

        /// <summary>
        /// Target location in your Akeyless personal folder for migrated secrets
        /// </summary>
        /// <value>Target location in your Akeyless personal folder for migrated secrets</value>
        [DataMember(Name = "target-location", EmitDefaultValue = false)]
        public string TargetLocation { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Migration type for now only 1password.
        /// </summary>
        /// <value>Migration type for now only 1password.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayMigratePersonalItems {\n");
            sb.Append("  Var1passwordEmail: ").Append(Var1passwordEmail).Append("\n");
            sb.Append("  Var1passwordPassword: ").Append(Var1passwordPassword).Append("\n");
            sb.Append("  Var1passwordSecretKey: ").Append(Var1passwordSecretKey).Append("\n");
            sb.Append("  Var1passwordUrl: ").Append(Var1passwordUrl).Append("\n");
            sb.Append("  Var1passwordVaults: ").Append(Var1passwordVaults).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  ProtectionKey: ").Append(ProtectionKey).Append("\n");
            sb.Append("  TargetLocation: ").Append(TargetLocation).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
