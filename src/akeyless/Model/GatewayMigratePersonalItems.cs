/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayMigratePersonalItems is a command that migrate personal items from external vault
    /// </summary>
    [DataContract(Name = "gatewayMigratePersonalItems")]
    public partial class GatewayMigratePersonalItems : IEquatable<GatewayMigratePersonalItems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayMigratePersonalItems" /> class.
        /// </summary>
        /// <param name="_1passwordEmail">1Password user email to connect to the API.</param>
        /// <param name="_1passwordPassword">1Password user password to connect to the API.</param>
        /// <param name="_1passwordSecretKey">1Password user secret key to connect to the API.</param>
        /// <param name="_1passwordUrl">1Password api container url.</param>
        /// <param name="_1passwordVaults">1Password list of vault to get the items from.</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="protectionKey">The name of a key that used to encrypt the secret value.</param>
        /// <param name="targetLocation">Target location in your Akeyless personal folder for migrated secrets.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="type">Migration type for now only 1password. (default to &quot;1password&quot;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GatewayMigratePersonalItems(string _1passwordEmail = default(string), string _1passwordPassword = default(string), string _1passwordSecretKey = default(string), string _1passwordUrl = default(string), List<string> _1passwordVaults = default(List<string>), bool json = default(bool), string protectionKey = default(string), string targetLocation = default(string), string token = default(string), string type = "1password", string uidToken = default(string))
        {
            this._1passwordEmail = _1passwordEmail;
            this._1passwordPassword = _1passwordPassword;
            this._1passwordSecretKey = _1passwordSecretKey;
            this._1passwordUrl = _1passwordUrl;
            this._1passwordVaults = _1passwordVaults;
            this.Json = json;
            this.ProtectionKey = protectionKey;
            this.TargetLocation = targetLocation;
            this.Token = token;
            // use default value if no "type" provided
            this.Type = type ?? "1password";
            this.UidToken = uidToken;
        }

        /// <summary>
        /// 1Password user email to connect to the API
        /// </summary>
        /// <value>1Password user email to connect to the API</value>
        [DataMember(Name = "1password-email", EmitDefaultValue = false)]
        public string _1passwordEmail { get; set; }

        /// <summary>
        /// 1Password user password to connect to the API
        /// </summary>
        /// <value>1Password user password to connect to the API</value>
        [DataMember(Name = "1password-password", EmitDefaultValue = false)]
        public string _1passwordPassword { get; set; }

        /// <summary>
        /// 1Password user secret key to connect to the API
        /// </summary>
        /// <value>1Password user secret key to connect to the API</value>
        [DataMember(Name = "1password-secret-key", EmitDefaultValue = false)]
        public string _1passwordSecretKey { get; set; }

        /// <summary>
        /// 1Password api container url
        /// </summary>
        /// <value>1Password api container url</value>
        [DataMember(Name = "1password-url", EmitDefaultValue = false)]
        public string _1passwordUrl { get; set; }

        /// <summary>
        /// 1Password list of vault to get the items from
        /// </summary>
        /// <value>1Password list of vault to get the items from</value>
        [DataMember(Name = "1password-vaults", EmitDefaultValue = false)]
        public List<string> _1passwordVaults { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secret value
        /// </summary>
        /// <value>The name of a key that used to encrypt the secret value</value>
        [DataMember(Name = "protection-key", EmitDefaultValue = false)]
        public string ProtectionKey { get; set; }

        /// <summary>
        /// Target location in your Akeyless personal folder for migrated secrets
        /// </summary>
        /// <value>Target location in your Akeyless personal folder for migrated secrets</value>
        [DataMember(Name = "target-location", EmitDefaultValue = false)]
        public string TargetLocation { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Migration type for now only 1password.
        /// </summary>
        /// <value>Migration type for now only 1password.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayMigratePersonalItems {\n");
            sb.Append("  _1passwordEmail: ").Append(_1passwordEmail).Append("\n");
            sb.Append("  _1passwordPassword: ").Append(_1passwordPassword).Append("\n");
            sb.Append("  _1passwordSecretKey: ").Append(_1passwordSecretKey).Append("\n");
            sb.Append("  _1passwordUrl: ").Append(_1passwordUrl).Append("\n");
            sb.Append("  _1passwordVaults: ").Append(_1passwordVaults).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  ProtectionKey: ").Append(ProtectionKey).Append("\n");
            sb.Append("  TargetLocation: ").Append(TargetLocation).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayMigratePersonalItems);
        }

        /// <summary>
        /// Returns true if GatewayMigratePersonalItems instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayMigratePersonalItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayMigratePersonalItems input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._1passwordEmail == input._1passwordEmail ||
                    (this._1passwordEmail != null &&
                    this._1passwordEmail.Equals(input._1passwordEmail))
                ) && 
                (
                    this._1passwordPassword == input._1passwordPassword ||
                    (this._1passwordPassword != null &&
                    this._1passwordPassword.Equals(input._1passwordPassword))
                ) && 
                (
                    this._1passwordSecretKey == input._1passwordSecretKey ||
                    (this._1passwordSecretKey != null &&
                    this._1passwordSecretKey.Equals(input._1passwordSecretKey))
                ) && 
                (
                    this._1passwordUrl == input._1passwordUrl ||
                    (this._1passwordUrl != null &&
                    this._1passwordUrl.Equals(input._1passwordUrl))
                ) && 
                (
                    this._1passwordVaults == input._1passwordVaults ||
                    this._1passwordVaults != null &&
                    input._1passwordVaults != null &&
                    this._1passwordVaults.SequenceEqual(input._1passwordVaults)
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.ProtectionKey == input.ProtectionKey ||
                    (this.ProtectionKey != null &&
                    this.ProtectionKey.Equals(input.ProtectionKey))
                ) && 
                (
                    this.TargetLocation == input.TargetLocation ||
                    (this.TargetLocation != null &&
                    this.TargetLocation.Equals(input.TargetLocation))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._1passwordEmail != null)
                {
                    hashCode = (hashCode * 59) + this._1passwordEmail.GetHashCode();
                }
                if (this._1passwordPassword != null)
                {
                    hashCode = (hashCode * 59) + this._1passwordPassword.GetHashCode();
                }
                if (this._1passwordSecretKey != null)
                {
                    hashCode = (hashCode * 59) + this._1passwordSecretKey.GetHashCode();
                }
                if (this._1passwordUrl != null)
                {
                    hashCode = (hashCode * 59) + this._1passwordUrl.GetHashCode();
                }
                if (this._1passwordVaults != null)
                {
                    hashCode = (hashCode * 59) + this._1passwordVaults.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.ProtectionKey != null)
                {
                    hashCode = (hashCode * 59) + this.ProtectionKey.GetHashCode();
                }
                if (this.TargetLocation != null)
                {
                    hashCode = (hashCode * 59) + this.TargetLocation.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
