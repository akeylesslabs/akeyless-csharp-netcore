/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CreateRotatedSecret
    /// </summary>
    [DataContract(Name = "createRotatedSecret")]
    public partial class CreateRotatedSecret : IEquatable<CreateRotatedSecret>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRotatedSecret" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateRotatedSecret() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRotatedSecret" /> class.
        /// </summary>
        /// <param name="apiId">apiId.</param>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="applicationId">ApplicationId (used in azure).</param>
        /// <param name="authenticationCredentials">authenticationCredentials.</param>
        /// <param name="autoRotate">Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation.</param>
        /// <param name="awsRegion">Region (used in aws) (default to &quot;us-east-2&quot;).</param>
        /// <param name="customPayload">customPayload.</param>
        /// <param name="key">The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="metadata">Metadata about the secret.</param>
        /// <param name="name">Secret name (required).</param>
        /// <param name="rotatedPassword">rotatedPassword.</param>
        /// <param name="rotatedUsername">rotatedUsername.</param>
        /// <param name="rotationHour">rotationHour.</param>
        /// <param name="rotationInterval">The number of days to wait between every automatic key rotation (1-365).</param>
        /// <param name="rotatorCredsType">rotatorCredsType.</param>
        /// <param name="rotatorCustomCmd">rotatorCustomCmd.</param>
        /// <param name="rotatorType">Rotator Type (required).</param>
        /// <param name="secureAccessAllowExternalUser">Secure Access Allow Providing External User (used in ssh) (default to false).</param>
        /// <param name="secureAccessAwsAccountId">Secure Access Account Id (used in aws).</param>
        /// <param name="secureAccessAwsNativeCli">Secure Access Aws Native Cli (used in aws).</param>
        /// <param name="secureAccessBastionIssuer">Secure Access Bastion Issuer.</param>
        /// <param name="secureAccessDbName">Secure Access DB Name (used in data bases).</param>
        /// <param name="secureAccessDbSchema">Secure Access Schema (used in mssql, postgresql).</param>
        /// <param name="secureAccessEnable">Secure Access Enabled.</param>
        /// <param name="secureAccessHost">Secure Access Host.</param>
        /// <param name="secureAccessRdpDomain">Secure Access Domain (used in ssh).</param>
        /// <param name="secureAccessRdpUser">Secure Access Override User (used in ssh).</param>
        /// <param name="secureAccessWeb">Secure Access Web (default to false).</param>
        /// <param name="secureAccessWebBrowsing">Secure Access Isolated (used in aws, azure) (default to false).</param>
        /// <param name="secureAccessWebProxy">Secure Access Web Proxy (used in aws, azure) (default to false).</param>
        /// <param name="sshPassword">Deprecated: use RotatedPassword.</param>
        /// <param name="sshUsername">Deprecated: use RotatedUser.</param>
        /// <param name="storageAccountKeyName">The name of the storage account key to rotate [key1/key2/kerb1/kerb2] (relevat to azure-storage-account).</param>
        /// <param name="tags">List of the tags attached to this secret.</param>
        /// <param name="targetName">Target name (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userAttribute">User Attribute.</param>
        /// <param name="userDn">User DN.</param>
        public CreateRotatedSecret(string apiId = default(string), string apiKey = default(string), string applicationId = default(string), string authenticationCredentials = default(string), string autoRotate = default(string), string awsRegion = "us-east-2", string customPayload = default(string), string key = default(string), string metadata = default(string), string name = default(string), string rotatedPassword = default(string), string rotatedUsername = default(string), int rotationHour = default(int), string rotationInterval = default(string), string rotatorCredsType = default(string), string rotatorCustomCmd = default(string), string rotatorType = default(string), bool secureAccessAllowExternalUser = false, string secureAccessAwsAccountId = default(string), bool secureAccessAwsNativeCli = default(bool), string secureAccessBastionIssuer = default(string), string secureAccessDbName = default(string), string secureAccessDbSchema = default(string), string secureAccessEnable = default(string), List<string> secureAccessHost = default(List<string>), string secureAccessRdpDomain = default(string), string secureAccessRdpUser = default(string), bool secureAccessWeb = false, bool secureAccessWebBrowsing = false, bool secureAccessWebProxy = false, string sshPassword = default(string), string sshUsername = default(string), string storageAccountKeyName = default(string), List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userAttribute = default(string), string userDn = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for CreateRotatedSecret and cannot be null");
            }
            this.Name = name;
            // to ensure "rotatorType" is required (not null)
            if (rotatorType == null) {
                throw new ArgumentNullException("rotatorType is a required property for CreateRotatedSecret and cannot be null");
            }
            this.RotatorType = rotatorType;
            // to ensure "targetName" is required (not null)
            if (targetName == null) {
                throw new ArgumentNullException("targetName is a required property for CreateRotatedSecret and cannot be null");
            }
            this.TargetName = targetName;
            this.ApiId = apiId;
            this.ApiKey = apiKey;
            this.ApplicationId = applicationId;
            this.AuthenticationCredentials = authenticationCredentials;
            this.AutoRotate = autoRotate;
            // use default value if no "awsRegion" provided
            this.AwsRegion = awsRegion ?? "us-east-2";
            this.CustomPayload = customPayload;
            this.Key = key;
            this.Metadata = metadata;
            this.RotatedPassword = rotatedPassword;
            this.RotatedUsername = rotatedUsername;
            this.RotationHour = rotationHour;
            this.RotationInterval = rotationInterval;
            this.RotatorCredsType = rotatorCredsType;
            this.RotatorCustomCmd = rotatorCustomCmd;
            this.SecureAccessAllowExternalUser = secureAccessAllowExternalUser;
            this.SecureAccessAwsAccountId = secureAccessAwsAccountId;
            this.SecureAccessAwsNativeCli = secureAccessAwsNativeCli;
            this.SecureAccessBastionIssuer = secureAccessBastionIssuer;
            this.SecureAccessDbName = secureAccessDbName;
            this.SecureAccessDbSchema = secureAccessDbSchema;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessHost = secureAccessHost;
            this.SecureAccessRdpDomain = secureAccessRdpDomain;
            this.SecureAccessRdpUser = secureAccessRdpUser;
            this.SecureAccessWeb = secureAccessWeb;
            this.SecureAccessWebBrowsing = secureAccessWebBrowsing;
            this.SecureAccessWebProxy = secureAccessWebProxy;
            this.SshPassword = sshPassword;
            this.SshUsername = sshUsername;
            this.StorageAccountKeyName = storageAccountKeyName;
            this.Tags = tags;
            this.Token = token;
            this.UidToken = uidToken;
            this.UserAttribute = userAttribute;
            this.UserDn = userDn;
        }

        /// <summary>
        /// Gets or Sets ApiId
        /// </summary>
        [DataMember(Name = "api-id", EmitDefaultValue = false)]
        public string ApiId { get; set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name = "api-key", EmitDefaultValue = false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// ApplicationId (used in azure)
        /// </summary>
        /// <value>ApplicationId (used in azure)</value>
        [DataMember(Name = "application-id", EmitDefaultValue = false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationCredentials
        /// </summary>
        [DataMember(Name = "authentication-credentials", EmitDefaultValue = false)]
        public string AuthenticationCredentials { get; set; }

        /// <summary>
        /// Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation
        /// </summary>
        /// <value>Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation</value>
        [DataMember(Name = "auto-rotate", EmitDefaultValue = false)]
        public string AutoRotate { get; set; }

        /// <summary>
        /// Region (used in aws)
        /// </summary>
        /// <value>Region (used in aws)</value>
        [DataMember(Name = "aws-region", EmitDefaultValue = false)]
        public string AwsRegion { get; set; }

        /// <summary>
        /// Gets or Sets CustomPayload
        /// </summary>
        [DataMember(Name = "custom-payload", EmitDefaultValue = false)]
        public string CustomPayload { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Metadata about the secret
        /// </summary>
        /// <value>Metadata about the secret</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Secret name
        /// </summary>
        /// <value>Secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RotatedPassword
        /// </summary>
        [DataMember(Name = "rotated-password", EmitDefaultValue = false)]
        public string RotatedPassword { get; set; }

        /// <summary>
        /// Gets or Sets RotatedUsername
        /// </summary>
        [DataMember(Name = "rotated-username", EmitDefaultValue = false)]
        public string RotatedUsername { get; set; }

        /// <summary>
        /// Gets or Sets RotationHour
        /// </summary>
        [DataMember(Name = "rotation-hour", EmitDefaultValue = false)]
        public int RotationHour { get; set; }

        /// <summary>
        /// The number of days to wait between every automatic key rotation (1-365)
        /// </summary>
        /// <value>The number of days to wait between every automatic key rotation (1-365)</value>
        [DataMember(Name = "rotation-interval", EmitDefaultValue = false)]
        public string RotationInterval { get; set; }

        /// <summary>
        /// Gets or Sets RotatorCredsType
        /// </summary>
        [DataMember(Name = "rotator-creds-type", EmitDefaultValue = false)]
        public string RotatorCredsType { get; set; }

        /// <summary>
        /// Gets or Sets RotatorCustomCmd
        /// </summary>
        [DataMember(Name = "rotator-custom-cmd", EmitDefaultValue = false)]
        public string RotatorCustomCmd { get; set; }

        /// <summary>
        /// Rotator Type
        /// </summary>
        /// <value>Rotator Type</value>
        [DataMember(Name = "rotator-type", IsRequired = true, EmitDefaultValue = false)]
        public string RotatorType { get; set; }

        /// <summary>
        /// Secure Access Allow Providing External User (used in ssh)
        /// </summary>
        /// <value>Secure Access Allow Providing External User (used in ssh)</value>
        [DataMember(Name = "secure-access-allow-external-user", EmitDefaultValue = true)]
        public bool SecureAccessAllowExternalUser { get; set; }

        /// <summary>
        /// Secure Access Account Id (used in aws)
        /// </summary>
        /// <value>Secure Access Account Id (used in aws)</value>
        [DataMember(Name = "secure-access-aws-account-id", EmitDefaultValue = false)]
        public string SecureAccessAwsAccountId { get; set; }

        /// <summary>
        /// Secure Access Aws Native Cli (used in aws)
        /// </summary>
        /// <value>Secure Access Aws Native Cli (used in aws)</value>
        [DataMember(Name = "secure-access-aws-native-cli", EmitDefaultValue = true)]
        public bool SecureAccessAwsNativeCli { get; set; }

        /// <summary>
        /// Secure Access Bastion Issuer
        /// </summary>
        /// <value>Secure Access Bastion Issuer</value>
        [DataMember(Name = "secure-access-bastion-issuer", EmitDefaultValue = false)]
        public string SecureAccessBastionIssuer { get; set; }

        /// <summary>
        /// Secure Access DB Name (used in data bases)
        /// </summary>
        /// <value>Secure Access DB Name (used in data bases)</value>
        [DataMember(Name = "secure-access-db-name", EmitDefaultValue = false)]
        public string SecureAccessDbName { get; set; }

        /// <summary>
        /// Secure Access Schema (used in mssql, postgresql)
        /// </summary>
        /// <value>Secure Access Schema (used in mssql, postgresql)</value>
        [DataMember(Name = "secure-access-db-schema", EmitDefaultValue = false)]
        public string SecureAccessDbSchema { get; set; }

        /// <summary>
        /// Secure Access Enabled
        /// </summary>
        /// <value>Secure Access Enabled</value>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Secure Access Host
        /// </summary>
        /// <value>Secure Access Host</value>
        [DataMember(Name = "secure-access-host", EmitDefaultValue = false)]
        public List<string> SecureAccessHost { get; set; }

        /// <summary>
        /// Secure Access Domain (used in ssh)
        /// </summary>
        /// <value>Secure Access Domain (used in ssh)</value>
        [DataMember(Name = "secure-access-rdp-domain", EmitDefaultValue = false)]
        public string SecureAccessRdpDomain { get; set; }

        /// <summary>
        /// Secure Access Override User (used in ssh)
        /// </summary>
        /// <value>Secure Access Override User (used in ssh)</value>
        [DataMember(Name = "secure-access-rdp-user", EmitDefaultValue = false)]
        public string SecureAccessRdpUser { get; set; }

        /// <summary>
        /// Secure Access Web
        /// </summary>
        /// <value>Secure Access Web</value>
        [DataMember(Name = "secure-access-web", EmitDefaultValue = true)]
        public bool SecureAccessWeb { get; set; }

        /// <summary>
        /// Secure Access Isolated (used in aws, azure)
        /// </summary>
        /// <value>Secure Access Isolated (used in aws, azure)</value>
        [DataMember(Name = "secure-access-web-browsing", EmitDefaultValue = true)]
        public bool SecureAccessWebBrowsing { get; set; }

        /// <summary>
        /// Secure Access Web Proxy (used in aws, azure)
        /// </summary>
        /// <value>Secure Access Web Proxy (used in aws, azure)</value>
        [DataMember(Name = "secure-access-web-proxy", EmitDefaultValue = true)]
        public bool SecureAccessWebProxy { get; set; }

        /// <summary>
        /// Deprecated: use RotatedPassword
        /// </summary>
        /// <value>Deprecated: use RotatedPassword</value>
        [DataMember(Name = "ssh-password", EmitDefaultValue = false)]
        public string SshPassword { get; set; }

        /// <summary>
        /// Deprecated: use RotatedUser
        /// </summary>
        /// <value>Deprecated: use RotatedUser</value>
        [DataMember(Name = "ssh-username", EmitDefaultValue = false)]
        public string SshUsername { get; set; }

        /// <summary>
        /// The name of the storage account key to rotate [key1/key2/kerb1/kerb2] (relevat to azure-storage-account)
        /// </summary>
        /// <value>The name of the storage account key to rotate [key1/key2/kerb1/kerb2] (relevat to azure-storage-account)</value>
        [DataMember(Name = "storage-account-key-name", EmitDefaultValue = false)]
        public string StorageAccountKeyName { get; set; }

        /// <summary>
        /// List of the tags attached to this secret
        /// </summary>
        /// <value>List of the tags attached to this secret</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", IsRequired = true, EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User Attribute
        /// </summary>
        /// <value>User Attribute</value>
        [DataMember(Name = "user-attribute", EmitDefaultValue = false)]
        public string UserAttribute { get; set; }

        /// <summary>
        /// User DN
        /// </summary>
        /// <value>User DN</value>
        [DataMember(Name = "user-dn", EmitDefaultValue = false)]
        public string UserDn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateRotatedSecret {\n");
            sb.Append("  ApiId: ").Append(ApiId).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  AuthenticationCredentials: ").Append(AuthenticationCredentials).Append("\n");
            sb.Append("  AutoRotate: ").Append(AutoRotate).Append("\n");
            sb.Append("  AwsRegion: ").Append(AwsRegion).Append("\n");
            sb.Append("  CustomPayload: ").Append(CustomPayload).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RotatedPassword: ").Append(RotatedPassword).Append("\n");
            sb.Append("  RotatedUsername: ").Append(RotatedUsername).Append("\n");
            sb.Append("  RotationHour: ").Append(RotationHour).Append("\n");
            sb.Append("  RotationInterval: ").Append(RotationInterval).Append("\n");
            sb.Append("  RotatorCredsType: ").Append(RotatorCredsType).Append("\n");
            sb.Append("  RotatorCustomCmd: ").Append(RotatorCustomCmd).Append("\n");
            sb.Append("  RotatorType: ").Append(RotatorType).Append("\n");
            sb.Append("  SecureAccessAllowExternalUser: ").Append(SecureAccessAllowExternalUser).Append("\n");
            sb.Append("  SecureAccessAwsAccountId: ").Append(SecureAccessAwsAccountId).Append("\n");
            sb.Append("  SecureAccessAwsNativeCli: ").Append(SecureAccessAwsNativeCli).Append("\n");
            sb.Append("  SecureAccessBastionIssuer: ").Append(SecureAccessBastionIssuer).Append("\n");
            sb.Append("  SecureAccessDbName: ").Append(SecureAccessDbName).Append("\n");
            sb.Append("  SecureAccessDbSchema: ").Append(SecureAccessDbSchema).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessHost: ").Append(SecureAccessHost).Append("\n");
            sb.Append("  SecureAccessRdpDomain: ").Append(SecureAccessRdpDomain).Append("\n");
            sb.Append("  SecureAccessRdpUser: ").Append(SecureAccessRdpUser).Append("\n");
            sb.Append("  SecureAccessWeb: ").Append(SecureAccessWeb).Append("\n");
            sb.Append("  SecureAccessWebBrowsing: ").Append(SecureAccessWebBrowsing).Append("\n");
            sb.Append("  SecureAccessWebProxy: ").Append(SecureAccessWebProxy).Append("\n");
            sb.Append("  SshPassword: ").Append(SshPassword).Append("\n");
            sb.Append("  SshUsername: ").Append(SshUsername).Append("\n");
            sb.Append("  StorageAccountKeyName: ").Append(StorageAccountKeyName).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserAttribute: ").Append(UserAttribute).Append("\n");
            sb.Append("  UserDn: ").Append(UserDn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateRotatedSecret);
        }

        /// <summary>
        /// Returns true if CreateRotatedSecret instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateRotatedSecret to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateRotatedSecret input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiId == input.ApiId ||
                    (this.ApiId != null &&
                    this.ApiId.Equals(input.ApiId))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.AuthenticationCredentials == input.AuthenticationCredentials ||
                    (this.AuthenticationCredentials != null &&
                    this.AuthenticationCredentials.Equals(input.AuthenticationCredentials))
                ) && 
                (
                    this.AutoRotate == input.AutoRotate ||
                    (this.AutoRotate != null &&
                    this.AutoRotate.Equals(input.AutoRotate))
                ) && 
                (
                    this.AwsRegion == input.AwsRegion ||
                    (this.AwsRegion != null &&
                    this.AwsRegion.Equals(input.AwsRegion))
                ) && 
                (
                    this.CustomPayload == input.CustomPayload ||
                    (this.CustomPayload != null &&
                    this.CustomPayload.Equals(input.CustomPayload))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RotatedPassword == input.RotatedPassword ||
                    (this.RotatedPassword != null &&
                    this.RotatedPassword.Equals(input.RotatedPassword))
                ) && 
                (
                    this.RotatedUsername == input.RotatedUsername ||
                    (this.RotatedUsername != null &&
                    this.RotatedUsername.Equals(input.RotatedUsername))
                ) && 
                (
                    this.RotationHour == input.RotationHour ||
                    this.RotationHour.Equals(input.RotationHour)
                ) && 
                (
                    this.RotationInterval == input.RotationInterval ||
                    (this.RotationInterval != null &&
                    this.RotationInterval.Equals(input.RotationInterval))
                ) && 
                (
                    this.RotatorCredsType == input.RotatorCredsType ||
                    (this.RotatorCredsType != null &&
                    this.RotatorCredsType.Equals(input.RotatorCredsType))
                ) && 
                (
                    this.RotatorCustomCmd == input.RotatorCustomCmd ||
                    (this.RotatorCustomCmd != null &&
                    this.RotatorCustomCmd.Equals(input.RotatorCustomCmd))
                ) && 
                (
                    this.RotatorType == input.RotatorType ||
                    (this.RotatorType != null &&
                    this.RotatorType.Equals(input.RotatorType))
                ) && 
                (
                    this.SecureAccessAllowExternalUser == input.SecureAccessAllowExternalUser ||
                    this.SecureAccessAllowExternalUser.Equals(input.SecureAccessAllowExternalUser)
                ) && 
                (
                    this.SecureAccessAwsAccountId == input.SecureAccessAwsAccountId ||
                    (this.SecureAccessAwsAccountId != null &&
                    this.SecureAccessAwsAccountId.Equals(input.SecureAccessAwsAccountId))
                ) && 
                (
                    this.SecureAccessAwsNativeCli == input.SecureAccessAwsNativeCli ||
                    this.SecureAccessAwsNativeCli.Equals(input.SecureAccessAwsNativeCli)
                ) && 
                (
                    this.SecureAccessBastionIssuer == input.SecureAccessBastionIssuer ||
                    (this.SecureAccessBastionIssuer != null &&
                    this.SecureAccessBastionIssuer.Equals(input.SecureAccessBastionIssuer))
                ) && 
                (
                    this.SecureAccessDbName == input.SecureAccessDbName ||
                    (this.SecureAccessDbName != null &&
                    this.SecureAccessDbName.Equals(input.SecureAccessDbName))
                ) && 
                (
                    this.SecureAccessDbSchema == input.SecureAccessDbSchema ||
                    (this.SecureAccessDbSchema != null &&
                    this.SecureAccessDbSchema.Equals(input.SecureAccessDbSchema))
                ) && 
                (
                    this.SecureAccessEnable == input.SecureAccessEnable ||
                    (this.SecureAccessEnable != null &&
                    this.SecureAccessEnable.Equals(input.SecureAccessEnable))
                ) && 
                (
                    this.SecureAccessHost == input.SecureAccessHost ||
                    this.SecureAccessHost != null &&
                    input.SecureAccessHost != null &&
                    this.SecureAccessHost.SequenceEqual(input.SecureAccessHost)
                ) && 
                (
                    this.SecureAccessRdpDomain == input.SecureAccessRdpDomain ||
                    (this.SecureAccessRdpDomain != null &&
                    this.SecureAccessRdpDomain.Equals(input.SecureAccessRdpDomain))
                ) && 
                (
                    this.SecureAccessRdpUser == input.SecureAccessRdpUser ||
                    (this.SecureAccessRdpUser != null &&
                    this.SecureAccessRdpUser.Equals(input.SecureAccessRdpUser))
                ) && 
                (
                    this.SecureAccessWeb == input.SecureAccessWeb ||
                    this.SecureAccessWeb.Equals(input.SecureAccessWeb)
                ) && 
                (
                    this.SecureAccessWebBrowsing == input.SecureAccessWebBrowsing ||
                    this.SecureAccessWebBrowsing.Equals(input.SecureAccessWebBrowsing)
                ) && 
                (
                    this.SecureAccessWebProxy == input.SecureAccessWebProxy ||
                    this.SecureAccessWebProxy.Equals(input.SecureAccessWebProxy)
                ) && 
                (
                    this.SshPassword == input.SshPassword ||
                    (this.SshPassword != null &&
                    this.SshPassword.Equals(input.SshPassword))
                ) && 
                (
                    this.SshUsername == input.SshUsername ||
                    (this.SshUsername != null &&
                    this.SshUsername.Equals(input.SshUsername))
                ) && 
                (
                    this.StorageAccountKeyName == input.StorageAccountKeyName ||
                    (this.StorageAccountKeyName != null &&
                    this.StorageAccountKeyName.Equals(input.StorageAccountKeyName))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserAttribute == input.UserAttribute ||
                    (this.UserAttribute != null &&
                    this.UserAttribute.Equals(input.UserAttribute))
                ) && 
                (
                    this.UserDn == input.UserDn ||
                    (this.UserDn != null &&
                    this.UserDn.Equals(input.UserDn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiId != null)
                    hashCode = hashCode * 59 + this.ApiId.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.AuthenticationCredentials != null)
                    hashCode = hashCode * 59 + this.AuthenticationCredentials.GetHashCode();
                if (this.AutoRotate != null)
                    hashCode = hashCode * 59 + this.AutoRotate.GetHashCode();
                if (this.AwsRegion != null)
                    hashCode = hashCode * 59 + this.AwsRegion.GetHashCode();
                if (this.CustomPayload != null)
                    hashCode = hashCode * 59 + this.CustomPayload.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RotatedPassword != null)
                    hashCode = hashCode * 59 + this.RotatedPassword.GetHashCode();
                if (this.RotatedUsername != null)
                    hashCode = hashCode * 59 + this.RotatedUsername.GetHashCode();
                hashCode = hashCode * 59 + this.RotationHour.GetHashCode();
                if (this.RotationInterval != null)
                    hashCode = hashCode * 59 + this.RotationInterval.GetHashCode();
                if (this.RotatorCredsType != null)
                    hashCode = hashCode * 59 + this.RotatorCredsType.GetHashCode();
                if (this.RotatorCustomCmd != null)
                    hashCode = hashCode * 59 + this.RotatorCustomCmd.GetHashCode();
                if (this.RotatorType != null)
                    hashCode = hashCode * 59 + this.RotatorType.GetHashCode();
                hashCode = hashCode * 59 + this.SecureAccessAllowExternalUser.GetHashCode();
                if (this.SecureAccessAwsAccountId != null)
                    hashCode = hashCode * 59 + this.SecureAccessAwsAccountId.GetHashCode();
                hashCode = hashCode * 59 + this.SecureAccessAwsNativeCli.GetHashCode();
                if (this.SecureAccessBastionIssuer != null)
                    hashCode = hashCode * 59 + this.SecureAccessBastionIssuer.GetHashCode();
                if (this.SecureAccessDbName != null)
                    hashCode = hashCode * 59 + this.SecureAccessDbName.GetHashCode();
                if (this.SecureAccessDbSchema != null)
                    hashCode = hashCode * 59 + this.SecureAccessDbSchema.GetHashCode();
                if (this.SecureAccessEnable != null)
                    hashCode = hashCode * 59 + this.SecureAccessEnable.GetHashCode();
                if (this.SecureAccessHost != null)
                    hashCode = hashCode * 59 + this.SecureAccessHost.GetHashCode();
                if (this.SecureAccessRdpDomain != null)
                    hashCode = hashCode * 59 + this.SecureAccessRdpDomain.GetHashCode();
                if (this.SecureAccessRdpUser != null)
                    hashCode = hashCode * 59 + this.SecureAccessRdpUser.GetHashCode();
                hashCode = hashCode * 59 + this.SecureAccessWeb.GetHashCode();
                hashCode = hashCode * 59 + this.SecureAccessWebBrowsing.GetHashCode();
                hashCode = hashCode * 59 + this.SecureAccessWebProxy.GetHashCode();
                if (this.SshPassword != null)
                    hashCode = hashCode * 59 + this.SshPassword.GetHashCode();
                if (this.SshUsername != null)
                    hashCode = hashCode * 59 + this.SshUsername.GetHashCode();
                if (this.StorageAccountKeyName != null)
                    hashCode = hashCode * 59 + this.StorageAccountKeyName.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.TargetName != null)
                    hashCode = hashCode * 59 + this.TargetName.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.UserAttribute != null)
                    hashCode = hashCode * 59 + this.UserAttribute.GetHashCode();
                if (this.UserDn != null)
                    hashCode = hashCode * 59 + this.UserDn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
