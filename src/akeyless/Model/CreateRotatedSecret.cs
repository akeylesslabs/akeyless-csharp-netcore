/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CreateRotatedSecret
    /// </summary>
    [DataContract]
    public partial class CreateRotatedSecret :  IEquatable<CreateRotatedSecret>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRotatedSecret" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateRotatedSecret() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRotatedSecret" /> class.
        /// </summary>
        /// <param name="apiId">apiId.</param>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="autoRotate">Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation.</param>
        /// <param name="key">The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="metadata">Metadata about the secret.</param>
        /// <param name="name">Secret name (required).</param>
        /// <param name="password">Required only when the authentication process requires a username and password.</param>
        /// <param name="rotatedPassword">rotatedPassword.</param>
        /// <param name="rotatedUsername">rotatedUsername.</param>
        /// <param name="rotationHour">rotationHour.</param>
        /// <param name="rotationInterval">The number of days to wait between every automatic key rotation (7-365).</param>
        /// <param name="rotatorCredsType">rotatorCredsType.</param>
        /// <param name="rotatorType">rotatorType.</param>
        /// <param name="sshPassword">Deprecated: use RotatedPassword.</param>
        /// <param name="sshUsername">Deprecated: use RotatedUser.</param>
        /// <param name="tags">List of the tags attached to this secret.</param>
        /// <param name="targetName">Target name (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="username">Required only when the authentication process requires a username and password.</param>
        public CreateRotatedSecret(string apiId = default(string), string apiKey = default(string), string autoRotate = default(string), string key = default(string), string metadata = default(string), string name = default(string), string password = default(string), string rotatedPassword = default(string), string rotatedUsername = default(string), int rotationHour = default(int), string rotationInterval = default(string), string rotatorCredsType = default(string), string rotatorType = default(string), string sshPassword = default(string), string sshUsername = default(string), List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string username = default(string))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for CreateRotatedSecret and cannot be null");
            // to ensure "targetName" is required (not null)
            this.TargetName = targetName ?? throw new ArgumentNullException("targetName is a required property for CreateRotatedSecret and cannot be null");
            this.ApiId = apiId;
            this.ApiKey = apiKey;
            this.AutoRotate = autoRotate;
            this.Key = key;
            this.Metadata = metadata;
            this.Password = password;
            this.RotatedPassword = rotatedPassword;
            this.RotatedUsername = rotatedUsername;
            this.RotationHour = rotationHour;
            this.RotationInterval = rotationInterval;
            this.RotatorCredsType = rotatorCredsType;
            this.RotatorType = rotatorType;
            this.SshPassword = sshPassword;
            this.SshUsername = sshUsername;
            this.Tags = tags;
            this.Token = token;
            this.UidToken = uidToken;
            this.Username = username;
        }
        
        /// <summary>
        /// Gets or Sets ApiId
        /// </summary>
        [DataMember(Name="api-id", EmitDefaultValue=false)]
        public string ApiId { get; set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name="api-key", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation
        /// </summary>
        /// <value>Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation</value>
        [DataMember(Name="auto-rotate", EmitDefaultValue=false)]
        public string AutoRotate { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Metadata about the secret
        /// </summary>
        /// <value>Metadata about the secret</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Secret name
        /// </summary>
        /// <value>Secret name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets RotatedPassword
        /// </summary>
        [DataMember(Name="rotated-password", EmitDefaultValue=false)]
        public string RotatedPassword { get; set; }

        /// <summary>
        /// Gets or Sets RotatedUsername
        /// </summary>
        [DataMember(Name="rotated-username", EmitDefaultValue=false)]
        public string RotatedUsername { get; set; }

        /// <summary>
        /// Gets or Sets RotationHour
        /// </summary>
        [DataMember(Name="rotation-hour", EmitDefaultValue=false)]
        public int RotationHour { get; set; }

        /// <summary>
        /// The number of days to wait between every automatic key rotation (7-365)
        /// </summary>
        /// <value>The number of days to wait between every automatic key rotation (7-365)</value>
        [DataMember(Name="rotation-interval", EmitDefaultValue=false)]
        public string RotationInterval { get; set; }

        /// <summary>
        /// Gets or Sets RotatorCredsType
        /// </summary>
        [DataMember(Name="rotator-creds-type", EmitDefaultValue=false)]
        public string RotatorCredsType { get; set; }

        /// <summary>
        /// Gets or Sets RotatorType
        /// </summary>
        [DataMember(Name="rotator-type", EmitDefaultValue=false)]
        public string RotatorType { get; set; }

        /// <summary>
        /// Deprecated: use RotatedPassword
        /// </summary>
        /// <value>Deprecated: use RotatedPassword</value>
        [DataMember(Name="ssh-password", EmitDefaultValue=false)]
        public string SshPassword { get; set; }

        /// <summary>
        /// Deprecated: use RotatedUser
        /// </summary>
        /// <value>Deprecated: use RotatedUser</value>
        [DataMember(Name="ssh-username", EmitDefaultValue=false)]
        public string SshUsername { get; set; }

        /// <summary>
        /// List of the tags attached to this secret
        /// </summary>
        /// <value>List of the tags attached to this secret</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name="target-name", EmitDefaultValue=false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateRotatedSecret {\n");
            sb.Append("  ApiId: ").Append(ApiId).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  AutoRotate: ").Append(AutoRotate).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  RotatedPassword: ").Append(RotatedPassword).Append("\n");
            sb.Append("  RotatedUsername: ").Append(RotatedUsername).Append("\n");
            sb.Append("  RotationHour: ").Append(RotationHour).Append("\n");
            sb.Append("  RotationInterval: ").Append(RotationInterval).Append("\n");
            sb.Append("  RotatorCredsType: ").Append(RotatorCredsType).Append("\n");
            sb.Append("  RotatorType: ").Append(RotatorType).Append("\n");
            sb.Append("  SshPassword: ").Append(SshPassword).Append("\n");
            sb.Append("  SshUsername: ").Append(SshUsername).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateRotatedSecret);
        }

        /// <summary>
        /// Returns true if CreateRotatedSecret instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateRotatedSecret to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateRotatedSecret input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiId == input.ApiId ||
                    (this.ApiId != null &&
                    this.ApiId.Equals(input.ApiId))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.AutoRotate == input.AutoRotate ||
                    (this.AutoRotate != null &&
                    this.AutoRotate.Equals(input.AutoRotate))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.RotatedPassword == input.RotatedPassword ||
                    (this.RotatedPassword != null &&
                    this.RotatedPassword.Equals(input.RotatedPassword))
                ) && 
                (
                    this.RotatedUsername == input.RotatedUsername ||
                    (this.RotatedUsername != null &&
                    this.RotatedUsername.Equals(input.RotatedUsername))
                ) && 
                (
                    this.RotationHour == input.RotationHour ||
                    this.RotationHour.Equals(input.RotationHour)
                ) && 
                (
                    this.RotationInterval == input.RotationInterval ||
                    (this.RotationInterval != null &&
                    this.RotationInterval.Equals(input.RotationInterval))
                ) && 
                (
                    this.RotatorCredsType == input.RotatorCredsType ||
                    (this.RotatorCredsType != null &&
                    this.RotatorCredsType.Equals(input.RotatorCredsType))
                ) && 
                (
                    this.RotatorType == input.RotatorType ||
                    (this.RotatorType != null &&
                    this.RotatorType.Equals(input.RotatorType))
                ) && 
                (
                    this.SshPassword == input.SshPassword ||
                    (this.SshPassword != null &&
                    this.SshPassword.Equals(input.SshPassword))
                ) && 
                (
                    this.SshUsername == input.SshUsername ||
                    (this.SshUsername != null &&
                    this.SshUsername.Equals(input.SshUsername))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiId != null)
                    hashCode = hashCode * 59 + this.ApiId.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.AutoRotate != null)
                    hashCode = hashCode * 59 + this.AutoRotate.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.RotatedPassword != null)
                    hashCode = hashCode * 59 + this.RotatedPassword.GetHashCode();
                if (this.RotatedUsername != null)
                    hashCode = hashCode * 59 + this.RotatedUsername.GetHashCode();
                hashCode = hashCode * 59 + this.RotationHour.GetHashCode();
                if (this.RotationInterval != null)
                    hashCode = hashCode * 59 + this.RotationInterval.GetHashCode();
                if (this.RotatorCredsType != null)
                    hashCode = hashCode * 59 + this.RotatorCredsType.GetHashCode();
                if (this.RotatorType != null)
                    hashCode = hashCode * 59 + this.RotatorType.GetHashCode();
                if (this.SshPassword != null)
                    hashCode = hashCode * 59 + this.SshPassword.GetHashCode();
                if (this.SshUsername != null)
                    hashCode = hashCode * 59 + this.SshUsername.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.TargetName != null)
                    hashCode = hashCode * 59 + this.TargetName.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
