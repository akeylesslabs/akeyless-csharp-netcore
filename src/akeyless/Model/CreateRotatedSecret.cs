/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// createRotatedSecret is a command that creates a rotated secret [Deprecated: Use rotated-secret-create commands]
    /// </summary>
    [DataContract(Name = "createRotatedSecret")]
    public partial class CreateRotatedSecret : IEquatable<CreateRotatedSecret>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRotatedSecret" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateRotatedSecret() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRotatedSecret" /> class.
        /// </summary>
        /// <param name="providerType">providerType.</param>
        /// <param name="apiId">API ID to rotate (relevant only for rotator-type&#x3D;api-key).</param>
        /// <param name="apiKey">API key to rotate (relevant only for rotator-type&#x3D;api-key).</param>
        /// <param name="applicationId">ApplicationId (used in azure).</param>
        /// <param name="authenticationCredentials">The credentials to connect with use-user-creds/use-target-creds (default to &quot;use-user-creds&quot;).</param>
        /// <param name="autoRotate">Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation [true/false].</param>
        /// <param name="awsRegion">Aws Region (relevant only for aws) (default to &quot;us-east-2&quot;).</param>
        /// <param name="customPayload">Secret payload to be sent with rotation request (relevant only for rotator-type&#x3D;custom).</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this item [true/false].</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="gcpKey">Base64-encoded service account private key text.</param>
        /// <param name="gcpServiceAccountEmail">The email of the gcp service account to rotate.</param>
        /// <param name="gcpServiceAccountKeyId">The key id of the gcp service account to rotate.</param>
        /// <param name="graceRotation">Create a new access key without deleting the old key from AWS for backup (relevant only for AWS) [true/false].</param>
        /// <param name="hostProvider">Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="key">The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="metadata">Deprecated - use description.</param>
        /// <param name="name">Secret name (required).</param>
        /// <param name="passwordLength">The length of the password to be generated.</param>
        /// <param name="rotateAfterDisconnect">Rotate the value of the secret after SRA session ends [true/false] (default to &quot;false&quot;).</param>
        /// <param name="rotatedPassword">rotated-username password (relevant only for rotator-type&#x3D;password).</param>
        /// <param name="rotatedUsername">username to be rotated, if selected use-self-creds at rotator-creds-type, this username will try to rotate it&#39;s own password, if use-target-creds is selected, target credentials will be use to rotate the rotated-password (relevant only for rotator-type&#x3D;password).</param>
        /// <param name="rotationHour">The Hour of the rotation in UTC. Default rotation-hour is 14:00.</param>
        /// <param name="rotationInterval">The number of days to wait between every automatic key rotation (1-365).</param>
        /// <param name="rotatorCredsType">rotatorCredsType.</param>
        /// <param name="rotatorCustomCmd">Custom rotation command (relevant only for ssh target).</param>
        /// <param name="rotatorType">Rotator Type (required).</param>
        /// <param name="samePassword">Rotate same password for each host from the Linked Target (relevant only for Linked Target).</param>
        /// <param name="secureAccessAllowExternalUser">Allow providing external user for a domain users (relevant only for rdp) (default to false).</param>
        /// <param name="secureAccessAwsAccountId">The AWS account id (relevant only for aws).</param>
        /// <param name="secureAccessAwsNativeCli">The AWS native cli.</param>
        /// <param name="secureAccessBastionIssuer">Path to the SSH Certificate Issuer for your Akeyless Bastion.</param>
        /// <param name="secureAccessDbName">The DB name (relevant only for DB Dynamic-Secret).</param>
        /// <param name="secureAccessDbSchema">The db schema (relevant only for mssql or postgresql).</param>
        /// <param name="secureAccessEnable">Enable/Disable secure remote access [true/false].</param>
        /// <param name="secureAccessHost">Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers).</param>
        /// <param name="secureAccessRdpDomain">Required when the Dynamic Secret is used for a domain user (relevant only for RDP Dynamic-Secret).</param>
        /// <param name="secureAccessRdpUser">Override the RDP Domain username (relevant only for rdp).</param>
        /// <param name="secureAccessUrl">Destination URL to inject secrets.</param>
        /// <param name="secureAccessWeb">Enable Web Secure Remote Access (default to false).</param>
        /// <param name="secureAccessWebBrowsing">Secure browser via Akeyless Web Access Bastion (relevant only for aws or azure) (default to false).</param>
        /// <param name="secureAccessWebProxy">Web-Proxy via Akeyless Web Access Bastion (relevant only for aws or azure) (default to false).</param>
        /// <param name="sshPassword">Deprecated: use RotatedPassword.</param>
        /// <param name="sshUsername">Deprecated: use RotatedUser.</param>
        /// <param name="storageAccountKeyName">The name of the storage account key to rotate [key1/key2/kerb1/kerb2] (relevat to azure-storage-account).</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="target">A list of linked targets to be associated, Relevant only for Secure Remote Access for ssh cert issuer, ldap rotated secret and ldap dynamic secret, To specify multiple targets use argument multiple times.</param>
        /// <param name="targetName">Target name (required).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userAttribute">LDAP User Attribute, Default value \&quot;cn\&quot; (default to &quot;cn&quot;).</param>
        /// <param name="userDn">LDAP User Base DN.</param>
        public CreateRotatedSecret(string providerType = default(string), string apiId = default(string), string apiKey = default(string), string applicationId = default(string), string authenticationCredentials = "use-user-creds", string autoRotate = default(string), string awsRegion = "us-east-2", string customPayload = default(string), string deleteProtection = default(string), string description = default(string), string gcpKey = default(string), string gcpServiceAccountEmail = default(string), string gcpServiceAccountKeyId = default(string), string graceRotation = default(string), string hostProvider = default(string), bool json = false, string key = default(string), string metadata = default(string), string name = default(string), string passwordLength = default(string), string rotateAfterDisconnect = "false", string rotatedPassword = default(string), string rotatedUsername = default(string), int rotationHour = default(int), string rotationInterval = default(string), string rotatorCredsType = default(string), string rotatorCustomCmd = default(string), string rotatorType = default(string), string samePassword = default(string), bool secureAccessAllowExternalUser = false, string secureAccessAwsAccountId = default(string), bool secureAccessAwsNativeCli = default(bool), string secureAccessBastionIssuer = default(string), string secureAccessDbName = default(string), string secureAccessDbSchema = default(string), string secureAccessEnable = default(string), List<string> secureAccessHost = default(List<string>), string secureAccessRdpDomain = default(string), string secureAccessRdpUser = default(string), string secureAccessUrl = default(string), bool secureAccessWeb = false, bool secureAccessWebBrowsing = false, bool secureAccessWebProxy = false, string sshPassword = default(string), string sshUsername = default(string), string storageAccountKeyName = default(string), List<string> tags = default(List<string>), List<string> target = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userAttribute = "cn", string userDn = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateRotatedSecret and cannot be null");
            }
            this.Name = name;
            // to ensure "rotatorType" is required (not null)
            if (rotatorType == null)
            {
                throw new ArgumentNullException("rotatorType is a required property for CreateRotatedSecret and cannot be null");
            }
            this.RotatorType = rotatorType;
            // to ensure "targetName" is required (not null)
            if (targetName == null)
            {
                throw new ArgumentNullException("targetName is a required property for CreateRotatedSecret and cannot be null");
            }
            this.TargetName = targetName;
            this.ProviderType = providerType;
            this.ApiId = apiId;
            this.ApiKey = apiKey;
            this.ApplicationId = applicationId;
            // use default value if no "authenticationCredentials" provided
            this.AuthenticationCredentials = authenticationCredentials ?? "use-user-creds";
            this.AutoRotate = autoRotate;
            // use default value if no "awsRegion" provided
            this.AwsRegion = awsRegion ?? "us-east-2";
            this.CustomPayload = customPayload;
            this.DeleteProtection = deleteProtection;
            this.Description = description;
            this.GcpKey = gcpKey;
            this.GcpServiceAccountEmail = gcpServiceAccountEmail;
            this.GcpServiceAccountKeyId = gcpServiceAccountKeyId;
            this.GraceRotation = graceRotation;
            this.HostProvider = hostProvider;
            this.Json = json;
            this.Key = key;
            this.Metadata = metadata;
            this.PasswordLength = passwordLength;
            // use default value if no "rotateAfterDisconnect" provided
            this.RotateAfterDisconnect = rotateAfterDisconnect ?? "false";
            this.RotatedPassword = rotatedPassword;
            this.RotatedUsername = rotatedUsername;
            this.RotationHour = rotationHour;
            this.RotationInterval = rotationInterval;
            this.RotatorCredsType = rotatorCredsType;
            this.RotatorCustomCmd = rotatorCustomCmd;
            this.SamePassword = samePassword;
            this.SecureAccessAllowExternalUser = secureAccessAllowExternalUser;
            this.SecureAccessAwsAccountId = secureAccessAwsAccountId;
            this.SecureAccessAwsNativeCli = secureAccessAwsNativeCli;
            this.SecureAccessBastionIssuer = secureAccessBastionIssuer;
            this.SecureAccessDbName = secureAccessDbName;
            this.SecureAccessDbSchema = secureAccessDbSchema;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessHost = secureAccessHost;
            this.SecureAccessRdpDomain = secureAccessRdpDomain;
            this.SecureAccessRdpUser = secureAccessRdpUser;
            this.SecureAccessUrl = secureAccessUrl;
            this.SecureAccessWeb = secureAccessWeb;
            this.SecureAccessWebBrowsing = secureAccessWebBrowsing;
            this.SecureAccessWebProxy = secureAccessWebProxy;
            this.SshPassword = sshPassword;
            this.SshUsername = sshUsername;
            this.StorageAccountKeyName = storageAccountKeyName;
            this.Tags = tags;
            this.Target = target;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userAttribute" provided
            this.UserAttribute = userAttribute ?? "cn";
            this.UserDn = userDn;
        }

        /// <summary>
        /// Gets or Sets ProviderType
        /// </summary>
        [DataMember(Name = "ProviderType", EmitDefaultValue = false)]
        public string ProviderType { get; set; }

        /// <summary>
        /// API ID to rotate (relevant only for rotator-type&#x3D;api-key)
        /// </summary>
        /// <value>API ID to rotate (relevant only for rotator-type&#x3D;api-key)</value>
        [DataMember(Name = "api-id", EmitDefaultValue = false)]
        public string ApiId { get; set; }

        /// <summary>
        /// API key to rotate (relevant only for rotator-type&#x3D;api-key)
        /// </summary>
        /// <value>API key to rotate (relevant only for rotator-type&#x3D;api-key)</value>
        [DataMember(Name = "api-key", EmitDefaultValue = false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// ApplicationId (used in azure)
        /// </summary>
        /// <value>ApplicationId (used in azure)</value>
        [DataMember(Name = "application-id", EmitDefaultValue = false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// The credentials to connect with use-user-creds/use-target-creds
        /// </summary>
        /// <value>The credentials to connect with use-user-creds/use-target-creds</value>
        [DataMember(Name = "authentication-credentials", EmitDefaultValue = false)]
        public string AuthenticationCredentials { get; set; }

        /// <summary>
        /// Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation [true/false]
        /// </summary>
        /// <value>Whether to automatically rotate every - -rotation-interval days, or disable existing automatic rotation [true/false]</value>
        [DataMember(Name = "auto-rotate", EmitDefaultValue = false)]
        public string AutoRotate { get; set; }

        /// <summary>
        /// Aws Region (relevant only for aws)
        /// </summary>
        /// <value>Aws Region (relevant only for aws)</value>
        [DataMember(Name = "aws-region", EmitDefaultValue = false)]
        public string AwsRegion { get; set; }

        /// <summary>
        /// Secret payload to be sent with rotation request (relevant only for rotator-type&#x3D;custom)
        /// </summary>
        /// <value>Secret payload to be sent with rotation request (relevant only for rotator-type&#x3D;custom)</value>
        [DataMember(Name = "custom-payload", EmitDefaultValue = false)]
        public string CustomPayload { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this item [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this item [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Base64-encoded service account private key text
        /// </summary>
        /// <value>Base64-encoded service account private key text</value>
        [DataMember(Name = "gcp-key", EmitDefaultValue = false)]
        public string GcpKey { get; set; }

        /// <summary>
        /// The email of the gcp service account to rotate
        /// </summary>
        /// <value>The email of the gcp service account to rotate</value>
        [DataMember(Name = "gcp-service-account-email", EmitDefaultValue = false)]
        public string GcpServiceAccountEmail { get; set; }

        /// <summary>
        /// The key id of the gcp service account to rotate
        /// </summary>
        /// <value>The key id of the gcp service account to rotate</value>
        [DataMember(Name = "gcp-service-account-key-id", EmitDefaultValue = false)]
        public string GcpServiceAccountKeyId { get; set; }

        /// <summary>
        /// Create a new access key without deleting the old key from AWS for backup (relevant only for AWS) [true/false]
        /// </summary>
        /// <value>Create a new access key without deleting the old key from AWS for backup (relevant only for AWS) [true/false]</value>
        [DataMember(Name = "grace-rotation", EmitDefaultValue = false)]
        public string GraceRotation { get; set; }

        /// <summary>
        /// Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret
        /// </summary>
        /// <value>Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret</value>
        [DataMember(Name = "host-provider", EmitDefaultValue = false)]
        public string HostProvider { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Deprecated - use description
        /// </summary>
        /// <value>Deprecated - use description</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Secret name
        /// </summary>
        /// <value>Secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The length of the password to be generated
        /// </summary>
        /// <value>The length of the password to be generated</value>
        [DataMember(Name = "password-length", EmitDefaultValue = false)]
        public string PasswordLength { get; set; }

        /// <summary>
        /// Rotate the value of the secret after SRA session ends [true/false]
        /// </summary>
        /// <value>Rotate the value of the secret after SRA session ends [true/false]</value>
        [DataMember(Name = "rotate-after-disconnect", EmitDefaultValue = false)]
        public string RotateAfterDisconnect { get; set; }

        /// <summary>
        /// rotated-username password (relevant only for rotator-type&#x3D;password)
        /// </summary>
        /// <value>rotated-username password (relevant only for rotator-type&#x3D;password)</value>
        [DataMember(Name = "rotated-password", EmitDefaultValue = false)]
        public string RotatedPassword { get; set; }

        /// <summary>
        /// username to be rotated, if selected use-self-creds at rotator-creds-type, this username will try to rotate it&#39;s own password, if use-target-creds is selected, target credentials will be use to rotate the rotated-password (relevant only for rotator-type&#x3D;password)
        /// </summary>
        /// <value>username to be rotated, if selected use-self-creds at rotator-creds-type, this username will try to rotate it&#39;s own password, if use-target-creds is selected, target credentials will be use to rotate the rotated-password (relevant only for rotator-type&#x3D;password)</value>
        [DataMember(Name = "rotated-username", EmitDefaultValue = false)]
        public string RotatedUsername { get; set; }

        /// <summary>
        /// The Hour of the rotation in UTC. Default rotation-hour is 14:00
        /// </summary>
        /// <value>The Hour of the rotation in UTC. Default rotation-hour is 14:00</value>
        [DataMember(Name = "rotation-hour", EmitDefaultValue = false)]
        public int RotationHour { get; set; }

        /// <summary>
        /// The number of days to wait between every automatic key rotation (1-365)
        /// </summary>
        /// <value>The number of days to wait between every automatic key rotation (1-365)</value>
        [DataMember(Name = "rotation-interval", EmitDefaultValue = false)]
        public string RotationInterval { get; set; }

        /// <summary>
        /// Gets or Sets RotatorCredsType
        /// </summary>
        [DataMember(Name = "rotator-creds-type", EmitDefaultValue = false)]
        public string RotatorCredsType { get; set; }

        /// <summary>
        /// Custom rotation command (relevant only for ssh target)
        /// </summary>
        /// <value>Custom rotation command (relevant only for ssh target)</value>
        [DataMember(Name = "rotator-custom-cmd", EmitDefaultValue = false)]
        public string RotatorCustomCmd { get; set; }

        /// <summary>
        /// Rotator Type
        /// </summary>
        /// <value>Rotator Type</value>
        [DataMember(Name = "rotator-type", IsRequired = true, EmitDefaultValue = true)]
        public string RotatorType { get; set; }

        /// <summary>
        /// Rotate same password for each host from the Linked Target (relevant only for Linked Target)
        /// </summary>
        /// <value>Rotate same password for each host from the Linked Target (relevant only for Linked Target)</value>
        [DataMember(Name = "same-password", EmitDefaultValue = false)]
        public string SamePassword { get; set; }

        /// <summary>
        /// Allow providing external user for a domain users (relevant only for rdp)
        /// </summary>
        /// <value>Allow providing external user for a domain users (relevant only for rdp)</value>
        [DataMember(Name = "secure-access-allow-external-user", EmitDefaultValue = true)]
        public bool SecureAccessAllowExternalUser { get; set; }

        /// <summary>
        /// The AWS account id (relevant only for aws)
        /// </summary>
        /// <value>The AWS account id (relevant only for aws)</value>
        [DataMember(Name = "secure-access-aws-account-id", EmitDefaultValue = false)]
        public string SecureAccessAwsAccountId { get; set; }

        /// <summary>
        /// The AWS native cli
        /// </summary>
        /// <value>The AWS native cli</value>
        [DataMember(Name = "secure-access-aws-native-cli", EmitDefaultValue = true)]
        public bool SecureAccessAwsNativeCli { get; set; }

        /// <summary>
        /// Path to the SSH Certificate Issuer for your Akeyless Bastion
        /// </summary>
        /// <value>Path to the SSH Certificate Issuer for your Akeyless Bastion</value>
        [DataMember(Name = "secure-access-bastion-issuer", EmitDefaultValue = false)]
        public string SecureAccessBastionIssuer { get; set; }

        /// <summary>
        /// The DB name (relevant only for DB Dynamic-Secret)
        /// </summary>
        /// <value>The DB name (relevant only for DB Dynamic-Secret)</value>
        [DataMember(Name = "secure-access-db-name", EmitDefaultValue = false)]
        public string SecureAccessDbName { get; set; }

        /// <summary>
        /// The db schema (relevant only for mssql or postgresql)
        /// </summary>
        /// <value>The db schema (relevant only for mssql or postgresql)</value>
        [DataMember(Name = "secure-access-db-schema", EmitDefaultValue = false)]
        public string SecureAccessDbSchema { get; set; }

        /// <summary>
        /// Enable/Disable secure remote access [true/false]
        /// </summary>
        /// <value>Enable/Disable secure remote access [true/false]</value>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)
        /// </summary>
        /// <value>Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)</value>
        [DataMember(Name = "secure-access-host", EmitDefaultValue = false)]
        public List<string> SecureAccessHost { get; set; }

        /// <summary>
        /// Required when the Dynamic Secret is used for a domain user (relevant only for RDP Dynamic-Secret)
        /// </summary>
        /// <value>Required when the Dynamic Secret is used for a domain user (relevant only for RDP Dynamic-Secret)</value>
        [DataMember(Name = "secure-access-rdp-domain", EmitDefaultValue = false)]
        public string SecureAccessRdpDomain { get; set; }

        /// <summary>
        /// Override the RDP Domain username (relevant only for rdp)
        /// </summary>
        /// <value>Override the RDP Domain username (relevant only for rdp)</value>
        [DataMember(Name = "secure-access-rdp-user", EmitDefaultValue = false)]
        public string SecureAccessRdpUser { get; set; }

        /// <summary>
        /// Destination URL to inject secrets
        /// </summary>
        /// <value>Destination URL to inject secrets</value>
        [DataMember(Name = "secure-access-url", EmitDefaultValue = false)]
        public string SecureAccessUrl { get; set; }

        /// <summary>
        /// Enable Web Secure Remote Access
        /// </summary>
        /// <value>Enable Web Secure Remote Access</value>
        [DataMember(Name = "secure-access-web", EmitDefaultValue = true)]
        public bool SecureAccessWeb { get; set; }

        /// <summary>
        /// Secure browser via Akeyless Web Access Bastion (relevant only for aws or azure)
        /// </summary>
        /// <value>Secure browser via Akeyless Web Access Bastion (relevant only for aws or azure)</value>
        [DataMember(Name = "secure-access-web-browsing", EmitDefaultValue = true)]
        public bool SecureAccessWebBrowsing { get; set; }

        /// <summary>
        /// Web-Proxy via Akeyless Web Access Bastion (relevant only for aws or azure)
        /// </summary>
        /// <value>Web-Proxy via Akeyless Web Access Bastion (relevant only for aws or azure)</value>
        [DataMember(Name = "secure-access-web-proxy", EmitDefaultValue = true)]
        public bool SecureAccessWebProxy { get; set; }

        /// <summary>
        /// Deprecated: use RotatedPassword
        /// </summary>
        /// <value>Deprecated: use RotatedPassword</value>
        [DataMember(Name = "ssh-password", EmitDefaultValue = false)]
        public string SshPassword { get; set; }

        /// <summary>
        /// Deprecated: use RotatedUser
        /// </summary>
        /// <value>Deprecated: use RotatedUser</value>
        [DataMember(Name = "ssh-username", EmitDefaultValue = false)]
        public string SshUsername { get; set; }

        /// <summary>
        /// The name of the storage account key to rotate [key1/key2/kerb1/kerb2] (relevat to azure-storage-account)
        /// </summary>
        /// <value>The name of the storage account key to rotate [key1/key2/kerb1/kerb2] (relevat to azure-storage-account)</value>
        [DataMember(Name = "storage-account-key-name", EmitDefaultValue = false)]
        public string StorageAccountKeyName { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// A list of linked targets to be associated, Relevant only for Secure Remote Access for ssh cert issuer, ldap rotated secret and ldap dynamic secret, To specify multiple targets use argument multiple times
        /// </summary>
        /// <value>A list of linked targets to be associated, Relevant only for Secure Remote Access for ssh cert issuer, ldap rotated secret and ldap dynamic secret, To specify multiple targets use argument multiple times</value>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public List<string> Target { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", IsRequired = true, EmitDefaultValue = true)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// LDAP User Attribute, Default value \&quot;cn\&quot;
        /// </summary>
        /// <value>LDAP User Attribute, Default value \&quot;cn\&quot;</value>
        [DataMember(Name = "user-attribute", EmitDefaultValue = false)]
        public string UserAttribute { get; set; }

        /// <summary>
        /// LDAP User Base DN
        /// </summary>
        /// <value>LDAP User Base DN</value>
        [DataMember(Name = "user-dn", EmitDefaultValue = false)]
        public string UserDn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateRotatedSecret {\n");
            sb.Append("  ProviderType: ").Append(ProviderType).Append("\n");
            sb.Append("  ApiId: ").Append(ApiId).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  AuthenticationCredentials: ").Append(AuthenticationCredentials).Append("\n");
            sb.Append("  AutoRotate: ").Append(AutoRotate).Append("\n");
            sb.Append("  AwsRegion: ").Append(AwsRegion).Append("\n");
            sb.Append("  CustomPayload: ").Append(CustomPayload).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GcpKey: ").Append(GcpKey).Append("\n");
            sb.Append("  GcpServiceAccountEmail: ").Append(GcpServiceAccountEmail).Append("\n");
            sb.Append("  GcpServiceAccountKeyId: ").Append(GcpServiceAccountKeyId).Append("\n");
            sb.Append("  GraceRotation: ").Append(GraceRotation).Append("\n");
            sb.Append("  HostProvider: ").Append(HostProvider).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PasswordLength: ").Append(PasswordLength).Append("\n");
            sb.Append("  RotateAfterDisconnect: ").Append(RotateAfterDisconnect).Append("\n");
            sb.Append("  RotatedPassword: ").Append(RotatedPassword).Append("\n");
            sb.Append("  RotatedUsername: ").Append(RotatedUsername).Append("\n");
            sb.Append("  RotationHour: ").Append(RotationHour).Append("\n");
            sb.Append("  RotationInterval: ").Append(RotationInterval).Append("\n");
            sb.Append("  RotatorCredsType: ").Append(RotatorCredsType).Append("\n");
            sb.Append("  RotatorCustomCmd: ").Append(RotatorCustomCmd).Append("\n");
            sb.Append("  RotatorType: ").Append(RotatorType).Append("\n");
            sb.Append("  SamePassword: ").Append(SamePassword).Append("\n");
            sb.Append("  SecureAccessAllowExternalUser: ").Append(SecureAccessAllowExternalUser).Append("\n");
            sb.Append("  SecureAccessAwsAccountId: ").Append(SecureAccessAwsAccountId).Append("\n");
            sb.Append("  SecureAccessAwsNativeCli: ").Append(SecureAccessAwsNativeCli).Append("\n");
            sb.Append("  SecureAccessBastionIssuer: ").Append(SecureAccessBastionIssuer).Append("\n");
            sb.Append("  SecureAccessDbName: ").Append(SecureAccessDbName).Append("\n");
            sb.Append("  SecureAccessDbSchema: ").Append(SecureAccessDbSchema).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessHost: ").Append(SecureAccessHost).Append("\n");
            sb.Append("  SecureAccessRdpDomain: ").Append(SecureAccessRdpDomain).Append("\n");
            sb.Append("  SecureAccessRdpUser: ").Append(SecureAccessRdpUser).Append("\n");
            sb.Append("  SecureAccessUrl: ").Append(SecureAccessUrl).Append("\n");
            sb.Append("  SecureAccessWeb: ").Append(SecureAccessWeb).Append("\n");
            sb.Append("  SecureAccessWebBrowsing: ").Append(SecureAccessWebBrowsing).Append("\n");
            sb.Append("  SecureAccessWebProxy: ").Append(SecureAccessWebProxy).Append("\n");
            sb.Append("  SshPassword: ").Append(SshPassword).Append("\n");
            sb.Append("  SshUsername: ").Append(SshUsername).Append("\n");
            sb.Append("  StorageAccountKeyName: ").Append(StorageAccountKeyName).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserAttribute: ").Append(UserAttribute).Append("\n");
            sb.Append("  UserDn: ").Append(UserDn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateRotatedSecret);
        }

        /// <summary>
        /// Returns true if CreateRotatedSecret instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateRotatedSecret to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateRotatedSecret input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProviderType == input.ProviderType ||
                    (this.ProviderType != null &&
                    this.ProviderType.Equals(input.ProviderType))
                ) && 
                (
                    this.ApiId == input.ApiId ||
                    (this.ApiId != null &&
                    this.ApiId.Equals(input.ApiId))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.AuthenticationCredentials == input.AuthenticationCredentials ||
                    (this.AuthenticationCredentials != null &&
                    this.AuthenticationCredentials.Equals(input.AuthenticationCredentials))
                ) && 
                (
                    this.AutoRotate == input.AutoRotate ||
                    (this.AutoRotate != null &&
                    this.AutoRotate.Equals(input.AutoRotate))
                ) && 
                (
                    this.AwsRegion == input.AwsRegion ||
                    (this.AwsRegion != null &&
                    this.AwsRegion.Equals(input.AwsRegion))
                ) && 
                (
                    this.CustomPayload == input.CustomPayload ||
                    (this.CustomPayload != null &&
                    this.CustomPayload.Equals(input.CustomPayload))
                ) && 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    (this.DeleteProtection != null &&
                    this.DeleteProtection.Equals(input.DeleteProtection))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.GcpKey == input.GcpKey ||
                    (this.GcpKey != null &&
                    this.GcpKey.Equals(input.GcpKey))
                ) && 
                (
                    this.GcpServiceAccountEmail == input.GcpServiceAccountEmail ||
                    (this.GcpServiceAccountEmail != null &&
                    this.GcpServiceAccountEmail.Equals(input.GcpServiceAccountEmail))
                ) && 
                (
                    this.GcpServiceAccountKeyId == input.GcpServiceAccountKeyId ||
                    (this.GcpServiceAccountKeyId != null &&
                    this.GcpServiceAccountKeyId.Equals(input.GcpServiceAccountKeyId))
                ) && 
                (
                    this.GraceRotation == input.GraceRotation ||
                    (this.GraceRotation != null &&
                    this.GraceRotation.Equals(input.GraceRotation))
                ) && 
                (
                    this.HostProvider == input.HostProvider ||
                    (this.HostProvider != null &&
                    this.HostProvider.Equals(input.HostProvider))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PasswordLength == input.PasswordLength ||
                    (this.PasswordLength != null &&
                    this.PasswordLength.Equals(input.PasswordLength))
                ) && 
                (
                    this.RotateAfterDisconnect == input.RotateAfterDisconnect ||
                    (this.RotateAfterDisconnect != null &&
                    this.RotateAfterDisconnect.Equals(input.RotateAfterDisconnect))
                ) && 
                (
                    this.RotatedPassword == input.RotatedPassword ||
                    (this.RotatedPassword != null &&
                    this.RotatedPassword.Equals(input.RotatedPassword))
                ) && 
                (
                    this.RotatedUsername == input.RotatedUsername ||
                    (this.RotatedUsername != null &&
                    this.RotatedUsername.Equals(input.RotatedUsername))
                ) && 
                (
                    this.RotationHour == input.RotationHour ||
                    this.RotationHour.Equals(input.RotationHour)
                ) && 
                (
                    this.RotationInterval == input.RotationInterval ||
                    (this.RotationInterval != null &&
                    this.RotationInterval.Equals(input.RotationInterval))
                ) && 
                (
                    this.RotatorCredsType == input.RotatorCredsType ||
                    (this.RotatorCredsType != null &&
                    this.RotatorCredsType.Equals(input.RotatorCredsType))
                ) && 
                (
                    this.RotatorCustomCmd == input.RotatorCustomCmd ||
                    (this.RotatorCustomCmd != null &&
                    this.RotatorCustomCmd.Equals(input.RotatorCustomCmd))
                ) && 
                (
                    this.RotatorType == input.RotatorType ||
                    (this.RotatorType != null &&
                    this.RotatorType.Equals(input.RotatorType))
                ) && 
                (
                    this.SamePassword == input.SamePassword ||
                    (this.SamePassword != null &&
                    this.SamePassword.Equals(input.SamePassword))
                ) && 
                (
                    this.SecureAccessAllowExternalUser == input.SecureAccessAllowExternalUser ||
                    this.SecureAccessAllowExternalUser.Equals(input.SecureAccessAllowExternalUser)
                ) && 
                (
                    this.SecureAccessAwsAccountId == input.SecureAccessAwsAccountId ||
                    (this.SecureAccessAwsAccountId != null &&
                    this.SecureAccessAwsAccountId.Equals(input.SecureAccessAwsAccountId))
                ) && 
                (
                    this.SecureAccessAwsNativeCli == input.SecureAccessAwsNativeCli ||
                    this.SecureAccessAwsNativeCli.Equals(input.SecureAccessAwsNativeCli)
                ) && 
                (
                    this.SecureAccessBastionIssuer == input.SecureAccessBastionIssuer ||
                    (this.SecureAccessBastionIssuer != null &&
                    this.SecureAccessBastionIssuer.Equals(input.SecureAccessBastionIssuer))
                ) && 
                (
                    this.SecureAccessDbName == input.SecureAccessDbName ||
                    (this.SecureAccessDbName != null &&
                    this.SecureAccessDbName.Equals(input.SecureAccessDbName))
                ) && 
                (
                    this.SecureAccessDbSchema == input.SecureAccessDbSchema ||
                    (this.SecureAccessDbSchema != null &&
                    this.SecureAccessDbSchema.Equals(input.SecureAccessDbSchema))
                ) && 
                (
                    this.SecureAccessEnable == input.SecureAccessEnable ||
                    (this.SecureAccessEnable != null &&
                    this.SecureAccessEnable.Equals(input.SecureAccessEnable))
                ) && 
                (
                    this.SecureAccessHost == input.SecureAccessHost ||
                    this.SecureAccessHost != null &&
                    input.SecureAccessHost != null &&
                    this.SecureAccessHost.SequenceEqual(input.SecureAccessHost)
                ) && 
                (
                    this.SecureAccessRdpDomain == input.SecureAccessRdpDomain ||
                    (this.SecureAccessRdpDomain != null &&
                    this.SecureAccessRdpDomain.Equals(input.SecureAccessRdpDomain))
                ) && 
                (
                    this.SecureAccessRdpUser == input.SecureAccessRdpUser ||
                    (this.SecureAccessRdpUser != null &&
                    this.SecureAccessRdpUser.Equals(input.SecureAccessRdpUser))
                ) && 
                (
                    this.SecureAccessUrl == input.SecureAccessUrl ||
                    (this.SecureAccessUrl != null &&
                    this.SecureAccessUrl.Equals(input.SecureAccessUrl))
                ) && 
                (
                    this.SecureAccessWeb == input.SecureAccessWeb ||
                    this.SecureAccessWeb.Equals(input.SecureAccessWeb)
                ) && 
                (
                    this.SecureAccessWebBrowsing == input.SecureAccessWebBrowsing ||
                    this.SecureAccessWebBrowsing.Equals(input.SecureAccessWebBrowsing)
                ) && 
                (
                    this.SecureAccessWebProxy == input.SecureAccessWebProxy ||
                    this.SecureAccessWebProxy.Equals(input.SecureAccessWebProxy)
                ) && 
                (
                    this.SshPassword == input.SshPassword ||
                    (this.SshPassword != null &&
                    this.SshPassword.Equals(input.SshPassword))
                ) && 
                (
                    this.SshUsername == input.SshUsername ||
                    (this.SshUsername != null &&
                    this.SshUsername.Equals(input.SshUsername))
                ) && 
                (
                    this.StorageAccountKeyName == input.StorageAccountKeyName ||
                    (this.StorageAccountKeyName != null &&
                    this.StorageAccountKeyName.Equals(input.StorageAccountKeyName))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Target == input.Target ||
                    this.Target != null &&
                    input.Target != null &&
                    this.Target.SequenceEqual(input.Target)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserAttribute == input.UserAttribute ||
                    (this.UserAttribute != null &&
                    this.UserAttribute.Equals(input.UserAttribute))
                ) && 
                (
                    this.UserDn == input.UserDn ||
                    (this.UserDn != null &&
                    this.UserDn.Equals(input.UserDn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProviderType != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderType.GetHashCode();
                }
                if (this.ApiId != null)
                {
                    hashCode = (hashCode * 59) + this.ApiId.GetHashCode();
                }
                if (this.ApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.ApiKey.GetHashCode();
                }
                if (this.ApplicationId != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationId.GetHashCode();
                }
                if (this.AuthenticationCredentials != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationCredentials.GetHashCode();
                }
                if (this.AutoRotate != null)
                {
                    hashCode = (hashCode * 59) + this.AutoRotate.GetHashCode();
                }
                if (this.AwsRegion != null)
                {
                    hashCode = (hashCode * 59) + this.AwsRegion.GetHashCode();
                }
                if (this.CustomPayload != null)
                {
                    hashCode = (hashCode * 59) + this.CustomPayload.GetHashCode();
                }
                if (this.DeleteProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteProtection.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.GcpKey != null)
                {
                    hashCode = (hashCode * 59) + this.GcpKey.GetHashCode();
                }
                if (this.GcpServiceAccountEmail != null)
                {
                    hashCode = (hashCode * 59) + this.GcpServiceAccountEmail.GetHashCode();
                }
                if (this.GcpServiceAccountKeyId != null)
                {
                    hashCode = (hashCode * 59) + this.GcpServiceAccountKeyId.GetHashCode();
                }
                if (this.GraceRotation != null)
                {
                    hashCode = (hashCode * 59) + this.GraceRotation.GetHashCode();
                }
                if (this.HostProvider != null)
                {
                    hashCode = (hashCode * 59) + this.HostProvider.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.PasswordLength != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordLength.GetHashCode();
                }
                if (this.RotateAfterDisconnect != null)
                {
                    hashCode = (hashCode * 59) + this.RotateAfterDisconnect.GetHashCode();
                }
                if (this.RotatedPassword != null)
                {
                    hashCode = (hashCode * 59) + this.RotatedPassword.GetHashCode();
                }
                if (this.RotatedUsername != null)
                {
                    hashCode = (hashCode * 59) + this.RotatedUsername.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RotationHour.GetHashCode();
                if (this.RotationInterval != null)
                {
                    hashCode = (hashCode * 59) + this.RotationInterval.GetHashCode();
                }
                if (this.RotatorCredsType != null)
                {
                    hashCode = (hashCode * 59) + this.RotatorCredsType.GetHashCode();
                }
                if (this.RotatorCustomCmd != null)
                {
                    hashCode = (hashCode * 59) + this.RotatorCustomCmd.GetHashCode();
                }
                if (this.RotatorType != null)
                {
                    hashCode = (hashCode * 59) + this.RotatorType.GetHashCode();
                }
                if (this.SamePassword != null)
                {
                    hashCode = (hashCode * 59) + this.SamePassword.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SecureAccessAllowExternalUser.GetHashCode();
                if (this.SecureAccessAwsAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessAwsAccountId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SecureAccessAwsNativeCli.GetHashCode();
                if (this.SecureAccessBastionIssuer != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessBastionIssuer.GetHashCode();
                }
                if (this.SecureAccessDbName != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessDbName.GetHashCode();
                }
                if (this.SecureAccessDbSchema != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessDbSchema.GetHashCode();
                }
                if (this.SecureAccessEnable != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessEnable.GetHashCode();
                }
                if (this.SecureAccessHost != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessHost.GetHashCode();
                }
                if (this.SecureAccessRdpDomain != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessRdpDomain.GetHashCode();
                }
                if (this.SecureAccessRdpUser != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessRdpUser.GetHashCode();
                }
                if (this.SecureAccessUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SecureAccessWeb.GetHashCode();
                hashCode = (hashCode * 59) + this.SecureAccessWebBrowsing.GetHashCode();
                hashCode = (hashCode * 59) + this.SecureAccessWebProxy.GetHashCode();
                if (this.SshPassword != null)
                {
                    hashCode = (hashCode * 59) + this.SshPassword.GetHashCode();
                }
                if (this.SshUsername != null)
                {
                    hashCode = (hashCode * 59) + this.SshUsername.GetHashCode();
                }
                if (this.StorageAccountKeyName != null)
                {
                    hashCode = (hashCode * 59) + this.StorageAccountKeyName.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.Target != null)
                {
                    hashCode = (hashCode * 59) + this.Target.GetHashCode();
                }
                if (this.TargetName != null)
                {
                    hashCode = (hashCode * 59) + this.TargetName.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UserAttribute != null)
                {
                    hashCode = (hashCode * 59) + this.UserAttribute.GetHashCode();
                }
                if (this.UserDn != null)
                {
                    hashCode = (hashCode * 59) + this.UserDn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
