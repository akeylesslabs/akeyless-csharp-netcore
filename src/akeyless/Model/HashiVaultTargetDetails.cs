/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// HashiVaultTargetDetails
    /// </summary>
    [DataContract(Name = "HashiVaultTargetDetails")]
    public partial class HashiVaultTargetDetails : IEquatable<HashiVaultTargetDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HashiVaultTargetDetails" /> class.
        /// </summary>
        /// <param name="vaultNamespaces">vaultNamespaces.</param>
        /// <param name="vaultToken">vaultToken.</param>
        /// <param name="vaultUrl">vaultUrl.</param>
        public HashiVaultTargetDetails(string vaultNamespaces = default(string), string vaultToken = default(string), string vaultUrl = default(string))
        {
            this.VaultNamespaces = vaultNamespaces;
            this.VaultToken = vaultToken;
            this.VaultUrl = vaultUrl;
        }

        /// <summary>
        /// Gets or Sets VaultNamespaces
        /// </summary>
        [DataMember(Name = "vault_namespaces", EmitDefaultValue = false)]
        public string VaultNamespaces { get; set; }

        /// <summary>
        /// Gets or Sets VaultToken
        /// </summary>
        [DataMember(Name = "vault_token", EmitDefaultValue = false)]
        public string VaultToken { get; set; }

        /// <summary>
        /// Gets or Sets VaultUrl
        /// </summary>
        [DataMember(Name = "vault_url", EmitDefaultValue = false)]
        public string VaultUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HashiVaultTargetDetails {\n");
            sb.Append("  VaultNamespaces: ").Append(VaultNamespaces).Append("\n");
            sb.Append("  VaultToken: ").Append(VaultToken).Append("\n");
            sb.Append("  VaultUrl: ").Append(VaultUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HashiVaultTargetDetails);
        }

        /// <summary>
        /// Returns true if HashiVaultTargetDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of HashiVaultTargetDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HashiVaultTargetDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VaultNamespaces == input.VaultNamespaces ||
                    (this.VaultNamespaces != null &&
                    this.VaultNamespaces.Equals(input.VaultNamespaces))
                ) && 
                (
                    this.VaultToken == input.VaultToken ||
                    (this.VaultToken != null &&
                    this.VaultToken.Equals(input.VaultToken))
                ) && 
                (
                    this.VaultUrl == input.VaultUrl ||
                    (this.VaultUrl != null &&
                    this.VaultUrl.Equals(input.VaultUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VaultNamespaces != null)
                {
                    hashCode = (hashCode * 59) + this.VaultNamespaces.GetHashCode();
                }
                if (this.VaultToken != null)
                {
                    hashCode = (hashCode * 59) + this.VaultToken.GetHashCode();
                }
                if (this.VaultUrl != null)
                {
                    hashCode = (hashCode * 59) + this.VaultUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
