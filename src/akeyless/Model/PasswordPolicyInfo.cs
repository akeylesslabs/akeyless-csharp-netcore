/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// PasswordPolicyInfo
    /// </summary>
    [DataContract(Name = "PasswordPolicyInfo")]
    public partial class PasswordPolicyInfo : IEquatable<PasswordPolicyInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordPolicyInfo" /> class.
        /// </summary>
        /// <param name="passwordLength">passwordLength.</param>
        /// <param name="useCapitalLetters">useCapitalLetters.</param>
        /// <param name="useLowerLetters">useLowerLetters.</param>
        /// <param name="useNumbers">useNumbers.</param>
        /// <param name="useSpecialCharacters">useSpecialCharacters.</param>
        public PasswordPolicyInfo(long passwordLength = default(long), bool useCapitalLetters = default(bool), bool useLowerLetters = default(bool), bool useNumbers = default(bool), bool useSpecialCharacters = default(bool))
        {
            this.PasswordLength = passwordLength;
            this.UseCapitalLetters = useCapitalLetters;
            this.UseLowerLetters = useLowerLetters;
            this.UseNumbers = useNumbers;
            this.UseSpecialCharacters = useSpecialCharacters;
        }

        /// <summary>
        /// Gets or Sets PasswordLength
        /// </summary>
        [DataMember(Name = "password_length", EmitDefaultValue = false)]
        public long PasswordLength { get; set; }

        /// <summary>
        /// Gets or Sets UseCapitalLetters
        /// </summary>
        [DataMember(Name = "use_capital_letters", EmitDefaultValue = true)]
        public bool UseCapitalLetters { get; set; }

        /// <summary>
        /// Gets or Sets UseLowerLetters
        /// </summary>
        [DataMember(Name = "use_lower_letters", EmitDefaultValue = true)]
        public bool UseLowerLetters { get; set; }

        /// <summary>
        /// Gets or Sets UseNumbers
        /// </summary>
        [DataMember(Name = "use_numbers", EmitDefaultValue = true)]
        public bool UseNumbers { get; set; }

        /// <summary>
        /// Gets or Sets UseSpecialCharacters
        /// </summary>
        [DataMember(Name = "use_special_characters", EmitDefaultValue = true)]
        public bool UseSpecialCharacters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PasswordPolicyInfo {\n");
            sb.Append("  PasswordLength: ").Append(PasswordLength).Append("\n");
            sb.Append("  UseCapitalLetters: ").Append(UseCapitalLetters).Append("\n");
            sb.Append("  UseLowerLetters: ").Append(UseLowerLetters).Append("\n");
            sb.Append("  UseNumbers: ").Append(UseNumbers).Append("\n");
            sb.Append("  UseSpecialCharacters: ").Append(UseSpecialCharacters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PasswordPolicyInfo);
        }

        /// <summary>
        /// Returns true if PasswordPolicyInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PasswordPolicyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordPolicyInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PasswordLength == input.PasswordLength ||
                    this.PasswordLength.Equals(input.PasswordLength)
                ) && 
                (
                    this.UseCapitalLetters == input.UseCapitalLetters ||
                    this.UseCapitalLetters.Equals(input.UseCapitalLetters)
                ) && 
                (
                    this.UseLowerLetters == input.UseLowerLetters ||
                    this.UseLowerLetters.Equals(input.UseLowerLetters)
                ) && 
                (
                    this.UseNumbers == input.UseNumbers ||
                    this.UseNumbers.Equals(input.UseNumbers)
                ) && 
                (
                    this.UseSpecialCharacters == input.UseSpecialCharacters ||
                    this.UseSpecialCharacters.Equals(input.UseSpecialCharacters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.PasswordLength.GetHashCode();
                hashCode = hashCode * 59 + this.UseCapitalLetters.GetHashCode();
                hashCode = hashCode * 59 + this.UseLowerLetters.GetHashCode();
                hashCode = hashCode * 59 + this.UseNumbers.GetHashCode();
                hashCode = hashCode * 59 + this.UseSpecialCharacters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
