/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// PasswordPolicyInfo
    /// </summary>
    [DataContract(Name = "PasswordPolicyInfo")]
    public partial class PasswordPolicyInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordPolicyInfo" /> class.
        /// </summary>
        /// <param name="passwordLength">passwordLength.</param>
        /// <param name="useCapitalLetters">useCapitalLetters.</param>
        /// <param name="useLowerLetters">useLowerLetters.</param>
        /// <param name="useNumbers">useNumbers.</param>
        /// <param name="useSpecialCharacters">useSpecialCharacters.</param>
        public PasswordPolicyInfo(long passwordLength = default(long), bool useCapitalLetters = default(bool), bool useLowerLetters = default(bool), bool useNumbers = default(bool), bool useSpecialCharacters = default(bool))
        {
            this.PasswordLength = passwordLength;
            this.UseCapitalLetters = useCapitalLetters;
            this.UseLowerLetters = useLowerLetters;
            this.UseNumbers = useNumbers;
            this.UseSpecialCharacters = useSpecialCharacters;
        }

        /// <summary>
        /// Gets or Sets PasswordLength
        /// </summary>
        [DataMember(Name = "password_length", EmitDefaultValue = false)]
        public long PasswordLength { get; set; }

        /// <summary>
        /// Gets or Sets UseCapitalLetters
        /// </summary>
        [DataMember(Name = "use_capital_letters", EmitDefaultValue = true)]
        public bool UseCapitalLetters { get; set; }

        /// <summary>
        /// Gets or Sets UseLowerLetters
        /// </summary>
        [DataMember(Name = "use_lower_letters", EmitDefaultValue = true)]
        public bool UseLowerLetters { get; set; }

        /// <summary>
        /// Gets or Sets UseNumbers
        /// </summary>
        [DataMember(Name = "use_numbers", EmitDefaultValue = true)]
        public bool UseNumbers { get; set; }

        /// <summary>
        /// Gets or Sets UseSpecialCharacters
        /// </summary>
        [DataMember(Name = "use_special_characters", EmitDefaultValue = true)]
        public bool UseSpecialCharacters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PasswordPolicyInfo {\n");
            sb.Append("  PasswordLength: ").Append(PasswordLength).Append("\n");
            sb.Append("  UseCapitalLetters: ").Append(UseCapitalLetters).Append("\n");
            sb.Append("  UseLowerLetters: ").Append(UseLowerLetters).Append("\n");
            sb.Append("  UseNumbers: ").Append(UseNumbers).Append("\n");
            sb.Append("  UseSpecialCharacters: ").Append(UseSpecialCharacters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
