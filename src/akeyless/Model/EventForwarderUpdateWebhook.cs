/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// eventForwarderUpdateWebhook is a command that updates webhook event forwarder
    /// </summary>
    [DataContract(Name = "eventForwarderUpdateWebhook")]
    public partial class EventForwarderUpdateWebhook : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventForwarderUpdateWebhook" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventForwarderUpdateWebhook() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventForwarderUpdateWebhook" /> class.
        /// </summary>
        /// <param name="authMethodsEventSourceLocations">Auth Method Event sources.</param>
        /// <param name="authToken">Base64 encoded Token string for authentication type Token.</param>
        /// <param name="authType">The Webhook authentication type [user-pass, bearer-token, certificate] (default to &quot;user-pass&quot;).</param>
        /// <param name="clientCertData">Base64 encoded PEM certificate, relevant for certificate auth-type.</param>
        /// <param name="description">Description of the object.</param>
        /// <param name="enable">Enable/Disable Event Forwarder [true/false] (default to &quot;true&quot;).</param>
        /// <param name="eventTypes">List of event types to notify about [request-access, certificate-pending-expiration, certificate-expired, certificate-provisioning-success, certificate-provisioning-failure, auth-method-pending-expiration, auth-method-expired, next-automatic-rotation, rotated-secret-success, rotated-secret-failure, dynamic-secret-failure, multi-auth-failure, uid-rotation-failure, apply-justification, email-auth-method-approved, usage, rotation-usage, gateway-inactive, static-secret-updated, rate-limiting, usage-report, secret-sync].</param>
        /// <param name="gatewaysEventSourceLocations">Event sources (required).</param>
        /// <param name="itemsEventSourceLocations">Items Event sources.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="keepPrevVersion">Whether to keep previous version [true/false]. If not set, use default according to account settings.</param>
        /// <param name="key">The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="name">EventForwarder name (required).</param>
        /// <param name="newName">New EventForwarder name.</param>
        /// <param name="password">Password for authentication relevant for user-pass auth-type.</param>
        /// <param name="privateKeyData">Base64 encoded PEM RSA Private Key, relevant for certificate auth-type.</param>
        /// <param name="serverCertificates">Base64 encoded PEM certificate of the Webhook.</param>
        /// <param name="targetsEventSourceLocations">Targets Event sources.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="url">Webhook URL.</param>
        /// <param name="username">Username for authentication relevant for user-pass auth-type.</param>
        public EventForwarderUpdateWebhook(List<string> authMethodsEventSourceLocations = default(List<string>), string authToken = default(string), string authType = @"user-pass", string clientCertData = default(string), string description = default(string), string enable = @"true", List<string> eventTypes = default(List<string>), List<string> gatewaysEventSourceLocations = default(List<string>), List<string> itemsEventSourceLocations = default(List<string>), bool json = false, string keepPrevVersion = default(string), string key = default(string), string name = default(string), string newName = default(string), string password = default(string), string privateKeyData = default(string), string serverCertificates = default(string), List<string> targetsEventSourceLocations = default(List<string>), string token = default(string), string uidToken = default(string), string url = default(string), string username = default(string))
        {
            // to ensure "gatewaysEventSourceLocations" is required (not null)
            if (gatewaysEventSourceLocations == null)
            {
                throw new ArgumentNullException("gatewaysEventSourceLocations is a required property for EventForwarderUpdateWebhook and cannot be null");
            }
            this.GatewaysEventSourceLocations = gatewaysEventSourceLocations;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for EventForwarderUpdateWebhook and cannot be null");
            }
            this.Name = name;
            this.AuthMethodsEventSourceLocations = authMethodsEventSourceLocations;
            this.AuthToken = authToken;
            // use default value if no "authType" provided
            this.AuthType = authType ?? @"user-pass";
            this.ClientCertData = clientCertData;
            this.Description = description;
            // use default value if no "enable" provided
            this.Enable = enable ?? @"true";
            this.EventTypes = eventTypes;
            this.ItemsEventSourceLocations = itemsEventSourceLocations;
            this.Json = json;
            this.KeepPrevVersion = keepPrevVersion;
            this.Key = key;
            this.NewName = newName;
            this.Password = password;
            this.PrivateKeyData = privateKeyData;
            this.ServerCertificates = serverCertificates;
            this.TargetsEventSourceLocations = targetsEventSourceLocations;
            this.Token = token;
            this.UidToken = uidToken;
            this.Url = url;
            this.Username = username;
        }

        /// <summary>
        /// Auth Method Event sources
        /// </summary>
        /// <value>Auth Method Event sources</value>
        [DataMember(Name = "auth-methods-event-source-locations", EmitDefaultValue = false)]
        public List<string> AuthMethodsEventSourceLocations { get; set; }

        /// <summary>
        /// Base64 encoded Token string for authentication type Token
        /// </summary>
        /// <value>Base64 encoded Token string for authentication type Token</value>
        [DataMember(Name = "auth-token", EmitDefaultValue = false)]
        public string AuthToken { get; set; }

        /// <summary>
        /// The Webhook authentication type [user-pass, bearer-token, certificate]
        /// </summary>
        /// <value>The Webhook authentication type [user-pass, bearer-token, certificate]</value>
        [DataMember(Name = "auth-type", EmitDefaultValue = false)]
        public string AuthType { get; set; }

        /// <summary>
        /// Base64 encoded PEM certificate, relevant for certificate auth-type
        /// </summary>
        /// <value>Base64 encoded PEM certificate, relevant for certificate auth-type</value>
        [DataMember(Name = "client-cert-data", EmitDefaultValue = false)]
        public string ClientCertData { get; set; }

        /// <summary>
        /// Description of the object
        /// </summary>
        /// <value>Description of the object</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Enable/Disable Event Forwarder [true/false]
        /// </summary>
        /// <value>Enable/Disable Event Forwarder [true/false]</value>
        [DataMember(Name = "enable", EmitDefaultValue = false)]
        public string Enable { get; set; }

        /// <summary>
        /// List of event types to notify about [request-access, certificate-pending-expiration, certificate-expired, certificate-provisioning-success, certificate-provisioning-failure, auth-method-pending-expiration, auth-method-expired, next-automatic-rotation, rotated-secret-success, rotated-secret-failure, dynamic-secret-failure, multi-auth-failure, uid-rotation-failure, apply-justification, email-auth-method-approved, usage, rotation-usage, gateway-inactive, static-secret-updated, rate-limiting, usage-report, secret-sync]
        /// </summary>
        /// <value>List of event types to notify about [request-access, certificate-pending-expiration, certificate-expired, certificate-provisioning-success, certificate-provisioning-failure, auth-method-pending-expiration, auth-method-expired, next-automatic-rotation, rotated-secret-success, rotated-secret-failure, dynamic-secret-failure, multi-auth-failure, uid-rotation-failure, apply-justification, email-auth-method-approved, usage, rotation-usage, gateway-inactive, static-secret-updated, rate-limiting, usage-report, secret-sync]</value>
        [DataMember(Name = "event-types", EmitDefaultValue = false)]
        public List<string> EventTypes { get; set; }

        /// <summary>
        /// Event sources
        /// </summary>
        /// <value>Event sources</value>
        [DataMember(Name = "gateways-event-source-locations", IsRequired = true, EmitDefaultValue = true)]
        public List<string> GatewaysEventSourceLocations { get; set; }

        /// <summary>
        /// Items Event sources
        /// </summary>
        /// <value>Items Event sources</value>
        [DataMember(Name = "items-event-source-locations", EmitDefaultValue = false)]
        public List<string> ItemsEventSourceLocations { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Whether to keep previous version [true/false]. If not set, use default according to account settings
        /// </summary>
        /// <value>Whether to keep previous version [true/false]. If not set, use default according to account settings</value>
        [DataMember(Name = "keep-prev-version", EmitDefaultValue = false)]
        public string KeepPrevVersion { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// EventForwarder name
        /// </summary>
        /// <value>EventForwarder name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// New EventForwarder name
        /// </summary>
        /// <value>New EventForwarder name</value>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Password for authentication relevant for user-pass auth-type
        /// </summary>
        /// <value>Password for authentication relevant for user-pass auth-type</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Base64 encoded PEM RSA Private Key, relevant for certificate auth-type
        /// </summary>
        /// <value>Base64 encoded PEM RSA Private Key, relevant for certificate auth-type</value>
        [DataMember(Name = "private-key-data", EmitDefaultValue = false)]
        public string PrivateKeyData { get; set; }

        /// <summary>
        /// Base64 encoded PEM certificate of the Webhook
        /// </summary>
        /// <value>Base64 encoded PEM certificate of the Webhook</value>
        [DataMember(Name = "server-certificates", EmitDefaultValue = false)]
        public string ServerCertificates { get; set; }

        /// <summary>
        /// Targets Event sources
        /// </summary>
        /// <value>Targets Event sources</value>
        [DataMember(Name = "targets-event-source-locations", EmitDefaultValue = false)]
        public List<string> TargetsEventSourceLocations { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Webhook URL
        /// </summary>
        /// <value>Webhook URL</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Username for authentication relevant for user-pass auth-type
        /// </summary>
        /// <value>Username for authentication relevant for user-pass auth-type</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventForwarderUpdateWebhook {\n");
            sb.Append("  AuthMethodsEventSourceLocations: ").Append(AuthMethodsEventSourceLocations).Append("\n");
            sb.Append("  AuthToken: ").Append(AuthToken).Append("\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  ClientCertData: ").Append(ClientCertData).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("  GatewaysEventSourceLocations: ").Append(GatewaysEventSourceLocations).Append("\n");
            sb.Append("  ItemsEventSourceLocations: ").Append(ItemsEventSourceLocations).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeepPrevVersion: ").Append(KeepPrevVersion).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PrivateKeyData: ").Append(PrivateKeyData).Append("\n");
            sb.Append("  ServerCertificates: ").Append(ServerCertificates).Append("\n");
            sb.Append("  TargetsEventSourceLocations: ").Append(TargetsEventSourceLocations).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
