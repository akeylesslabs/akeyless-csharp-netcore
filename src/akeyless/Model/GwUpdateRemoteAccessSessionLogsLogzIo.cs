/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gwUpdateRemoteAccessSessionLogsLogzIo is a command that updates session log forwarding config (logz-io target)
    /// </summary>
    [DataContract(Name = "gwUpdateRemoteAccessSessionLogsLogzIo")]
    public partial class GwUpdateRemoteAccessSessionLogsLogzIo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GwUpdateRemoteAccessSessionLogsLogzIo" /> class.
        /// </summary>
        /// <param name="enable">Enable Log Forwarding [true/false] (default to &quot;true&quot;).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="logzIoToken">Logz-io token.</param>
        /// <param name="outputFormat">Logs format [text/json] (default to &quot;text&quot;).</param>
        /// <param name="protocol">LogzIo protocol [tcp/https].</param>
        /// <param name="pullInterval">Pull interval in seconds (default to &quot;10&quot;).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GwUpdateRemoteAccessSessionLogsLogzIo(string enable = @"true", bool json = false, string logzIoToken = default(string), string outputFormat = @"text", string protocol = default(string), string pullInterval = @"10", string token = default(string), string uidToken = default(string))
        {
            // use default value if no "enable" provided
            this.Enable = enable ?? @"true";
            this.Json = json;
            this.LogzIoToken = logzIoToken;
            // use default value if no "outputFormat" provided
            this.OutputFormat = outputFormat ?? @"text";
            this.Protocol = protocol;
            // use default value if no "pullInterval" provided
            this.PullInterval = pullInterval ?? @"10";
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Enable Log Forwarding [true/false]
        /// </summary>
        /// <value>Enable Log Forwarding [true/false]</value>
        [DataMember(Name = "enable", EmitDefaultValue = false)]
        public string Enable { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Logz-io token
        /// </summary>
        /// <value>Logz-io token</value>
        [DataMember(Name = "logz-io-token", EmitDefaultValue = false)]
        public string LogzIoToken { get; set; }

        /// <summary>
        /// Logs format [text/json]
        /// </summary>
        /// <value>Logs format [text/json]</value>
        [DataMember(Name = "output-format", EmitDefaultValue = false)]
        public string OutputFormat { get; set; }

        /// <summary>
        /// LogzIo protocol [tcp/https]
        /// </summary>
        /// <value>LogzIo protocol [tcp/https]</value>
        [DataMember(Name = "protocol", EmitDefaultValue = false)]
        public string Protocol { get; set; }

        /// <summary>
        /// Pull interval in seconds
        /// </summary>
        /// <value>Pull interval in seconds</value>
        [DataMember(Name = "pull-interval", EmitDefaultValue = false)]
        public string PullInterval { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GwUpdateRemoteAccessSessionLogsLogzIo {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  LogzIoToken: ").Append(LogzIoToken).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  PullInterval: ").Append(PullInterval).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
