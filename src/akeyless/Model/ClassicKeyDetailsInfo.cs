/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ClassicKeyDetailsInfo
    /// </summary>
    [DataContract]
    public partial class ClassicKeyDetailsInfo :  IEquatable<ClassicKeyDetailsInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassicKeyDetailsInfo" /> class.
        /// </summary>
        /// <param name="classicKeyId">classicKeyId.</param>
        /// <param name="isProvidedByUser">isProvidedByUser.</param>
        /// <param name="isUnexportable">isUnexportable.</param>
        /// <param name="keyState">ItemState defines the different states an Item can be in.</param>
        /// <param name="keyType">keyType.</param>
        /// <param name="lastError">lastError.</param>
        /// <param name="targetAliasHelper">targetAliasHelper.</param>
        /// <param name="targetTypes">targetTypes.</param>
        /// <param name="targets">targets.</param>
        public ClassicKeyDetailsInfo(string classicKeyId = default(string), bool isProvidedByUser = default(bool), bool isUnexportable = default(bool), string keyState = default(string), string keyType = default(string), string lastError = default(string), string targetAliasHelper = default(string), List<string> targetTypes = default(List<string>), List<ClassicKeyTargetInfo> targets = default(List<ClassicKeyTargetInfo>))
        {
            this.ClassicKeyId = classicKeyId;
            this.IsProvidedByUser = isProvidedByUser;
            this.IsUnexportable = isUnexportable;
            this.KeyState = keyState;
            this.KeyType = keyType;
            this.LastError = lastError;
            this.TargetAliasHelper = targetAliasHelper;
            this.TargetTypes = targetTypes;
            this.Targets = targets;
        }
        
        /// <summary>
        /// Gets or Sets ClassicKeyId
        /// </summary>
        [DataMember(Name="classic_key_id", EmitDefaultValue=false)]
        public string ClassicKeyId { get; set; }

        /// <summary>
        /// Gets or Sets IsProvidedByUser
        /// </summary>
        [DataMember(Name="is_provided_by_user", EmitDefaultValue=false)]
        public bool IsProvidedByUser { get; set; }

        /// <summary>
        /// Gets or Sets IsUnexportable
        /// </summary>
        [DataMember(Name="is_unexportable", EmitDefaultValue=false)]
        public bool IsUnexportable { get; set; }

        /// <summary>
        /// ItemState defines the different states an Item can be in
        /// </summary>
        /// <value>ItemState defines the different states an Item can be in</value>
        [DataMember(Name="key_state", EmitDefaultValue=false)]
        public string KeyState { get; set; }

        /// <summary>
        /// Gets or Sets KeyType
        /// </summary>
        [DataMember(Name="key_type", EmitDefaultValue=false)]
        public string KeyType { get; set; }

        /// <summary>
        /// Gets or Sets LastError
        /// </summary>
        [DataMember(Name="last_error", EmitDefaultValue=false)]
        public string LastError { get; set; }

        /// <summary>
        /// Gets or Sets TargetAliasHelper
        /// </summary>
        [DataMember(Name="target_alias_helper", EmitDefaultValue=false)]
        public string TargetAliasHelper { get; set; }

        /// <summary>
        /// Gets or Sets TargetTypes
        /// </summary>
        [DataMember(Name="target_types", EmitDefaultValue=false)]
        public List<string> TargetTypes { get; set; }

        /// <summary>
        /// Gets or Sets Targets
        /// </summary>
        [DataMember(Name="targets", EmitDefaultValue=false)]
        public List<ClassicKeyTargetInfo> Targets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClassicKeyDetailsInfo {\n");
            sb.Append("  ClassicKeyId: ").Append(ClassicKeyId).Append("\n");
            sb.Append("  IsProvidedByUser: ").Append(IsProvidedByUser).Append("\n");
            sb.Append("  IsUnexportable: ").Append(IsUnexportable).Append("\n");
            sb.Append("  KeyState: ").Append(KeyState).Append("\n");
            sb.Append("  KeyType: ").Append(KeyType).Append("\n");
            sb.Append("  LastError: ").Append(LastError).Append("\n");
            sb.Append("  TargetAliasHelper: ").Append(TargetAliasHelper).Append("\n");
            sb.Append("  TargetTypes: ").Append(TargetTypes).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClassicKeyDetailsInfo);
        }

        /// <summary>
        /// Returns true if ClassicKeyDetailsInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ClassicKeyDetailsInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClassicKeyDetailsInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClassicKeyId == input.ClassicKeyId ||
                    (this.ClassicKeyId != null &&
                    this.ClassicKeyId.Equals(input.ClassicKeyId))
                ) && 
                (
                    this.IsProvidedByUser == input.IsProvidedByUser ||
                    this.IsProvidedByUser.Equals(input.IsProvidedByUser)
                ) && 
                (
                    this.IsUnexportable == input.IsUnexportable ||
                    this.IsUnexportable.Equals(input.IsUnexportable)
                ) && 
                (
                    this.KeyState == input.KeyState ||
                    (this.KeyState != null &&
                    this.KeyState.Equals(input.KeyState))
                ) && 
                (
                    this.KeyType == input.KeyType ||
                    (this.KeyType != null &&
                    this.KeyType.Equals(input.KeyType))
                ) && 
                (
                    this.LastError == input.LastError ||
                    (this.LastError != null &&
                    this.LastError.Equals(input.LastError))
                ) && 
                (
                    this.TargetAliasHelper == input.TargetAliasHelper ||
                    (this.TargetAliasHelper != null &&
                    this.TargetAliasHelper.Equals(input.TargetAliasHelper))
                ) && 
                (
                    this.TargetTypes == input.TargetTypes ||
                    this.TargetTypes != null &&
                    input.TargetTypes != null &&
                    this.TargetTypes.SequenceEqual(input.TargetTypes)
                ) && 
                (
                    this.Targets == input.Targets ||
                    this.Targets != null &&
                    input.Targets != null &&
                    this.Targets.SequenceEqual(input.Targets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClassicKeyId != null)
                    hashCode = hashCode * 59 + this.ClassicKeyId.GetHashCode();
                hashCode = hashCode * 59 + this.IsProvidedByUser.GetHashCode();
                hashCode = hashCode * 59 + this.IsUnexportable.GetHashCode();
                if (this.KeyState != null)
                    hashCode = hashCode * 59 + this.KeyState.GetHashCode();
                if (this.KeyType != null)
                    hashCode = hashCode * 59 + this.KeyType.GetHashCode();
                if (this.LastError != null)
                    hashCode = hashCode * 59 + this.LastError.GetHashCode();
                if (this.TargetAliasHelper != null)
                    hashCode = hashCode * 59 + this.TargetAliasHelper.GetHashCode();
                if (this.TargetTypes != null)
                    hashCode = hashCode * 59 + this.TargetTypes.GetHashCode();
                if (this.Targets != null)
                    hashCode = hashCode * 59 + this.Targets.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
