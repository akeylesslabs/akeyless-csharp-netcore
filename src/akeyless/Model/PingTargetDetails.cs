/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// PingTargetDetails
    /// </summary>
    [DataContract(Name = "PingTargetDetails")]
    public partial class PingTargetDetails : IEquatable<PingTargetDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PingTargetDetails" /> class.
        /// </summary>
        /// <param name="administrativePort">administrativePort.</param>
        /// <param name="authorizationPort">authorizationPort.</param>
        /// <param name="pingUrl">pingUrl.</param>
        /// <param name="privilegedUser">privilegedUser.</param>
        /// <param name="userPassword">userPassword.</param>
        public PingTargetDetails(string administrativePort = default(string), string authorizationPort = default(string), string pingUrl = default(string), string privilegedUser = default(string), string userPassword = default(string))
        {
            this.AdministrativePort = administrativePort;
            this.AuthorizationPort = authorizationPort;
            this.PingUrl = pingUrl;
            this.PrivilegedUser = privilegedUser;
            this.UserPassword = userPassword;
        }

        /// <summary>
        /// Gets or Sets AdministrativePort
        /// </summary>
        [DataMember(Name = "administrative_port", EmitDefaultValue = false)]
        public string AdministrativePort { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationPort
        /// </summary>
        [DataMember(Name = "authorization_port", EmitDefaultValue = false)]
        public string AuthorizationPort { get; set; }

        /// <summary>
        /// Gets or Sets PingUrl
        /// </summary>
        [DataMember(Name = "ping_url", EmitDefaultValue = false)]
        public string PingUrl { get; set; }

        /// <summary>
        /// Gets or Sets PrivilegedUser
        /// </summary>
        [DataMember(Name = "privileged_user", EmitDefaultValue = false)]
        public string PrivilegedUser { get; set; }

        /// <summary>
        /// Gets or Sets UserPassword
        /// </summary>
        [DataMember(Name = "user_password", EmitDefaultValue = false)]
        public string UserPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PingTargetDetails {\n");
            sb.Append("  AdministrativePort: ").Append(AdministrativePort).Append("\n");
            sb.Append("  AuthorizationPort: ").Append(AuthorizationPort).Append("\n");
            sb.Append("  PingUrl: ").Append(PingUrl).Append("\n");
            sb.Append("  PrivilegedUser: ").Append(PrivilegedUser).Append("\n");
            sb.Append("  UserPassword: ").Append(UserPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PingTargetDetails);
        }

        /// <summary>
        /// Returns true if PingTargetDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PingTargetDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PingTargetDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdministrativePort == input.AdministrativePort ||
                    (this.AdministrativePort != null &&
                    this.AdministrativePort.Equals(input.AdministrativePort))
                ) && 
                (
                    this.AuthorizationPort == input.AuthorizationPort ||
                    (this.AuthorizationPort != null &&
                    this.AuthorizationPort.Equals(input.AuthorizationPort))
                ) && 
                (
                    this.PingUrl == input.PingUrl ||
                    (this.PingUrl != null &&
                    this.PingUrl.Equals(input.PingUrl))
                ) && 
                (
                    this.PrivilegedUser == input.PrivilegedUser ||
                    (this.PrivilegedUser != null &&
                    this.PrivilegedUser.Equals(input.PrivilegedUser))
                ) && 
                (
                    this.UserPassword == input.UserPassword ||
                    (this.UserPassword != null &&
                    this.UserPassword.Equals(input.UserPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdministrativePort != null)
                {
                    hashCode = (hashCode * 59) + this.AdministrativePort.GetHashCode();
                }
                if (this.AuthorizationPort != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizationPort.GetHashCode();
                }
                if (this.PingUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PingUrl.GetHashCode();
                }
                if (this.PrivilegedUser != null)
                {
                    hashCode = (hashCode * 59) + this.PrivilegedUser.GetHashCode();
                }
                if (this.UserPassword != null)
                {
                    hashCode = (hashCode * 59) + this.UserPassword.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
