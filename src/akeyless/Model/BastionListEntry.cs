/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// BastionListEntry
    /// </summary>
    [DataContract(Name = "BastionListEntry")]
    public partial class BastionListEntry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BastionListEntry" /> class.
        /// </summary>
        /// <param name="accessId">accessId.</param>
        /// <param name="allowedAccessIds">allowedAccessIds.</param>
        /// <param name="allowedUrls">allowedUrls.</param>
        /// <param name="allowedUrlsPerInstance">allowedUrlsPerInstance.</param>
        /// <param name="bastionSshPort">bastionSshPort.</param>
        /// <param name="bastionUrlsPerType">bastionUrlsPerType.</param>
        /// <param name="clusterName">clusterName.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="hasGatewayIdentity">hasGatewayIdentity.</param>
        /// <param name="lastReport">lastReport.</param>
        public BastionListEntry(string accessId = default(string), List<string> allowedAccessIds = default(List<string>), List<string> allowedUrls = default(List<string>), Dictionary<string, List<string>> allowedUrlsPerInstance = default(Dictionary<string, List<string>>), long bastionSshPort = default(long), Dictionary<string, string> bastionUrlsPerType = default(Dictionary<string, string>), string clusterName = default(string), string displayName = default(string), bool hasGatewayIdentity = default(bool), DateTime lastReport = default(DateTime))
        {
            this.AccessId = accessId;
            this.AllowedAccessIds = allowedAccessIds;
            this.AllowedUrls = allowedUrls;
            this.AllowedUrlsPerInstance = allowedUrlsPerInstance;
            this.BastionSshPort = bastionSshPort;
            this.BastionUrlsPerType = bastionUrlsPerType;
            this.ClusterName = clusterName;
            this.DisplayName = displayName;
            this.HasGatewayIdentity = hasGatewayIdentity;
            this.LastReport = lastReport;
        }

        /// <summary>
        /// Gets or Sets AccessId
        /// </summary>
        [DataMember(Name = "access_id", EmitDefaultValue = false)]
        public string AccessId { get; set; }

        /// <summary>
        /// Gets or Sets AllowedAccessIds
        /// </summary>
        [DataMember(Name = "allowed_access_ids", EmitDefaultValue = false)]
        public List<string> AllowedAccessIds { get; set; }

        /// <summary>
        /// Gets or Sets AllowedUrls
        /// </summary>
        [DataMember(Name = "allowed_urls", EmitDefaultValue = false)]
        public List<string> AllowedUrls { get; set; }

        /// <summary>
        /// Gets or Sets AllowedUrlsPerInstance
        /// </summary>
        [DataMember(Name = "allowed_urls_per_instance", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> AllowedUrlsPerInstance { get; set; }

        /// <summary>
        /// Gets or Sets BastionSshPort
        /// </summary>
        [DataMember(Name = "bastion_ssh_port", EmitDefaultValue = false)]
        public long BastionSshPort { get; set; }

        /// <summary>
        /// Gets or Sets BastionUrlsPerType
        /// </summary>
        [DataMember(Name = "bastion_urls_per_type", EmitDefaultValue = false)]
        public Dictionary<string, string> BastionUrlsPerType { get; set; }

        /// <summary>
        /// Gets or Sets ClusterName
        /// </summary>
        [DataMember(Name = "cluster_name", EmitDefaultValue = false)]
        public string ClusterName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets HasGatewayIdentity
        /// </summary>
        [DataMember(Name = "has_gateway_identity", EmitDefaultValue = true)]
        public bool HasGatewayIdentity { get; set; }

        /// <summary>
        /// Gets or Sets LastReport
        /// </summary>
        [DataMember(Name = "last_report", EmitDefaultValue = false)]
        public DateTime LastReport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BastionListEntry {\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  AllowedAccessIds: ").Append(AllowedAccessIds).Append("\n");
            sb.Append("  AllowedUrls: ").Append(AllowedUrls).Append("\n");
            sb.Append("  AllowedUrlsPerInstance: ").Append(AllowedUrlsPerInstance).Append("\n");
            sb.Append("  BastionSshPort: ").Append(BastionSshPort).Append("\n");
            sb.Append("  BastionUrlsPerType: ").Append(BastionUrlsPerType).Append("\n");
            sb.Append("  ClusterName: ").Append(ClusterName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  HasGatewayIdentity: ").Append(HasGatewayIdentity).Append("\n");
            sb.Append("  LastReport: ").Append(LastReport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
