/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ArtifactoryTargetDetails
    /// </summary>
    [DataContract(Name = "ArtifactoryTargetDetails")]
    public partial class ArtifactoryTargetDetails : IEquatable<ArtifactoryTargetDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArtifactoryTargetDetails" /> class.
        /// </summary>
        /// <param name="artifactoryAdminApikey">artifactoryAdminApikey.</param>
        /// <param name="artifactoryAdminUsername">artifactoryAdminUsername.</param>
        /// <param name="artifactoryBaseUrl">artifactoryBaseUrl.</param>
        public ArtifactoryTargetDetails(string artifactoryAdminApikey = default(string), string artifactoryAdminUsername = default(string), string artifactoryBaseUrl = default(string))
        {
            this.ArtifactoryAdminApikey = artifactoryAdminApikey;
            this.ArtifactoryAdminUsername = artifactoryAdminUsername;
            this.ArtifactoryBaseUrl = artifactoryBaseUrl;
        }

        /// <summary>
        /// Gets or Sets ArtifactoryAdminApikey
        /// </summary>
        [DataMember(Name = "artifactory_admin_apikey", EmitDefaultValue = false)]
        public string ArtifactoryAdminApikey { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactoryAdminUsername
        /// </summary>
        [DataMember(Name = "artifactory_admin_username", EmitDefaultValue = false)]
        public string ArtifactoryAdminUsername { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactoryBaseUrl
        /// </summary>
        [DataMember(Name = "artifactory_base_url", EmitDefaultValue = false)]
        public string ArtifactoryBaseUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ArtifactoryTargetDetails {\n");
            sb.Append("  ArtifactoryAdminApikey: ").Append(ArtifactoryAdminApikey).Append("\n");
            sb.Append("  ArtifactoryAdminUsername: ").Append(ArtifactoryAdminUsername).Append("\n");
            sb.Append("  ArtifactoryBaseUrl: ").Append(ArtifactoryBaseUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArtifactoryTargetDetails);
        }

        /// <summary>
        /// Returns true if ArtifactoryTargetDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ArtifactoryTargetDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArtifactoryTargetDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ArtifactoryAdminApikey == input.ArtifactoryAdminApikey ||
                    (this.ArtifactoryAdminApikey != null &&
                    this.ArtifactoryAdminApikey.Equals(input.ArtifactoryAdminApikey))
                ) && 
                (
                    this.ArtifactoryAdminUsername == input.ArtifactoryAdminUsername ||
                    (this.ArtifactoryAdminUsername != null &&
                    this.ArtifactoryAdminUsername.Equals(input.ArtifactoryAdminUsername))
                ) && 
                (
                    this.ArtifactoryBaseUrl == input.ArtifactoryBaseUrl ||
                    (this.ArtifactoryBaseUrl != null &&
                    this.ArtifactoryBaseUrl.Equals(input.ArtifactoryBaseUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArtifactoryAdminApikey != null)
                {
                    hashCode = (hashCode * 59) + this.ArtifactoryAdminApikey.GetHashCode();
                }
                if (this.ArtifactoryAdminUsername != null)
                {
                    hashCode = (hashCode * 59) + this.ArtifactoryAdminUsername.GetHashCode();
                }
                if (this.ArtifactoryBaseUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ArtifactoryBaseUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
