/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// BastionConfigReplyObj
    /// </summary>
    [DataContract(Name = "BastionConfigReplyObj")]
    public partial class BastionConfigReplyObj : IEquatable<BastionConfigReplyObj>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BastionConfigReplyObj" /> class.
        /// </summary>
        /// <param name="apiGatewayUrl">apiGatewayUrl.</param>
        /// <param name="clusterId">clusterId.</param>
        /// <param name="gatorClusterId">gatorClusterId.</param>
        /// <param name="global">global.</param>
        /// <param name="sshBastion">sshBastion.</param>
        /// <param name="webBastion">webBastion.</param>
        public BastionConfigReplyObj(string apiGatewayUrl = default(string), string clusterId = default(string), long gatorClusterId = default(long), BastionGlobalConf global = default(BastionGlobalConf), SshBastionConf sshBastion = default(SshBastionConf), WebBastionConf webBastion = default(WebBastionConf))
        {
            this.ApiGatewayUrl = apiGatewayUrl;
            this.ClusterId = clusterId;
            this.GatorClusterId = gatorClusterId;
            this.Global = global;
            this.SshBastion = sshBastion;
            this.WebBastion = webBastion;
        }

        /// <summary>
        /// Gets or Sets ApiGatewayUrl
        /// </summary>
        [DataMember(Name = "api_gateway_url", EmitDefaultValue = false)]
        public string ApiGatewayUrl { get; set; }

        /// <summary>
        /// Gets or Sets ClusterId
        /// </summary>
        [DataMember(Name = "cluster_id", EmitDefaultValue = false)]
        public string ClusterId { get; set; }

        /// <summary>
        /// Gets or Sets GatorClusterId
        /// </summary>
        [DataMember(Name = "gator_cluster_id", EmitDefaultValue = false)]
        public long GatorClusterId { get; set; }

        /// <summary>
        /// Gets or Sets Global
        /// </summary>
        [DataMember(Name = "global", EmitDefaultValue = false)]
        public BastionGlobalConf Global { get; set; }

        /// <summary>
        /// Gets or Sets SshBastion
        /// </summary>
        [DataMember(Name = "ssh_bastion", EmitDefaultValue = false)]
        public SshBastionConf SshBastion { get; set; }

        /// <summary>
        /// Gets or Sets WebBastion
        /// </summary>
        [DataMember(Name = "web_bastion", EmitDefaultValue = false)]
        public WebBastionConf WebBastion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BastionConfigReplyObj {\n");
            sb.Append("  ApiGatewayUrl: ").Append(ApiGatewayUrl).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  GatorClusterId: ").Append(GatorClusterId).Append("\n");
            sb.Append("  Global: ").Append(Global).Append("\n");
            sb.Append("  SshBastion: ").Append(SshBastion).Append("\n");
            sb.Append("  WebBastion: ").Append(WebBastion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BastionConfigReplyObj);
        }

        /// <summary>
        /// Returns true if BastionConfigReplyObj instances are equal
        /// </summary>
        /// <param name="input">Instance of BastionConfigReplyObj to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BastionConfigReplyObj input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApiGatewayUrl == input.ApiGatewayUrl ||
                    (this.ApiGatewayUrl != null &&
                    this.ApiGatewayUrl.Equals(input.ApiGatewayUrl))
                ) && 
                (
                    this.ClusterId == input.ClusterId ||
                    (this.ClusterId != null &&
                    this.ClusterId.Equals(input.ClusterId))
                ) && 
                (
                    this.GatorClusterId == input.GatorClusterId ||
                    this.GatorClusterId.Equals(input.GatorClusterId)
                ) && 
                (
                    this.Global == input.Global ||
                    (this.Global != null &&
                    this.Global.Equals(input.Global))
                ) && 
                (
                    this.SshBastion == input.SshBastion ||
                    (this.SshBastion != null &&
                    this.SshBastion.Equals(input.SshBastion))
                ) && 
                (
                    this.WebBastion == input.WebBastion ||
                    (this.WebBastion != null &&
                    this.WebBastion.Equals(input.WebBastion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiGatewayUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ApiGatewayUrl.GetHashCode();
                }
                if (this.ClusterId != null)
                {
                    hashCode = (hashCode * 59) + this.ClusterId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GatorClusterId.GetHashCode();
                if (this.Global != null)
                {
                    hashCode = (hashCode * 59) + this.Global.GetHashCode();
                }
                if (this.SshBastion != null)
                {
                    hashCode = (hashCode * 59) + this.SshBastion.GetHashCode();
                }
                if (this.WebBastion != null)
                {
                    hashCode = (hashCode * 59) + this.WebBastion.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
