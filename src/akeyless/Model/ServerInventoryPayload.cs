/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ServerInventoryPayload
    /// </summary>
    [DataContract(Name = "ServerInventoryPayload")]
    public partial class ServerInventoryPayload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerInventoryPayload" /> class.
        /// </summary>
        /// <param name="autoRotate">autoRotate.</param>
        /// <param name="autoRotateIntervalInDays">autoRotateIntervalInDays.</param>
        /// <param name="autoRotateRotationHour">autoRotateRotationHour.</param>
        /// <param name="enableRdpSra">enableRdpSra.</param>
        /// <param name="migrationTargetId">migrationTargetId.</param>
        /// <param name="serverTargetsPathTemplate">serverTargetsPathTemplate.</param>
        /// <param name="userGroups">userGroups.</param>
        /// <param name="usersIgnoreList">usersIgnoreList.</param>
        /// <param name="usersRotatedSecretsPathTemplate">usersRotatedSecretsPathTemplate.</param>
        public ServerInventoryPayload(bool autoRotate = default(bool), int autoRotateIntervalInDays = default(int), int autoRotateRotationHour = default(int), bool enableRdpSra = default(bool), long migrationTargetId = default(long), string serverTargetsPathTemplate = default(string), List<string> userGroups = default(List<string>), Dictionary<string, bool> usersIgnoreList = default(Dictionary<string, bool>), string usersRotatedSecretsPathTemplate = default(string))
        {
            this.AutoRotate = autoRotate;
            this.AutoRotateIntervalInDays = autoRotateIntervalInDays;
            this.AutoRotateRotationHour = autoRotateRotationHour;
            this.EnableRdpSra = enableRdpSra;
            this.MigrationTargetId = migrationTargetId;
            this.ServerTargetsPathTemplate = serverTargetsPathTemplate;
            this.UserGroups = userGroups;
            this.UsersIgnoreList = usersIgnoreList;
            this.UsersRotatedSecretsPathTemplate = usersRotatedSecretsPathTemplate;
        }

        /// <summary>
        /// Gets or Sets AutoRotate
        /// </summary>
        [DataMember(Name = "auto_rotate", EmitDefaultValue = true)]
        public bool AutoRotate { get; set; }

        /// <summary>
        /// Gets or Sets AutoRotateIntervalInDays
        /// </summary>
        [DataMember(Name = "auto_rotate_interval_in_days", EmitDefaultValue = false)]
        public int AutoRotateIntervalInDays { get; set; }

        /// <summary>
        /// Gets or Sets AutoRotateRotationHour
        /// </summary>
        [DataMember(Name = "auto_rotate_rotation_hour", EmitDefaultValue = false)]
        public int AutoRotateRotationHour { get; set; }

        /// <summary>
        /// Gets or Sets EnableRdpSra
        /// </summary>
        [DataMember(Name = "enable_rdp_sra", EmitDefaultValue = true)]
        public bool EnableRdpSra { get; set; }

        /// <summary>
        /// Gets or Sets MigrationTargetId
        /// </summary>
        [DataMember(Name = "migration_target_id", EmitDefaultValue = false)]
        public long MigrationTargetId { get; set; }

        /// <summary>
        /// Gets or Sets ServerTargetsPathTemplate
        /// </summary>
        [DataMember(Name = "server_targets_path_template", EmitDefaultValue = false)]
        public string ServerTargetsPathTemplate { get; set; }

        /// <summary>
        /// Gets or Sets UserGroups
        /// </summary>
        [DataMember(Name = "user_groups", EmitDefaultValue = false)]
        public List<string> UserGroups { get; set; }

        /// <summary>
        /// Gets or Sets UsersIgnoreList
        /// </summary>
        [DataMember(Name = "users_ignore_list", EmitDefaultValue = false)]
        public Dictionary<string, bool> UsersIgnoreList { get; set; }

        /// <summary>
        /// Gets or Sets UsersRotatedSecretsPathTemplate
        /// </summary>
        [DataMember(Name = "users_rotated_secrets_path_template", EmitDefaultValue = false)]
        public string UsersRotatedSecretsPathTemplate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerInventoryPayload {\n");
            sb.Append("  AutoRotate: ").Append(AutoRotate).Append("\n");
            sb.Append("  AutoRotateIntervalInDays: ").Append(AutoRotateIntervalInDays).Append("\n");
            sb.Append("  AutoRotateRotationHour: ").Append(AutoRotateRotationHour).Append("\n");
            sb.Append("  EnableRdpSra: ").Append(EnableRdpSra).Append("\n");
            sb.Append("  MigrationTargetId: ").Append(MigrationTargetId).Append("\n");
            sb.Append("  ServerTargetsPathTemplate: ").Append(ServerTargetsPathTemplate).Append("\n");
            sb.Append("  UserGroups: ").Append(UserGroups).Append("\n");
            sb.Append("  UsersIgnoreList: ").Append(UsersIgnoreList).Append("\n");
            sb.Append("  UsersRotatedSecretsPathTemplate: ").Append(UsersRotatedSecretsPathTemplate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
