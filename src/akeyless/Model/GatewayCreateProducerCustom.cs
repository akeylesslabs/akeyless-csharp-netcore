/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GatewayCreateProducerCustom
    /// </summary>
    [DataContract]
    public partial class GatewayCreateProducerCustom :  IEquatable<GatewayCreateProducerCustom>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerCustom" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerCustom() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerCustom" /> class.
        /// </summary>
        /// <param name="createSyncUrl">URL of an endpoint that implements /sync/create method, for example https://webhook.example.com/sync/create (required).</param>
        /// <param name="gatewayUrl">Gateway url (default to &quot;http://localhost:8000&quot;).</param>
        /// <param name="name">Producer name (required).</param>
        /// <param name="payload">Secret payload to be sent with each create/revoke webhook request.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="revokeSyncUrl">URL of an endpoint that implements /sync/revoke method, for example https://webhook.example.com/sync/revoke (required).</param>
        /// <param name="rotateSyncUrl">URL of an endpoint that implements /sync/rotate method, for example https://webhook.example.com/sync/rotate.</param>
        /// <param name="timeoutSec">Maximum allowed time in seconds for the webhook to return the results (default to 60).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        public GatewayCreateProducerCustom(string createSyncUrl = default(string), string gatewayUrl = "http://localhost:8000", string name = default(string), string payload = default(string), string producerEncryptionKeyName = default(string), string revokeSyncUrl = default(string), string rotateSyncUrl = default(string), long timeoutSec = 60, string token = default(string), string uidToken = default(string), string userTtl = "60m")
        {
            // to ensure "createSyncUrl" is required (not null)
            this.CreateSyncUrl = createSyncUrl ?? throw new ArgumentNullException("createSyncUrl is a required property for GatewayCreateProducerCustom and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for GatewayCreateProducerCustom and cannot be null");
            // to ensure "revokeSyncUrl" is required (not null)
            this.RevokeSyncUrl = revokeSyncUrl ?? throw new ArgumentNullException("revokeSyncUrl is a required property for GatewayCreateProducerCustom and cannot be null");
            // use default value if no "gatewayUrl" provided
            this.GatewayUrl = gatewayUrl ?? "http://localhost:8000";
            this.Payload = payload;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.RotateSyncUrl = rotateSyncUrl;
            this.TimeoutSec = timeoutSec;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "60m";
        }
        
        /// <summary>
        /// URL of an endpoint that implements /sync/create method, for example https://webhook.example.com/sync/create
        /// </summary>
        /// <value>URL of an endpoint that implements /sync/create method, for example https://webhook.example.com/sync/create</value>
        [DataMember(Name="create-sync-url", EmitDefaultValue=false)]
        public string CreateSyncUrl { get; set; }

        /// <summary>
        /// Gateway url
        /// </summary>
        /// <value>Gateway url</value>
        [DataMember(Name="gateway-url", EmitDefaultValue=false)]
        public string GatewayUrl { get; set; }

        /// <summary>
        /// Producer name
        /// </summary>
        /// <value>Producer name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Secret payload to be sent with each create/revoke webhook request
        /// </summary>
        /// <value>Secret payload to be sent with each create/revoke webhook request</value>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public string Payload { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name="producer-encryption-key-name", EmitDefaultValue=false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// URL of an endpoint that implements /sync/revoke method, for example https://webhook.example.com/sync/revoke
        /// </summary>
        /// <value>URL of an endpoint that implements /sync/revoke method, for example https://webhook.example.com/sync/revoke</value>
        [DataMember(Name="revoke-sync-url", EmitDefaultValue=false)]
        public string RevokeSyncUrl { get; set; }

        /// <summary>
        /// URL of an endpoint that implements /sync/rotate method, for example https://webhook.example.com/sync/rotate
        /// </summary>
        /// <value>URL of an endpoint that implements /sync/rotate method, for example https://webhook.example.com/sync/rotate</value>
        [DataMember(Name="rotate-sync-url", EmitDefaultValue=false)]
        public string RotateSyncUrl { get; set; }

        /// <summary>
        /// Maximum allowed time in seconds for the webhook to return the results
        /// </summary>
        /// <value>Maximum allowed time in seconds for the webhook to return the results</value>
        [DataMember(Name="timeout-sec", EmitDefaultValue=false)]
        public long TimeoutSec { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name="user-ttl", EmitDefaultValue=false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerCustom {\n");
            sb.Append("  CreateSyncUrl: ").Append(CreateSyncUrl).Append("\n");
            sb.Append("  GatewayUrl: ").Append(GatewayUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  RevokeSyncUrl: ").Append(RevokeSyncUrl).Append("\n");
            sb.Append("  RotateSyncUrl: ").Append(RotateSyncUrl).Append("\n");
            sb.Append("  TimeoutSec: ").Append(TimeoutSec).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayCreateProducerCustom);
        }

        /// <summary>
        /// Returns true if GatewayCreateProducerCustom instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayCreateProducerCustom to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayCreateProducerCustom input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreateSyncUrl == input.CreateSyncUrl ||
                    (this.CreateSyncUrl != null &&
                    this.CreateSyncUrl.Equals(input.CreateSyncUrl))
                ) && 
                (
                    this.GatewayUrl == input.GatewayUrl ||
                    (this.GatewayUrl != null &&
                    this.GatewayUrl.Equals(input.GatewayUrl))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.RevokeSyncUrl == input.RevokeSyncUrl ||
                    (this.RevokeSyncUrl != null &&
                    this.RevokeSyncUrl.Equals(input.RevokeSyncUrl))
                ) && 
                (
                    this.RotateSyncUrl == input.RotateSyncUrl ||
                    (this.RotateSyncUrl != null &&
                    this.RotateSyncUrl.Equals(input.RotateSyncUrl))
                ) && 
                (
                    this.TimeoutSec == input.TimeoutSec ||
                    this.TimeoutSec.Equals(input.TimeoutSec)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreateSyncUrl != null)
                    hashCode = hashCode * 59 + this.CreateSyncUrl.GetHashCode();
                if (this.GatewayUrl != null)
                    hashCode = hashCode * 59 + this.GatewayUrl.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                if (this.ProducerEncryptionKeyName != null)
                    hashCode = hashCode * 59 + this.ProducerEncryptionKeyName.GetHashCode();
                if (this.RevokeSyncUrl != null)
                    hashCode = hashCode * 59 + this.RevokeSyncUrl.GetHashCode();
                if (this.RotateSyncUrl != null)
                    hashCode = hashCode * 59 + this.RotateSyncUrl.GetHashCode();
                hashCode = hashCode * 59 + this.TimeoutSec.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.UserTtl != null)
                    hashCode = hashCode * 59 + this.UserTtl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
