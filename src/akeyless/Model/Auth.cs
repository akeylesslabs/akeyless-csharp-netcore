/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// Auth
    /// </summary>
    [DataContract(Name = "Auth")]
    public partial class Auth : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Auth" /> class.
        /// </summary>
        /// <param name="accessId">Access ID.</param>
        /// <param name="accessKey">Access key (relevant only for access-type&#x3D;access_key).</param>
        /// <param name="accessType">Access Type (access_key/password/saml/ldap/k8s/azure_ad/oidc/aws_iam/universal_identity/jwt/gcp/cert/oci/kerberos) (default to &quot;access_key&quot;).</param>
        /// <param name="accountId">Account id (relevant only for access-type&#x3D;password where the email address is associated with more than one account).</param>
        /// <param name="adminEmail">Email (relevant only for access-type&#x3D;password).</param>
        /// <param name="adminPassword">Password (relevant only for access-type&#x3D;password).</param>
        /// <param name="certChallenge">Certificate challenge encoded in base64. (relevant only for access-type&#x3D;cert).</param>
        /// <param name="certData">Certificate data encoded in base64. Used if file was not provided. (relevant only for access-type&#x3D;cert).</param>
        /// <param name="cloudId">The cloud identity (relevant only for access-type&#x3D;azure_ad,aws_iam,gcp).</param>
        /// <param name="debug">debug.</param>
        /// <param name="disablePafxfast">Disable the FAST negotiation in the Kerberos authentication method.</param>
        /// <param name="gatewaySpn">The service principal name of the gateway as registered in LDAP (i.e., HTTP/gateway).</param>
        /// <param name="gatewayUrl">Gateway URL relevant only for access-type&#x3D;k8s/oauth2/saml/oidc.</param>
        /// <param name="gcpAudience">GCP JWT audience (default to &quot;akeyless.io&quot;).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="jwt">The Json Web Token (relevant only for access-type&#x3D;jwt/oidc).</param>
        /// <param name="k8sAuthConfigName">The K8S Auth config name (relevant only for access-type&#x3D;k8s).</param>
        /// <param name="k8sServiceAccountToken">The K8S service account token. (relevant only for access-type&#x3D;k8s).</param>
        /// <param name="kerberosToken">KerberosToken represents a Kerberos token generated for the gateway SPN (Service Principal Name)..</param>
        /// <param name="kerberosUsername">TThe username for the entry within the keytab to authenticate via Kerberos.</param>
        /// <param name="keyData">Private key data encoded in base64. Used if file was not provided.(relevant only for access-type&#x3D;cert).</param>
        /// <param name="keytabData">Base64-encoded content of a valid keytab file, containing the service account&#39;s entry..</param>
        /// <param name="krb5ConfData">Base64-encoded content of a valid krb5.conf file, specifying the settings and parameters required for Kerberos authentication..</param>
        /// <param name="ldapPassword">LDAP password (relevant only for access-type&#x3D;ldap).</param>
        /// <param name="ociAuthType">The type of the OCI configuration to use [instance/apikey/resource] (relevant only for access-type&#x3D;oci) (default to &quot;apikey&quot;).</param>
        /// <param name="ociGroupOcid">A list of Oracle Cloud IDs groups (relevant only for access-type&#x3D;oci).</param>
        /// <param name="otp">otp.</param>
        /// <param name="signedCertChallenge">Signed certificate challenge encoded in base64. (relevant only for access-type&#x3D;cert).</param>
        /// <param name="uidToken">The universal_identity token (relevant only for access-type&#x3D;universal_identity).</param>
        /// <param name="useRemoteBrowser">Returns a link to complete the authentication remotely (relevant only for access-type&#x3D;saml/oidc).</param>
        /// <param name="username">LDAP username (relevant only for access-type&#x3D;ldap).</param>
        public Auth(string accessId = default(string), string accessKey = default(string), string accessType = @"access_key", string accountId = default(string), string adminEmail = default(string), string adminPassword = default(string), string certChallenge = default(string), string certData = default(string), string cloudId = default(string), bool debug = default(bool), string disablePafxfast = default(string), string gatewaySpn = default(string), string gatewayUrl = default(string), string gcpAudience = @"akeyless.io", bool json = false, string jwt = default(string), string k8sAuthConfigName = default(string), string k8sServiceAccountToken = default(string), string kerberosToken = default(string), string kerberosUsername = default(string), string keyData = default(string), string keytabData = default(string), string krb5ConfData = default(string), string ldapPassword = default(string), string ociAuthType = @"apikey", List<string> ociGroupOcid = default(List<string>), string otp = default(string), string signedCertChallenge = default(string), string uidToken = default(string), bool useRemoteBrowser = default(bool), string username = default(string))
        {
            this.AccessId = accessId;
            this.AccessKey = accessKey;
            // use default value if no "accessType" provided
            this.AccessType = accessType ?? @"access_key";
            this.AccountId = accountId;
            this.AdminEmail = adminEmail;
            this.AdminPassword = adminPassword;
            this.CertChallenge = certChallenge;
            this.CertData = certData;
            this.CloudId = cloudId;
            this.Debug = debug;
            this.DisablePafxfast = disablePafxfast;
            this.GatewaySpn = gatewaySpn;
            this.GatewayUrl = gatewayUrl;
            // use default value if no "gcpAudience" provided
            this.GcpAudience = gcpAudience ?? @"akeyless.io";
            this.Json = json;
            this.Jwt = jwt;
            this.K8sAuthConfigName = k8sAuthConfigName;
            this.K8sServiceAccountToken = k8sServiceAccountToken;
            this.KerberosToken = kerberosToken;
            this.KerberosUsername = kerberosUsername;
            this.KeyData = keyData;
            this.KeytabData = keytabData;
            this.Krb5ConfData = krb5ConfData;
            this.LdapPassword = ldapPassword;
            // use default value if no "ociAuthType" provided
            this.OciAuthType = ociAuthType ?? @"apikey";
            this.OciGroupOcid = ociGroupOcid;
            this.Otp = otp;
            this.SignedCertChallenge = signedCertChallenge;
            this.UidToken = uidToken;
            this.UseRemoteBrowser = useRemoteBrowser;
            this.Username = username;
        }

        /// <summary>
        /// Access ID
        /// </summary>
        /// <value>Access ID</value>
        [DataMember(Name = "access-id", EmitDefaultValue = false)]
        public string AccessId { get; set; }

        /// <summary>
        /// Access key (relevant only for access-type&#x3D;access_key)
        /// </summary>
        /// <value>Access key (relevant only for access-type&#x3D;access_key)</value>
        [DataMember(Name = "access-key", EmitDefaultValue = false)]
        public string AccessKey { get; set; }

        /// <summary>
        /// Access Type (access_key/password/saml/ldap/k8s/azure_ad/oidc/aws_iam/universal_identity/jwt/gcp/cert/oci/kerberos)
        /// </summary>
        /// <value>Access Type (access_key/password/saml/ldap/k8s/azure_ad/oidc/aws_iam/universal_identity/jwt/gcp/cert/oci/kerberos)</value>
        [DataMember(Name = "access-type", EmitDefaultValue = false)]
        public string AccessType { get; set; }

        /// <summary>
        /// Account id (relevant only for access-type&#x3D;password where the email address is associated with more than one account)
        /// </summary>
        /// <value>Account id (relevant only for access-type&#x3D;password where the email address is associated with more than one account)</value>
        [DataMember(Name = "account-id", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Email (relevant only for access-type&#x3D;password)
        /// </summary>
        /// <value>Email (relevant only for access-type&#x3D;password)</value>
        [DataMember(Name = "admin-email", EmitDefaultValue = false)]
        public string AdminEmail { get; set; }

        /// <summary>
        /// Password (relevant only for access-type&#x3D;password)
        /// </summary>
        /// <value>Password (relevant only for access-type&#x3D;password)</value>
        [DataMember(Name = "admin-password", EmitDefaultValue = false)]
        public string AdminPassword { get; set; }

        /// <summary>
        /// Certificate challenge encoded in base64. (relevant only for access-type&#x3D;cert)
        /// </summary>
        /// <value>Certificate challenge encoded in base64. (relevant only for access-type&#x3D;cert)</value>
        [DataMember(Name = "cert-challenge", EmitDefaultValue = false)]
        public string CertChallenge { get; set; }

        /// <summary>
        /// Certificate data encoded in base64. Used if file was not provided. (relevant only for access-type&#x3D;cert)
        /// </summary>
        /// <value>Certificate data encoded in base64. Used if file was not provided. (relevant only for access-type&#x3D;cert)</value>
        [DataMember(Name = "cert-data", EmitDefaultValue = false)]
        public string CertData { get; set; }

        /// <summary>
        /// The cloud identity (relevant only for access-type&#x3D;azure_ad,aws_iam,gcp)
        /// </summary>
        /// <value>The cloud identity (relevant only for access-type&#x3D;azure_ad,aws_iam,gcp)</value>
        [DataMember(Name = "cloud-id", EmitDefaultValue = false)]
        public string CloudId { get; set; }

        /// <summary>
        /// Gets or Sets Debug
        /// </summary>
        [DataMember(Name = "debug", EmitDefaultValue = true)]
        public bool Debug { get; set; }

        /// <summary>
        /// Disable the FAST negotiation in the Kerberos authentication method
        /// </summary>
        /// <value>Disable the FAST negotiation in the Kerberos authentication method</value>
        [DataMember(Name = "disable-pafxfast", EmitDefaultValue = false)]
        public string DisablePafxfast { get; set; }

        /// <summary>
        /// The service principal name of the gateway as registered in LDAP (i.e., HTTP/gateway)
        /// </summary>
        /// <value>The service principal name of the gateway as registered in LDAP (i.e., HTTP/gateway)</value>
        [DataMember(Name = "gateway-spn", EmitDefaultValue = false)]
        public string GatewaySpn { get; set; }

        /// <summary>
        /// Gateway URL relevant only for access-type&#x3D;k8s/oauth2/saml/oidc
        /// </summary>
        /// <value>Gateway URL relevant only for access-type&#x3D;k8s/oauth2/saml/oidc</value>
        [DataMember(Name = "gateway-url", EmitDefaultValue = false)]
        public string GatewayUrl { get; set; }

        /// <summary>
        /// GCP JWT audience
        /// </summary>
        /// <value>GCP JWT audience</value>
        [DataMember(Name = "gcp-audience", EmitDefaultValue = false)]
        public string GcpAudience { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The Json Web Token (relevant only for access-type&#x3D;jwt/oidc)
        /// </summary>
        /// <value>The Json Web Token (relevant only for access-type&#x3D;jwt/oidc)</value>
        [DataMember(Name = "jwt", EmitDefaultValue = false)]
        public string Jwt { get; set; }

        /// <summary>
        /// The K8S Auth config name (relevant only for access-type&#x3D;k8s)
        /// </summary>
        /// <value>The K8S Auth config name (relevant only for access-type&#x3D;k8s)</value>
        [DataMember(Name = "k8s-auth-config-name", EmitDefaultValue = false)]
        public string K8sAuthConfigName { get; set; }

        /// <summary>
        /// The K8S service account token. (relevant only for access-type&#x3D;k8s)
        /// </summary>
        /// <value>The K8S service account token. (relevant only for access-type&#x3D;k8s)</value>
        [DataMember(Name = "k8s-service-account-token", EmitDefaultValue = false)]
        public string K8sServiceAccountToken { get; set; }

        /// <summary>
        /// KerberosToken represents a Kerberos token generated for the gateway SPN (Service Principal Name).
        /// </summary>
        /// <value>KerberosToken represents a Kerberos token generated for the gateway SPN (Service Principal Name).</value>
        [DataMember(Name = "kerberos-token", EmitDefaultValue = false)]
        public string KerberosToken { get; set; }

        /// <summary>
        /// TThe username for the entry within the keytab to authenticate via Kerberos
        /// </summary>
        /// <value>TThe username for the entry within the keytab to authenticate via Kerberos</value>
        [DataMember(Name = "kerberos-username", EmitDefaultValue = false)]
        public string KerberosUsername { get; set; }

        /// <summary>
        /// Private key data encoded in base64. Used if file was not provided.(relevant only for access-type&#x3D;cert)
        /// </summary>
        /// <value>Private key data encoded in base64. Used if file was not provided.(relevant only for access-type&#x3D;cert)</value>
        [DataMember(Name = "key-data", EmitDefaultValue = false)]
        public string KeyData { get; set; }

        /// <summary>
        /// Base64-encoded content of a valid keytab file, containing the service account&#39;s entry.
        /// </summary>
        /// <value>Base64-encoded content of a valid keytab file, containing the service account&#39;s entry.</value>
        [DataMember(Name = "keytab-data", EmitDefaultValue = false)]
        public string KeytabData { get; set; }

        /// <summary>
        /// Base64-encoded content of a valid krb5.conf file, specifying the settings and parameters required for Kerberos authentication.
        /// </summary>
        /// <value>Base64-encoded content of a valid krb5.conf file, specifying the settings and parameters required for Kerberos authentication.</value>
        [DataMember(Name = "krb5-conf-data", EmitDefaultValue = false)]
        public string Krb5ConfData { get; set; }

        /// <summary>
        /// LDAP password (relevant only for access-type&#x3D;ldap)
        /// </summary>
        /// <value>LDAP password (relevant only for access-type&#x3D;ldap)</value>
        [DataMember(Name = "ldap-password", EmitDefaultValue = false)]
        public string LdapPassword { get; set; }

        /// <summary>
        /// The type of the OCI configuration to use [instance/apikey/resource] (relevant only for access-type&#x3D;oci)
        /// </summary>
        /// <value>The type of the OCI configuration to use [instance/apikey/resource] (relevant only for access-type&#x3D;oci)</value>
        [DataMember(Name = "oci-auth-type", EmitDefaultValue = false)]
        public string OciAuthType { get; set; }

        /// <summary>
        /// A list of Oracle Cloud IDs groups (relevant only for access-type&#x3D;oci)
        /// </summary>
        /// <value>A list of Oracle Cloud IDs groups (relevant only for access-type&#x3D;oci)</value>
        [DataMember(Name = "oci-group-ocid", EmitDefaultValue = false)]
        public List<string> OciGroupOcid { get; set; }

        /// <summary>
        /// Gets or Sets Otp
        /// </summary>
        [DataMember(Name = "otp", EmitDefaultValue = false)]
        public string Otp { get; set; }

        /// <summary>
        /// Signed certificate challenge encoded in base64. (relevant only for access-type&#x3D;cert)
        /// </summary>
        /// <value>Signed certificate challenge encoded in base64. (relevant only for access-type&#x3D;cert)</value>
        [DataMember(Name = "signed-cert-challenge", EmitDefaultValue = false)]
        public string SignedCertChallenge { get; set; }

        /// <summary>
        /// The universal_identity token (relevant only for access-type&#x3D;universal_identity)
        /// </summary>
        /// <value>The universal_identity token (relevant only for access-type&#x3D;universal_identity)</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns a link to complete the authentication remotely (relevant only for access-type&#x3D;saml/oidc)
        /// </summary>
        /// <value>Returns a link to complete the authentication remotely (relevant only for access-type&#x3D;saml/oidc)</value>
        [DataMember(Name = "use-remote-browser", EmitDefaultValue = true)]
        public bool UseRemoteBrowser { get; set; }

        /// <summary>
        /// LDAP username (relevant only for access-type&#x3D;ldap)
        /// </summary>
        /// <value>LDAP username (relevant only for access-type&#x3D;ldap)</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Auth {\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AdminEmail: ").Append(AdminEmail).Append("\n");
            sb.Append("  AdminPassword: ").Append(AdminPassword).Append("\n");
            sb.Append("  CertChallenge: ").Append(CertChallenge).Append("\n");
            sb.Append("  CertData: ").Append(CertData).Append("\n");
            sb.Append("  CloudId: ").Append(CloudId).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  DisablePafxfast: ").Append(DisablePafxfast).Append("\n");
            sb.Append("  GatewaySpn: ").Append(GatewaySpn).Append("\n");
            sb.Append("  GatewayUrl: ").Append(GatewayUrl).Append("\n");
            sb.Append("  GcpAudience: ").Append(GcpAudience).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Jwt: ").Append(Jwt).Append("\n");
            sb.Append("  K8sAuthConfigName: ").Append(K8sAuthConfigName).Append("\n");
            sb.Append("  K8sServiceAccountToken: ").Append(K8sServiceAccountToken).Append("\n");
            sb.Append("  KerberosToken: ").Append(KerberosToken).Append("\n");
            sb.Append("  KerberosUsername: ").Append(KerberosUsername).Append("\n");
            sb.Append("  KeyData: ").Append(KeyData).Append("\n");
            sb.Append("  KeytabData: ").Append(KeytabData).Append("\n");
            sb.Append("  Krb5ConfData: ").Append(Krb5ConfData).Append("\n");
            sb.Append("  LdapPassword: ").Append(LdapPassword).Append("\n");
            sb.Append("  OciAuthType: ").Append(OciAuthType).Append("\n");
            sb.Append("  OciGroupOcid: ").Append(OciGroupOcid).Append("\n");
            sb.Append("  Otp: ").Append(Otp).Append("\n");
            sb.Append("  SignedCertChallenge: ").Append(SignedCertChallenge).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UseRemoteBrowser: ").Append(UseRemoteBrowser).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
