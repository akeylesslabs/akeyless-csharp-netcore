/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// Auth
    /// </summary>
    [DataContract(Name = "auth")]
    public partial class Auth : IEquatable<Auth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Auth" /> class.
        /// </summary>
        /// <param name="accessId">Access ID.</param>
        /// <param name="accessKey">Access key (relevant only for access-type&#x3D;access_key).</param>
        /// <param name="accessType">Access Type (access_key/password/saml/ldap/k8s/azure_ad/oidc/aws_iam/universal_identity/jwt/gcp/cert) (default to &quot;access_key&quot;).</param>
        /// <param name="adminEmail">Email (relevant only for access-type&#x3D;password).</param>
        /// <param name="adminPassword">Password (relevant only for access-type&#x3D;password).</param>
        /// <param name="certData">Certificate data encoded in base64. Used if file was not provided. (relevant only for access-type&#x3D;cert).</param>
        /// <param name="cloudId">The cloud identity (relevant only for access-type&#x3D;azure_ad,aws_iam,gcp).</param>
        /// <param name="debug">debug.</param>
        /// <param name="gcpAudience">GCP JWT audience.</param>
        /// <param name="json">Set output format to JSON.</param>
        /// <param name="jwt">The Json Web Token (relevant only for access-type&#x3D;jwt/oidc).</param>
        /// <param name="k8sAuthConfigName">The K8S Auth config name (relevant only for access-type&#x3D;k8s).</param>
        /// <param name="k8sServiceAccountToken">The K8S service account token. (relevant only for access-type&#x3D;k8s).</param>
        /// <param name="keyData">Private key data encoded in base64. Used if file was not provided.(relevant only for access-type&#x3D;cert).</param>
        /// <param name="ldapPassword">LDAP password (relevant only for access-type&#x3D;ldap).</param>
        /// <param name="ldapUsername">LDAP username (relevant only for access-type&#x3D;ldap).</param>
        /// <param name="uidToken">The universal_identity token (relevant only for access-type&#x3D;universal_identity).</param>
        public Auth(string accessId = default(string), string accessKey = default(string), string accessType = "access_key", string adminEmail = default(string), string adminPassword = default(string), string certData = default(string), string cloudId = default(string), bool debug = default(bool), string gcpAudience = default(string), bool json = default(bool), string jwt = default(string), string k8sAuthConfigName = default(string), string k8sServiceAccountToken = default(string), string keyData = default(string), string ldapPassword = default(string), string ldapUsername = default(string), string uidToken = default(string))
        {
            this.AccessId = accessId;
            this.AccessKey = accessKey;
            // use default value if no "accessType" provided
            this.AccessType = accessType ?? "access_key";
            this.AdminEmail = adminEmail;
            this.AdminPassword = adminPassword;
            this.CertData = certData;
            this.CloudId = cloudId;
            this.Debug = debug;
            this.GcpAudience = gcpAudience;
            this.Json = json;
            this.Jwt = jwt;
            this.K8sAuthConfigName = k8sAuthConfigName;
            this.K8sServiceAccountToken = k8sServiceAccountToken;
            this.KeyData = keyData;
            this.LdapPassword = ldapPassword;
            this.LdapUsername = ldapUsername;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Access ID
        /// </summary>
        /// <value>Access ID</value>
        [DataMember(Name = "access-id", EmitDefaultValue = false)]
        public string AccessId { get; set; }

        /// <summary>
        /// Access key (relevant only for access-type&#x3D;access_key)
        /// </summary>
        /// <value>Access key (relevant only for access-type&#x3D;access_key)</value>
        [DataMember(Name = "access-key", EmitDefaultValue = false)]
        public string AccessKey { get; set; }

        /// <summary>
        /// Access Type (access_key/password/saml/ldap/k8s/azure_ad/oidc/aws_iam/universal_identity/jwt/gcp/cert)
        /// </summary>
        /// <value>Access Type (access_key/password/saml/ldap/k8s/azure_ad/oidc/aws_iam/universal_identity/jwt/gcp/cert)</value>
        [DataMember(Name = "access-type", EmitDefaultValue = false)]
        public string AccessType { get; set; }

        /// <summary>
        /// Email (relevant only for access-type&#x3D;password)
        /// </summary>
        /// <value>Email (relevant only for access-type&#x3D;password)</value>
        [DataMember(Name = "admin-email", EmitDefaultValue = false)]
        public string AdminEmail { get; set; }

        /// <summary>
        /// Password (relevant only for access-type&#x3D;password)
        /// </summary>
        /// <value>Password (relevant only for access-type&#x3D;password)</value>
        [DataMember(Name = "admin-password", EmitDefaultValue = false)]
        public string AdminPassword { get; set; }

        /// <summary>
        /// Certificate data encoded in base64. Used if file was not provided. (relevant only for access-type&#x3D;cert)
        /// </summary>
        /// <value>Certificate data encoded in base64. Used if file was not provided. (relevant only for access-type&#x3D;cert)</value>
        [DataMember(Name = "cert-data", EmitDefaultValue = false)]
        public string CertData { get; set; }

        /// <summary>
        /// The cloud identity (relevant only for access-type&#x3D;azure_ad,aws_iam,gcp)
        /// </summary>
        /// <value>The cloud identity (relevant only for access-type&#x3D;azure_ad,aws_iam,gcp)</value>
        [DataMember(Name = "cloud-id", EmitDefaultValue = false)]
        public string CloudId { get; set; }

        /// <summary>
        /// Gets or Sets Debug
        /// </summary>
        [DataMember(Name = "debug", EmitDefaultValue = true)]
        public bool Debug { get; set; }

        /// <summary>
        /// GCP JWT audience
        /// </summary>
        /// <value>GCP JWT audience</value>
        [DataMember(Name = "gcp-audience", EmitDefaultValue = false)]
        public string GcpAudience { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The Json Web Token (relevant only for access-type&#x3D;jwt/oidc)
        /// </summary>
        /// <value>The Json Web Token (relevant only for access-type&#x3D;jwt/oidc)</value>
        [DataMember(Name = "jwt", EmitDefaultValue = false)]
        public string Jwt { get; set; }

        /// <summary>
        /// The K8S Auth config name (relevant only for access-type&#x3D;k8s)
        /// </summary>
        /// <value>The K8S Auth config name (relevant only for access-type&#x3D;k8s)</value>
        [DataMember(Name = "k8s-auth-config-name", EmitDefaultValue = false)]
        public string K8sAuthConfigName { get; set; }

        /// <summary>
        /// The K8S service account token. (relevant only for access-type&#x3D;k8s)
        /// </summary>
        /// <value>The K8S service account token. (relevant only for access-type&#x3D;k8s)</value>
        [DataMember(Name = "k8s-service-account-token", EmitDefaultValue = false)]
        public string K8sServiceAccountToken { get; set; }

        /// <summary>
        /// Private key data encoded in base64. Used if file was not provided.(relevant only for access-type&#x3D;cert)
        /// </summary>
        /// <value>Private key data encoded in base64. Used if file was not provided.(relevant only for access-type&#x3D;cert)</value>
        [DataMember(Name = "key-data", EmitDefaultValue = false)]
        public string KeyData { get; set; }

        /// <summary>
        /// LDAP password (relevant only for access-type&#x3D;ldap)
        /// </summary>
        /// <value>LDAP password (relevant only for access-type&#x3D;ldap)</value>
        [DataMember(Name = "ldap_password", EmitDefaultValue = false)]
        public string LdapPassword { get; set; }

        /// <summary>
        /// LDAP username (relevant only for access-type&#x3D;ldap)
        /// </summary>
        /// <value>LDAP username (relevant only for access-type&#x3D;ldap)</value>
        [DataMember(Name = "ldap_username", EmitDefaultValue = false)]
        public string LdapUsername { get; set; }

        /// <summary>
        /// The universal_identity token (relevant only for access-type&#x3D;universal_identity)
        /// </summary>
        /// <value>The universal_identity token (relevant only for access-type&#x3D;universal_identity)</value>
        [DataMember(Name = "uid_token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Auth {\n");
            sb.Append("  AccessId: ").Append(AccessId).Append("\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  AdminEmail: ").Append(AdminEmail).Append("\n");
            sb.Append("  AdminPassword: ").Append(AdminPassword).Append("\n");
            sb.Append("  CertData: ").Append(CertData).Append("\n");
            sb.Append("  CloudId: ").Append(CloudId).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  GcpAudience: ").Append(GcpAudience).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Jwt: ").Append(Jwt).Append("\n");
            sb.Append("  K8sAuthConfigName: ").Append(K8sAuthConfigName).Append("\n");
            sb.Append("  K8sServiceAccountToken: ").Append(K8sServiceAccountToken).Append("\n");
            sb.Append("  KeyData: ").Append(KeyData).Append("\n");
            sb.Append("  LdapPassword: ").Append(LdapPassword).Append("\n");
            sb.Append("  LdapUsername: ").Append(LdapUsername).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Auth);
        }

        /// <summary>
        /// Returns true if Auth instances are equal
        /// </summary>
        /// <param name="input">Instance of Auth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Auth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessId == input.AccessId ||
                    (this.AccessId != null &&
                    this.AccessId.Equals(input.AccessId))
                ) && 
                (
                    this.AccessKey == input.AccessKey ||
                    (this.AccessKey != null &&
                    this.AccessKey.Equals(input.AccessKey))
                ) && 
                (
                    this.AccessType == input.AccessType ||
                    (this.AccessType != null &&
                    this.AccessType.Equals(input.AccessType))
                ) && 
                (
                    this.AdminEmail == input.AdminEmail ||
                    (this.AdminEmail != null &&
                    this.AdminEmail.Equals(input.AdminEmail))
                ) && 
                (
                    this.AdminPassword == input.AdminPassword ||
                    (this.AdminPassword != null &&
                    this.AdminPassword.Equals(input.AdminPassword))
                ) && 
                (
                    this.CertData == input.CertData ||
                    (this.CertData != null &&
                    this.CertData.Equals(input.CertData))
                ) && 
                (
                    this.CloudId == input.CloudId ||
                    (this.CloudId != null &&
                    this.CloudId.Equals(input.CloudId))
                ) && 
                (
                    this.Debug == input.Debug ||
                    this.Debug.Equals(input.Debug)
                ) && 
                (
                    this.GcpAudience == input.GcpAudience ||
                    (this.GcpAudience != null &&
                    this.GcpAudience.Equals(input.GcpAudience))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Jwt == input.Jwt ||
                    (this.Jwt != null &&
                    this.Jwt.Equals(input.Jwt))
                ) && 
                (
                    this.K8sAuthConfigName == input.K8sAuthConfigName ||
                    (this.K8sAuthConfigName != null &&
                    this.K8sAuthConfigName.Equals(input.K8sAuthConfigName))
                ) && 
                (
                    this.K8sServiceAccountToken == input.K8sServiceAccountToken ||
                    (this.K8sServiceAccountToken != null &&
                    this.K8sServiceAccountToken.Equals(input.K8sServiceAccountToken))
                ) && 
                (
                    this.KeyData == input.KeyData ||
                    (this.KeyData != null &&
                    this.KeyData.Equals(input.KeyData))
                ) && 
                (
                    this.LdapPassword == input.LdapPassword ||
                    (this.LdapPassword != null &&
                    this.LdapPassword.Equals(input.LdapPassword))
                ) && 
                (
                    this.LdapUsername == input.LdapUsername ||
                    (this.LdapUsername != null &&
                    this.LdapUsername.Equals(input.LdapUsername))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessId != null)
                    hashCode = hashCode * 59 + this.AccessId.GetHashCode();
                if (this.AccessKey != null)
                    hashCode = hashCode * 59 + this.AccessKey.GetHashCode();
                if (this.AccessType != null)
                    hashCode = hashCode * 59 + this.AccessType.GetHashCode();
                if (this.AdminEmail != null)
                    hashCode = hashCode * 59 + this.AdminEmail.GetHashCode();
                if (this.AdminPassword != null)
                    hashCode = hashCode * 59 + this.AdminPassword.GetHashCode();
                if (this.CertData != null)
                    hashCode = hashCode * 59 + this.CertData.GetHashCode();
                if (this.CloudId != null)
                    hashCode = hashCode * 59 + this.CloudId.GetHashCode();
                hashCode = hashCode * 59 + this.Debug.GetHashCode();
                if (this.GcpAudience != null)
                    hashCode = hashCode * 59 + this.GcpAudience.GetHashCode();
                hashCode = hashCode * 59 + this.Json.GetHashCode();
                if (this.Jwt != null)
                    hashCode = hashCode * 59 + this.Jwt.GetHashCode();
                if (this.K8sAuthConfigName != null)
                    hashCode = hashCode * 59 + this.K8sAuthConfigName.GetHashCode();
                if (this.K8sServiceAccountToken != null)
                    hashCode = hashCode * 59 + this.K8sServiceAccountToken.GetHashCode();
                if (this.KeyData != null)
                    hashCode = hashCode * 59 + this.KeyData.GetHashCode();
                if (this.LdapPassword != null)
                    hashCode = hashCode * 59 + this.LdapPassword.GetHashCode();
                if (this.LdapUsername != null)
                    hashCode = hashCode * 59 + this.LdapUsername.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
