/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ClientData
    /// </summary>
    [DataContract]
    public partial class ClientData :  IEquatable<ClientData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientData" /> class.
        /// </summary>
        /// <param name="clientCertificateData">clientCertificateData.</param>
        /// <param name="clientKeyData">clientKeyData.</param>
        public ClientData(string clientCertificateData = default(string), string clientKeyData = default(string))
        {
            this.ClientCertificateData = clientCertificateData;
            this.ClientKeyData = clientKeyData;
        }
        
        /// <summary>
        /// Gets or Sets ClientCertificateData
        /// </summary>
        [DataMember(Name="clientCertificateData", EmitDefaultValue=false)]
        public string ClientCertificateData { get; set; }

        /// <summary>
        /// Gets or Sets ClientKeyData
        /// </summary>
        [DataMember(Name="clientKeyData", EmitDefaultValue=false)]
        public string ClientKeyData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientData {\n");
            sb.Append("  ClientCertificateData: ").Append(ClientCertificateData).Append("\n");
            sb.Append("  ClientKeyData: ").Append(ClientKeyData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientData);
        }

        /// <summary>
        /// Returns true if ClientData instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientCertificateData == input.ClientCertificateData ||
                    (this.ClientCertificateData != null &&
                    this.ClientCertificateData.Equals(input.ClientCertificateData))
                ) && 
                (
                    this.ClientKeyData == input.ClientKeyData ||
                    (this.ClientKeyData != null &&
                    this.ClientKeyData.Equals(input.ClientKeyData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientCertificateData != null)
                    hashCode = hashCode * 59 + this.ClientCertificateData.GetHashCode();
                if (this.ClientKeyData != null)
                    hashCode = hashCode * 59 + this.ClientKeyData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
