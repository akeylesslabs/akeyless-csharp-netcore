/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// ConfigChange
    /// </summary>
    [DataContract]
    public partial class ConfigChange :  IEquatable<ConfigChange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigChange" /> class.
        /// </summary>
        /// <param name="configHash">configHash.</param>
        /// <param name="lastChange">lastChange.</param>
        /// <param name="lastStatus">lastStatus.</param>
        /// <param name="requiredActivity">requiredActivity.</param>
        /// <param name="updateStamp">updateStamp.</param>
        public ConfigChange(ConfigHash configHash = default(ConfigHash), LastConfigChange lastChange = default(LastConfigChange), LastStatusInfo lastStatus = default(LastStatusInfo), RequiredActivity requiredActivity = default(RequiredActivity), long updateStamp = default(long))
        {
            this.ConfigHash = configHash;
            this.LastChange = lastChange;
            this.LastStatus = lastStatus;
            this.RequiredActivity = requiredActivity;
            this.UpdateStamp = updateStamp;
        }
        
        /// <summary>
        /// Gets or Sets ConfigHash
        /// </summary>
        [DataMember(Name="config_hash", EmitDefaultValue=false)]
        public ConfigHash ConfigHash { get; set; }

        /// <summary>
        /// Gets or Sets LastChange
        /// </summary>
        [DataMember(Name="last_change", EmitDefaultValue=false)]
        public LastConfigChange LastChange { get; set; }

        /// <summary>
        /// Gets or Sets LastStatus
        /// </summary>
        [DataMember(Name="last_status", EmitDefaultValue=false)]
        public LastStatusInfo LastStatus { get; set; }

        /// <summary>
        /// Gets or Sets RequiredActivity
        /// </summary>
        [DataMember(Name="required_activity", EmitDefaultValue=false)]
        public RequiredActivity RequiredActivity { get; set; }

        /// <summary>
        /// Gets or Sets UpdateStamp
        /// </summary>
        [DataMember(Name="update_stamp", EmitDefaultValue=false)]
        public long UpdateStamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigChange {\n");
            sb.Append("  ConfigHash: ").Append(ConfigHash).Append("\n");
            sb.Append("  LastChange: ").Append(LastChange).Append("\n");
            sb.Append("  LastStatus: ").Append(LastStatus).Append("\n");
            sb.Append("  RequiredActivity: ").Append(RequiredActivity).Append("\n");
            sb.Append("  UpdateStamp: ").Append(UpdateStamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigChange);
        }

        /// <summary>
        /// Returns true if ConfigChange instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigChange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigChange input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConfigHash == input.ConfigHash ||
                    (this.ConfigHash != null &&
                    this.ConfigHash.Equals(input.ConfigHash))
                ) && 
                (
                    this.LastChange == input.LastChange ||
                    (this.LastChange != null &&
                    this.LastChange.Equals(input.LastChange))
                ) && 
                (
                    this.LastStatus == input.LastStatus ||
                    (this.LastStatus != null &&
                    this.LastStatus.Equals(input.LastStatus))
                ) && 
                (
                    this.RequiredActivity == input.RequiredActivity ||
                    (this.RequiredActivity != null &&
                    this.RequiredActivity.Equals(input.RequiredActivity))
                ) && 
                (
                    this.UpdateStamp == input.UpdateStamp ||
                    this.UpdateStamp.Equals(input.UpdateStamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConfigHash != null)
                    hashCode = hashCode * 59 + this.ConfigHash.GetHashCode();
                if (this.LastChange != null)
                    hashCode = hashCode * 59 + this.LastChange.GetHashCode();
                if (this.LastStatus != null)
                    hashCode = hashCode * 59 + this.LastStatus.GetHashCode();
                if (this.RequiredActivity != null)
                    hashCode = hashCode * 59 + this.RequiredActivity.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateStamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
