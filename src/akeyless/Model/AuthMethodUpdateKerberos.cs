/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// authMethodUpdateKerberos is a command that updates an auth method that will be able to authenticate using Kerberos
    /// </summary>
    [DataContract(Name = "authMethodUpdateKerberos")]
    public partial class AuthMethodUpdateKerberos : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthMethodUpdateKerberos" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthMethodUpdateKerberos() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthMethodUpdateKerberos" /> class.
        /// </summary>
        /// <param name="accessExpires">Access expiration date in Unix timestamp (select 0 for access without expiry date) (default to 0).</param>
        /// <param name="auditLogsClaims">Subclaims to include in audit logs, e.g \&quot;- -audit-logs-claims email - -audit-logs-claims username\&quot;.</param>
        /// <param name="bindDn">bindDn.</param>
        /// <param name="bindDnPassword">bindDnPassword.</param>
        /// <param name="boundIps">A CIDR whitelist with the IPs that the access is restricted to.</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="description">Auth Method description.</param>
        /// <param name="expirationEventIn">How many days before the expiration of the auth method would you like to be notified..</param>
        /// <param name="forceSubClaims">if true: enforce role-association must include sub claims.</param>
        /// <param name="groupAttr">groupAttr.</param>
        /// <param name="groupDn">groupDn.</param>
        /// <param name="groupFilter">groupFilter.</param>
        /// <param name="gwBoundIps">A CIDR whitelist with the GW IPs that the access is restricted to.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="jwtTtl">Jwt TTL (default to 0).</param>
        /// <param name="keytabFileData">keytabFileData.</param>
        /// <param name="keytabFilePath">keytabFilePath.</param>
        /// <param name="krb5ConfData">krb5ConfData.</param>
        /// <param name="krb5ConfPath">krb5ConfPath.</param>
        /// <param name="ldapAnonymousSearch">ldapAnonymousSearch.</param>
        /// <param name="ldapCaCert">ldapCaCert.</param>
        /// <param name="ldapUrl">ldapUrl.</param>
        /// <param name="name">Auth Method name (required).</param>
        /// <param name="newName">newName.</param>
        /// <param name="productType">Choose the relevant product type for the auth method [sm, sra, pm, dp, ca].</param>
        /// <param name="subclaimsDelimiters">A list of additional sub claims delimiters (relevant only for SAML, OIDC, OAuth2/JWT).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="uniqueIdentifier">A unique identifier (ID) value which is a \&quot;sub claim\&quot; name that contains details uniquely identifying that resource. This \&quot;sub claim\&quot; is used to distinguish between different identities..</param>
        /// <param name="userAttribute">userAttribute.</param>
        /// <param name="userDn">userDn.</param>
        public AuthMethodUpdateKerberos(long accessExpires = 0, List<string> auditLogsClaims = default(List<string>), string bindDn = default(string), string bindDnPassword = default(string), List<string> boundIps = default(List<string>), string deleteProtection = default(string), string description = default(string), List<string> expirationEventIn = default(List<string>), bool forceSubClaims = default(bool), string groupAttr = default(string), string groupDn = default(string), string groupFilter = default(string), List<string> gwBoundIps = default(List<string>), bool json = false, long jwtTtl = 0, string keytabFileData = default(string), string keytabFilePath = default(string), string krb5ConfData = default(string), string krb5ConfPath = default(string), bool ldapAnonymousSearch = default(bool), string ldapCaCert = default(string), string ldapUrl = default(string), string name = default(string), string newName = default(string), List<string> productType = default(List<string>), List<string> subclaimsDelimiters = default(List<string>), string token = default(string), string uidToken = default(string), string uniqueIdentifier = default(string), string userAttribute = default(string), string userDn = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AuthMethodUpdateKerberos and cannot be null");
            }
            this.Name = name;
            this.AccessExpires = accessExpires;
            this.AuditLogsClaims = auditLogsClaims;
            this.BindDn = bindDn;
            this.BindDnPassword = bindDnPassword;
            this.BoundIps = boundIps;
            this.DeleteProtection = deleteProtection;
            this.Description = description;
            this.ExpirationEventIn = expirationEventIn;
            this.ForceSubClaims = forceSubClaims;
            this.GroupAttr = groupAttr;
            this.GroupDn = groupDn;
            this.GroupFilter = groupFilter;
            this.GwBoundIps = gwBoundIps;
            this.Json = json;
            this.JwtTtl = jwtTtl;
            this.KeytabFileData = keytabFileData;
            this.KeytabFilePath = keytabFilePath;
            this.Krb5ConfData = krb5ConfData;
            this.Krb5ConfPath = krb5ConfPath;
            this.LdapAnonymousSearch = ldapAnonymousSearch;
            this.LdapCaCert = ldapCaCert;
            this.LdapUrl = ldapUrl;
            this.NewName = newName;
            this.ProductType = productType;
            this.SubclaimsDelimiters = subclaimsDelimiters;
            this.Token = token;
            this.UidToken = uidToken;
            this.UniqueIdentifier = uniqueIdentifier;
            this.UserAttribute = userAttribute;
            this.UserDn = userDn;
        }

        /// <summary>
        /// Access expiration date in Unix timestamp (select 0 for access without expiry date)
        /// </summary>
        /// <value>Access expiration date in Unix timestamp (select 0 for access without expiry date)</value>
        [DataMember(Name = "access-expires", EmitDefaultValue = false)]
        public long AccessExpires { get; set; }

        /// <summary>
        /// Subclaims to include in audit logs, e.g \&quot;- -audit-logs-claims email - -audit-logs-claims username\&quot;
        /// </summary>
        /// <value>Subclaims to include in audit logs, e.g \&quot;- -audit-logs-claims email - -audit-logs-claims username\&quot;</value>
        [DataMember(Name = "audit-logs-claims", EmitDefaultValue = false)]
        public List<string> AuditLogsClaims { get; set; }

        /// <summary>
        /// Gets or Sets BindDn
        /// </summary>
        [DataMember(Name = "bind-dn", EmitDefaultValue = false)]
        public string BindDn { get; set; }

        /// <summary>
        /// Gets or Sets BindDnPassword
        /// </summary>
        [DataMember(Name = "bind-dn-password", EmitDefaultValue = false)]
        public string BindDnPassword { get; set; }

        /// <summary>
        /// A CIDR whitelist with the IPs that the access is restricted to
        /// </summary>
        /// <value>A CIDR whitelist with the IPs that the access is restricted to</value>
        [DataMember(Name = "bound-ips", EmitDefaultValue = false)]
        public List<string> BoundIps { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Auth Method description
        /// </summary>
        /// <value>Auth Method description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// How many days before the expiration of the auth method would you like to be notified.
        /// </summary>
        /// <value>How many days before the expiration of the auth method would you like to be notified.</value>
        [DataMember(Name = "expiration-event-in", EmitDefaultValue = false)]
        public List<string> ExpirationEventIn { get; set; }

        /// <summary>
        /// if true: enforce role-association must include sub claims
        /// </summary>
        /// <value>if true: enforce role-association must include sub claims</value>
        [DataMember(Name = "force-sub-claims", EmitDefaultValue = true)]
        public bool ForceSubClaims { get; set; }

        /// <summary>
        /// Gets or Sets GroupAttr
        /// </summary>
        [DataMember(Name = "group-attr", EmitDefaultValue = false)]
        public string GroupAttr { get; set; }

        /// <summary>
        /// Gets or Sets GroupDn
        /// </summary>
        [DataMember(Name = "group-dn", EmitDefaultValue = false)]
        public string GroupDn { get; set; }

        /// <summary>
        /// Gets or Sets GroupFilter
        /// </summary>
        [DataMember(Name = "group-filter", EmitDefaultValue = false)]
        public string GroupFilter { get; set; }

        /// <summary>
        /// A CIDR whitelist with the GW IPs that the access is restricted to
        /// </summary>
        /// <value>A CIDR whitelist with the GW IPs that the access is restricted to</value>
        [DataMember(Name = "gw-bound-ips", EmitDefaultValue = false)]
        public List<string> GwBoundIps { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Jwt TTL
        /// </summary>
        /// <value>Jwt TTL</value>
        [DataMember(Name = "jwt-ttl", EmitDefaultValue = false)]
        public long JwtTtl { get; set; }

        /// <summary>
        /// Gets or Sets KeytabFileData
        /// </summary>
        [DataMember(Name = "keytab-file-data", EmitDefaultValue = false)]
        public string KeytabFileData { get; set; }

        /// <summary>
        /// Gets or Sets KeytabFilePath
        /// </summary>
        [DataMember(Name = "keytab-file-path", EmitDefaultValue = false)]
        public string KeytabFilePath { get; set; }

        /// <summary>
        /// Gets or Sets Krb5ConfData
        /// </summary>
        [DataMember(Name = "krb5-conf-data", EmitDefaultValue = false)]
        public string Krb5ConfData { get; set; }

        /// <summary>
        /// Gets or Sets Krb5ConfPath
        /// </summary>
        [DataMember(Name = "krb5-conf-path", EmitDefaultValue = false)]
        public string Krb5ConfPath { get; set; }

        /// <summary>
        /// Gets or Sets LdapAnonymousSearch
        /// </summary>
        [DataMember(Name = "ldap-anonymous-search", EmitDefaultValue = true)]
        public bool LdapAnonymousSearch { get; set; }

        /// <summary>
        /// Gets or Sets LdapCaCert
        /// </summary>
        [DataMember(Name = "ldap-ca-cert", EmitDefaultValue = false)]
        public string LdapCaCert { get; set; }

        /// <summary>
        /// Gets or Sets LdapUrl
        /// </summary>
        [DataMember(Name = "ldap-url", EmitDefaultValue = false)]
        public string LdapUrl { get; set; }

        /// <summary>
        /// Auth Method name
        /// </summary>
        /// <value>Auth Method name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NewName
        /// </summary>
        [DataMember(Name = "new-name", EmitDefaultValue = false)]
        public string NewName { get; set; }

        /// <summary>
        /// Choose the relevant product type for the auth method [sm, sra, pm, dp, ca]
        /// </summary>
        /// <value>Choose the relevant product type for the auth method [sm, sra, pm, dp, ca]</value>
        [DataMember(Name = "product-type", EmitDefaultValue = false)]
        public List<string> ProductType { get; set; }

        /// <summary>
        /// A list of additional sub claims delimiters (relevant only for SAML, OIDC, OAuth2/JWT)
        /// </summary>
        /// <value>A list of additional sub claims delimiters (relevant only for SAML, OIDC, OAuth2/JWT)</value>
        [DataMember(Name = "subclaims-delimiters", EmitDefaultValue = false)]
        public List<string> SubclaimsDelimiters { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// A unique identifier (ID) value which is a \&quot;sub claim\&quot; name that contains details uniquely identifying that resource. This \&quot;sub claim\&quot; is used to distinguish between different identities.
        /// </summary>
        /// <value>A unique identifier (ID) value which is a \&quot;sub claim\&quot; name that contains details uniquely identifying that resource. This \&quot;sub claim\&quot; is used to distinguish between different identities.</value>
        [DataMember(Name = "unique-identifier", EmitDefaultValue = false)]
        public string UniqueIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets UserAttribute
        /// </summary>
        [DataMember(Name = "user-attribute", EmitDefaultValue = false)]
        public string UserAttribute { get; set; }

        /// <summary>
        /// Gets or Sets UserDn
        /// </summary>
        [DataMember(Name = "user-dn", EmitDefaultValue = false)]
        public string UserDn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthMethodUpdateKerberos {\n");
            sb.Append("  AccessExpires: ").Append(AccessExpires).Append("\n");
            sb.Append("  AuditLogsClaims: ").Append(AuditLogsClaims).Append("\n");
            sb.Append("  BindDn: ").Append(BindDn).Append("\n");
            sb.Append("  BindDnPassword: ").Append(BindDnPassword).Append("\n");
            sb.Append("  BoundIps: ").Append(BoundIps).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpirationEventIn: ").Append(ExpirationEventIn).Append("\n");
            sb.Append("  ForceSubClaims: ").Append(ForceSubClaims).Append("\n");
            sb.Append("  GroupAttr: ").Append(GroupAttr).Append("\n");
            sb.Append("  GroupDn: ").Append(GroupDn).Append("\n");
            sb.Append("  GroupFilter: ").Append(GroupFilter).Append("\n");
            sb.Append("  GwBoundIps: ").Append(GwBoundIps).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  JwtTtl: ").Append(JwtTtl).Append("\n");
            sb.Append("  KeytabFileData: ").Append(KeytabFileData).Append("\n");
            sb.Append("  KeytabFilePath: ").Append(KeytabFilePath).Append("\n");
            sb.Append("  Krb5ConfData: ").Append(Krb5ConfData).Append("\n");
            sb.Append("  Krb5ConfPath: ").Append(Krb5ConfPath).Append("\n");
            sb.Append("  LdapAnonymousSearch: ").Append(LdapAnonymousSearch).Append("\n");
            sb.Append("  LdapCaCert: ").Append(LdapCaCert).Append("\n");
            sb.Append("  LdapUrl: ").Append(LdapUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  SubclaimsDelimiters: ").Append(SubclaimsDelimiters).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UniqueIdentifier: ").Append(UniqueIdentifier).Append("\n");
            sb.Append("  UserAttribute: ").Append(UserAttribute).Append("\n");
            sb.Append("  UserDn: ").Append(UserDn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
