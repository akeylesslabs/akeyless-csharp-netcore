/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayUpdateCache is a command that updates cache settings
    /// </summary>
    [DataContract(Name = "gatewayUpdateCache")]
    public partial class GatewayUpdateCache : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateCache" /> class.
        /// </summary>
        /// <param name="backupInterval">Secure backup interval in minutes. To ensure service continuity in case of power cycle and network outage secrets will be backed up periodically per backup interval (default to &quot;1&quot;).</param>
        /// <param name="enableCache">Enable cache [true/false].</param>
        /// <param name="enableProactive">Enable proactive caching [true/false].</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="minimumFetchInterval">When using Cache or/and Proactive Cache, additional secrets will be fetched upon requesting a secret, based on the requestor&#39;s access policy. Define minimum fetching interval to avoid over fetching in a given time frame (default to &quot;5&quot;).</param>
        /// <param name="staleTimeout">Stale timeout in minutes, cache entries which are not accessed within timeout will be removed from cache (default to &quot;60&quot;).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GatewayUpdateCache(string backupInterval = @"1", string enableCache = default(string), string enableProactive = default(string), bool json = false, string minimumFetchInterval = @"5", string staleTimeout = @"60", string token = default(string), string uidToken = default(string))
        {
            // use default value if no "backupInterval" provided
            this.BackupInterval = backupInterval ?? @"1";
            this.EnableCache = enableCache;
            this.EnableProactive = enableProactive;
            this.Json = json;
            // use default value if no "minimumFetchInterval" provided
            this.MinimumFetchInterval = minimumFetchInterval ?? @"5";
            // use default value if no "staleTimeout" provided
            this.StaleTimeout = staleTimeout ?? @"60";
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Secure backup interval in minutes. To ensure service continuity in case of power cycle and network outage secrets will be backed up periodically per backup interval
        /// </summary>
        /// <value>Secure backup interval in minutes. To ensure service continuity in case of power cycle and network outage secrets will be backed up periodically per backup interval</value>
        [DataMember(Name = "backup-interval", EmitDefaultValue = false)]
        public string BackupInterval { get; set; }

        /// <summary>
        /// Enable cache [true/false]
        /// </summary>
        /// <value>Enable cache [true/false]</value>
        [DataMember(Name = "enable-cache", EmitDefaultValue = false)]
        public string EnableCache { get; set; }

        /// <summary>
        /// Enable proactive caching [true/false]
        /// </summary>
        /// <value>Enable proactive caching [true/false]</value>
        [DataMember(Name = "enable-proactive", EmitDefaultValue = false)]
        public string EnableProactive { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// When using Cache or/and Proactive Cache, additional secrets will be fetched upon requesting a secret, based on the requestor&#39;s access policy. Define minimum fetching interval to avoid over fetching in a given time frame
        /// </summary>
        /// <value>When using Cache or/and Proactive Cache, additional secrets will be fetched upon requesting a secret, based on the requestor&#39;s access policy. Define minimum fetching interval to avoid over fetching in a given time frame</value>
        [DataMember(Name = "minimum-fetch-interval", EmitDefaultValue = false)]
        public string MinimumFetchInterval { get; set; }

        /// <summary>
        /// Stale timeout in minutes, cache entries which are not accessed within timeout will be removed from cache
        /// </summary>
        /// <value>Stale timeout in minutes, cache entries which are not accessed within timeout will be removed from cache</value>
        [DataMember(Name = "stale-timeout", EmitDefaultValue = false)]
        public string StaleTimeout { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayUpdateCache {\n");
            sb.Append("  BackupInterval: ").Append(BackupInterval).Append("\n");
            sb.Append("  EnableCache: ").Append(EnableCache).Append("\n");
            sb.Append("  EnableProactive: ").Append(EnableProactive).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  MinimumFetchInterval: ").Append(MinimumFetchInterval).Append("\n");
            sb.Append("  StaleTimeout: ").Append(StaleTimeout).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
