/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateProducerGke is a command that creates gke producer
    /// </summary>
    [DataContract]
    public partial class GatewayCreateProducerGke :  IEquatable<GatewayCreateProducerGke>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerGke" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerGke() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerGke" /> class.
        /// </summary>
        /// <param name="gkeAccountKey">GKE Service Account key file path.</param>
        /// <param name="gkeClusterCert">GKE cluster CA certificate.</param>
        /// <param name="gkeClusterEndpoint">GKE cluster URL endpoint.</param>
        /// <param name="gkeClusterName">GKE cluster name.</param>
        /// <param name="gkeServiceAccountEmail">GKE service account email.</param>
        /// <param name="name">Producer name (required).</param>
        /// <param name="password">Required only when the authentication process requires a username and password.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="secureAccessAllowPortForwading">secureAccessAllowPortForwading.</param>
        /// <param name="secureAccessBastionIssuer">secureAccessBastionIssuer.</param>
        /// <param name="secureAccessClusterEndpoint">secureAccessClusterEndpoint.</param>
        /// <param name="secureAccessEnable">secureAccessEnable.</param>
        /// <param name="secureAccessWeb">secureAccessWeb.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        /// <param name="username">Required only when the authentication process requires a username and password.</param>
        public GatewayCreateProducerGke(string gkeAccountKey = default(string), string gkeClusterCert = default(string), string gkeClusterEndpoint = default(string), string gkeClusterName = default(string), string gkeServiceAccountEmail = default(string), string name = default(string), string password = default(string), string producerEncryptionKeyName = default(string), bool secureAccessAllowPortForwading = default(bool), string secureAccessBastionIssuer = default(string), string secureAccessClusterEndpoint = default(string), string secureAccessEnable = default(string), bool secureAccessWeb = default(bool), string targetName = default(string), string token = default(string), string uidToken = default(string), string userTtl = "60m", string username = default(string))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for GatewayCreateProducerGke and cannot be null");
            this.GkeAccountKey = gkeAccountKey;
            this.GkeClusterCert = gkeClusterCert;
            this.GkeClusterEndpoint = gkeClusterEndpoint;
            this.GkeClusterName = gkeClusterName;
            this.GkeServiceAccountEmail = gkeServiceAccountEmail;
            this.Password = password;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.SecureAccessAllowPortForwading = secureAccessAllowPortForwading;
            this.SecureAccessBastionIssuer = secureAccessBastionIssuer;
            this.SecureAccessClusterEndpoint = secureAccessClusterEndpoint;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessWeb = secureAccessWeb;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "60m";
            this.Username = username;
        }
        
        /// <summary>
        /// GKE Service Account key file path
        /// </summary>
        /// <value>GKE Service Account key file path</value>
        [DataMember(Name="gke-account-key", EmitDefaultValue=false)]
        public string GkeAccountKey { get; set; }

        /// <summary>
        /// GKE cluster CA certificate
        /// </summary>
        /// <value>GKE cluster CA certificate</value>
        [DataMember(Name="gke-cluster-cert", EmitDefaultValue=false)]
        public string GkeClusterCert { get; set; }

        /// <summary>
        /// GKE cluster URL endpoint
        /// </summary>
        /// <value>GKE cluster URL endpoint</value>
        [DataMember(Name="gke-cluster-endpoint", EmitDefaultValue=false)]
        public string GkeClusterEndpoint { get; set; }

        /// <summary>
        /// GKE cluster name
        /// </summary>
        /// <value>GKE cluster name</value>
        [DataMember(Name="gke-cluster-name", EmitDefaultValue=false)]
        public string GkeClusterName { get; set; }

        /// <summary>
        /// GKE service account email
        /// </summary>
        /// <value>GKE service account email</value>
        [DataMember(Name="gke-service-account-email", EmitDefaultValue=false)]
        public string GkeServiceAccountEmail { get; set; }

        /// <summary>
        /// Producer name
        /// </summary>
        /// <value>Producer name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name="producer-encryption-key-name", EmitDefaultValue=false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessAllowPortForwading
        /// </summary>
        [DataMember(Name="secure-access-allow-port-forwading", EmitDefaultValue=false)]
        public bool SecureAccessAllowPortForwading { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessBastionIssuer
        /// </summary>
        [DataMember(Name="secure-access-bastion-issuer", EmitDefaultValue=false)]
        public string SecureAccessBastionIssuer { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessClusterEndpoint
        /// </summary>
        [DataMember(Name="secure-access-cluster-endpoint", EmitDefaultValue=false)]
        public string SecureAccessClusterEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessEnable
        /// </summary>
        [DataMember(Name="secure-access-enable", EmitDefaultValue=false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Gets or Sets SecureAccessWeb
        /// </summary>
        [DataMember(Name="secure-access-web", EmitDefaultValue=false)]
        public bool SecureAccessWeb { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name="target-name", EmitDefaultValue=false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name="user-ttl", EmitDefaultValue=false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerGke {\n");
            sb.Append("  GkeAccountKey: ").Append(GkeAccountKey).Append("\n");
            sb.Append("  GkeClusterCert: ").Append(GkeClusterCert).Append("\n");
            sb.Append("  GkeClusterEndpoint: ").Append(GkeClusterEndpoint).Append("\n");
            sb.Append("  GkeClusterName: ").Append(GkeClusterName).Append("\n");
            sb.Append("  GkeServiceAccountEmail: ").Append(GkeServiceAccountEmail).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  SecureAccessAllowPortForwading: ").Append(SecureAccessAllowPortForwading).Append("\n");
            sb.Append("  SecureAccessBastionIssuer: ").Append(SecureAccessBastionIssuer).Append("\n");
            sb.Append("  SecureAccessClusterEndpoint: ").Append(SecureAccessClusterEndpoint).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessWeb: ").Append(SecureAccessWeb).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayCreateProducerGke);
        }

        /// <summary>
        /// Returns true if GatewayCreateProducerGke instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayCreateProducerGke to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayCreateProducerGke input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GkeAccountKey == input.GkeAccountKey ||
                    (this.GkeAccountKey != null &&
                    this.GkeAccountKey.Equals(input.GkeAccountKey))
                ) && 
                (
                    this.GkeClusterCert == input.GkeClusterCert ||
                    (this.GkeClusterCert != null &&
                    this.GkeClusterCert.Equals(input.GkeClusterCert))
                ) && 
                (
                    this.GkeClusterEndpoint == input.GkeClusterEndpoint ||
                    (this.GkeClusterEndpoint != null &&
                    this.GkeClusterEndpoint.Equals(input.GkeClusterEndpoint))
                ) && 
                (
                    this.GkeClusterName == input.GkeClusterName ||
                    (this.GkeClusterName != null &&
                    this.GkeClusterName.Equals(input.GkeClusterName))
                ) && 
                (
                    this.GkeServiceAccountEmail == input.GkeServiceAccountEmail ||
                    (this.GkeServiceAccountEmail != null &&
                    this.GkeServiceAccountEmail.Equals(input.GkeServiceAccountEmail))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.SecureAccessAllowPortForwading == input.SecureAccessAllowPortForwading ||
                    this.SecureAccessAllowPortForwading.Equals(input.SecureAccessAllowPortForwading)
                ) && 
                (
                    this.SecureAccessBastionIssuer == input.SecureAccessBastionIssuer ||
                    (this.SecureAccessBastionIssuer != null &&
                    this.SecureAccessBastionIssuer.Equals(input.SecureAccessBastionIssuer))
                ) && 
                (
                    this.SecureAccessClusterEndpoint == input.SecureAccessClusterEndpoint ||
                    (this.SecureAccessClusterEndpoint != null &&
                    this.SecureAccessClusterEndpoint.Equals(input.SecureAccessClusterEndpoint))
                ) && 
                (
                    this.SecureAccessEnable == input.SecureAccessEnable ||
                    (this.SecureAccessEnable != null &&
                    this.SecureAccessEnable.Equals(input.SecureAccessEnable))
                ) && 
                (
                    this.SecureAccessWeb == input.SecureAccessWeb ||
                    this.SecureAccessWeb.Equals(input.SecureAccessWeb)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GkeAccountKey != null)
                    hashCode = hashCode * 59 + this.GkeAccountKey.GetHashCode();
                if (this.GkeClusterCert != null)
                    hashCode = hashCode * 59 + this.GkeClusterCert.GetHashCode();
                if (this.GkeClusterEndpoint != null)
                    hashCode = hashCode * 59 + this.GkeClusterEndpoint.GetHashCode();
                if (this.GkeClusterName != null)
                    hashCode = hashCode * 59 + this.GkeClusterName.GetHashCode();
                if (this.GkeServiceAccountEmail != null)
                    hashCode = hashCode * 59 + this.GkeServiceAccountEmail.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.ProducerEncryptionKeyName != null)
                    hashCode = hashCode * 59 + this.ProducerEncryptionKeyName.GetHashCode();
                hashCode = hashCode * 59 + this.SecureAccessAllowPortForwading.GetHashCode();
                if (this.SecureAccessBastionIssuer != null)
                    hashCode = hashCode * 59 + this.SecureAccessBastionIssuer.GetHashCode();
                if (this.SecureAccessClusterEndpoint != null)
                    hashCode = hashCode * 59 + this.SecureAccessClusterEndpoint.GetHashCode();
                if (this.SecureAccessEnable != null)
                    hashCode = hashCode * 59 + this.SecureAccessEnable.GetHashCode();
                hashCode = hashCode * 59 + this.SecureAccessWeb.GetHashCode();
                if (this.TargetName != null)
                    hashCode = hashCode * 59 + this.TargetName.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.UserTtl != null)
                    hashCode = hashCode * 59 + this.UserTtl.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
