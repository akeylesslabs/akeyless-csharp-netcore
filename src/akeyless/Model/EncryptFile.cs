/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// EncryptFile
    /// </summary>
    [DataContract(Name = "encryptFile")]
    public partial class EncryptFile : IEquatable<EncryptFile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EncryptFile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EncryptFile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EncryptFile" /> class.
        /// </summary>
        /// <param name="encryptionContext">name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the decrypt command or decryption will fail.</param>
        /// <param name="_in">Path to the file to be encrypted. If not provided, the content will be taken from stdin (required).</param>
        /// <param name="keyName">The name of the key to use in the encryption process (required).</param>
        /// <param name="_out">Path to the output file. If not provided, the output will be sent to stdout.</param>
        /// <param name="password">Required only when the authentication process requires a username and password.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="username">Required only when the authentication process requires a username and password.</param>
        public EncryptFile(Dictionary<string, string> encryptionContext = default(Dictionary<string, string>), string _in = default(string), string keyName = default(string), string _out = default(string), string password = default(string), string token = default(string), string uidToken = default(string), string username = default(string))
        {
            // to ensure "_in" is required (not null)
            if (_in == null) {
                throw new ArgumentNullException("_in is a required property for EncryptFile and cannot be null");
            }
            this.In = _in;
            // to ensure "keyName" is required (not null)
            if (keyName == null) {
                throw new ArgumentNullException("keyName is a required property for EncryptFile and cannot be null");
            }
            this.KeyName = keyName;
            this.EncryptionContext = encryptionContext;
            this.Out = _out;
            this.Password = password;
            this.Token = token;
            this.UidToken = uidToken;
            this.Username = username;
        }

        /// <summary>
        /// name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the decrypt command or decryption will fail
        /// </summary>
        /// <value>name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the decrypt command or decryption will fail</value>
        [DataMember(Name = "encryption-context", EmitDefaultValue = false)]
        public Dictionary<string, string> EncryptionContext { get; set; }

        /// <summary>
        /// Path to the file to be encrypted. If not provided, the content will be taken from stdin
        /// </summary>
        /// <value>Path to the file to be encrypted. If not provided, the content will be taken from stdin</value>
        [DataMember(Name = "in", IsRequired = true, EmitDefaultValue = false)]
        public string In { get; set; }

        /// <summary>
        /// The name of the key to use in the encryption process
        /// </summary>
        /// <value>The name of the key to use in the encryption process</value>
        [DataMember(Name = "key-name", IsRequired = true, EmitDefaultValue = false)]
        public string KeyName { get; set; }

        /// <summary>
        /// Path to the output file. If not provided, the output will be sent to stdout
        /// </summary>
        /// <value>Path to the output file. If not provided, the output will be sent to stdout</value>
        [DataMember(Name = "out", EmitDefaultValue = false)]
        public string Out { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EncryptFile {\n");
            sb.Append("  EncryptionContext: ").Append(EncryptionContext).Append("\n");
            sb.Append("  In: ").Append(In).Append("\n");
            sb.Append("  KeyName: ").Append(KeyName).Append("\n");
            sb.Append("  Out: ").Append(Out).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EncryptFile);
        }

        /// <summary>
        /// Returns true if EncryptFile instances are equal
        /// </summary>
        /// <param name="input">Instance of EncryptFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EncryptFile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EncryptionContext == input.EncryptionContext ||
                    this.EncryptionContext != null &&
                    input.EncryptionContext != null &&
                    this.EncryptionContext.SequenceEqual(input.EncryptionContext)
                ) && 
                (
                    this.In == input.In ||
                    (this.In != null &&
                    this.In.Equals(input.In))
                ) && 
                (
                    this.KeyName == input.KeyName ||
                    (this.KeyName != null &&
                    this.KeyName.Equals(input.KeyName))
                ) && 
                (
                    this.Out == input.Out ||
                    (this.Out != null &&
                    this.Out.Equals(input.Out))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EncryptionContext != null)
                    hashCode = hashCode * 59 + this.EncryptionContext.GetHashCode();
                if (this.In != null)
                    hashCode = hashCode * 59 + this.In.GetHashCode();
                if (this.KeyName != null)
                    hashCode = hashCode * 59 + this.KeyName.GetHashCode();
                if (this.Out != null)
                    hashCode = hashCode * 59 + this.Out.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
