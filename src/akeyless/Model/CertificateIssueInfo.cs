/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CertificateIssueInfo
    /// </summary>
    [DataContract]
    public partial class CertificateIssueInfo :  IEquatable<CertificateIssueInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateIssueInfo" /> class.
        /// </summary>
        /// <param name="certIssuerType">certIssuerType.</param>
        /// <param name="maxTtl">maxTtl.</param>
        /// <param name="pkiCertIssuerDetails">pkiCertIssuerDetails.</param>
        /// <param name="sshCertIssuerDetails">sshCertIssuerDetails.</param>
        public CertificateIssueInfo(string certIssuerType = default(string), long maxTtl = default(long), PKICertificateIssueDetails pkiCertIssuerDetails = default(PKICertificateIssueDetails), SSHCertificateIssueDetails sshCertIssuerDetails = default(SSHCertificateIssueDetails))
        {
            this.CertIssuerType = certIssuerType;
            this.MaxTtl = maxTtl;
            this.PkiCertIssuerDetails = pkiCertIssuerDetails;
            this.SshCertIssuerDetails = sshCertIssuerDetails;
        }
        
        /// <summary>
        /// Gets or Sets CertIssuerType
        /// </summary>
        [DataMember(Name="cert_issuer_type", EmitDefaultValue=false)]
        public string CertIssuerType { get; set; }

        /// <summary>
        /// Gets or Sets MaxTtl
        /// </summary>
        [DataMember(Name="max_ttl", EmitDefaultValue=false)]
        public long MaxTtl { get; set; }

        /// <summary>
        /// Gets or Sets PkiCertIssuerDetails
        /// </summary>
        [DataMember(Name="pki_cert_issuer_details", EmitDefaultValue=false)]
        public PKICertificateIssueDetails PkiCertIssuerDetails { get; set; }

        /// <summary>
        /// Gets or Sets SshCertIssuerDetails
        /// </summary>
        [DataMember(Name="ssh_cert_issuer_details", EmitDefaultValue=false)]
        public SSHCertificateIssueDetails SshCertIssuerDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificateIssueInfo {\n");
            sb.Append("  CertIssuerType: ").Append(CertIssuerType).Append("\n");
            sb.Append("  MaxTtl: ").Append(MaxTtl).Append("\n");
            sb.Append("  PkiCertIssuerDetails: ").Append(PkiCertIssuerDetails).Append("\n");
            sb.Append("  SshCertIssuerDetails: ").Append(SshCertIssuerDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificateIssueInfo);
        }

        /// <summary>
        /// Returns true if CertificateIssueInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificateIssueInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateIssueInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CertIssuerType == input.CertIssuerType ||
                    (this.CertIssuerType != null &&
                    this.CertIssuerType.Equals(input.CertIssuerType))
                ) && 
                (
                    this.MaxTtl == input.MaxTtl ||
                    this.MaxTtl.Equals(input.MaxTtl)
                ) && 
                (
                    this.PkiCertIssuerDetails == input.PkiCertIssuerDetails ||
                    (this.PkiCertIssuerDetails != null &&
                    this.PkiCertIssuerDetails.Equals(input.PkiCertIssuerDetails))
                ) && 
                (
                    this.SshCertIssuerDetails == input.SshCertIssuerDetails ||
                    (this.SshCertIssuerDetails != null &&
                    this.SshCertIssuerDetails.Equals(input.SshCertIssuerDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertIssuerType != null)
                    hashCode = hashCode * 59 + this.CertIssuerType.GetHashCode();
                hashCode = hashCode * 59 + this.MaxTtl.GetHashCode();
                if (this.PkiCertIssuerDetails != null)
                    hashCode = hashCode * 59 + this.PkiCertIssuerDetails.GetHashCode();
                if (this.SshCertIssuerDetails != null)
                    hashCode = hashCode * 59 + this.SshCertIssuerDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
