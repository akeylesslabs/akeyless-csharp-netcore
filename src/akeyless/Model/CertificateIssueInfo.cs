/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// CertificateIssueInfo
    /// </summary>
    [DataContract(Name = "CertificateIssueInfo")]
    public partial class CertificateIssueInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateIssueInfo" /> class.
        /// </summary>
        /// <param name="certIssuerType">certIssuerType.</param>
        /// <param name="maxTtl">maxTtl.</param>
        /// <param name="pkiCertIssuerDetails">pkiCertIssuerDetails.</param>
        /// <param name="sshCertIssuerDetails">sshCertIssuerDetails.</param>
        public CertificateIssueInfo(string certIssuerType = default(string), long maxTtl = default(long), PKICertificateIssueDetails pkiCertIssuerDetails = default(PKICertificateIssueDetails), SSHCertificateIssueDetails sshCertIssuerDetails = default(SSHCertificateIssueDetails))
        {
            this.CertIssuerType = certIssuerType;
            this.MaxTtl = maxTtl;
            this.PkiCertIssuerDetails = pkiCertIssuerDetails;
            this.SshCertIssuerDetails = sshCertIssuerDetails;
        }

        /// <summary>
        /// Gets or Sets CertIssuerType
        /// </summary>
        [DataMember(Name = "cert_issuer_type", EmitDefaultValue = false)]
        public string CertIssuerType { get; set; }

        /// <summary>
        /// Gets or Sets MaxTtl
        /// </summary>
        [DataMember(Name = "max_ttl", EmitDefaultValue = false)]
        public long MaxTtl { get; set; }

        /// <summary>
        /// Gets or Sets PkiCertIssuerDetails
        /// </summary>
        [DataMember(Name = "pki_cert_issuer_details", EmitDefaultValue = false)]
        public PKICertificateIssueDetails PkiCertIssuerDetails { get; set; }

        /// <summary>
        /// Gets or Sets SshCertIssuerDetails
        /// </summary>
        [DataMember(Name = "ssh_cert_issuer_details", EmitDefaultValue = false)]
        public SSHCertificateIssueDetails SshCertIssuerDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertificateIssueInfo {\n");
            sb.Append("  CertIssuerType: ").Append(CertIssuerType).Append("\n");
            sb.Append("  MaxTtl: ").Append(MaxTtl).Append("\n");
            sb.Append("  PkiCertIssuerDetails: ").Append(PkiCertIssuerDetails).Append("\n");
            sb.Append("  SshCertIssuerDetails: ").Append(SshCertIssuerDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
