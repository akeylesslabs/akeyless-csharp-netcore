/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// decrypt is a command that decrypts ciphertext into plaintext by using an AES key.
    /// </summary>
    [DataContract(Name = "decrypt")]
    public partial class Decrypt : IEquatable<Decrypt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Decrypt" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Decrypt() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Decrypt" /> class.
        /// </summary>
        /// <param name="ciphertext">Ciphertext to be decrypted in base64 encoded format (required).</param>
        /// <param name="displayId">The display id of the key to use in the decryption process.</param>
        /// <param name="encryptionContext">The encryption context. If this was specified in the encrypt command, it must be specified here or the decryption operation will fail.</param>
        /// <param name="keyName">The name of the key to use in the decryption process.</param>
        /// <param name="password">Required only when the authentication process requires a username and password.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="username">Required only when the authentication process requires a username and password.</param>
        public Decrypt(string ciphertext = default(string), string displayId = default(string), Dictionary<string, string> encryptionContext = default(Dictionary<string, string>), string keyName = default(string), string password = default(string), string token = default(string), string uidToken = default(string), string username = default(string))
        {
            // to ensure "ciphertext" is required (not null)
            if (ciphertext == null) {
                throw new ArgumentNullException("ciphertext is a required property for Decrypt and cannot be null");
            }
            this.Ciphertext = ciphertext;
            this.DisplayId = displayId;
            this.EncryptionContext = encryptionContext;
            this.KeyName = keyName;
            this.Password = password;
            this.Token = token;
            this.UidToken = uidToken;
            this.Username = username;
        }

        /// <summary>
        /// Ciphertext to be decrypted in base64 encoded format
        /// </summary>
        /// <value>Ciphertext to be decrypted in base64 encoded format</value>
        [DataMember(Name = "ciphertext", IsRequired = true, EmitDefaultValue = false)]
        public string Ciphertext { get; set; }

        /// <summary>
        /// The display id of the key to use in the decryption process
        /// </summary>
        /// <value>The display id of the key to use in the decryption process</value>
        [DataMember(Name = "display-id", EmitDefaultValue = false)]
        public string DisplayId { get; set; }

        /// <summary>
        /// The encryption context. If this was specified in the encrypt command, it must be specified here or the decryption operation will fail
        /// </summary>
        /// <value>The encryption context. If this was specified in the encrypt command, it must be specified here or the decryption operation will fail</value>
        [DataMember(Name = "encryption-context", EmitDefaultValue = false)]
        public Dictionary<string, string> EncryptionContext { get; set; }

        /// <summary>
        /// The name of the key to use in the decryption process
        /// </summary>
        /// <value>The name of the key to use in the decryption process</value>
        [DataMember(Name = "key-name", EmitDefaultValue = false)]
        public string KeyName { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Decrypt {\n");
            sb.Append("  Ciphertext: ").Append(Ciphertext).Append("\n");
            sb.Append("  DisplayId: ").Append(DisplayId).Append("\n");
            sb.Append("  EncryptionContext: ").Append(EncryptionContext).Append("\n");
            sb.Append("  KeyName: ").Append(KeyName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Decrypt);
        }

        /// <summary>
        /// Returns true if Decrypt instances are equal
        /// </summary>
        /// <param name="input">Instance of Decrypt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Decrypt input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ciphertext == input.Ciphertext ||
                    (this.Ciphertext != null &&
                    this.Ciphertext.Equals(input.Ciphertext))
                ) && 
                (
                    this.DisplayId == input.DisplayId ||
                    (this.DisplayId != null &&
                    this.DisplayId.Equals(input.DisplayId))
                ) && 
                (
                    this.EncryptionContext == input.EncryptionContext ||
                    this.EncryptionContext != null &&
                    input.EncryptionContext != null &&
                    this.EncryptionContext.SequenceEqual(input.EncryptionContext)
                ) && 
                (
                    this.KeyName == input.KeyName ||
                    (this.KeyName != null &&
                    this.KeyName.Equals(input.KeyName))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ciphertext != null)
                    hashCode = hashCode * 59 + this.Ciphertext.GetHashCode();
                if (this.DisplayId != null)
                    hashCode = hashCode * 59 + this.DisplayId.GetHashCode();
                if (this.EncryptionContext != null)
                    hashCode = hashCode * 59 + this.EncryptionContext.GetHashCode();
                if (this.KeyName != null)
                    hashCode = hashCode * 59 + this.KeyName.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
