/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// AuthMethod
    /// </summary>
    [DataContract]
    public partial class AuthMethod :  IEquatable<AuthMethod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthMethod" /> class.
        /// </summary>
        /// <param name="accessInfo">accessInfo.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="authMethodAccessId">authMethodAccessId.</param>
        /// <param name="authMethodName">authMethodName.</param>
        /// <param name="authMethodRolesAssoc">authMethodRolesAssoc.</param>
        /// <param name="clientPermissions">clientPermissions.</param>
        public AuthMethod(AuthMethodAccessInfo accessInfo = default(AuthMethodAccessInfo), string accountId = default(string), string authMethodAccessId = default(string), string authMethodName = default(string), List<AuthMethodRoleAssociation> authMethodRolesAssoc = default(List<AuthMethodRoleAssociation>), List<string> clientPermissions = default(List<string>))
        {
            this.AccessInfo = accessInfo;
            this.AccountId = accountId;
            this.AuthMethodAccessId = authMethodAccessId;
            this.AuthMethodName = authMethodName;
            this.AuthMethodRolesAssoc = authMethodRolesAssoc;
            this.ClientPermissions = clientPermissions;
        }
        
        /// <summary>
        /// Gets or Sets AccessInfo
        /// </summary>
        [DataMember(Name="access_info", EmitDefaultValue=false)]
        public AuthMethodAccessInfo AccessInfo { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets AuthMethodAccessId
        /// </summary>
        [DataMember(Name="auth_method_access_id", EmitDefaultValue=false)]
        public string AuthMethodAccessId { get; set; }

        /// <summary>
        /// Gets or Sets AuthMethodName
        /// </summary>
        [DataMember(Name="auth_method_name", EmitDefaultValue=false)]
        public string AuthMethodName { get; set; }

        /// <summary>
        /// Gets or Sets AuthMethodRolesAssoc
        /// </summary>
        [DataMember(Name="auth_method_roles_assoc", EmitDefaultValue=false)]
        public List<AuthMethodRoleAssociation> AuthMethodRolesAssoc { get; set; }

        /// <summary>
        /// Gets or Sets ClientPermissions
        /// </summary>
        [DataMember(Name="client_permissions", EmitDefaultValue=false)]
        public List<string> ClientPermissions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthMethod {\n");
            sb.Append("  AccessInfo: ").Append(AccessInfo).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AuthMethodAccessId: ").Append(AuthMethodAccessId).Append("\n");
            sb.Append("  AuthMethodName: ").Append(AuthMethodName).Append("\n");
            sb.Append("  AuthMethodRolesAssoc: ").Append(AuthMethodRolesAssoc).Append("\n");
            sb.Append("  ClientPermissions: ").Append(ClientPermissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthMethod);
        }

        /// <summary>
        /// Returns true if AuthMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthMethod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessInfo == input.AccessInfo ||
                    (this.AccessInfo != null &&
                    this.AccessInfo.Equals(input.AccessInfo))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AuthMethodAccessId == input.AuthMethodAccessId ||
                    (this.AuthMethodAccessId != null &&
                    this.AuthMethodAccessId.Equals(input.AuthMethodAccessId))
                ) && 
                (
                    this.AuthMethodName == input.AuthMethodName ||
                    (this.AuthMethodName != null &&
                    this.AuthMethodName.Equals(input.AuthMethodName))
                ) && 
                (
                    this.AuthMethodRolesAssoc == input.AuthMethodRolesAssoc ||
                    this.AuthMethodRolesAssoc != null &&
                    input.AuthMethodRolesAssoc != null &&
                    this.AuthMethodRolesAssoc.SequenceEqual(input.AuthMethodRolesAssoc)
                ) && 
                (
                    this.ClientPermissions == input.ClientPermissions ||
                    this.ClientPermissions != null &&
                    input.ClientPermissions != null &&
                    this.ClientPermissions.SequenceEqual(input.ClientPermissions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessInfo != null)
                    hashCode = hashCode * 59 + this.AccessInfo.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AuthMethodAccessId != null)
                    hashCode = hashCode * 59 + this.AuthMethodAccessId.GetHashCode();
                if (this.AuthMethodName != null)
                    hashCode = hashCode * 59 + this.AuthMethodName.GetHashCode();
                if (this.AuthMethodRolesAssoc != null)
                    hashCode = hashCode * 59 + this.AuthMethodRolesAssoc.GetHashCode();
                if (this.ClientPermissions != null)
                    hashCode = hashCode * 59 + this.ClientPermissions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
