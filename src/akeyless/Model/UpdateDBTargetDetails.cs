/* 
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UpdateDBTargetDetails
    /// </summary>
    [DataContract]
    public partial class UpdateDBTargetDetails :  IEquatable<UpdateDBTargetDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDBTargetDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateDBTargetDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDBTargetDetails" /> class.
        /// </summary>
        /// <param name="dbType">dbType.</param>
        /// <param name="hostName">hostName.</param>
        /// <param name="mongoDbName">mongoDbName.</param>
        /// <param name="mongoUri">mongoUri.</param>
        /// <param name="name">Target name (required).</param>
        /// <param name="newVersion">Whether to create a new version of not (default to false).</param>
        /// <param name="password">Required only when the authentication process requires a username and password.</param>
        /// <param name="port">port.</param>
        /// <param name="protectionKey">The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="pwd">pwd.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userName">userName.</param>
        /// <param name="username">Required only when the authentication process requires a username and password.</param>
        public UpdateDBTargetDetails(string dbType = default(string), string hostName = default(string), string mongoDbName = default(string), string mongoUri = default(string), string name = default(string), bool newVersion = false, string password = default(string), string port = default(string), string protectionKey = default(string), string pwd = default(string), string token = default(string), string uidToken = default(string), string userName = default(string), string username = default(string))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for UpdateDBTargetDetails and cannot be null");
            this.DbType = dbType;
            this.HostName = hostName;
            this.MongoDbName = mongoDbName;
            this.MongoUri = mongoUri;
            this.NewVersion = newVersion;
            this.Password = password;
            this.Port = port;
            this.ProtectionKey = protectionKey;
            this.Pwd = pwd;
            this.Token = token;
            this.UidToken = uidToken;
            this.UserName = userName;
            this.Username = username;
        }
        
        /// <summary>
        /// Gets or Sets DbType
        /// </summary>
        [DataMember(Name="db_type", EmitDefaultValue=false)]
        public string DbType { get; set; }

        /// <summary>
        /// Gets or Sets HostName
        /// </summary>
        [DataMember(Name="host_name", EmitDefaultValue=false)]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or Sets MongoDbName
        /// </summary>
        [DataMember(Name="mongo_db_name", EmitDefaultValue=false)]
        public string MongoDbName { get; set; }

        /// <summary>
        /// Gets or Sets MongoUri
        /// </summary>
        [DataMember(Name="mongo_uri", EmitDefaultValue=false)]
        public string MongoUri { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether to create a new version of not
        /// </summary>
        /// <value>Whether to create a new version of not</value>
        [DataMember(Name="new-version", EmitDefaultValue=false)]
        public bool NewVersion { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public string Port { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name="protection_key", EmitDefaultValue=false)]
        public string ProtectionKey { get; set; }

        /// <summary>
        /// Gets or Sets Pwd
        /// </summary>
        [DataMember(Name="pwd", EmitDefaultValue=false)]
        public string Pwd { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name="uid-token", EmitDefaultValue=false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="user_name", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Required only when the authentication process requires a username and password
        /// </summary>
        /// <value>Required only when the authentication process requires a username and password</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateDBTargetDetails {\n");
            sb.Append("  DbType: ").Append(DbType).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  MongoDbName: ").Append(MongoDbName).Append("\n");
            sb.Append("  MongoUri: ").Append(MongoUri).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewVersion: ").Append(NewVersion).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  ProtectionKey: ").Append(ProtectionKey).Append("\n");
            sb.Append("  Pwd: ").Append(Pwd).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateDBTargetDetails);
        }

        /// <summary>
        /// Returns true if UpdateDBTargetDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateDBTargetDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateDBTargetDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DbType == input.DbType ||
                    (this.DbType != null &&
                    this.DbType.Equals(input.DbType))
                ) && 
                (
                    this.HostName == input.HostName ||
                    (this.HostName != null &&
                    this.HostName.Equals(input.HostName))
                ) && 
                (
                    this.MongoDbName == input.MongoDbName ||
                    (this.MongoDbName != null &&
                    this.MongoDbName.Equals(input.MongoDbName))
                ) && 
                (
                    this.MongoUri == input.MongoUri ||
                    (this.MongoUri != null &&
                    this.MongoUri.Equals(input.MongoUri))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewVersion == input.NewVersion ||
                    this.NewVersion.Equals(input.NewVersion)
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.ProtectionKey == input.ProtectionKey ||
                    (this.ProtectionKey != null &&
                    this.ProtectionKey.Equals(input.ProtectionKey))
                ) && 
                (
                    this.Pwd == input.Pwd ||
                    (this.Pwd != null &&
                    this.Pwd.Equals(input.Pwd))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DbType != null)
                    hashCode = hashCode * 59 + this.DbType.GetHashCode();
                if (this.HostName != null)
                    hashCode = hashCode * 59 + this.HostName.GetHashCode();
                if (this.MongoDbName != null)
                    hashCode = hashCode * 59 + this.MongoDbName.GetHashCode();
                if (this.MongoUri != null)
                    hashCode = hashCode * 59 + this.MongoUri.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.NewVersion.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.ProtectionKey != null)
                    hashCode = hashCode * 59 + this.ProtectionKey.GetHashCode();
                if (this.Pwd != null)
                    hashCode = hashCode * 59 + this.Pwd.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UidToken != null)
                    hashCode = hashCode * 59 + this.UidToken.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
