/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// UpdateDBTargetDetails
    /// </summary>
    [DataContract(Name = "updateDBTargetDetails")]
    public partial class UpdateDBTargetDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDBTargetDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateDBTargetDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDBTargetDetails" /> class.
        /// </summary>
        /// <param name="dbType">dbType.</param>
        /// <param name="host">host.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="keepPrevVersion">Whether to keep previous version [true/false]. If not set, use default according to account settings.</param>
        /// <param name="mongoDbName">mongoDbName.</param>
        /// <param name="mongoUri">mongoUri.</param>
        /// <param name="name">Target name (required).</param>
        /// <param name="newVersion">Deprecated.</param>
        /// <param name="port">port.</param>
        /// <param name="protectionKey">The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used).</param>
        /// <param name="pwd">pwd.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userName">userName.</param>
        public UpdateDBTargetDetails(string dbType = default(string), string host = default(string), bool json = false, string keepPrevVersion = default(string), string mongoDbName = default(string), string mongoUri = default(string), string name = default(string), bool newVersion = default(bool), string port = default(string), string protectionKey = default(string), string pwd = default(string), string token = default(string), string uidToken = default(string), string userName = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UpdateDBTargetDetails and cannot be null");
            }
            this.Name = name;
            this.DbType = dbType;
            this.Host = host;
            this.Json = json;
            this.KeepPrevVersion = keepPrevVersion;
            this.MongoDbName = mongoDbName;
            this.MongoUri = mongoUri;
            this.NewVersion = newVersion;
            this.Port = port;
            this.ProtectionKey = protectionKey;
            this.Pwd = pwd;
            this.Token = token;
            this.UidToken = uidToken;
            this.UserName = userName;
        }

        /// <summary>
        /// Gets or Sets DbType
        /// </summary>
        [DataMember(Name = "db-type", EmitDefaultValue = false)]
        public string DbType { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Whether to keep previous version [true/false]. If not set, use default according to account settings
        /// </summary>
        /// <value>Whether to keep previous version [true/false]. If not set, use default according to account settings</value>
        [DataMember(Name = "keep-prev-version", EmitDefaultValue = false)]
        public string KeepPrevVersion { get; set; }

        /// <summary>
        /// Gets or Sets MongoDbName
        /// </summary>
        [DataMember(Name = "mongo-db-name", EmitDefaultValue = false)]
        public string MongoDbName { get; set; }

        /// <summary>
        /// Gets or Sets MongoUri
        /// </summary>
        [DataMember(Name = "mongo-uri", EmitDefaultValue = false)]
        public string MongoUri { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Deprecated
        /// </summary>
        /// <value>Deprecated</value>
        [DataMember(Name = "new-version", EmitDefaultValue = true)]
        public bool NewVersion { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public string Port { get; set; }

        /// <summary>
        /// The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
        /// </summary>
        /// <value>The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)</value>
        [DataMember(Name = "protection_key", EmitDefaultValue = false)]
        public string ProtectionKey { get; set; }

        /// <summary>
        /// Gets or Sets Pwd
        /// </summary>
        [DataMember(Name = "pwd", EmitDefaultValue = false)]
        public string Pwd { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "user-name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateDBTargetDetails {\n");
            sb.Append("  DbType: ").Append(DbType).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  KeepPrevVersion: ").Append(KeepPrevVersion).Append("\n");
            sb.Append("  MongoDbName: ").Append(MongoDbName).Append("\n");
            sb.Append("  MongoUri: ").Append(MongoUri).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewVersion: ").Append(NewVersion).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  ProtectionKey: ").Append(ProtectionKey).Append("\n");
            sb.Append("  Pwd: ").Append(Pwd).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
