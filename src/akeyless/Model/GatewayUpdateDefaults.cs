/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayUpdateDefaults is a command that updates defaults settings
    /// </summary>
    [DataContract(Name = "gatewayUpdateDefaults")]
    public partial class GatewayUpdateDefaults : IEquatable<GatewayUpdateDefaults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayUpdateDefaults" /> class.
        /// </summary>
        /// <param name="certAccessId">Default Certificate access id for UI login (default to &quot;use-existing&quot;).</param>
        /// <param name="eventOnStatusChange">Trigger an event when Gateway status is changed [true/false].</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="key">The name of the gateway default encryption key (default to &quot;Default&quot;).</param>
        /// <param name="oidcAccessId">Default OIDC access id for UI login (default to &quot;use-existing&quot;).</param>
        /// <param name="samlAccessId">Default SAML access id for UI login (default to &quot;use-existing&quot;).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GatewayUpdateDefaults(string certAccessId = "use-existing", string eventOnStatusChange = default(string), bool json = false, string key = "Default", string oidcAccessId = "use-existing", string samlAccessId = "use-existing", string token = default(string), string uidToken = default(string))
        {
            // use default value if no "certAccessId" provided
            this.CertAccessId = certAccessId ?? "use-existing";
            this.EventOnStatusChange = eventOnStatusChange;
            this.Json = json;
            // use default value if no "key" provided
            this.Key = key ?? "Default";
            // use default value if no "oidcAccessId" provided
            this.OidcAccessId = oidcAccessId ?? "use-existing";
            // use default value if no "samlAccessId" provided
            this.SamlAccessId = samlAccessId ?? "use-existing";
            this.Token = token;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// Default Certificate access id for UI login
        /// </summary>
        /// <value>Default Certificate access id for UI login</value>
        [DataMember(Name = "cert-access-id", EmitDefaultValue = false)]
        public string CertAccessId { get; set; }

        /// <summary>
        /// Trigger an event when Gateway status is changed [true/false]
        /// </summary>
        /// <value>Trigger an event when Gateway status is changed [true/false]</value>
        [DataMember(Name = "event-on-status-change", EmitDefaultValue = false)]
        public string EventOnStatusChange { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// The name of the gateway default encryption key
        /// </summary>
        /// <value>The name of the gateway default encryption key</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Default OIDC access id for UI login
        /// </summary>
        /// <value>Default OIDC access id for UI login</value>
        [DataMember(Name = "oidc-access-id", EmitDefaultValue = false)]
        public string OidcAccessId { get; set; }

        /// <summary>
        /// Default SAML access id for UI login
        /// </summary>
        /// <value>Default SAML access id for UI login</value>
        [DataMember(Name = "saml-access-id", EmitDefaultValue = false)]
        public string SamlAccessId { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayUpdateDefaults {\n");
            sb.Append("  CertAccessId: ").Append(CertAccessId).Append("\n");
            sb.Append("  EventOnStatusChange: ").Append(EventOnStatusChange).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  OidcAccessId: ").Append(OidcAccessId).Append("\n");
            sb.Append("  SamlAccessId: ").Append(SamlAccessId).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayUpdateDefaults);
        }

        /// <summary>
        /// Returns true if GatewayUpdateDefaults instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayUpdateDefaults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayUpdateDefaults input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CertAccessId == input.CertAccessId ||
                    (this.CertAccessId != null &&
                    this.CertAccessId.Equals(input.CertAccessId))
                ) && 
                (
                    this.EventOnStatusChange == input.EventOnStatusChange ||
                    (this.EventOnStatusChange != null &&
                    this.EventOnStatusChange.Equals(input.EventOnStatusChange))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.OidcAccessId == input.OidcAccessId ||
                    (this.OidcAccessId != null &&
                    this.OidcAccessId.Equals(input.OidcAccessId))
                ) && 
                (
                    this.SamlAccessId == input.SamlAccessId ||
                    (this.SamlAccessId != null &&
                    this.SamlAccessId.Equals(input.SamlAccessId))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertAccessId != null)
                {
                    hashCode = (hashCode * 59) + this.CertAccessId.GetHashCode();
                }
                if (this.EventOnStatusChange != null)
                {
                    hashCode = (hashCode * 59) + this.EventOnStatusChange.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.OidcAccessId != null)
                {
                    hashCode = (hashCode * 59) + this.OidcAccessId.GetHashCode();
                }
                if (this.SamlAccessId != null)
                {
                    hashCode = (hashCode * 59) + this.SamlAccessId.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
