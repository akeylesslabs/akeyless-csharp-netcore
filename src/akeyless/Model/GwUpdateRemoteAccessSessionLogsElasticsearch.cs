/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gwUpdateRemoteAccessSessionLogsElasticsearch is a command that updates session log forwarding config (elasticsearch target)
    /// </summary>
    [DataContract(Name = "gwUpdateRemoteAccessSessionLogsElasticsearch")]
    public partial class GwUpdateRemoteAccessSessionLogsElasticsearch : IEquatable<GwUpdateRemoteAccessSessionLogsElasticsearch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GwUpdateRemoteAccessSessionLogsElasticsearch" /> class.
        /// </summary>
        /// <param name="apiKey">Elasticsearch api key relevant only for api_key auth-type.</param>
        /// <param name="authType">Elasticsearch auth type [api_key/password].</param>
        /// <param name="cloudId">Elasticsearch cloud id relevant only for cloud server-type.</param>
        /// <param name="enable">Enable Log Forwarding [true/false] (default to &quot;true&quot;).</param>
        /// <param name="enableTls">Enable tls.</param>
        /// <param name="index">Elasticsearch index.</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="nodes">Elasticsearch nodes relevant only for nodes server-type.</param>
        /// <param name="outputFormat">Logs format [text/json] (default to &quot;text&quot;).</param>
        /// <param name="password">Elasticsearch password relevant only for password auth-type.</param>
        /// <param name="pullInterval">Pull interval in seconds (default to &quot;10&quot;).</param>
        /// <param name="serverType">Elasticsearch server type [cloud/nodes].</param>
        /// <param name="tlsCertificate">Elasticsearch tls certificate (default to &quot;use-existing&quot;).</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userName">Elasticsearch user name relevant only for password auth-type.</param>
        public GwUpdateRemoteAccessSessionLogsElasticsearch(string apiKey = default(string), string authType = default(string), string cloudId = default(string), string enable = "true", bool enableTls = default(bool), string index = default(string), bool json = false, string nodes = default(string), string outputFormat = "text", string password = default(string), string pullInterval = "10", string serverType = default(string), string tlsCertificate = "use-existing", string token = default(string), string uidToken = default(string), string userName = default(string))
        {
            this.ApiKey = apiKey;
            this.AuthType = authType;
            this.CloudId = cloudId;
            // use default value if no "enable" provided
            this.Enable = enable ?? "true";
            this.EnableTls = enableTls;
            this.Index = index;
            this.Json = json;
            this.Nodes = nodes;
            // use default value if no "outputFormat" provided
            this.OutputFormat = outputFormat ?? "text";
            this.Password = password;
            // use default value if no "pullInterval" provided
            this.PullInterval = pullInterval ?? "10";
            this.ServerType = serverType;
            // use default value if no "tlsCertificate" provided
            this.TlsCertificate = tlsCertificate ?? "use-existing";
            this.Token = token;
            this.UidToken = uidToken;
            this.UserName = userName;
        }

        /// <summary>
        /// Elasticsearch api key relevant only for api_key auth-type
        /// </summary>
        /// <value>Elasticsearch api key relevant only for api_key auth-type</value>
        [DataMember(Name = "api-key", EmitDefaultValue = false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Elasticsearch auth type [api_key/password]
        /// </summary>
        /// <value>Elasticsearch auth type [api_key/password]</value>
        [DataMember(Name = "auth-type", EmitDefaultValue = false)]
        public string AuthType { get; set; }

        /// <summary>
        /// Elasticsearch cloud id relevant only for cloud server-type
        /// </summary>
        /// <value>Elasticsearch cloud id relevant only for cloud server-type</value>
        [DataMember(Name = "cloud-id", EmitDefaultValue = false)]
        public string CloudId { get; set; }

        /// <summary>
        /// Enable Log Forwarding [true/false]
        /// </summary>
        /// <value>Enable Log Forwarding [true/false]</value>
        [DataMember(Name = "enable", EmitDefaultValue = false)]
        public string Enable { get; set; }

        /// <summary>
        /// Enable tls
        /// </summary>
        /// <value>Enable tls</value>
        [DataMember(Name = "enable-tls", EmitDefaultValue = true)]
        public bool EnableTls { get; set; }

        /// <summary>
        /// Elasticsearch index
        /// </summary>
        /// <value>Elasticsearch index</value>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public string Index { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Elasticsearch nodes relevant only for nodes server-type
        /// </summary>
        /// <value>Elasticsearch nodes relevant only for nodes server-type</value>
        [DataMember(Name = "nodes", EmitDefaultValue = false)]
        public string Nodes { get; set; }

        /// <summary>
        /// Logs format [text/json]
        /// </summary>
        /// <value>Logs format [text/json]</value>
        [DataMember(Name = "output-format", EmitDefaultValue = false)]
        public string OutputFormat { get; set; }

        /// <summary>
        /// Elasticsearch password relevant only for password auth-type
        /// </summary>
        /// <value>Elasticsearch password relevant only for password auth-type</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Pull interval in seconds
        /// </summary>
        /// <value>Pull interval in seconds</value>
        [DataMember(Name = "pull-interval", EmitDefaultValue = false)]
        public string PullInterval { get; set; }

        /// <summary>
        /// Elasticsearch server type [cloud/nodes]
        /// </summary>
        /// <value>Elasticsearch server type [cloud/nodes]</value>
        [DataMember(Name = "server-type", EmitDefaultValue = false)]
        public string ServerType { get; set; }

        /// <summary>
        /// Elasticsearch tls certificate
        /// </summary>
        /// <value>Elasticsearch tls certificate</value>
        [DataMember(Name = "tls-certificate", EmitDefaultValue = false)]
        public string TlsCertificate { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Elasticsearch user name relevant only for password auth-type
        /// </summary>
        /// <value>Elasticsearch user name relevant only for password auth-type</value>
        [DataMember(Name = "user-name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GwUpdateRemoteAccessSessionLogsElasticsearch {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  CloudId: ").Append(CloudId).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  EnableTls: ").Append(EnableTls).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PullInterval: ").Append(PullInterval).Append("\n");
            sb.Append("  ServerType: ").Append(ServerType).Append("\n");
            sb.Append("  TlsCertificate: ").Append(TlsCertificate).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GwUpdateRemoteAccessSessionLogsElasticsearch);
        }

        /// <summary>
        /// Returns true if GwUpdateRemoteAccessSessionLogsElasticsearch instances are equal
        /// </summary>
        /// <param name="input">Instance of GwUpdateRemoteAccessSessionLogsElasticsearch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GwUpdateRemoteAccessSessionLogsElasticsearch input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.AuthType == input.AuthType ||
                    (this.AuthType != null &&
                    this.AuthType.Equals(input.AuthType))
                ) && 
                (
                    this.CloudId == input.CloudId ||
                    (this.CloudId != null &&
                    this.CloudId.Equals(input.CloudId))
                ) && 
                (
                    this.Enable == input.Enable ||
                    (this.Enable != null &&
                    this.Enable.Equals(input.Enable))
                ) && 
                (
                    this.EnableTls == input.EnableTls ||
                    this.EnableTls.Equals(input.EnableTls)
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Nodes == input.Nodes ||
                    (this.Nodes != null &&
                    this.Nodes.Equals(input.Nodes))
                ) && 
                (
                    this.OutputFormat == input.OutputFormat ||
                    (this.OutputFormat != null &&
                    this.OutputFormat.Equals(input.OutputFormat))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.PullInterval == input.PullInterval ||
                    (this.PullInterval != null &&
                    this.PullInterval.Equals(input.PullInterval))
                ) && 
                (
                    this.ServerType == input.ServerType ||
                    (this.ServerType != null &&
                    this.ServerType.Equals(input.ServerType))
                ) && 
                (
                    this.TlsCertificate == input.TlsCertificate ||
                    (this.TlsCertificate != null &&
                    this.TlsCertificate.Equals(input.TlsCertificate))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.ApiKey.GetHashCode();
                }
                if (this.AuthType != null)
                {
                    hashCode = (hashCode * 59) + this.AuthType.GetHashCode();
                }
                if (this.CloudId != null)
                {
                    hashCode = (hashCode * 59) + this.CloudId.GetHashCode();
                }
                if (this.Enable != null)
                {
                    hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableTls.GetHashCode();
                if (this.Index != null)
                {
                    hashCode = (hashCode * 59) + this.Index.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Nodes != null)
                {
                    hashCode = (hashCode * 59) + this.Nodes.GetHashCode();
                }
                if (this.OutputFormat != null)
                {
                    hashCode = (hashCode * 59) + this.OutputFormat.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.PullInterval != null)
                {
                    hashCode = (hashCode * 59) + this.PullInterval.GetHashCode();
                }
                if (this.ServerType != null)
                {
                    hashCode = (hashCode * 59) + this.ServerType.GetHashCode();
                }
                if (this.TlsCertificate != null)
                {
                    hashCode = (hashCode * 59) + this.TlsCertificate.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
