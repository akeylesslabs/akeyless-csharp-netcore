/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GoogleChronicleForwardingConfig
    /// </summary>
    [DataContract(Name = "GoogleChronicleForwardingConfig")]
    public partial class GoogleChronicleForwardingConfig : IEquatable<GoogleChronicleForwardingConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GoogleChronicleForwardingConfig" /> class.
        /// </summary>
        /// <param name="customerId">customerId.</param>
        /// <param name="logType">logType.</param>
        /// <param name="region">region.</param>
        /// <param name="serviceAccountKey">serviceAccountKey.</param>
        public GoogleChronicleForwardingConfig(string customerId = default(string), string logType = default(string), string region = default(string), string serviceAccountKey = default(string))
        {
            this.CustomerId = customerId;
            this.LogType = logType;
            this.Region = region;
            this.ServiceAccountKey = serviceAccountKey;
        }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name = "customer_id", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets LogType
        /// </summary>
        [DataMember(Name = "log_type", EmitDefaultValue = false)]
        public string LogType { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets ServiceAccountKey
        /// </summary>
        [DataMember(Name = "service_account_key", EmitDefaultValue = false)]
        public string ServiceAccountKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GoogleChronicleForwardingConfig {\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  LogType: ").Append(LogType).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  ServiceAccountKey: ").Append(ServiceAccountKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GoogleChronicleForwardingConfig);
        }

        /// <summary>
        /// Returns true if GoogleChronicleForwardingConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of GoogleChronicleForwardingConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoogleChronicleForwardingConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.LogType == input.LogType ||
                    (this.LogType != null &&
                    this.LogType.Equals(input.LogType))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.ServiceAccountKey == input.ServiceAccountKey ||
                    (this.ServiceAccountKey != null &&
                    this.ServiceAccountKey.Equals(input.ServiceAccountKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerId.GetHashCode();
                }
                if (this.LogType != null)
                {
                    hashCode = (hashCode * 59) + this.LogType.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.ServiceAccountKey != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceAccountKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
