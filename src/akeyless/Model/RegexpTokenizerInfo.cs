/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// RegexpTokenizerInfo represents a general Regexp tokenization template
    /// </summary>
    [DataContract(Name = "RegexpTokenizerInfo")]
    public partial class RegexpTokenizerInfo : IEquatable<RegexpTokenizerInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegexpTokenizerInfo" /> class.
        /// </summary>
        /// <param name="alphabet">The Alphabet used for the tokenization.</param>
        /// <param name="decryptionTemplate">Transformation to perform on the decrypted data.</param>
        /// <param name="encryptionTemplate">Transformation to perform on the encrypted data, if the required output template doesn&#39;t match the input string The output Should still be valid for the Pattern, otherwise the secret would be able to be decrypted..</param>
        /// <param name="pattern">Regexp pattern to extract and deposit the text/encdata.</param>
        public RegexpTokenizerInfo(string alphabet = default(string), string decryptionTemplate = default(string), string encryptionTemplate = default(string), string pattern = default(string))
        {
            this.Alphabet = alphabet;
            this.DecryptionTemplate = decryptionTemplate;
            this.EncryptionTemplate = encryptionTemplate;
            this.Pattern = pattern;
        }

        /// <summary>
        /// The Alphabet used for the tokenization
        /// </summary>
        /// <value>The Alphabet used for the tokenization</value>
        [DataMember(Name = "alphabet", EmitDefaultValue = false)]
        public string Alphabet { get; set; }

        /// <summary>
        /// Transformation to perform on the decrypted data
        /// </summary>
        /// <value>Transformation to perform on the decrypted data</value>
        [DataMember(Name = "decryption_template", EmitDefaultValue = false)]
        public string DecryptionTemplate { get; set; }

        /// <summary>
        /// Transformation to perform on the encrypted data, if the required output template doesn&#39;t match the input string The output Should still be valid for the Pattern, otherwise the secret would be able to be decrypted.
        /// </summary>
        /// <value>Transformation to perform on the encrypted data, if the required output template doesn&#39;t match the input string The output Should still be valid for the Pattern, otherwise the secret would be able to be decrypted.</value>
        [DataMember(Name = "encryption_template", EmitDefaultValue = false)]
        public string EncryptionTemplate { get; set; }

        /// <summary>
        /// Regexp pattern to extract and deposit the text/encdata
        /// </summary>
        /// <value>Regexp pattern to extract and deposit the text/encdata</value>
        [DataMember(Name = "pattern", EmitDefaultValue = false)]
        public string Pattern { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegexpTokenizerInfo {\n");
            sb.Append("  Alphabet: ").Append(Alphabet).Append("\n");
            sb.Append("  DecryptionTemplate: ").Append(DecryptionTemplate).Append("\n");
            sb.Append("  EncryptionTemplate: ").Append(EncryptionTemplate).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegexpTokenizerInfo);
        }

        /// <summary>
        /// Returns true if RegexpTokenizerInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of RegexpTokenizerInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegexpTokenizerInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Alphabet == input.Alphabet ||
                    (this.Alphabet != null &&
                    this.Alphabet.Equals(input.Alphabet))
                ) && 
                (
                    this.DecryptionTemplate == input.DecryptionTemplate ||
                    (this.DecryptionTemplate != null &&
                    this.DecryptionTemplate.Equals(input.DecryptionTemplate))
                ) && 
                (
                    this.EncryptionTemplate == input.EncryptionTemplate ||
                    (this.EncryptionTemplate != null &&
                    this.EncryptionTemplate.Equals(input.EncryptionTemplate))
                ) && 
                (
                    this.Pattern == input.Pattern ||
                    (this.Pattern != null &&
                    this.Pattern.Equals(input.Pattern))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alphabet != null)
                    hashCode = hashCode * 59 + this.Alphabet.GetHashCode();
                if (this.DecryptionTemplate != null)
                    hashCode = hashCode * 59 + this.DecryptionTemplate.GetHashCode();
                if (this.EncryptionTemplate != null)
                    hashCode = hashCode * 59 + this.EncryptionTemplate.GetHashCode();
                if (this.Pattern != null)
                    hashCode = hashCode * 59 + this.Pattern.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
