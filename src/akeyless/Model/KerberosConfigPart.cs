/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// KerberosConfigPart
    /// </summary>
    [DataContract(Name = "KerberosConfigPart")]
    public partial class KerberosConfigPart : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KerberosConfigPart" /> class.
        /// </summary>
        /// <param name="kerberosAccessId">kerberosAccessId.</param>
        /// <param name="kerberosKeytab">kerberosKeytab.</param>
        /// <param name="kerberosKrb5Conf">kerberosKrb5Conf.</param>
        /// <param name="kerberosPrivateKey">kerberosPrivateKey.</param>
        /// <param name="ldapAnonymousSearch">ldapAnonymousSearch.</param>
        /// <param name="ldapBindDn">ldapBindDn.</param>
        /// <param name="ldapBindPassword">ldapBindPassword.</param>
        /// <param name="ldapCert">ldapCert.</param>
        /// <param name="ldapGroupAttr">ldapGroupAttr.</param>
        /// <param name="ldapGroupDn">ldapGroupDn.</param>
        /// <param name="ldapGroupFilter">ldapGroupFilter.</param>
        /// <param name="ldapUrl">ldapUrl.</param>
        /// <param name="ldapUserAttr">ldapUserAttr.</param>
        /// <param name="ldapUserDn">ldapUserDn.</param>
        public KerberosConfigPart(string kerberosAccessId = default(string), string kerberosKeytab = default(string), string kerberosKrb5Conf = default(string), string kerberosPrivateKey = default(string), bool ldapAnonymousSearch = default(bool), string ldapBindDn = default(string), string ldapBindPassword = default(string), string ldapCert = default(string), string ldapGroupAttr = default(string), string ldapGroupDn = default(string), string ldapGroupFilter = default(string), string ldapUrl = default(string), string ldapUserAttr = default(string), string ldapUserDn = default(string))
        {
            this.KerberosAccessId = kerberosAccessId;
            this.KerberosKeytab = kerberosKeytab;
            this.KerberosKrb5Conf = kerberosKrb5Conf;
            this.KerberosPrivateKey = kerberosPrivateKey;
            this.LdapAnonymousSearch = ldapAnonymousSearch;
            this.LdapBindDn = ldapBindDn;
            this.LdapBindPassword = ldapBindPassword;
            this.LdapCert = ldapCert;
            this.LdapGroupAttr = ldapGroupAttr;
            this.LdapGroupDn = ldapGroupDn;
            this.LdapGroupFilter = ldapGroupFilter;
            this.LdapUrl = ldapUrl;
            this.LdapUserAttr = ldapUserAttr;
            this.LdapUserDn = ldapUserDn;
        }

        /// <summary>
        /// Gets or Sets KerberosAccessId
        /// </summary>
        [DataMember(Name = "kerberos_access_id", EmitDefaultValue = false)]
        public string KerberosAccessId { get; set; }

        /// <summary>
        /// Gets or Sets KerberosKeytab
        /// </summary>
        [DataMember(Name = "kerberos_keytab", EmitDefaultValue = false)]
        public string KerberosKeytab { get; set; }

        /// <summary>
        /// Gets or Sets KerberosKrb5Conf
        /// </summary>
        [DataMember(Name = "kerberos_krb_5_conf", EmitDefaultValue = false)]
        public string KerberosKrb5Conf { get; set; }

        /// <summary>
        /// Gets or Sets KerberosPrivateKey
        /// </summary>
        [DataMember(Name = "kerberos_private_key", EmitDefaultValue = false)]
        public string KerberosPrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets LdapAnonymousSearch
        /// </summary>
        [DataMember(Name = "ldap_anonymous_search", EmitDefaultValue = true)]
        public bool LdapAnonymousSearch { get; set; }

        /// <summary>
        /// Gets or Sets LdapBindDn
        /// </summary>
        [DataMember(Name = "ldap_bind_dn", EmitDefaultValue = false)]
        public string LdapBindDn { get; set; }

        /// <summary>
        /// Gets or Sets LdapBindPassword
        /// </summary>
        [DataMember(Name = "ldap_bind_password", EmitDefaultValue = false)]
        public string LdapBindPassword { get; set; }

        /// <summary>
        /// Gets or Sets LdapCert
        /// </summary>
        [DataMember(Name = "ldap_cert", EmitDefaultValue = false)]
        public string LdapCert { get; set; }

        /// <summary>
        /// Gets or Sets LdapGroupAttr
        /// </summary>
        [DataMember(Name = "ldap_group_attr", EmitDefaultValue = false)]
        public string LdapGroupAttr { get; set; }

        /// <summary>
        /// Gets or Sets LdapGroupDn
        /// </summary>
        [DataMember(Name = "ldap_group_dn", EmitDefaultValue = false)]
        public string LdapGroupDn { get; set; }

        /// <summary>
        /// Gets or Sets LdapGroupFilter
        /// </summary>
        [DataMember(Name = "ldap_group_filter", EmitDefaultValue = false)]
        public string LdapGroupFilter { get; set; }

        /// <summary>
        /// Gets or Sets LdapUrl
        /// </summary>
        [DataMember(Name = "ldap_url", EmitDefaultValue = false)]
        public string LdapUrl { get; set; }

        /// <summary>
        /// Gets or Sets LdapUserAttr
        /// </summary>
        [DataMember(Name = "ldap_user_attr", EmitDefaultValue = false)]
        public string LdapUserAttr { get; set; }

        /// <summary>
        /// Gets or Sets LdapUserDn
        /// </summary>
        [DataMember(Name = "ldap_user_dn", EmitDefaultValue = false)]
        public string LdapUserDn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KerberosConfigPart {\n");
            sb.Append("  KerberosAccessId: ").Append(KerberosAccessId).Append("\n");
            sb.Append("  KerberosKeytab: ").Append(KerberosKeytab).Append("\n");
            sb.Append("  KerberosKrb5Conf: ").Append(KerberosKrb5Conf).Append("\n");
            sb.Append("  KerberosPrivateKey: ").Append(KerberosPrivateKey).Append("\n");
            sb.Append("  LdapAnonymousSearch: ").Append(LdapAnonymousSearch).Append("\n");
            sb.Append("  LdapBindDn: ").Append(LdapBindDn).Append("\n");
            sb.Append("  LdapBindPassword: ").Append(LdapBindPassword).Append("\n");
            sb.Append("  LdapCert: ").Append(LdapCert).Append("\n");
            sb.Append("  LdapGroupAttr: ").Append(LdapGroupAttr).Append("\n");
            sb.Append("  LdapGroupDn: ").Append(LdapGroupDn).Append("\n");
            sb.Append("  LdapGroupFilter: ").Append(LdapGroupFilter).Append("\n");
            sb.Append("  LdapUrl: ").Append(LdapUrl).Append("\n");
            sb.Append("  LdapUserAttr: ").Append(LdapUserAttr).Append("\n");
            sb.Append("  LdapUserDn: ").Append(LdapUserDn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
