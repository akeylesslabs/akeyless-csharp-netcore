/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// gatewayCreateProducerRdp is a command that creates rdp producer [Deprecated: Use dynamic-secret-create-rdp command]
    /// </summary>
    [DataContract(Name = "gatewayCreateProducerRdp")]
    public partial class GatewayCreateProducerRdp : IEquatable<GatewayCreateProducerRdp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerRdp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayCreateProducerRdp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayCreateProducerRdp" /> class.
        /// </summary>
        /// <param name="allowUserExtendSession">AllowUserExtendSession.</param>
        /// <param name="deleteProtection">Protection from accidental deletion of this object [true/false].</param>
        /// <param name="fixedUserOnly">Allow access using externally (IdP) provided username [true/false] (default to &quot;false&quot;).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="name">Dynamic secret name (required).</param>
        /// <param name="passwordLength">The length of the password to be generated.</param>
        /// <param name="producerEncryptionKeyName">Dynamic producer encryption key.</param>
        /// <param name="rdpAdminName">RDP Admin Name.</param>
        /// <param name="rdpAdminPwd">RDP Admin password.</param>
        /// <param name="rdpHostName">Hostname.</param>
        /// <param name="rdpHostPort">Port (default to &quot;22&quot;).</param>
        /// <param name="rdpUserGroups">Groups.</param>
        /// <param name="secureAccessAllowExternalUser">Allow providing external user for a domain users (default to false).</param>
        /// <param name="secureAccessEnable">Enable/Disable secure remote access [true/false].</param>
        /// <param name="secureAccessHost">Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers).</param>
        /// <param name="secureAccessRdGatewayServer">RD Gateway server.</param>
        /// <param name="secureAccessRdpDomain">Required when the Dynamic Secret is used for a domain user.</param>
        /// <param name="secureAccessRdpUser">Override the RDP Domain username.</param>
        /// <param name="tags">Add tags attached to this object.</param>
        /// <param name="targetName">Target name.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        /// <param name="userTtl">User TTL (default to &quot;60m&quot;).</param>
        /// <param name="warnUserBeforeExpiration">WarnBeforeUserExpiration.</param>
        public GatewayCreateProducerRdp(long allowUserExtendSession = default(long), string deleteProtection = default(string), string fixedUserOnly = "false", bool json = false, string name = default(string), string passwordLength = default(string), string producerEncryptionKeyName = default(string), string rdpAdminName = default(string), string rdpAdminPwd = default(string), string rdpHostName = default(string), string rdpHostPort = "22", string rdpUserGroups = default(string), bool secureAccessAllowExternalUser = false, string secureAccessEnable = default(string), List<string> secureAccessHost = default(List<string>), string secureAccessRdGatewayServer = default(string), string secureAccessRdpDomain = default(string), string secureAccessRdpUser = default(string), List<string> tags = default(List<string>), string targetName = default(string), string token = default(string), string uidToken = default(string), string userTtl = "60m", long warnUserBeforeExpiration = default(long))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GatewayCreateProducerRdp and cannot be null");
            }
            this.Name = name;
            this.AllowUserExtendSession = allowUserExtendSession;
            this.DeleteProtection = deleteProtection;
            // use default value if no "fixedUserOnly" provided
            this.FixedUserOnly = fixedUserOnly ?? "false";
            this.Json = json;
            this.PasswordLength = passwordLength;
            this.ProducerEncryptionKeyName = producerEncryptionKeyName;
            this.RdpAdminName = rdpAdminName;
            this.RdpAdminPwd = rdpAdminPwd;
            this.RdpHostName = rdpHostName;
            // use default value if no "rdpHostPort" provided
            this.RdpHostPort = rdpHostPort ?? "22";
            this.RdpUserGroups = rdpUserGroups;
            this.SecureAccessAllowExternalUser = secureAccessAllowExternalUser;
            this.SecureAccessEnable = secureAccessEnable;
            this.SecureAccessHost = secureAccessHost;
            this.SecureAccessRdGatewayServer = secureAccessRdGatewayServer;
            this.SecureAccessRdpDomain = secureAccessRdpDomain;
            this.SecureAccessRdpUser = secureAccessRdpUser;
            this.Tags = tags;
            this.TargetName = targetName;
            this.Token = token;
            this.UidToken = uidToken;
            // use default value if no "userTtl" provided
            this.UserTtl = userTtl ?? "60m";
            this.WarnUserBeforeExpiration = warnUserBeforeExpiration;
        }

        /// <summary>
        /// AllowUserExtendSession
        /// </summary>
        /// <value>AllowUserExtendSession</value>
        [DataMember(Name = "allow-user-extend-session", EmitDefaultValue = false)]
        public long AllowUserExtendSession { get; set; }

        /// <summary>
        /// Protection from accidental deletion of this object [true/false]
        /// </summary>
        /// <value>Protection from accidental deletion of this object [true/false]</value>
        [DataMember(Name = "delete_protection", EmitDefaultValue = false)]
        public string DeleteProtection { get; set; }

        /// <summary>
        /// Allow access using externally (IdP) provided username [true/false]
        /// </summary>
        /// <value>Allow access using externally (IdP) provided username [true/false]</value>
        [DataMember(Name = "fixed-user-only", EmitDefaultValue = false)]
        public string FixedUserOnly { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Dynamic secret name
        /// </summary>
        /// <value>Dynamic secret name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The length of the password to be generated
        /// </summary>
        /// <value>The length of the password to be generated</value>
        [DataMember(Name = "password-length", EmitDefaultValue = false)]
        public string PasswordLength { get; set; }

        /// <summary>
        /// Dynamic producer encryption key
        /// </summary>
        /// <value>Dynamic producer encryption key</value>
        [DataMember(Name = "producer-encryption-key-name", EmitDefaultValue = false)]
        public string ProducerEncryptionKeyName { get; set; }

        /// <summary>
        /// RDP Admin Name
        /// </summary>
        /// <value>RDP Admin Name</value>
        [DataMember(Name = "rdp-admin-name", EmitDefaultValue = false)]
        public string RdpAdminName { get; set; }

        /// <summary>
        /// RDP Admin password
        /// </summary>
        /// <value>RDP Admin password</value>
        [DataMember(Name = "rdp-admin-pwd", EmitDefaultValue = false)]
        public string RdpAdminPwd { get; set; }

        /// <summary>
        /// Hostname
        /// </summary>
        /// <value>Hostname</value>
        [DataMember(Name = "rdp-host-name", EmitDefaultValue = false)]
        public string RdpHostName { get; set; }

        /// <summary>
        /// Port
        /// </summary>
        /// <value>Port</value>
        [DataMember(Name = "rdp-host-port", EmitDefaultValue = false)]
        public string RdpHostPort { get; set; }

        /// <summary>
        /// Groups
        /// </summary>
        /// <value>Groups</value>
        [DataMember(Name = "rdp-user-groups", EmitDefaultValue = false)]
        public string RdpUserGroups { get; set; }

        /// <summary>
        /// Allow providing external user for a domain users
        /// </summary>
        /// <value>Allow providing external user for a domain users</value>
        [DataMember(Name = "secure-access-allow-external-user", EmitDefaultValue = true)]
        public bool SecureAccessAllowExternalUser { get; set; }

        /// <summary>
        /// Enable/Disable secure remote access [true/false]
        /// </summary>
        /// <value>Enable/Disable secure remote access [true/false]</value>
        [DataMember(Name = "secure-access-enable", EmitDefaultValue = false)]
        public string SecureAccessEnable { get; set; }

        /// <summary>
        /// Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)
        /// </summary>
        /// <value>Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)</value>
        [DataMember(Name = "secure-access-host", EmitDefaultValue = false)]
        public List<string> SecureAccessHost { get; set; }

        /// <summary>
        /// RD Gateway server
        /// </summary>
        /// <value>RD Gateway server</value>
        [DataMember(Name = "secure-access-rd-gateway-server", EmitDefaultValue = false)]
        public string SecureAccessRdGatewayServer { get; set; }

        /// <summary>
        /// Required when the Dynamic Secret is used for a domain user
        /// </summary>
        /// <value>Required when the Dynamic Secret is used for a domain user</value>
        [DataMember(Name = "secure-access-rdp-domain", EmitDefaultValue = false)]
        public string SecureAccessRdpDomain { get; set; }

        /// <summary>
        /// Override the RDP Domain username
        /// </summary>
        /// <value>Override the RDP Domain username</value>
        [DataMember(Name = "secure-access-rdp-user", EmitDefaultValue = false)]
        public string SecureAccessRdpUser { get; set; }

        /// <summary>
        /// Add tags attached to this object
        /// </summary>
        /// <value>Add tags attached to this object</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        /// <value>Target name</value>
        [DataMember(Name = "target-name", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// User TTL
        /// </summary>
        /// <value>User TTL</value>
        [DataMember(Name = "user-ttl", EmitDefaultValue = false)]
        public string UserTtl { get; set; }

        /// <summary>
        /// WarnBeforeUserExpiration
        /// </summary>
        /// <value>WarnBeforeUserExpiration</value>
        [DataMember(Name = "warn-user-before-expiration", EmitDefaultValue = false)]
        public long WarnUserBeforeExpiration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayCreateProducerRdp {\n");
            sb.Append("  AllowUserExtendSession: ").Append(AllowUserExtendSession).Append("\n");
            sb.Append("  DeleteProtection: ").Append(DeleteProtection).Append("\n");
            sb.Append("  FixedUserOnly: ").Append(FixedUserOnly).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PasswordLength: ").Append(PasswordLength).Append("\n");
            sb.Append("  ProducerEncryptionKeyName: ").Append(ProducerEncryptionKeyName).Append("\n");
            sb.Append("  RdpAdminName: ").Append(RdpAdminName).Append("\n");
            sb.Append("  RdpAdminPwd: ").Append(RdpAdminPwd).Append("\n");
            sb.Append("  RdpHostName: ").Append(RdpHostName).Append("\n");
            sb.Append("  RdpHostPort: ").Append(RdpHostPort).Append("\n");
            sb.Append("  RdpUserGroups: ").Append(RdpUserGroups).Append("\n");
            sb.Append("  SecureAccessAllowExternalUser: ").Append(SecureAccessAllowExternalUser).Append("\n");
            sb.Append("  SecureAccessEnable: ").Append(SecureAccessEnable).Append("\n");
            sb.Append("  SecureAccessHost: ").Append(SecureAccessHost).Append("\n");
            sb.Append("  SecureAccessRdGatewayServer: ").Append(SecureAccessRdGatewayServer).Append("\n");
            sb.Append("  SecureAccessRdpDomain: ").Append(SecureAccessRdpDomain).Append("\n");
            sb.Append("  SecureAccessRdpUser: ").Append(SecureAccessRdpUser).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("  UserTtl: ").Append(UserTtl).Append("\n");
            sb.Append("  WarnUserBeforeExpiration: ").Append(WarnUserBeforeExpiration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayCreateProducerRdp);
        }

        /// <summary>
        /// Returns true if GatewayCreateProducerRdp instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayCreateProducerRdp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayCreateProducerRdp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllowUserExtendSession == input.AllowUserExtendSession ||
                    this.AllowUserExtendSession.Equals(input.AllowUserExtendSession)
                ) && 
                (
                    this.DeleteProtection == input.DeleteProtection ||
                    (this.DeleteProtection != null &&
                    this.DeleteProtection.Equals(input.DeleteProtection))
                ) && 
                (
                    this.FixedUserOnly == input.FixedUserOnly ||
                    (this.FixedUserOnly != null &&
                    this.FixedUserOnly.Equals(input.FixedUserOnly))
                ) && 
                (
                    this.Json == input.Json ||
                    this.Json.Equals(input.Json)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PasswordLength == input.PasswordLength ||
                    (this.PasswordLength != null &&
                    this.PasswordLength.Equals(input.PasswordLength))
                ) && 
                (
                    this.ProducerEncryptionKeyName == input.ProducerEncryptionKeyName ||
                    (this.ProducerEncryptionKeyName != null &&
                    this.ProducerEncryptionKeyName.Equals(input.ProducerEncryptionKeyName))
                ) && 
                (
                    this.RdpAdminName == input.RdpAdminName ||
                    (this.RdpAdminName != null &&
                    this.RdpAdminName.Equals(input.RdpAdminName))
                ) && 
                (
                    this.RdpAdminPwd == input.RdpAdminPwd ||
                    (this.RdpAdminPwd != null &&
                    this.RdpAdminPwd.Equals(input.RdpAdminPwd))
                ) && 
                (
                    this.RdpHostName == input.RdpHostName ||
                    (this.RdpHostName != null &&
                    this.RdpHostName.Equals(input.RdpHostName))
                ) && 
                (
                    this.RdpHostPort == input.RdpHostPort ||
                    (this.RdpHostPort != null &&
                    this.RdpHostPort.Equals(input.RdpHostPort))
                ) && 
                (
                    this.RdpUserGroups == input.RdpUserGroups ||
                    (this.RdpUserGroups != null &&
                    this.RdpUserGroups.Equals(input.RdpUserGroups))
                ) && 
                (
                    this.SecureAccessAllowExternalUser == input.SecureAccessAllowExternalUser ||
                    this.SecureAccessAllowExternalUser.Equals(input.SecureAccessAllowExternalUser)
                ) && 
                (
                    this.SecureAccessEnable == input.SecureAccessEnable ||
                    (this.SecureAccessEnable != null &&
                    this.SecureAccessEnable.Equals(input.SecureAccessEnable))
                ) && 
                (
                    this.SecureAccessHost == input.SecureAccessHost ||
                    this.SecureAccessHost != null &&
                    input.SecureAccessHost != null &&
                    this.SecureAccessHost.SequenceEqual(input.SecureAccessHost)
                ) && 
                (
                    this.SecureAccessRdGatewayServer == input.SecureAccessRdGatewayServer ||
                    (this.SecureAccessRdGatewayServer != null &&
                    this.SecureAccessRdGatewayServer.Equals(input.SecureAccessRdGatewayServer))
                ) && 
                (
                    this.SecureAccessRdpDomain == input.SecureAccessRdpDomain ||
                    (this.SecureAccessRdpDomain != null &&
                    this.SecureAccessRdpDomain.Equals(input.SecureAccessRdpDomain))
                ) && 
                (
                    this.SecureAccessRdpUser == input.SecureAccessRdpUser ||
                    (this.SecureAccessRdpUser != null &&
                    this.SecureAccessRdpUser.Equals(input.SecureAccessRdpUser))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UidToken == input.UidToken ||
                    (this.UidToken != null &&
                    this.UidToken.Equals(input.UidToken))
                ) && 
                (
                    this.UserTtl == input.UserTtl ||
                    (this.UserTtl != null &&
                    this.UserTtl.Equals(input.UserTtl))
                ) && 
                (
                    this.WarnUserBeforeExpiration == input.WarnUserBeforeExpiration ||
                    this.WarnUserBeforeExpiration.Equals(input.WarnUserBeforeExpiration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AllowUserExtendSession.GetHashCode();
                if (this.DeleteProtection != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteProtection.GetHashCode();
                }
                if (this.FixedUserOnly != null)
                {
                    hashCode = (hashCode * 59) + this.FixedUserOnly.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Json.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.PasswordLength != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordLength.GetHashCode();
                }
                if (this.ProducerEncryptionKeyName != null)
                {
                    hashCode = (hashCode * 59) + this.ProducerEncryptionKeyName.GetHashCode();
                }
                if (this.RdpAdminName != null)
                {
                    hashCode = (hashCode * 59) + this.RdpAdminName.GetHashCode();
                }
                if (this.RdpAdminPwd != null)
                {
                    hashCode = (hashCode * 59) + this.RdpAdminPwd.GetHashCode();
                }
                if (this.RdpHostName != null)
                {
                    hashCode = (hashCode * 59) + this.RdpHostName.GetHashCode();
                }
                if (this.RdpHostPort != null)
                {
                    hashCode = (hashCode * 59) + this.RdpHostPort.GetHashCode();
                }
                if (this.RdpUserGroups != null)
                {
                    hashCode = (hashCode * 59) + this.RdpUserGroups.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SecureAccessAllowExternalUser.GetHashCode();
                if (this.SecureAccessEnable != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessEnable.GetHashCode();
                }
                if (this.SecureAccessHost != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessHost.GetHashCode();
                }
                if (this.SecureAccessRdGatewayServer != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessRdGatewayServer.GetHashCode();
                }
                if (this.SecureAccessRdpDomain != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessRdpDomain.GetHashCode();
                }
                if (this.SecureAccessRdpUser != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAccessRdpUser.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TargetName != null)
                {
                    hashCode = (hashCode * 59) + this.TargetName.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.UidToken != null)
                {
                    hashCode = (hashCode * 59) + this.UidToken.GetHashCode();
                }
                if (this.UserTtl != null)
                {
                    hashCode = (hashCode * 59) + this.UserTtl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WarnUserBeforeExpiration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
