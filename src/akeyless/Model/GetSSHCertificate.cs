/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = akeyless.Client.OpenAPIDateConverter;

namespace akeyless.Model
{
    /// <summary>
    /// GetSSHCertificate
    /// </summary>
    [DataContract(Name = "getSSHCertificate")]
    public partial class GetSSHCertificate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSSHCertificate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetSSHCertificate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSSHCertificate" /> class.
        /// </summary>
        /// <param name="certIssuerName">The name of the SSH certificate issuer (required).</param>
        /// <param name="certUsername">The username to sign in the SSH certificate (required) (default to &quot;-&quot;).</param>
        /// <param name="json">Set output format to JSON (default to false).</param>
        /// <param name="legacySigningAlgName">Set this option to output legacy (&#39;ssh-rsa-cert-v01@openssh.com&#39;) signing algorithm name in the certificate. (default to false).</param>
        /// <param name="publicKeyData">SSH public key file contents. If this option is used, the certificate will be printed to stdout.</param>
        /// <param name="token">Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;).</param>
        /// <param name="ttl">Updated certificate lifetime in seconds (must be less than the Certificate Issuer default TTL).</param>
        /// <param name="uidToken">The universal identity token, Required only for universal_identity authentication.</param>
        public GetSSHCertificate(string certIssuerName = default(string), string certUsername = @"-", bool json = false, bool legacySigningAlgName = false, string publicKeyData = default(string), string token = default(string), long ttl = default(long), string uidToken = default(string))
        {
            // to ensure "certIssuerName" is required (not null)
            if (certIssuerName == null)
            {
                throw new ArgumentNullException("certIssuerName is a required property for GetSSHCertificate and cannot be null");
            }
            this.CertIssuerName = certIssuerName;
            // to ensure "certUsername" is required (not null)
            if (certUsername == null)
            {
                throw new ArgumentNullException("certUsername is a required property for GetSSHCertificate and cannot be null");
            }
            this.CertUsername = certUsername;
            this.Json = json;
            this.LegacySigningAlgName = legacySigningAlgName;
            this.PublicKeyData = publicKeyData;
            this.Token = token;
            this.Ttl = ttl;
            this.UidToken = uidToken;
        }

        /// <summary>
        /// The name of the SSH certificate issuer
        /// </summary>
        /// <value>The name of the SSH certificate issuer</value>
        [DataMember(Name = "cert-issuer-name", IsRequired = true, EmitDefaultValue = true)]
        public string CertIssuerName { get; set; }

        /// <summary>
        /// The username to sign in the SSH certificate
        /// </summary>
        /// <value>The username to sign in the SSH certificate</value>
        [DataMember(Name = "cert-username", IsRequired = true, EmitDefaultValue = true)]
        public string CertUsername { get; set; }

        /// <summary>
        /// Set output format to JSON
        /// </summary>
        /// <value>Set output format to JSON</value>
        [DataMember(Name = "json", EmitDefaultValue = true)]
        public bool Json { get; set; }

        /// <summary>
        /// Set this option to output legacy (&#39;ssh-rsa-cert-v01@openssh.com&#39;) signing algorithm name in the certificate.
        /// </summary>
        /// <value>Set this option to output legacy (&#39;ssh-rsa-cert-v01@openssh.com&#39;) signing algorithm name in the certificate.</value>
        [DataMember(Name = "legacy-signing-alg-name", EmitDefaultValue = true)]
        public bool LegacySigningAlgName { get; set; }

        /// <summary>
        /// SSH public key file contents. If this option is used, the certificate will be printed to stdout
        /// </summary>
        /// <value>SSH public key file contents. If this option is used, the certificate will be printed to stdout</value>
        [DataMember(Name = "public-key-data", EmitDefaultValue = false)]
        public string PublicKeyData { get; set; }

        /// <summary>
        /// Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
        /// </summary>
        /// <value>Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Updated certificate lifetime in seconds (must be less than the Certificate Issuer default TTL)
        /// </summary>
        /// <value>Updated certificate lifetime in seconds (must be less than the Certificate Issuer default TTL)</value>
        [DataMember(Name = "ttl", EmitDefaultValue = false)]
        public long Ttl { get; set; }

        /// <summary>
        /// The universal identity token, Required only for universal_identity authentication
        /// </summary>
        /// <value>The universal identity token, Required only for universal_identity authentication</value>
        [DataMember(Name = "uid-token", EmitDefaultValue = false)]
        public string UidToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSSHCertificate {\n");
            sb.Append("  CertIssuerName: ").Append(CertIssuerName).Append("\n");
            sb.Append("  CertUsername: ").Append(CertUsername).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  LegacySigningAlgName: ").Append(LegacySigningAlgName).Append("\n");
            sb.Append("  PublicKeyData: ").Append(PublicKeyData).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  UidToken: ").Append(UidToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
